// Created by Microsoft (R) C/C++ Compiler Version 14.00.24215.1 (b868d369).
//
// e:\femcon\femcon\x64\debug\femap.tlh
//
// C++ source equivalent of type library C:\Program Files\Siemens\FEMAPv114\femap.tlb
// compiler-generated file created 06/13/19 at 14:05:12 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace femap {

//
// Forward references and typedefs
//

struct __declspec(uuid("08f336b3-e668-11d4-9441-001083fff11c"))
/* LIBID */ __femap;
enum zEventCode;
struct __declspec(uuid("86603850-0da7-11d5-9470-001083fff11c"))
/* dispinterface */ IRead;
enum zReturnCode;
struct /* coclass */ Read;
struct __declspec(uuid("fc77c4f9-ec92-11d4-9449-001083fff11c"))
/* dispinterface */ ISet;
enum zDataType;
enum zGroupDefinitionType;
enum zOutputType;
enum zOutputComplex;
enum zCoordPick;
enum zColorMatch;
enum zMatchOpt;
enum zLoadType;
enum zRangeOpt;
struct /* coclass */ Set;
struct __declspec(uuid("e4a806f0-65dd-4b9a-8ca7-bb2b71bedfae"))
/* dispinterface */ ISortSet;
struct /* coclass */ SortSet;
struct __declspec(uuid("0023ea23-812a-4253-a431-86b427a49c8c"))
/* dispinterface */ IMapData;
struct /* coclass */ MapData;
struct __declspec(uuid("cf420f7f-631e-4597-83a5-b6c971aeab99"))
/* dispinterface */ ITrackData;
struct /* coclass */ TrackData;
struct __declspec(uuid("2b88e749-3213-47ab-9cad-0aea2e415f16"))
/* dispinterface */ IResults;
enum zResultsConvert;
enum zOutputDestination;
enum zOutputProcessEnvType;
enum zExistState;
enum zLocateOption;
enum zAnalysisProgram;
enum zAnalysisType;
enum zResultsLocation;
struct /* coclass */ Results;
struct __declspec(uuid("b0bd5ea3-c79d-4140-83ff-0642f66d2f37"))
/* dispinterface */ IMesher;
enum zMesherType;
enum zMeshOffsetFrom;
struct /* coclass */ Mesher;
struct __declspec(uuid("ded875d4-7d90-445b-89c7-17d709db45f9"))
/* dispinterface */ IElementQuality;
struct /* coclass */ ElementQuality;
struct __declspec(uuid("08b1c6b1-3124-4d88-be4c-dfe7642e817e"))
/* dispinterface */ IStressLinear;
struct /* coclass */ StressLinear;
struct __declspec(uuid("90561a64-eb1f-11d4-9447-001083fff11c"))
/* dispinterface */ IDBase;
struct /* coclass */ DBase;
struct __declspec(uuid("ab06c174-0e7e-11d5-9471-001083fff11c"))
/* dispinterface */ IAnalysisCase;
struct /* coclass */ AnalysisCase;
struct __declspec(uuid("43752af6-e669-11d4-9441-001083fff11c"))
/* dispinterface */ INode;
enum zColor;
enum zNodeType;
struct /* coclass */ Node;
struct __declspec(uuid("00ef42f8-0e77-11d5-9471-001083fff11c"))
/* dispinterface */ IAnalysisMgr;
enum zAnalysisMgrProgram;
enum zAnalysisExtSEOutTo;
enum zAnalysisAssignForm;
enum zLinkedSolver;
struct /* coclass */ AnalysisMgr;
struct __declspec(uuid("56434b14-f392-11d4-9453-001083fff11c"))
/* dispinterface */ IBCEqn;
struct /* coclass */ BCEqn;
struct __declspec(uuid("d7297e16-f305-11d4-9452-001083fff11c"))
/* dispinterface */ IBCGeom;
enum zBCGeomType;
struct /* coclass */ BCGeom;
struct __declspec(uuid("d0e25456-f2fb-11d4-9452-001083fff11c"))
/* dispinterface */ IBCNode;
struct /* coclass */ BCNode;
struct __declspec(uuid("5d2f5e14-f2f1-11d4-9452-001083fff11c"))
/* dispinterface */ IBCSet;
struct /* coclass */ BCSet;
struct __declspec(uuid("14057452-0382-11d5-9465-001083fff11c"))
/* dispinterface */ IContact;
enum zConnectionRegionType;
struct /* coclass */ Contact;
struct /* coclass */ ConnectionRegion;
struct __declspec(uuid("10ce53b8-f2e2-11d4-9452-001083fff11c"))
/* dispinterface */ ICSys;
enum zCSysType;
struct /* coclass */ CSys;
struct __declspec(uuid("1f9f16ce-09d6-11d5-946c-001083fff11c"))
/* dispinterface */ ICurve;
enum zCurveType;
enum zCurveOrientType;
enum zCurveOffsetType;
enum zCombinedMode;
struct /* coclass */ Curve;
struct __declspec(uuid("cfa77c4c-63e9-11d5-94aa-001083fff11c"))
/* dispinterface */ IUserData;
struct /* coclass */ UserData;
struct __declspec(uuid("edb333c3-3711-47a5-a628-33b4b8768f88"))
/* dispinterface */ ILayup;
struct /* coclass */ Layup;
struct __declspec(uuid("0ad6e2e8-ee3e-11d4-944c-001083fff11c"))
/* dispinterface */ IMatl;
enum zMaterialType;
struct /* coclass */ Matl;
struct __declspec(uuid("7110873a-f096-11d4-944f-001083fff11c"))
/* dispinterface */ IProp;
enum zElementType;
enum zShapeStandard;
enum zShapeOrient;
enum zShapeEvaluator;
struct /* coclass */ Prop;
struct __declspec(uuid("1e6c26fe-f16a-11d4-9450-001083fff11c"))
/* dispinterface */ IElem;
enum zTopologyType;
enum zSpringOrient;
enum zSpringOffset;
struct /* coclass */ Elem;
struct __declspec(uuid("14481c56-0767-11d5-9467-001083fff11c"))
/* dispinterface */ IFunction;
enum zFunctionType;
struct /* coclass */ Function;
struct __declspec(uuid("fa671d08-f7a8-11d4-9457-001083fff11c"))
/* dispinterface */ IGroup;
enum zGroupDataType;
struct /* coclass */ Group;
struct __declspec(uuid("e0974272-0376-11d5-9465-001083fff11c"))
/* dispinterface */ ILayer;
struct /* coclass */ layer;
struct __declspec(uuid("1faf0e14-f6c9-11d4-9456-001083fff11c"))
/* dispinterface */ ILoadETemp;
struct /* coclass */ LoadETemp;
struct __declspec(uuid("78456266-f7a9-11d4-9457-001083fff11c"))
/* dispinterface */ ILoadGeom;
enum zLoadDirection;
enum zLoadVariation;
struct /* coclass */ LoadGeom;
struct __declspec(uuid("ffdf9e7c-f6dd-11d4-9456-001083fff11c"))
/* dispinterface */ ILoadMesh;
struct /* coclass */ LoadMesh;
struct __declspec(uuid("33a4c0d4-f6c5-11d4-9456-001083fff11c"))
/* dispinterface */ ILoadNTemp;
struct /* coclass */ LoadNTemp;
struct __declspec(uuid("39a8f662-f3cf-11d4-9453-001083fff11c"))
/* dispinterface */ ILoadSet;
struct /* coclass */ LoadSet;
struct __declspec(uuid("d3a5591a-080c-11d5-9468-001083fff11c"))
/* dispinterface */ IOptim;
enum zOptType;
enum zOptGoal;
enum zOptVary;
enum zOptLimit;
struct /* coclass */ Optim;
struct __declspec(uuid("f7e2a8a0-0820-11d5-9468-001083fff11c"))
/* dispinterface */ IOutput;
struct /* coclass */ Output;
struct __declspec(uuid("423c4774-0814-11d5-9468-001083fff11c"))
/* dispinterface */ IOutputSet;
enum zResultsProcessType;
struct /* coclass */ OutputSet;
struct __declspec(uuid("a97fa4fa-09ca-11d5-946c-001083fff11c"))
/* dispinterface */ IPoint;
enum zPointType;
struct /* coclass */ Point;
struct __declspec(uuid("0d85757c-0374-11d5-9465-001083fff11c"))
/* dispinterface */ IReport;
struct /* coclass */ Report;
struct __declspec(uuid("28bcba84-0d7f-11d5-9470-001083fff11c"))
/* dispinterface */ ISolid;
enum zVolumeType;
struct /* coclass */ Solid;
struct __declspec(uuid("aa0fcdbc-0cb0-11d5-946f-001083fff11c"))
/* dispinterface */ ISurface;
enum zSurfaceType;
enum zMeshApproach;
struct /* coclass */ Surface;
struct __declspec(uuid("f809a642-09bc-11d5-946c-001083fff11c"))
/* dispinterface */ ITmgBC;
struct /* coclass */ TmgBC;
struct __declspec(uuid("c1dd56f8-09bd-11d5-946c-001083fff11c"))
/* dispinterface */ ITmgCtl;
struct /* coclass */ TmgCtl;
struct __declspec(uuid("5a0aef80-09be-11d5-946c-001083fff11c"))
/* dispinterface */ ITmgInt;
struct /* coclass */ TmgInt;
struct __declspec(uuid("ec1095a6-09be-11d5-946c-001083fff11c"))
/* dispinterface */ ITmgOpt;
struct /* coclass */ TmgOpt;
struct __declspec(uuid("9d6a22b4-09be-11d5-946c-001083fff11c"))
/* dispinterface */ ITmgReal;
struct /* coclass */ TmgReal;
struct __declspec(uuid("72473e7e-0369-11d5-9465-001083fff11c"))
/* dispinterface */ IVar;
struct /* coclass */ Var;
struct __declspec(uuid("037bfa00-f86c-11d4-9458-001083fff11c"))
/* dispinterface */ IView;
enum zViewMode;
enum zDeformedFormat;
enum zContourFormat;
enum zViewOptions;
struct /* coclass */ View;
struct __declspec(uuid("3042ddd0-bb63-41cb-85f7-52fde63b0624"))
/* dispinterface */ IViewOrient;
struct /* coclass */ ViewOrient;
struct __declspec(uuid("fdea6c66-77f3-4f6c-bdb9-ea976919b421"))
/* dispinterface */ IText;
struct /* coclass */ text;
struct __declspec(uuid("fa64fd83-5c92-425f-87b4-fc849d84898b"))
/* dispinterface */ IConnectionProp;
enum zConnectionPropType;
struct /* coclass */ ConnectionProp;
struct __declspec(uuid("1a8c9c57-6711-4498-bdd9-8bd54586842e"))
/* dispinterface */ IConnection;
struct /* coclass */ Connection;
struct __declspec(uuid("98d6bd3c-3ddd-4457-b6ad-15d6a1f3ce51"))
/* dispinterface */ IScratch;
struct /* coclass */ Scratch;
struct __declspec(uuid("8a3498f7-a383-419e-8117-86a0305175ff"))
/* dispinterface */ ISelector;
enum zSelectorDrill;
enum zSelectorType;
struct /* coclass */ Selector;
struct __declspec(uuid("a9bf3a1f-e8f6-4d5c-bc48-a191c61c57d2"))
/* dispinterface */ ILoadDefinition;
struct /* coclass */ LoadDefinition;
struct __declspec(uuid("f1704416-2455-4c38-8c0c-ae23e062d421"))
/* dispinterface */ IBCDefinition;
struct /* coclass */ BCDefinition;
struct __declspec(uuid("90c90b34-d880-497a-9cd6-aac2cadb7b7c"))
/* dispinterface */ IGFXPoint;
enum zGFXPointSymbol;
struct /* coclass */ GFXPoint;
struct __declspec(uuid("72fa0dcd-21f2-4e55-9edc-5d4f64ed7ec6"))
/* dispinterface */ IGFXLine;
struct /* coclass */ GFXLine;
struct __declspec(uuid("1694667a-a6bd-4ea1-b1f0-6485588cdaeb"))
/* dispinterface */ IGFXArrow;
enum zGFXArrowMode;
enum zGFXArrowStyle;
struct /* coclass */ GFXArrow;
struct __declspec(uuid("cac6d4f9-4d32-42c5-910c-d73fbb9aeb62"))
/* dispinterface */ IGFXTria3;
enum zGFXEdgeFlags;
struct /* coclass */ GFXTria3;
struct __declspec(uuid("5070769b-079c-46e2-bb16-57d7260f9c2b"))
/* dispinterface */ IGFXQuad4;
struct /* coclass */ GFXQuad4;
struct __declspec(uuid("a09ece66-9245-409b-9321-a2476ae7d4e7"))
/* dispinterface */ IGlobalPly;
struct /* coclass */ globalply;
struct __declspec(uuid("0dc9d655-721a-4ae7-b468-0c4b0fdc97aa"))
/* dispinterface */ ILoadBolt;
struct /* coclass */ LoadBolt;
struct __declspec(uuid("fb7c8189-2114-43d6-86de-78138cdf8c0b"))
/* dispinterface */ IMapOutput;
enum zMapOption;
enum zMapLoadType;
enum zMapType;
enum zDataConvert;
struct /* coclass */ MapOutput;
struct __declspec(uuid("8f814530-166a-4092-bbd8-c37483772f1e"))
/* dispinterface */ IDataSurf;
struct /* coclass */ DataSurf;
struct __declspec(uuid("473e5696-513b-4a26-bd0f-fdb36820e7b1"))
/* dispinterface */ IDataTable;
enum zAlignment;
enum zDataTableColumnType;
enum zDataTableSaveFormat;
struct /* coclass */ DataTable;
struct __declspec(uuid("e6f57aaf-e85e-455b-aa4d-4ff48824bb31"))
/* dispinterface */ IReference;
struct /* coclass */ Reference;
struct __declspec(uuid("923d4ff7-4c93-4daa-8223-f275cc54c69f"))
/* dispinterface */ IAeroPanel;
enum zAeroPanelType;
struct /* coclass */ AeroPanel;
struct __declspec(uuid("6c3881eb-8c68-4807-b69a-4430737f37b1"))
/* dispinterface */ IAeroProp;
struct /* coclass */ AeroProp;
struct __declspec(uuid("39b680b2-1ad7-44bb-8c89-a699f3b191ae"))
/* dispinterface */ IAeroSpline;
struct /* coclass */ AeroSpline;
struct __declspec(uuid("61cff16f-cc7e-40bb-a20f-b1f065c36b29"))
/* dispinterface */ IAeroSurf;
struct /* coclass */ AeroSurf;
struct __declspec(uuid("f39a93f2-dfd9-42d5-b663-8f09a959dafe"))
/* dispinterface */ IFreebody;
enum zFbdDisplayMode;
enum zFbdSectionSumLoc;
enum zFbdSectionMode;
enum zFbdComponent;
enum zFbdContribution;
enum zFbdVecMode;
struct /* coclass */ Freebody;
struct __declspec(uuid("bcf73006-faaa-4648-9abe-a4df900d45bf"))
/* dispinterface */ ISEReference;
enum zAnalysisExtSERef;
struct /* coclass */ SEReference;
struct __declspec(uuid("7aadc5ef-400b-4984-9d12-314296952f1f"))
/* dispinterface */ IChart;
enum zChartStyle;
enum zChartMarkerStyle;
enum zChartPalette;
enum zChartLegendDirection;
enum zChartTitleLocation;
enum zChartTextJustification;
enum zChartComplexLocation;
enum zChartAxisStyle;
enum zChartNumberFormat;
enum zChartLegendLocation;
struct /* coclass */ Chart;
struct __declspec(uuid("19988e81-f344-4944-82de-aebe26689f33"))
/* dispinterface */ IChartSeries;
enum zChartSeriesType;
enum zChartSeriesComplexMethod;
struct /* coclass */ ChartSeries;
struct __declspec(uuid("17387165-149c-43e5-a91d-eac4d1e4eaad"))
/* dispinterface */ ITableData;
enum zTableType;
enum zVectorFunctionType;
struct /* coclass */ TableData;
struct __declspec(uuid("60266d03-af68-4b10-906c-4bdafade3746"))
/* dispinterface */ IInterpolate;
enum zInvariantResultType;
struct /* coclass */ Interpolate;
struct __declspec(uuid("3a62fe4c-d156-4f16-9c1b-f81c6bb4089a"))
/* dispinterface */ IBeamCalculator;
enum zBeamCalculatorStressComponent;
struct /* coclass */ BeamCalculator;
struct __declspec(uuid("589eafb8-b3d0-42fb-b902-fe0a88b7ec80"))
/* dispinterface */ IAnalysisStudy;
struct /* coclass */ AnalysisStudy;
struct __declspec(uuid("0becb769-5f94-4718-942b-9a2a866a59d1"))
/* dispinterface */ IDrawErase;
struct /* coclass */ DrawErase;
struct __declspec(uuid("bc4680a4-7b1c-449b-b7f7-aaf21ec0abd3"))
/* dispinterface */ IFreq;
enum zFreqType;
struct /* coclass */ Frequency;
struct __declspec(uuid("8d7600a5-c1b7-4740-8d63-50e476a84b2d"))
/* dispinterface */ IMidFaceCentroidModel;
struct /* coclass */ MidFaceCentroidModel;
struct __declspec(uuid("9b5131e5-bfb8-4219-8f7d-764dbc32c323"))
/* dispinterface */ IUserDefinedGraphics;
struct /* coclass */ UserDefinedGraphics;
struct __declspec(uuid("f2e67c72-0e5b-477f-8377-bacd7317a2ff"))
/* dispinterface */ IVector;
struct /* coclass */ Vector;
struct __declspec(uuid("891a6125-406e-4438-8a3f-af254f4508dd"))
/* dispinterface */ IPlane;
struct /* coclass */ Plane;
struct __declspec(uuid("08f336b2-e668-11d4-9441-001083fff11c"))
/* dispinterface */ Imodel;
enum zAnalysisTranslator;
enum zPointDefinition;
enum zVectorDefinition;
enum zPlaneDefinition;
enum zListDestination;
enum zPrefPictureFormat;
enum zPrefAnimateFormat;
enum zGifColorOpt;
enum zMessageColor;
enum zPrintSource;
enum zPictFormat;
enum zPictRegion;
enum zLoadSelectType;
enum zFeatureType;
enum zVisibilityType;
enum zRealFormat;
enum zOutputProcessCombine;
enum zOutputProcessEnvApproach;
enum zOutputProcessErrorMethod;
enum zGroupBooleanOp;
enum zManageResultsAttach;
enum zAttachStatus;
enum zProjectOnto;
enum zProjectAlong;
enum zPadOffsetType;
enum zPadAlignment;
enum zCurveRemoveOption;
enum zPictFormat2;
enum zRankingMethod;
enum zRankingApproach;
enum zRankingType;
enum zSolidAlignVecMode;
struct /* coclass */ model;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IRead, __uuidof(IRead));
_COM_SMARTPTR_TYPEDEF(ISet, __uuidof(ISet));
_COM_SMARTPTR_TYPEDEF(ISortSet, __uuidof(ISortSet));
_COM_SMARTPTR_TYPEDEF(IMapData, __uuidof(IMapData));
_COM_SMARTPTR_TYPEDEF(ITrackData, __uuidof(ITrackData));
_COM_SMARTPTR_TYPEDEF(IResults, __uuidof(IResults));
_COM_SMARTPTR_TYPEDEF(IMesher, __uuidof(IMesher));
_COM_SMARTPTR_TYPEDEF(IElementQuality, __uuidof(IElementQuality));
_COM_SMARTPTR_TYPEDEF(IStressLinear, __uuidof(IStressLinear));
_COM_SMARTPTR_TYPEDEF(IDBase, __uuidof(IDBase));
_COM_SMARTPTR_TYPEDEF(IAnalysisCase, __uuidof(IAnalysisCase));
_COM_SMARTPTR_TYPEDEF(INode, __uuidof(INode));
_COM_SMARTPTR_TYPEDEF(IAnalysisMgr, __uuidof(IAnalysisMgr));
_COM_SMARTPTR_TYPEDEF(IBCEqn, __uuidof(IBCEqn));
_COM_SMARTPTR_TYPEDEF(IBCGeom, __uuidof(IBCGeom));
_COM_SMARTPTR_TYPEDEF(IBCNode, __uuidof(IBCNode));
_COM_SMARTPTR_TYPEDEF(IBCSet, __uuidof(IBCSet));
_COM_SMARTPTR_TYPEDEF(IContact, __uuidof(IContact));
_COM_SMARTPTR_TYPEDEF(ICSys, __uuidof(ICSys));
_COM_SMARTPTR_TYPEDEF(ICurve, __uuidof(ICurve));
_COM_SMARTPTR_TYPEDEF(IUserData, __uuidof(IUserData));
_COM_SMARTPTR_TYPEDEF(ILayup, __uuidof(ILayup));
_COM_SMARTPTR_TYPEDEF(IMatl, __uuidof(IMatl));
_COM_SMARTPTR_TYPEDEF(IProp, __uuidof(IProp));
_COM_SMARTPTR_TYPEDEF(IElem, __uuidof(IElem));
_COM_SMARTPTR_TYPEDEF(IFunction, __uuidof(IFunction));
_COM_SMARTPTR_TYPEDEF(IGroup, __uuidof(IGroup));
_COM_SMARTPTR_TYPEDEF(ILayer, __uuidof(ILayer));
_COM_SMARTPTR_TYPEDEF(ILoadETemp, __uuidof(ILoadETemp));
_COM_SMARTPTR_TYPEDEF(ILoadGeom, __uuidof(ILoadGeom));
_COM_SMARTPTR_TYPEDEF(ILoadMesh, __uuidof(ILoadMesh));
_COM_SMARTPTR_TYPEDEF(ILoadNTemp, __uuidof(ILoadNTemp));
_COM_SMARTPTR_TYPEDEF(ILoadSet, __uuidof(ILoadSet));
_COM_SMARTPTR_TYPEDEF(IOptim, __uuidof(IOptim));
_COM_SMARTPTR_TYPEDEF(IOutput, __uuidof(IOutput));
_COM_SMARTPTR_TYPEDEF(IOutputSet, __uuidof(IOutputSet));
_COM_SMARTPTR_TYPEDEF(IPoint, __uuidof(IPoint));
_COM_SMARTPTR_TYPEDEF(IReport, __uuidof(IReport));
_COM_SMARTPTR_TYPEDEF(ISolid, __uuidof(ISolid));
_COM_SMARTPTR_TYPEDEF(ISurface, __uuidof(ISurface));
_COM_SMARTPTR_TYPEDEF(ITmgBC, __uuidof(ITmgBC));
_COM_SMARTPTR_TYPEDEF(ITmgCtl, __uuidof(ITmgCtl));
_COM_SMARTPTR_TYPEDEF(ITmgInt, __uuidof(ITmgInt));
_COM_SMARTPTR_TYPEDEF(ITmgOpt, __uuidof(ITmgOpt));
_COM_SMARTPTR_TYPEDEF(ITmgReal, __uuidof(ITmgReal));
_COM_SMARTPTR_TYPEDEF(IVar, __uuidof(IVar));
_COM_SMARTPTR_TYPEDEF(IView, __uuidof(IView));
_COM_SMARTPTR_TYPEDEF(IViewOrient, __uuidof(IViewOrient));
_COM_SMARTPTR_TYPEDEF(IText, __uuidof(IText));
_COM_SMARTPTR_TYPEDEF(IConnectionProp, __uuidof(IConnectionProp));
_COM_SMARTPTR_TYPEDEF(IConnection, __uuidof(IConnection));
_COM_SMARTPTR_TYPEDEF(IScratch, __uuidof(IScratch));
_COM_SMARTPTR_TYPEDEF(ISelector, __uuidof(ISelector));
_COM_SMARTPTR_TYPEDEF(ILoadDefinition, __uuidof(ILoadDefinition));
_COM_SMARTPTR_TYPEDEF(IBCDefinition, __uuidof(IBCDefinition));
_COM_SMARTPTR_TYPEDEF(IGFXPoint, __uuidof(IGFXPoint));
_COM_SMARTPTR_TYPEDEF(IGFXLine, __uuidof(IGFXLine));
_COM_SMARTPTR_TYPEDEF(IGFXArrow, __uuidof(IGFXArrow));
_COM_SMARTPTR_TYPEDEF(IGFXTria3, __uuidof(IGFXTria3));
_COM_SMARTPTR_TYPEDEF(IGFXQuad4, __uuidof(IGFXQuad4));
_COM_SMARTPTR_TYPEDEF(IGlobalPly, __uuidof(IGlobalPly));
_COM_SMARTPTR_TYPEDEF(ILoadBolt, __uuidof(ILoadBolt));
_COM_SMARTPTR_TYPEDEF(IMapOutput, __uuidof(IMapOutput));
_COM_SMARTPTR_TYPEDEF(IDataSurf, __uuidof(IDataSurf));
_COM_SMARTPTR_TYPEDEF(IDataTable, __uuidof(IDataTable));
_COM_SMARTPTR_TYPEDEF(IReference, __uuidof(IReference));
_COM_SMARTPTR_TYPEDEF(IAeroPanel, __uuidof(IAeroPanel));
_COM_SMARTPTR_TYPEDEF(IAeroProp, __uuidof(IAeroProp));
_COM_SMARTPTR_TYPEDEF(IAeroSpline, __uuidof(IAeroSpline));
_COM_SMARTPTR_TYPEDEF(IAeroSurf, __uuidof(IAeroSurf));
_COM_SMARTPTR_TYPEDEF(IFreebody, __uuidof(IFreebody));
_COM_SMARTPTR_TYPEDEF(ISEReference, __uuidof(ISEReference));
_COM_SMARTPTR_TYPEDEF(IChart, __uuidof(IChart));
_COM_SMARTPTR_TYPEDEF(IChartSeries, __uuidof(IChartSeries));
_COM_SMARTPTR_TYPEDEF(ITableData, __uuidof(ITableData));
_COM_SMARTPTR_TYPEDEF(IInterpolate, __uuidof(IInterpolate));
_COM_SMARTPTR_TYPEDEF(IBeamCalculator, __uuidof(IBeamCalculator));
_COM_SMARTPTR_TYPEDEF(IAnalysisStudy, __uuidof(IAnalysisStudy));
_COM_SMARTPTR_TYPEDEF(IDrawErase, __uuidof(IDrawErase));
_COM_SMARTPTR_TYPEDEF(IFreq, __uuidof(IFreq));
_COM_SMARTPTR_TYPEDEF(IMidFaceCentroidModel, __uuidof(IMidFaceCentroidModel));
_COM_SMARTPTR_TYPEDEF(IUserDefinedGraphics, __uuidof(IUserDefinedGraphics));
_COM_SMARTPTR_TYPEDEF(IVector, __uuidof(IVector));
_COM_SMARTPTR_TYPEDEF(IPlane, __uuidof(IPlane));
_COM_SMARTPTR_TYPEDEF(Imodel, __uuidof(Imodel));

//
// Type library items
//

enum zEventCode
{
    FEVENT_INITIALIZE = 1,
    FEVENT_NEWMODEL = 2,
    FEVENT_ENDMODEL = 3,
    FEVENT_SHUTDOWN = 4,
    FEVENT_COMMAND = 5,
    FEVENT_PROGSTART = 6,
    FEVENT_PROGEND = 7,
    FEVENT_DRAWSTART = 8,
    FEVENT_DRAWEND = 9,
    FEVENT_ANALYSISEND = 10,
    FEVENT_RESULTSEND = 11,
    FEVENT_SWITCHMODEL = 12,
    FEVENT_SELECTOR = 13,
    FEVENT_UPDATEDSAVEDSET = 14,
    FEVENT_CLOSINGMODEL = 15,
    FEVENT_LEAVINGMODEL = 16
};

struct __declspec(uuid("86603850-0da7-11d5-9470-001083fff11c"))
IRead : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLine,put=PutLine))
    _bstr_t Line;
    __declspec(property(get=GetTruncated,put=PutTruncated))
    VARIANT_BOOL Truncated;
    __declspec(property(get=GetShared,put=PutShared))
    VARIANT_BOOL Shared;
    __declspec(property(get=GetExclusive,put=PutExclusive))
    VARIANT_BOOL Exclusive;
    __declspec(property(get=GetSharedDelete,put=PutSharedDelete))
    VARIANT_BOOL SharedDelete;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t Field (
        int fieldID );
    int IntField (
        int fieldID,
        int defValue );
    double RealField (
        int fieldID,
        double defValue );
    VARIANT_BOOL BoolField (
        int fieldID,
        VARIANT_BOOL defValue );
    enum zReturnCode Open (
        _bstr_t filename,
        int maxLineLength );
    enum zReturnCode Close ( );
    enum zReturnCode Read ( );
    enum zReturnCode Skipped ( );
    enum zReturnCode AtEOF ( );
    int Position ( );
    enum zReturnCode Jump (
        int jumpto );
    enum zReturnCode ShowStatus (
        VARIANT_BOOL on );
    enum zReturnCode SetNoBlankLines (
        VARIANT_BOOL on );
    enum zReturnCode SetNoShortLines (
        VARIANT_BOOL on,
        int minLineLength );
    enum zReturnCode SetTrimSpace (
        VARIANT_BOOL on );
    enum zReturnCode SetTrimEndSpace (
        VARIANT_BOOL on );
    enum zReturnCode SetTrimFront (
        VARIANT_BOOL on,
        int numChar );
    enum zReturnCode SetUppercase (
        VARIANT_BOOL on );
    enum zReturnCode SetSkip (
        VARIANT_BOOL on );
    enum zReturnCode SetSearch (
        VARIANT_BOOL on );
    enum zReturnCode SetSearchString (
        _bstr_t s,
        _bstr_t sor );
    enum zReturnCode SetFormFeed (
        VARIANT_BOOL on );
    enum zReturnCode SetSkipAfterSearch (
        int lines );
    enum zReturnCode SetTabSize (
        int tabsize );
    enum zReturnCode LineInit (
        int maxLineLength );
    enum zReturnCode Reparse ( );
    enum zReturnCode FixedFormat (
        int numField,
        const _variant_t & width );
    enum zReturnCode SetFreeFormat ( );
    enum zReturnCode SetFixedFormat ( );
    enum zReturnCode SetAutoFormat ( );
    enum zReturnCode JumpToEnd (
        int jumpto );
    enum zReturnCode Size (
        __int64 * nSize );
    enum zReturnCode TimeCreated (
        __int64 * nTime );
    enum zReturnCode TimeWritten (
        __int64 * nTime );
    enum zReturnCode TimeAccessed (
        __int64 * nTime );
    enum zReturnCode ClearSearch ( );

    // Properties:
    _bstr_t GetLine ( );
    void PutLine ( _bstr_t _val );
    VARIANT_BOOL GetTruncated ( );
    void PutTruncated ( VARIANT_BOOL _val );
    VARIANT_BOOL GetShared ( );
    void PutShared ( VARIANT_BOOL _val );
    VARIANT_BOOL GetExclusive ( );
    void PutExclusive ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSharedDelete ( );
    void PutSharedDelete ( VARIANT_BOOL _val );
};

enum zReturnCode
{
    FE_OK = -1,
    FE_FAIL = 0,
    FE_CANCEL = 2,
    FE_INVALID = 3,
    FE_NOT_EXIST = 4,
    FE_SECURITY = 5,
    FE_NOT_AVAILABLE = 6,
    FE_TOO_SMALL = 7,
    FE_BAD_TYPE = 8,
    FE_BAD_DATA = 9,
    FE_NO_MEMORY = 10,
    FE_NEGATIVE_MASS_VOLUME = 11,
    FE_INVALID_DEVELOPER = 12,
    FE_NO_FILENAME = 16
};

struct __declspec(uuid("86603852-0da7-11d5-9470-001083fff11c"))
Read;
    // [ default ] dispinterface IRead

struct __declspec(uuid("fc77c4f9-ec92-11d4-9449-001083fff11c"))
ISet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetSave,put=PutSave))
    VARIANT_BOOL Save;
    __declspec(property(get=GetCurrentID,put=PutCurrentID))
    int CurrentID;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode SetDeveloperID (
        int DeveloperID );
    enum zReturnCode GetSavedSet (
        int nSavedID,
        VARIANT_BOOL bClear );
    enum zReturnCode GetAllSavedSets ( );
    enum zReturnCode PutSavedSet (
        int nPutID,
        enum zDataType entityTYPE,
        int * nSavedID );
    enum zReturnCode DeleteSavedSet (
        int nSavedID );
    enum zReturnCode DeleteAllSavedSets ( );
    enum zReturnCode DeleteOtherSavedSets ( );
    enum zReturnCode ResetSavedSet ( );
    int NextSavedSet ( );
    int EmptySavedSet ( );
    int CountSavedSets (
        int * pnAllSets );
    enum zReturnCode AddToSavedSet (
        int nSavedID,
        enum zDataType entityTYPE,
        int entID );
    enum zReturnCode AddSetToSavedSet (
        int nSavedID,
        enum zDataType entityTYPE );
    enum zReturnCode RemoveFromSavedSet (
        int nSavedID,
        enum zDataType entityTYPE,
        int entID );
    enum zReturnCode RemoveSetFromSavedSet (
        int nSavedID,
        enum zDataType entityTYPE );
    enum zReturnCode GetSavedSetType (
        int nSavedID,
        enum zDataType * pnDataType );
    enum zReturnCode Add (
        int entID );
    enum zReturnCode AddRange (
        int startID,
        int stopID,
        int increment );
    enum zReturnCode Reload (
        int oldID );
    enum zReturnCode Remove (
        int entID );
    enum zReturnCode IsAdded (
        int entID );
    enum zReturnCode Reset ( );
    int Next ( );
    enum zReturnCode AddSet (
        int addID );
    enum zReturnCode RemoveSet (
        int addID );
    enum zReturnCode AddCommon (
        int set1,
        int set2 );
    enum zReturnCode Copy (
        int origID );
    int Count ( );
    enum zReturnCode AddAll (
        enum zDataType entityTYPE );
    enum zReturnCode Select (
        enum zDataType entityTYPE,
        VARIANT_BOOL clear,
        _bstr_t title );
    enum zReturnCode SelectID (
        enum zDataType entityTYPE,
        _bstr_t title,
        int * selID );
    enum zReturnCode AddGroup (
        enum zDataType entityTYPE,
        int groupID );
    enum zReturnCode AddRule (
        int ID,
        enum zGroupDefinitionType ruleID );
    enum zReturnCode AddSetRule (
        int addID,
        enum zGroupDefinitionType ruleID );
    enum zReturnCode clear ( );
    enum zReturnCode DeleteAll ( );
    int First ( );
    int Last ( );
    enum zReturnCode RemoveRange (
        int startID,
        int stopID,
        int increment );
    enum zReturnCode CopyToClipboard (
        VARIANT_BOOL bAsList );
    enum zReturnCode AddEntitiesOnLayer (
        int laySET,
        enum zDataType entityTYPE );
    enum zReturnCode GetArray (
        int * numID,
        VARIANT * arrayID );
    enum zReturnCode AddArray (
        int numID,
        const _variant_t & arrayID );
    enum zReturnCode Match (
        int otherID );
    enum zReturnCode SelectOutputVectorID (
        _bstr_t title,
        int outputSetID,
        enum zOutputType limitOutputType,
        enum zOutputComplex limitComplex,
        enum zDataType limitToEntity,
        VARIANT_BOOL allowCorner,
        int * selID );
    int NextID ( );
    enum zReturnCode SelectMultiID (
        enum zDataType entityTYPE,
        int entitySET,
        _bstr_t title );
    int IsEmpty ( );
    enum zReturnCode AddAllExcept (
        enum zDataType entityTYPE,
        int exceptSET );
    enum zReturnCode RemoveNotCommon (
        int set1 );
    enum zReturnCode RemoveNotCommonToGroup (
        enum zDataType entityTYPE,
        int groupID );
    enum zReturnCode RemoveGroup (
        enum zDataType entityTYPE,
        int groupID );
    enum zReturnCode Debug ( );
    enum zReturnCode IsSetAdded (
        int set1 );
    enum zReturnCode ConvertToAllSurfaces ( );
    enum zReturnCode ConvertToBoundarySurfaces ( );
    enum zReturnCode ConvertToBoundarySurfacesOnly ( );
    enum zReturnCode ConvertToInternalSurfaces ( );
    enum zReturnCode ConvertToAllCurves ( );
    enum zReturnCode ConvertToCombinedCurves ( );
    enum zReturnCode ConvertToCombinedCurvesOnly ( );
    enum zReturnCode ConvertToInternalCurves ( );
    enum zReturnCode IsArrayAdded (
        int numID,
        const _variant_t & arrayID );
    enum zReturnCode HasCommon (
        int set1 );
    enum zReturnCode RemoveArray (
        int numID,
        const _variant_t & arrayID );
    enum zReturnCode AddCoordinate (
        enum zDataType entityTYPE,
        int nCSysID,
        const _variant_t & vbXYZ,
        const _variant_t & vnMode,
        const _variant_t & vdMin,
        const _variant_t & vdMax );
    enum zReturnCode AddAroundPoint (
        enum zDataType entityTYPE,
        const _variant_t & vBase,
        enum zCoordPick nMode,
        double dMin,
        double vdMax );
    enum zReturnCode AddAroundVector (
        enum zDataType entityTYPE,
        const _variant_t & vBase,
        const _variant_t & vVec,
        enum zCoordPick nMode,
        double dMin,
        double vdMax );
    enum zReturnCode AddAroundPlane (
        enum zDataType entityTYPE,
        const _variant_t & vBase,
        const _variant_t & vVec,
        enum zCoordPick nMode,
        double dMin,
        double vdMax );
    enum zReturnCode AddNodesOnGeometry (
        enum zDataType geomTYPE,
        int geomID,
        VARIANT_BOOL bClear,
        VARIANT_BOOL bFullTree,
        VARIANT_BOOL bBoundaryOnly );
    enum zReturnCode SelectList (
        int nNumEntity,
        enum zDataType entityTYPE );
    enum zReturnCode AddAllTitle (
        enum zDataType entityTYPE,
        int nSetID,
        _bstr_t sFind );
    enum zReturnCode AddAllColor (
        enum zDataType entityTYPE,
        int nSetID,
        int nColor,
        enum zColorMatch nColorMatch );
    enum zReturnCode AddMidsideNodes (
        int nSetID );
    enum zReturnCode RemoveInternalCurves ( );
    enum zReturnCode SelectIDInSet (
        enum zDataType entityTYPE,
        _bstr_t title,
        int nInSetID,
        int * selID );
    enum zReturnCode AddNewRemoveCommonSet (
        int addID );
    int CountCommon (
        int set1 );
    int CountNotCommon (
        int set1 );
    enum zReturnCode HasNotCommon (
        int set1 );
    int NextAfter (
        int nStartID );
    int Prev ( );
    int PrevBefore (
        int nStartID );
    int PrevID ( );
    int EmptyBlock (
        int nStartID,
        int nCount,
        int * nFirstEmptyID );
    int NextEmptyAfter (
        int nStartID );
    int AddAllInRange (
        enum zDataType entityTYPE,
        int startID,
        int stopID );
    enum zReturnCode Reload2 (
        int oldID );
    enum zReturnCode AddAllSavedSetIDs ( );
    enum zReturnCode AddCoordinate2 (
        enum zDataType entityTYPE,
        int nCSysID,
        const _variant_t & vbXYZ,
        const _variant_t & vnMode,
        const _variant_t & vdMin,
        const _variant_t & vdMax );
    enum zReturnCode AddAroundPoint2 (
        enum zDataType entityTYPE,
        const _variant_t & vBase,
        enum zCoordPick nMode,
        double dMin,
        double vdMax );
    enum zReturnCode AddAroundVector2 (
        enum zDataType entityTYPE,
        const _variant_t & vBase,
        const _variant_t & vVec,
        enum zCoordPick nMode,
        double dMin,
        double vdMax );
    enum zReturnCode AddAroundPlane2 (
        enum zDataType entityTYPE,
        const _variant_t & vBase,
        const _variant_t & vVec,
        enum zCoordPick nMode,
        double dMin,
        double vdMax );
    enum zReturnCode Show (
        enum zDataType entityTYPE );
    enum zReturnCode ShowAutoscale (
        enum zDataType entityTYPE );
    enum zReturnCode AddSolidElementsAlongVector (
        const _variant_t & p1,
        const _variant_t & p2,
        int elemSET,
        VARIANT_BOOL bRequireIntersect,
        VARIANT_BOOL bInfiniteVector,
        VARIANT_BOOL bDirectionalVector );
    enum zReturnCode AddVisible (
        int nVuID,
        enum zDataType entityTYPE,
        VARIANT_BOOL bUseViewDrawEntityOption );
    enum zReturnCode AddAllConnectedElements ( );
    enum zReturnCode AddConnectedFillets ( );
    enum zReturnCode AddTangentSurfaces (
        double dTol );
    enum zReturnCode AddConstrained (
        VARIANT_BOOL bInAnySet,
        int nSetID,
        VARIANT_BOOL bExpandBC,
        enum zDataType enOnType,
        enum zMatchOpt enMatch,
        VARIANT_BOOL bDOF1,
        VARIANT_BOOL bDOF2,
        VARIANT_BOOL bDOF3,
        VARIANT_BOOL bDOF4,
        VARIANT_BOOL bDOF5,
        VARIANT_BOOL bDOF6 );
    enum zReturnCode AddLoaded (
        VARIANT_BOOL bInAnySet,
        int nSetID,
        VARIANT_BOOL bExpandLoad,
        enum zLoadType enLoadType,
        enum zRangeOpt enRangeOpt,
        double dMin,
        double dMax );
    enum zReturnCode RemoveRule (
        int ID,
        enum zGroupDefinitionType ruleID );
    enum zReturnCode RemoveSetRule (
        int removeID,
        enum zGroupDefinitionType ruleID );
    enum zReturnCode AddConnectedElements ( );
    enum zReturnCode AddComponentOutputVectors (
        int nFromOutputSetID );
    enum zReturnCode AddSimilarOutputVectors (
        int nFromOutputSetID );
    enum zReturnCode AddComplexOutputVectors (
        int nFromOutputSetID );
    enum zReturnCode SelectIDWithNew (
        enum zDataType entityTYPE,
        _bstr_t title,
        int * selID );

    // Properties:
    int GetID ( );
    void PutID ( int _val );
    VARIANT_BOOL GetSave ( );
    void PutSave ( VARIANT_BOOL _val );
    int GetCurrentID ( );
    void PutCurrentID ( int _val );
};

enum zDataType
{
    FT_POINT = 3,
    FT_CURVE = 4,
    FT_SURFACE = 5,
    FT_VOLUME = 6,
    FT_NODE = 7,
    FT_ELEM = 8,
    FT_CSYS = 9,
    FT_MATL = 10,
    FT_PROP = 11,
    FT_LOAD_DIR = 12,
    FT_SURF_LOAD = 13,
    FT_GEOM_LOAD = 14,
    FT_NTHERM_LOAD = 15,
    FT_ETHERM_LOAD = 16,
    FT_BC_DIR = 17,
    FT_BCO = 18,
    FT_BCO_GEOM = 19,
    FT_BEQ = 20,
    FT_TEXT = 21,
    FT_VIEW = 22,
    FT_GROUP = 24,
    FT_VAR = 27,
    FT_OUT_CASE = 28,
    FT_OUT_DIR = 29,
    FT_OUT_DATA = 30,
    FT_REPORT = 31,
    FT_BOUNDARY = 32,
    FT_LAYER = 33,
    FT_MATL_TABLE = 34,
    FT_FUNCTION_DIR = 35,
    FT_FUNCTION_TABLE = 36,
    FT_TABLE_DATA = 123,
    FT_SOLID = 39,
    FT_SOLID_VOLUME = 53,
    FT_DESIGN_OPT = 45,
    FT_LOAD_DEFINITION = 46,
    FT_BC_DEFINITION = 80,
    FT_CONTACT = 58,
    FT_MODEL_NOTES = 54,
    FT_AMGR_DIR = 60,
    FT_REFERENCE = 68,
    FT_TMG_BCO = 126,
    FT_TMG_CONTROL = 127,
    FT_TMG_INTEGER = 128,
    FT_TMG_REAL = 129,
    FT_TMG_OPTION = 130,
    FT_CONNECTION = 71,
    FT_CONNECTION_PROP = 72,
    FT_LAYUP = 81,
    FT_LAYUP_PLY = 82,
    FT_LAYUP_GLOBALPLY = 83,
    FT_BOLT_PRELOAD = 84,
    FT_DATA_SURF = 69,
    FT_AERO_PANEL = 95,
    FT_AERO_PROP = 96,
    FT_AERO_SPLINE = 98,
    FT_AERO_SURF = 99,
    FT_FREEBODY = 102,
    FT_RES_ATTACH = 103,
    FT_CHART = 106,
    FT_CHART_SERIES = 107,
    FT_ANALYSIS_STUDY = 113,
    FT_VECTOR = 131,
    FT_PLANE = 132
};

enum zGroupDefinitionType
{
    FGD_CSYS_ID = 0,
    FGD_CSYS_BYDEFCSYS = 1,
    FGD_CSYS_BYTYPE = 2,
    FGD_POINT_ID = 3,
    FGD_POINT_BYDEFCSYS = 4,
    FGD_POINT_ONCURVE = 5,
    FGD_CURVE_ID = 6,
    FGD_CURVE_BYPOINT = 7,
    FGD_CURVE_ONSURFACE = 8,
    FGD_SURFACE_ID = 9,
    FGD_SURFACE_BYCURVE = 10,
    FGD_SURFACE_ONVOLUME = 11,
    FGD_VOLUME_ID = 12,
    FGD_VOLUME_BYSURFACE = 13,
    FGD_TEXT_ID = 14,
    FGD_NODE_ID = 17,
    FGD_NODE_BYDEFCSYS = 18,
    FGD_NODE_BYOUTCSYS = 19,
    FGD_NODE_ONELEM = 20,
    FGD_ELEM_ID = 21,
    FGD_ELEM_BYMATL = 22,
    FGD_ELEM_BYPROP = 23,
    FGD_ELEM_BYTYPE = 24,
    FGD_ELEM_BYNODE = 25,
    FGD_MATL_ID = 26,
    FGD_MATL_ONPROP = 27,
    FGD_MATL_ONELEM = 28,
    FGD_MATL_BYTYPE = 29,
    FGD_PROP_ID = 30,
    FGD_PROP_ONELEM = 31,
    FGD_PROP_BYMATL = 32,
    FGD_PROP_BYTYPE = 33,
    FGD_LOAD_BYNODE = 34,
    FGD_LOAD_BYELEM = 35,
    FGD_BCO_ID = 36,
    FGD_BEQ_BYNODE = 37,
    FGD_NODE_ATPOINT = 38,
    FGD_NODE_ATCURVE = 39,
    FGD_NODE_ATSURFACE = 40,
    FGD_NODE_ATSOLID = 41,
    FGD_ELEM_ATPOINT = 42,
    FGD_ELEM_ATCURVE = 43,
    FGD_ELEM_ATSURFACE = 44,
    FGD_ELEM_ATSOLID = 45,
    FGD_LOAD_BYPOINT = 46,
    FGD_LOAD_BYCURVE = 47,
    FGD_LOAD_BYSURFACE = 48,
    FGD_BCO_BYPOINT = 49,
    FGD_BCO_BYCURVE = 50,
    FGD_BCO_BYSURFACE = 51,
    FGD_TEXT_BYCOLOR = 52,
    FGD_POINT_BYCOLOR = 53,
    FGD_CURVE_BYCOLOR = 54,
    FGD_SURFACE_BYCOLOR = 55,
    FGD_VOLUME_BYCOLOR = 56,
    FGD_SOLID_BYCOLOR = 57,
    FGD_CSYS_BYCOLOR = 58,
    FGD_NODE_BYCOLOR = 59,
    FGD_ELEM_BYCOLOR = 60,
    FGD_PROP_BYCOLOR = 61,
    FGD_MATL_BYCOLOR = 62,
    FGD_TEXT_BYLAYER = 63,
    FGD_POINT_BYLAYER = 64,
    FGD_CURVE_BYLAYER = 65,
    FGD_SURFACE_BYLAYER = 66,
    FGD_VOLUME_BYLAYER = 67,
    FGD_SOLID_BYLAYER = 68,
    FGD_CSYS_BYLAYER = 69,
    FGD_NODE_BYLAYER = 70,
    FGD_ELEM_BYLAYER = 71,
    FGD_PROP_BYLAYER = 72,
    FGD_MATL_BYLAYER = 73,
    FGD_SOLID_ID = 74,
    FGD_SOLID_BYCURVE = 75,
    FGD_SOLID_BYSURFACE = 76,
    FGD_CURVE_ONSOLID = 77,
    FGD_SURFACE_ONSOLID = 78,
    FGD_POINT_BYPROP = 79,
    FGD_CURVE_BYPROP = 80,
    FGD_SURFACE_BYPROP = 81,
    FGD_VOLUME_BYPROP = 82,
    FGD_SOLID_BYPROP = 83,
    FGD_CONTACT_ID = 84,
    FGD_CONTACT_BYCOLOR = 85,
    FGD_CONTACT_BYLAYER = 86,
    FGD_CSYS_ONNODE = 87,
    FGD_CSYS_ONPOINT = 88,
    FGD_ELEM_BYSHAPE = 89,
    FGD_NODE_ONELEMASORIENT = 90,
    FGD_CONNECTIONPROP_ID = 91,
    FGD_CONNECTIONPROP_BYCOLOR = 92,
    FGD_CONNECTIONPROP_BYLAYER = 93,
    FGD_CONNECTION_ID = 94,
    FGD_CONNECTION_BYCOLOR = 95,
    FGD_CONNECTION_BYLAYER = 96,
    FGD_CONNECTION_BYPROP = 97,
    FGD_CONTACT_ONCONNECTION = 98,
    FGD_CONNECTIONPROP_ONCONNECTION = 99,
    FGD_CONNECTION_BYCONTACT = 100,
    FGD_LAYUP_ID = 101,
    FGD_LAYUP_BYMATL = 102,
    FGD_ELEM_BYLAYUP = 104,
    FGD_PROP_BYLAYUP = 105,
    FGD_LAYUP_ONPROP = 103,
    FGD_NODE_BYSUPERELEMENT = 106,
    FGD_LOAD_BYREGION = 107,
    FGD_CONTACT_BYELEM = 108,
    FGD_CONTACT_BYNODE = 109,
    FGD_CONTACT_BYCURVE = 110,
    FGD_CONTACT_BYSURFACE = 111,
    FGD_CONTACT_BYPROP = 112,
    FGD_ELEM_BYALLNODES = 113,
    FGD_ELEM_BYGLOBALPLY = 114,
    FGD_LAYUP_BYGLOBALPLY = 115,
    FGD_AEROPROP_ID = 116,
    FGD_AEROPROP_BYCOLOR = 117,
    FGD_AEROPROP_BYLAYER = 118,
    FGD_AEROPANEL_ID = 119,
    FGD_AEROPANEL_BYCOLOR = 120,
    FGD_AEROPANEL_BYLAYER = 121,
    FGD_AEROPANEL_BYPROP = 122,
    FGD_AEROSPLINE_ID = 123,
    FGD_AEROSPLINE_BYCOLOR = 124,
    FGD_AEROSPLINE_BYLAYER = 125,
    FGD_AEROSPLINE_BYPANEL = 126,
    FGD_AEROCTRLSURF_ID = 127,
    FGD_AEROCTRLSURF_BYCOLOR = 128,
    FGD_AEROCTRLSURF_BYLAYER = 129,
    FGD_CSYS_ONPROP = 130,
    FGD_CSYS_ONCSYS = 131,
    FGD_SURFACE_ONREGION = 132,
    FGD_CURVE_ONREGION = 133,
    FGD_ELEM_ONREGION = 134,
    FGD_NODE_ONREGION = 135,
    FGD_PROP_ONREGION = 136,
    FGD_PROP_ONPOINT = 137,
    FGD_PROP_ONCURVE = 138,
    FGD_PROP_ONSURFACE = 139,
    FGD_PROP_ONSOLID = 140,
    FGD_SOLID_BYTYPE = 141,
    FGD_NODE_BYTYPE = 142,
    FGD_POINT_ONSURFACE = 143,
    FGD_POINT_ONSOLID = 144,
    FGD_CSYS_ONELEM = 145,
    FGD_CONTACT_ONSOLID = 146
};

enum zOutputType
{
    FOT_ANY = 0,
    FOT_DISP = 1,
    FOT_ACCEL = 2,
    FOT_FORCE = 3,
    FOT_STRESS = 4,
    FOT_STRAIN = 5,
    FOT_TEMP = 6
};

enum zOutputComplex
{
    FOC_ANY = 4,
    FOC_MAGNITUDE = 0,
    FOC_PHASE = 1,
    FOC_REAL = 2,
    FOC_IMAGINARY = 3
};

enum zCoordPick
{
    FPC_ABOVE_MAX = 0,
    FPC_BELOW_MIN = 1,
    FPC_OUTSIDE = 2,
    FPC_BETWEEN = 3,
    FPC_AT = 4
};

enum zColorMatch
{
    FCOM_COLOR = 1,
    FCOM_PATTERN = 2,
    FCOM_LINESTYLE = 4,
    FCOM_ALL = 7
};

enum zMatchOpt
{
    FMTCH_ANY = 0,
    FMTCH_ALL = 1,
    FMTCH_ANY_TRUE = 2,
    FMTCH_ALL_TRUE = 3,
    FMTCH_ANY_CONSTRAINED = 4,
    FMTCH_ALL_CONSTRAINED = 5
};

enum zLoadType
{
    FLT_NBODY = 0,
    FLT_NFORCE = 1,
    FLT_NMOMENT = 2,
    FLT_NDISPLACEMENT = 3,
    FLT_NROTDISPLACEMENT = 4,
    FLT_NVELOCITY = 5,
    FLT_NROTVELOCITY = 6,
    FLT_NACCELERATION = 7,
    FLT_NROTACCELERATION = 8,
    FLT_NTEMPERATURE = 9,
    FLT_NHEATFLUX = 10,
    FLT_NHEATGEN = 11,
    FLT_NTRANSIENT = 12,
    FLT_NPRESSURE = 13,
    FLT_NTOTALPRESSURE = 14,
    FLT_NSCALAR = 15,
    FLT_NSTEAMQUALITY = 16,
    FLT_NHUMIDITY = 17,
    FLT_NFLUIDHEIGHT = 18,
    FLT_NUNKNOWNCONDITION = 19,
    FLT_NSLIPCONDITION = 20,
    FLT_NFANCURVE = 21,
    FLT_NPERIODIC = 22,
    FLT_ELINELOAD = 41,
    FLT_EPRESSURE = 42,
    FLT_ETEMPERATURE = 43,
    FLT_EHEATFLUX = 44,
    FLT_ECONVECTION = 45,
    FLT_ERADIATION = 46,
    FLT_EHEATGEN = 47,
    FLT_EBOLTPRELOAD = 48,
    FLT_PNFORCE = 81,
    FLT_PNMOMENT = 82,
    FLT_PNDISPLACEMENT = 83,
    FLT_PNROTDISPLACEMENT = 84,
    FLT_PNVELOCITY = 85,
    FLT_PNROTVELOCITY = 86,
    FLT_PNACCELERATION = 87,
    FLT_PNROTACCELERATION = 88,
    FLT_PNTEMPERATURE = 89,
    FLT_PNHEATFLUX = 90,
    FLT_PNHEATGEN = 91,
    FLT_PNPRESSURE = 92,
    FLT_PNTOTALPRESSURE = 93,
    FLT_PNSCALAR = 94,
    FLT_PNSTEAMQUALITY = 95,
    FLT_PNHUMIDITY = 96,
    FLT_PNFLUIDHEIGHT = 97,
    FLT_PNUNKNOWNCONDITION = 98,
    FLT_PNSLIPCONDITION = 99,
    FLT_PNFANCURVE = 100,
    FLT_PNPERIODIC = 101,
    FLT_CNFORCE = 121,
    FLT_CNFORCEPERLEN = 122,
    FLT_CNFORCEATNODE = 123,
    FLT_CNMOMENT = 124,
    FLT_CNMOMENTPERLEN = 125,
    FLT_CNMOMENTATNODE = 126,
    FLT_CNDISPLACEMENT = 127,
    FLT_CNROTDISPLACEMENT = 128,
    FLT_CNVELOCITY = 129,
    FLT_CNROTVELOCITY = 130,
    FLT_CNACCELERATION = 131,
    FLT_CNROTACCELERATION = 132,
    FLT_CNTEMPERATURE = 133,
    FLT_CNHEATFLUX = 134,
    FLT_CNHEATFLUXPERLEN = 135,
    FLT_CNHEATFLUXATNODE = 136,
    FLT_CNHEATGEN = 137,
    FLT_CEPRESSURE = 138,
    FLT_CETEMPERATURE = 139,
    FLT_CEHEATFLUX = 140,
    FLT_CECONVECTION = 141,
    FLT_CERADIATION = 142,
    FLT_CEHEATGEN = 143,
    FLT_CNPRESSURE = 144,
    FLT_CNTOTALPRESSURE = 145,
    FLT_CNSCALAR = 146,
    FLT_CNSTEAMQUALITY = 147,
    FLT_CNHUMIDITY = 148,
    FLT_CNFLUIDHEIGHT = 149,
    FLT_CNUNKNOWNCONDITION = 150,
    FLT_CNSLIPCONDITION = 151,
    FLT_CNFANCURVE = 152,
    FLT_CNPERIODIC = 153,
    FLT_SNFORCE = 161,
    FLT_SNFORCEPERAREA = 162,
    FLT_SNFORCEATNODE = 163,
    FLT_SNMOMENT = 164,
    FLT_SNMOMENTPERAREA = 165,
    FLT_SNMOMENTATNODE = 166,
    FLT_SNDISPLACEMENT = 167,
    FLT_SNROTDISPLACEMENT = 168,
    FLT_SNVELOCITY = 169,
    FLT_SNROTVELOCITY = 170,
    FLT_SNACCELERATION = 171,
    FLT_SNROTACCELERATION = 172,
    FLT_SNTEMPERATURE = 173,
    FLT_SNHEATFLUX = 174,
    FLT_SNHEATFLUXPERAREA = 175,
    FLT_SNHEATFLUXATNODE = 176,
    FLT_SNHEATGEN = 177,
    FLT_SEPRESSURE = 178,
    FLT_SETEMPERATURE = 179,
    FLT_SEHEATFLUX = 180,
    FLT_SECONVECTION = 181,
    FLT_SERADIATION = 182,
    FLT_SEHEATGEN = 183,
    FLT_SNPRESSURE = 184,
    FLT_SNTOTALPRESSURE = 185,
    FLT_SNSCALAR = 186,
    FLT_SNSTEAMQUALITY = 187,
    FLT_SNHUMIDITY = 188,
    FLT_SNFLUIDHEIGHT = 189,
    FLT_SNUNKNOWNCONDITION = 190,
    FLT_SNSLIPCONDITION = 191,
    FLT_SNFANCURVE = 192,
    FLT_SNPERIODIC = 193,
    FLT_SNTORQUE = 194,
    FLT_SNBEARING = 195
};

enum zRangeOpt
{
    FRNG_ANY = 0,
    FRNG_ABOVE = 1,
    FRNG_BELOW = 2,
    FRNG_BETWEEN = 3,
    FRNG_OUTSIDE = 4
};

struct __declspec(uuid("fc77c4fb-ec92-11d4-9449-001083fff11c"))
Set;
    // [ default ] dispinterface ISet

struct __declspec(uuid("e4a806f0-65dd-4b9a-8ca7-bb2b71bedfae"))
ISortSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetdReal1,put=PutdReal1))
    double dReal1;
    __declspec(property(get=GetdReal2,put=PutdReal2))
    double dReal2;
    __declspec(property(get=GetdReal3,put=PutdReal3))
    double dReal3;
    __declspec(property(get=GetnInt1,put=PutnInt1))
    int nInt1;
    __declspec(property(get=GetnInt2,put=PutnInt2))
    int nInt2;
    __declspec(property(get=GetnInt3,put=PutnInt3))
    int nInt3;
    __declspec(property(get=GeteDataType,put=PuteDataType))
    enum zDataType eDataType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode Add (
        int nID );
    enum zReturnCode AddReal (
        int nID,
        double dReal1,
        double dReal2,
        double dReal3 );
    enum zReturnCode AddInt (
        int nID,
        int dInt1,
        int dInt2,
        int dInt3 );
    enum zReturnCode AddAll (
        int nID,
        double dReal1,
        double dReal2,
        double dReal3,
        int dInt1,
        int dInt2,
        int dInt3,
        enum zDataType eDataType );
    enum zReturnCode SetData (
        int nID,
        double dReal1,
        double dReal2,
        double dReal3,
        int dInt1,
        int dInt2,
        int dInt3,
        enum zDataType eDataType );
    enum zReturnCode GetData (
        int nID,
        double * dReal1,
        double * dReal2,
        double * dReal3,
        int * dInt1,
        int * dInt2,
        int * dInt3,
        enum zDataType * eDataType );
    enum zReturnCode Find (
        int nID );
    enum zReturnCode Remove (
        int nID );
    enum zReturnCode IsAdded (
        int nID );
    enum zReturnCode Reset ( );
    int Next ( );
    int Prev ( );
    int Count ( );
    enum zReturnCode clear ( );
    int First ( );
    int Last ( );
    enum zReturnCode Sort (
        VARIANT_BOOL bSortReal );
    enum zReturnCode Select (
        enum zDataType entityTYPE,
        VARIANT_BOOL Reload,
        _bstr_t title );
    enum zReturnCode SelectID (
        enum zDataType entityTYPE,
        _bstr_t title,
        int * selID );
    int Current ( );
    enum zReturnCode RemoveSet (
        int nSetID );
    enum zReturnCode ConvertToBoundarySurfaces ( );
    enum zReturnCode SelectList (
        int nNumEntity,
        enum zDataType entityTYPE );
    enum zReturnCode SortRemoveDuplicates (
        VARIANT_BOOL bSortReal );
    int IsEmpty ( );
    enum zReturnCode AddAroundPoint (
        enum zDataType entityTYPE,
        int nSetID,
        const _variant_t & vBase );
    enum zReturnCode AddAroundVector (
        enum zDataType entityTYPE,
        int nSetID,
        const _variant_t & vBase,
        const _variant_t & vDir );
    enum zReturnCode AddAroundPlane (
        enum zDataType entityTYPE,
        int nSetID,
        const _variant_t & vBase,
        const _variant_t & vDir,
        VARIANT_BOOL bAbs );
    enum zReturnCode SetReal (
        int nID,
        double dReal1,
        double dReal2,
        double dReal3 );
    enum zReturnCode GetReal (
        int nID,
        double * dReal1,
        double * dReal2,
        double * dReal3 );
    enum zReturnCode SetInt (
        int nID,
        int dInt1,
        int dInt2,
        int dInt3 );
    enum zReturnCode GetInt (
        int nID,
        int * dInt1,
        int * dInt2,
        int * dInt3 );
    enum zReturnCode SetDataType (
        int nID,
        enum zDataType eDataType );
    enum zReturnCode GetDataType (
        int nID,
        enum zDataType * eDataType );
    enum zReturnCode GetSet (
        int nSetID,
        VARIANT_BOOL bClear );

    // Properties:
    int GetID ( );
    void PutID ( int _val );
    double GetdReal1 ( );
    void PutdReal1 ( double _val );
    double GetdReal2 ( );
    void PutdReal2 ( double _val );
    double GetdReal3 ( );
    void PutdReal3 ( double _val );
    int GetnInt1 ( );
    void PutnInt1 ( int _val );
    int GetnInt2 ( );
    void PutnInt2 ( int _val );
    int GetnInt3 ( );
    void PutnInt3 ( int _val );
    enum zDataType GeteDataType ( );
    void PuteDataType ( enum zDataType _val );
};

struct __declspec(uuid("e4a806f2-65dd-4b9a-8ca7-bb2b71bedfae"))
SortSet;
    // [ default ] dispinterface ISortSet

struct __declspec(uuid("0023ea23-812a-4253-a431-86b427a49c8c"))
IMapData : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode clear ( );
    enum zReturnCode Initialize (
        int nCount );
    int Count ( );
    enum zReturnCode GetIDs (
        int nIDSet );
    enum zReturnCode Remove (
        int nID );
    enum zReturnCode RemoveAll ( );
    int DefineReal ( );
    int DefineInt ( );
    int DefineBool ( );
    int DefineString (
        int nLength );
    int DefineVariant (
        const _variant_t & vVar );
    enum zReturnCode SetReal (
        int nIndex,
        int nID,
        double dVal );
    enum zReturnCode SetInt (
        int nIndex,
        int nID,
        int nVal );
    enum zReturnCode SetBool (
        int nIndex,
        int nID,
        VARIANT_BOOL bVal );
    enum zReturnCode SetString (
        int nIndex,
        int nID,
        _bstr_t sVal );
    enum zReturnCode SetVariant (
        int nIndex,
        int nID,
        const _variant_t & vVal );
    enum zReturnCode GetReal (
        int nIndex,
        int nID,
        double * pdVal );
    enum zReturnCode GetInt (
        int nIndex,
        int nID,
        int * pnVal );
    enum zReturnCode GetBool (
        int nIndex,
        int nID,
        VARIANT_BOOL * pbVal );
    enum zReturnCode GetString (
        int nIndex,
        int nID,
        BSTR * psVal );
    enum zReturnCode GetVariant (
        int nIndex,
        int nID,
        const _variant_t & vVal );
};

struct __declspec(uuid("0023ea25-812a-4253-a431-86b427a49c8c"))
MapData;
    // [ default ] dispinterface IMapData

struct __declspec(uuid("cf420f7f-631e-4597-83a5-b6c971aeab99"))
ITrackData : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode clear ( );
    enum zReturnCode Start (
        enum zDataType entityTYPE );
    enum zReturnCode StartGeometry ( );
    enum zReturnCode StartMesh ( );
    enum zReturnCode Stop (
        enum zDataType entityTYPE );
    enum zReturnCode StopAll ( );
    enum zReturnCode Created (
        enum zDataType entityTYPE,
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode Deleted (
        enum zDataType entityTYPE,
        int nSetID,
        VARIANT_BOOL bClear );
};

struct __declspec(uuid("cf420f81-631e-4597-83a5-b6c971aeab99"))
TrackData;
    // [ default ] dispinterface ITrackData

struct __declspec(uuid("2b88e749-3213-47ab-9cad-0aea2e415f16"))
IResults : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValueForNonExisting,put=PutValueForNonExisting))
    double ValueForNonExisting;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode clear ( );
    enum zReturnCode GetModel (
        __int64 * nModelID );
    enum zReturnCode SetModel (
        __int64 nModelID );
    int NumberOfRows ( );
    int NumberOfColumns ( );
    enum zReturnCode DataLocation (
        enum zDataType * nDataType );
    enum zReturnCode FindColumn (
        int nSetID,
        int nVectorID,
        int * nColumnIndex );
    enum zReturnCode IsPopulated ( );
    enum zReturnCode Populate ( );
    enum zReturnCode AddColumn (
        int nSetID,
        int nVectorID,
        VARIANT_BOOL bAddComponentsCorners,
        int * nNumColumnsAdded,
        VARIANT * nColumnIndices );
    enum zReturnCode AddEmptyColumns (
        int nNumberOfColumns,
        VARIANT * nColumnIndices );
    enum zReturnCode AddConversionColumn (
        int nSetID,
        int nVectorID,
        enum zResultsConvert nConversionApproach,
        int * nColumnIndex );
    enum zReturnCode GetColumnTitle (
        int nColumnIndex,
        BSTR * sTitle );
    enum zReturnCode GetColumnVector (
        int nColumnIndex,
        int * pnSetID,
        int * pnVectorID );
    enum zReturnCode GetColumnMinMax (
        int nColumnIndex,
        int nLimitToSet,
        int * pnMinID,
        int * pnMaxID,
        double * pdMinVal,
        double * pdMaxVal );
    enum zReturnCode SetTri3Orientation (
        int nStress,
        int nStrain,
        int nForce );
    enum zReturnCode SetTri6Orientation (
        int nStress,
        int nStrain,
        int nForce );
    enum zReturnCode SetQuad4Orientation (
        int nStress,
        int nStrain,
        int nForce );
    enum zReturnCode SetQuad8Orientation (
        int nStress,
        int nStrain,
        int nForce );
    enum zReturnCode SetSolidOrientation (
        int nIsotropic,
        int nAnisotropic,
        int nHyperelastic );
    enum zReturnCode SetEngrShearStrain (
        VARIANT_BOOL bEngrShearStrain );
    enum zReturnCode SetNodalTransform (
        enum zOutputDestination nTransformTo,
        int nCSysID );
    enum zReturnCode SetPlateTransform (
        enum zOutputDestination nTransformTo,
        int nCSysID,
        int nCSysAxis,
        double dVecX,
        double dVecY,
        double dVecZ,
        double dToleranceAngle );
    enum zReturnCode SetSolidTransform (
        enum zOutputDestination nTransformTo,
        int nCSysID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next (
        int nColumnIndex,
        int * pnID,
        double * pdVal );
    enum zReturnCode GetValue (
        int nID,
        int nColumnIndex,
        double * pdVal );
    enum zReturnCode GetInRow (
        int nRowIndex,
        int nColumnIndex,
        int * pnID,
        double * pdVal );
    enum zReturnCode GetMultipleInRow (
        int nRowIndex,
        int nNumberOfColumns,
        const _variant_t & nColumnIndices,
        int * pnID,
        VARIANT * pdVals );
    enum zReturnCode SetValue (
        int nID,
        int nColumnIndex,
        double dVal );
    enum zReturnCode SetInRow (
        int nRowIndex,
        int nColumnIndex,
        double dVal );
    enum zReturnCode SetMultipleInRow (
        int nRowIndex,
        int nNumberOfColumns,
        const _variant_t & nColumnIndices,
        const _variant_t & dVals );
    enum zReturnCode DataNeeded (
        enum zDataType nDataType,
        int nEntitySetID );
    enum zReturnCode GetRowByID (
        int nID,
        VARIANT * pdVals );
    enum zReturnCode GetRow (
        int nRowIndex,
        int * pnID,
        VARIANT * pdVals );
    enum zReturnCode GetRows (
        int nNumberOfRows,
        const _variant_t & nRowIndices,
        VARIANT * pnIDs,
        VARIANT * pdVals );
    enum zReturnCode GetRowsByID (
        int nEntitySetID,
        VARIANT * pdVals );
    enum zReturnCode SetColumnGlobalPly (
        int nColumnIndex,
        int nGlobalPlyID );
    enum zReturnCode AddEnvelopeColumn (
        enum zOutputProcessEnvType nEnvelopeType,
        int * nDataColumnIndex,
        int * nColumnColumnIndex );
    enum zReturnCode IsAPIColumn (
        int nColumnIndex );
    enum zReturnCode GetColumn (
        int nColIndex,
        VARIANT * pnIDs,
        VARIANT * pdVals );
    enum zReturnCode GetColumns (
        int nNumberOfColumns,
        const _variant_t & nColIndices,
        VARIANT * pnIDs,
        VARIANT * pdVals );
    enum zReturnCode GetRowsAndColumns (
        int nNumberOfRows,
        const _variant_t & nRowIndices,
        int nNumberOfColumns,
        const _variant_t & nColIndices,
        VARIANT * pnIDs,
        VARIANT * pdVals,
        VARIANT_BOOL * pbAllExist );
    enum zReturnCode GetRowsAndColumnsByID (
        int nEntitySetID,
        int nNumberOfColumns,
        const _variant_t & nColIndices,
        VARIANT * pdVals,
        VARIANT_BOOL * pbAllExist );
    enum zReturnCode GetColumnSum (
        int nColumnIndex,
        int nLimitToSet,
        int * pnNumVal,
        double * pdSum,
        double * pdSumSq );
    enum zReturnCode SetComplexOptions (
        VARIANT_BOOL bExpandComplex,
        double dComplexPhase );
    enum zReturnCode SendToDataTable ( );
    int NumberOfSets ( );
    enum zReturnCode NextSetReset ( );
    int NextSet (
        enum zExistState nExistState,
        enum zLocateOption nLocateOption );
    enum zReturnCode SetExists (
        int nSetID );
    enum zReturnCode SetInfo (
        int nSetID,
        enum zAnalysisProgram * pnAnalysisProgram,
        enum zAnalysisType * pnAnalysisType,
        double * pdSetValue );
    enum zReturnCode SetTitle (
        int nSetID,
        BSTR * sTitle );
    enum zReturnCode SetNotes (
        int nSetID,
        BSTR * sNotes );
    enum zReturnCode SetLocation (
        int nSetID,
        enum zResultsLocation * pnSetLocation );
    enum zReturnCode SetHasVectorsInDB (
        int nSetID );
    enum zReturnCode Sets (
        int nSetSetID,
        VARIANT_BOOL bClear );
    int SetSubcase (
        int nSetID );
    int SetRevision (
        int nSetID );
    enum zReturnCode NextVectorReset (
        int nSetID );
    int NextVector (
        int nSetID,
        enum zExistState nExistState,
        enum zLocateOption nLocateOption );
    enum zReturnCode VectorExists (
        int nSetID,
        int nVectorID );
    enum zReturnCode VectorInfo (
        int nSetID,
        int nVectorID,
        enum zDataType * pnDataType,
        enum zOutputType * pnOutputType,
        VARIANT_BOOL * pbCentroidTotal,
        VARIANT_BOOL * pbCalcWarn,
        int * pnCompDir );
    enum zReturnCode VectorTitle (
        int nSetID,
        int nVectorID,
        BSTR * sTitle );
    enum zReturnCode VectorComponents (
        int nSetID,
        int nVectorID,
        int * pnNumComponents,
        VARIANT * pnComponents );
    enum zReturnCode VectorLocation (
        int nSetID,
        int nVectorID,
        enum zResultsLocation * pnVectorLocation );
    enum zReturnCode VectorEntities (
        int nSetID,
        int nVectorID,
        int nEntitySetID,
        VARIANT_BOOL bClear );
    enum zReturnCode Vectors (
        int nSetID,
        int nVectorSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode EntityValue (
        int nSetID,
        int nVectorID,
        int nEntityID,
        double * pdVal );

    // Properties:
    double GetValueForNonExisting ( );
    void PutValueForNonExisting ( double _val );
};

enum zResultsConvert
{
    FRC_NONE = -1,
    FRC_AVG = 0,
    FRC_MAX = 1,
    FRC_MIN = 4,
    FRC_AVG_SKIP_CORNER = 2,
    FRC_MAX_SKIP_CORNER = 3,
    FRC_MIN_SKIP_CORNER = 5
};

enum zOutputDestination
{
    FOD_NONE = 0,
    FOD_VECTOR_TO_CSYS = 1,
    FOD_VECTOR_TO_NODE_OUTPUT_CSYS = 2,
    FOD_PLATE_TO_MATL = 3,
    FOD_PLATE_TO_CSYS = 4,
    FOD_PLATE_TO_VECTOR = 5,
    FOD_SOLID_TO_CSYS = 6,
    FOD_SOLID_TO_MATL = 7
};

enum zOutputProcessEnvType
{
    FOPE_MAX = 0,
    FOPE_MIN = 1,
    FOPE_MAXABS = 2
};

enum zExistState
{
    FEX_EXISTING = 0,
    FEX_NONEXISTING = 1
};

enum zLocateOption
{
    FLO_AFTER = 1,
    FLO_BEFORE = 2,
    FLO_AFTER_EQUAL = 3,
    FLO_BEFORE_EQUAL = 4
};

enum zAnalysisProgram
{
    FAP_UNKNOWN = 0,
    FAP_FEMAP_GEN = 1,
    FAP_PAL = 2,
    FAP_PAL2 = 3,
    FAP_MSC_NASTRAN = 4,
    FAP_ANSYS = 5,
    FAP_STARDYNE = 6,
    FAP_COSMOS = 7,
    FAP_PATRAN = 8,
    FAP_NEUTRAL = 9,
    FAP_ALGOR = 10,
    FAP_PC_NASTRAN = 11,
    FAP_TABLE = 12,
    FAP_UAI_NASTRAN = 13,
    FAP_COSMIC_NASTRAN = 14,
    FAP_STAAD = 15,
    FAP_ABAQUS = 16,
    FAP_WECAN = 17,
    FAP_SAP = 18,
    FAP_CDA_SPRINT = 19,
    FAP_CAEFEM = 20,
    FAP_IDEAS = 21,
    FAP_ME_NASTRAN = 22,
    FAP_ADINA = 23,
    FAP_GENESIS = 24,
    FAP_ODBC = 25,
    FAP_CSA_NASTRAN = 26,
    FAP_CFDESIGN = 27,
    FAP_LS_DYNA = 28,
    FAP_MARC = 29,
    FAP_SINDA = 30,
    FAP_NE_NASTRAN = 31,
    FAP_TMG = 33,
    FAP_FEMAP_STRUCTURAL = 34,
    FAP_VR_NASTRAN = 35,
    FAP_NX_NASTRAN = 36,
    FAP_SATOOLKIT = 32
};

enum zAnalysisType
{
    FAT_UNKNOWN = 0,
    FAT_STATIC = 1,
    FAT_MODES = 2,
    FAT_TRANSIENT = 3,
    FAT_FREQUENCY_RESPONSE = 4,
    FAT_RESPONSE_SPECTRUM = 5,
    FAT_RANDOM = 6,
    FAT_LINEAR_BUCKLING = 7,
    FAT_DESIGN_OPTIMIZATION = 8,
    FAT_EXPLICIT = 9,
    FAT_NONLINEAR_STATIC = 10,
    FAT_NONLINEAR_BUCKLING = 11,
    FAT_NONLINEAR_TRANSIENT = 12,
    FAT_LSDYNA_IMPLICIT = 13,
    FAT_FATIGUE = 17,
    FAT_DATA_RECOVERY = 18,
    FAT_CFD = 19,
    FAT_STEADY_STATE_HEAT = 20,
    FAT_TRANSIENT_HEAT = 21,
    FAT_601_STATIC = 22,
    FAT_601_TRANSIENT = 23,
    FAT_701_EXPLICIT = 24,
    FAT_AERO_STATIC = 25,
    FAT_AERO_FLUTTER = 26
};

enum zResultsLocation
{
    FRL_DB = 1,
    FRL_OP2 = 2,
    FRL_FNO = 3,
    FRL_XDB = 5,
    FRL_CSV = 6,
    FRL_VIRTUAL = 7,
    FRL_ODB = 8
};

struct __declspec(uuid("2b88e74b-3213-47ab-9cad-0aea2e415f16"))
Results;
    // [ default ] dispinterface IResults

struct __declspec(uuid("b0bd5ea3-c79d-4140-83ff-0642f66d2f37"))
IMesher : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPrepareGeometry,put=PutPrepareGeometry))
    VARIANT_BOOL PrepareGeometry;
    __declspec(property(get=GetMeshSizing,put=PutMeshSizing))
    VARIANT_BOOL MeshSizing;
    __declspec(property(get=GetMeshing,put=PutMeshing))
    VARIANT_BOOL Meshing;
    __declspec(property(get=GetMeshType,put=PutMeshType))
    int MeshType;
    __declspec(property(get=GetMidsideNodes,put=PutMidsideNodes))
    VARIANT_BOOL MidsideNodes;
    __declspec(property(get=GetSyncSizes,put=PutSyncSizes))
    VARIANT_BOOL SyncSizes;
    __declspec(property(get=GetLengthBasedSizing,put=PutLengthBasedSizing))
    int LengthBasedSizing;
    __declspec(property(get=GetPrepareSize,put=PutPrepareSize))
    double PrepareSize;
    __declspec(property(get=GetMeshSize,put=PutMeshSize))
    double MeshSize;
    __declspec(property(get=GetInteriorGrowthFactor,put=PutInteriorGrowthFactor))
    double InteriorGrowthFactor;
    __declspec(property(get=GetAutoSelectTriMesher,put=PutAutoSelectTriMesher))
    VARIANT_BOOL AutoSelectTriMesher;
    __declspec(property(get=GetTriMesher,put=PutTriMesher))
    enum zMesherType TriMesher;
    __declspec(property(get=GetMappedMeshingAllowed,put=PutMappedMeshingAllowed))
    VARIANT_BOOL MappedMeshingAllowed;
    __declspec(property(get=GetNodeMergeOption,put=PutNodeMergeOption))
    int NodeMergeOption;
    __declspec(property(get=GetTetGrowthRatio,put=PutTetGrowthRatio))
    double TetGrowthRatio;
    __declspec(property(get=GetInitialSizeRatio,put=PutInitialSizeRatio))
    double InitialSizeRatio;
    __declspec(property(get=GetAskAlreadyMeshed,put=PutAskAlreadyMeshed))
    VARIANT_BOOL AskAlreadyMeshed;
    __declspec(property(get=GetNarrowSizePct,put=PutNarrowSizePct))
    double NarrowSizePct;
    __declspec(property(get=GetCurveSuppressPct,put=PutCurveSuppressPct))
    double CurveSuppressPct;
    __declspec(property(get=GetNarrowAngle,put=PutNarrowAngle))
    double NarrowAngle;
    __declspec(property(get=GetFeatureEdgeAngle,put=PutFeatureEdgeAngle))
    double FeatureEdgeAngle;
    __declspec(property(get=GetCombinedCurveAngle,put=PutCombinedCurveAngle))
    double CombinedCurveAngle;
    __declspec(property(get=GetGeometryCleanup,put=PutGeometryCleanup))
    VARIANT_BOOL GeometryCleanup;
    __declspec(property(get=GetSuppressVoids,put=PutSuppressVoids))
    VARIANT_BOOL SuppressVoids;
    __declspec(property(get=GetDetectClosePoints,put=PutDetectClosePoints))
    VARIANT_BOOL DetectClosePoints;
    __declspec(property(get=GetCutSlivers,put=PutCutSlivers))
    VARIANT_BOOL CutSlivers;
    __declspec(property(get=GetProcessBlends,put=PutProcessBlends))
    VARIANT_BOOL ProcessBlends;
    __declspec(property(get=GetCombineSmallSurfaces,put=PutCombineSmallSurfaces))
    VARIANT_BOOL CombineSmallSurfaces;
    __declspec(property(get=GetMinElemOnEdgeOn,put=PutMinElemOnEdgeOn))
    VARIANT_BOOL MinElemOnEdgeOn;
    __declspec(property(get=GetMaxAngleToleranceOn,put=PutMaxAngleToleranceOn))
    VARIANT_BOOL MaxAngleToleranceOn;
    __declspec(property(get=GetMaxElemSmallFeatureOn,put=PutMaxElemSmallFeatureOn))
    VARIANT_BOOL MaxElemSmallFeatureOn;
    __declspec(property(get=GetMaxPctSmallFeatureOn,put=PutMaxPctSmallFeatureOn))
    VARIANT_BOOL MaxPctSmallFeatureOn;
    __declspec(property(get=GetVertexAspectRatioOn,put=PutVertexAspectRatioOn))
    VARIANT_BOOL VertexAspectRatioOn;
    __declspec(property(get=GetMappedMeshingRefinement,put=PutMappedMeshingRefinement))
    VARIANT_BOOL MappedMeshingRefinement;
    __declspec(property(get=GetSuppressShortEdgesPctOn,put=PutSuppressShortEdgesPctOn))
    VARIANT_BOOL SuppressShortEdgesPctOn;
    __declspec(property(get=GetAutoBoundarySmallSurfPctOn,put=PutAutoBoundarySmallSurfPctOn))
    VARIANT_BOOL AutoBoundarySmallSurfPctOn;
    __declspec(property(get=GetMinElemOnEdge,put=PutMinElemOnEdge))
    int MinElemOnEdge;
    __declspec(property(get=GetMaxAngleTolerance,put=PutMaxAngleTolerance))
    double MaxAngleTolerance;
    __declspec(property(get=GetMaxElemSmallFeature,put=PutMaxElemSmallFeature))
    int MaxElemSmallFeature;
    __declspec(property(get=GetMaxPctSmallFeature,put=PutMaxPctSmallFeature))
    double MaxPctSmallFeature;
    __declspec(property(get=GetVertexAspectRatio,put=PutVertexAspectRatio))
    double VertexAspectRatio;
    __declspec(property(get=GetSuppressShortEdgesPct,put=PutSuppressShortEdgesPct))
    double SuppressShortEdgesPct;
    __declspec(property(get=GetAutoBoundarySmallSurfPct,put=PutAutoBoundarySmallSurfPct))
    double AutoBoundarySmallSurfPct;
    __declspec(property(get=GetRefinementRatioOn,put=PutRefinementRatioOn))
    VARIANT_BOOL RefinementRatioOn;
    __declspec(property(get=GetRefinementRatio,put=PutRefinementRatio))
    double RefinementRatio;
    __declspec(property(get=GetRefineSurfaceMesh,put=PutRefineSurfaceMesh))
    VARIANT_BOOL RefineSurfaceMesh;
    __declspec(property(get=GetAdjacentSurfaceMatching,put=PutAdjacentSurfaceMatching))
    VARIANT_BOOL AdjacentSurfaceMatching;
    __declspec(property(get=GetRemovePreviousSlaving,put=PutRemovePreviousSlaving))
    VARIANT_BOOL RemovePreviousSlaving;
    __declspec(property(get=GetAdjustColors,put=PutAdjustColors))
    VARIANT_BOOL AdjustColors;
    __declspec(property(get=GetSkipSizingOnSlaved,put=PutSkipSizingOnSlaved))
    VARIANT_BOOL SkipSizingOnSlaved;
    __declspec(property(get=GetPreV10Meshing,put=PutPreV10Meshing))
    VARIANT_BOOL PreV10Meshing;
    __declspec(property(get=GetMidsideMoveToGeometry,put=PutMidsideMoveToGeometry))
    VARIANT_BOOL MidsideMoveToGeometry;
    __declspec(property(get=GetMidsideMaxDistortionAngleOn,put=PutMidsideMaxDistortionAngleOn))
    VARIANT_BOOL MidsideMaxDistortionAngleOn;
    __declspec(property(get=GetMidsideMaxDistortionAngle,put=PutMidsideMaxDistortionAngle))
    double MidsideMaxDistortionAngle;
    __declspec(property(get=GetConnectEdgeNodesOn,put=PutConnectEdgeNodesOn))
    VARIANT_BOOL ConnectEdgeNodesOn;
    __declspec(property(get=GetConnectEdgeNodes,put=PutConnectEdgeNodes))
    double ConnectEdgeNodes;
    __declspec(property(get=GetSmoothingLaplacian,put=PutSmoothingLaplacian))
    VARIANT_BOOL SmoothingLaplacian;
    __declspec(property(get=GetSmoothingIterations,put=PutSmoothingIterations))
    int SmoothingIterations;
    __declspec(property(get=GetSmoothingTolerance,put=PutSmoothingTolerance))
    double SmoothingTolerance;
    __declspec(property(get=GetOffsetMeshMode,put=PutOffsetMeshMode))
    enum zMeshOffsetFrom OffsetMeshMode;
    __declspec(property(get=GetOffsetMeshDistance,put=PutOffsetMeshDistance))
    double OffsetMeshDistance;
    __declspec(property(get=GetMapMaxAngleDeviation,put=PutMapMaxAngleDeviation))
    double MapMaxAngleDeviation;
    __declspec(property(get=GetMapMinCornerAngle,put=PutMapMinCornerAngle))
    double MapMinCornerAngle;
    __declspec(property(get=GetMapEqualSidesOnly,put=PutMapEqualSidesOnly))
    VARIANT_BOOL MapEqualSidesOnly;
    __declspec(property(get=GetMapSubdivisions,put=PutMapSubdivisions))
    VARIANT_BOOL MapSubdivisions;
    __declspec(property(get=GetMapSplitQuadMap,put=PutMapSplitQuadMap))
    VARIANT_BOOL MapSplitQuadMap;
    __declspec(property(get=GetMapAlternateBias,put=PutMapAlternateBias))
    VARIANT_BOOL MapAlternateBias;
    __declspec(property(get=GetMapRightBias,put=PutMapRightBias))
    VARIANT_BOOL MapRightBias;
    __declspec(property(get=GetPostMeshingCleanup,put=PutPostMeshingCleanup))
    VARIANT_BOOL PostMeshingCleanup;
    __declspec(property(get=GetQuadEdgeLayers,put=PutQuadEdgeLayers))
    int QuadEdgeLayers;
    __declspec(property(get=GetCutQuadDeviationAngle,put=PutCutQuadDeviationAngle))
    double CutQuadDeviationAngle;
    __declspec(property(get=GetMinElemBetweenBoundary,put=PutMinElemBetweenBoundary))
    int MinElemBetweenBoundary;
    __declspec(property(get=GetMaxElemAspectRatio,put=PutMaxElemAspectRatio))
    double MaxElemAspectRatio;
    __declspec(property(get=GetQuickCutBoundaryOn,put=PutQuickCutBoundaryOn))
    VARIANT_BOOL QuickCutBoundaryOn;
    __declspec(property(get=GetQuickCutMaxNodes,put=PutQuickCutMaxNodes))
    int QuickCutMaxNodes;
    __declspec(property(get=GetAttributePropOnly,put=PutAttributePropOnly))
    VARIANT_BOOL AttributePropOnly;
    __declspec(property(get=GetTetStatusMessages,put=PutTetStatusMessages))
    VARIANT_BOOL TetStatusMessages;
    __declspec(property(get=GetTetQualityToDataTable,put=PutTetQualityToDataTable))
    VARIANT_BOOL TetQualityToDataTable;
    __declspec(property(get=GetTetCheckSurfaceElem,put=PutTetCheckSurfaceElem))
    VARIANT_BOOL TetCheckSurfaceElem;
    __declspec(property(get=GetTetDeleteSurfaceElem,put=PutTetDeleteSurfaceElem))
    VARIANT_BOOL TetDeleteSurfaceElem;
    __declspec(property(get=GetTetSmoothSolidElemOn,put=PutTetSmoothSolidElemOn))
    VARIANT_BOOL TetSmoothSolidElemOn;
    __declspec(property(get=GetTetSmoothSolidElem,put=PutTetSmoothSolidElem))
    double TetSmoothSolidElem;
    __declspec(property(get=GetTetMidsideMoveToGeometry,put=PutTetMidsideMoveToGeometry))
    VARIANT_BOOL TetMidsideMoveToGeometry;
    __declspec(property(get=GetTetMidsideMaxDistortionAngleOn,put=PutTetMidsideMaxDistortionAngleOn))
    VARIANT_BOOL TetMidsideMaxDistortionAngleOn;
    __declspec(property(get=GetTetMidsideMaxDistortionAngle,put=PutTetMidsideMaxDistortionAngle))
    double TetMidsideMaxDistortionAngle;
    __declspec(property(get=GetTetAdjustNodalPrecision,put=PutTetAdjustNodalPrecision))
    VARIANT_BOOL TetAdjustNodalPrecision;
    __declspec(property(get=GetTetMeshVoids,put=PutTetMeshVoids))
    VARIANT_BOOL TetMeshVoids;
    __declspec(property(get=GetTetPreV10Meshing,put=PutTetPreV10Meshing))
    VARIANT_BOOL TetPreV10Meshing;
    __declspec(property(get=GetRemovePreviousOnly,put=PutRemovePreviousOnly))
    VARIANT_BOOL RemovePreviousOnly;
    __declspec(property(get=GetRemovePreviousPrep,put=PutRemovePreviousPrep))
    VARIANT_BOOL RemovePreviousPrep;
    __declspec(property(get=GetDeletePreviousMesh,put=PutDeletePreviousMesh))
    VARIANT_BOOL DeletePreviousMesh;
    __declspec(property(get=GetSilent,put=PutSilent))
    VARIANT_BOOL Silent;
    __declspec(property(get=GetFixedGroupID,put=PutFixedGroupID))
    int FixedGroupID;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode UI (
        VARIANT_BOOL bMeshingOptions );
    enum zReturnCode clear ( );
    enum zReturnCode AddSurface (
        int nSetID,
        VARIANT_BOOL bSetSizes );
    enum zReturnCode AddSolid (
        int nSetID,
        VARIANT_BOOL bSetSizes );
    enum zReturnCode SetSizes (
        double dPrepareSize,
        double dMeshSize,
        double dInteriorGrowthFactor );
    enum zReturnCode Prepare ( );
    enum zReturnCode Size ( );
    enum zReturnCode Mesh ( );
    enum zReturnCode Apply ( );
    enum zReturnCode HasPrevious ( );
    enum zReturnCode RemovePrevious ( );

    // Properties:
    VARIANT_BOOL GetPrepareGeometry ( );
    void PutPrepareGeometry ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMeshSizing ( );
    void PutMeshSizing ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMeshing ( );
    void PutMeshing ( VARIANT_BOOL _val );
    int GetMeshType ( );
    void PutMeshType ( int _val );
    VARIANT_BOOL GetMidsideNodes ( );
    void PutMidsideNodes ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSyncSizes ( );
    void PutSyncSizes ( VARIANT_BOOL _val );
    int GetLengthBasedSizing ( );
    void PutLengthBasedSizing ( int _val );
    double GetPrepareSize ( );
    void PutPrepareSize ( double _val );
    double GetMeshSize ( );
    void PutMeshSize ( double _val );
    double GetInteriorGrowthFactor ( );
    void PutInteriorGrowthFactor ( double _val );
    VARIANT_BOOL GetAutoSelectTriMesher ( );
    void PutAutoSelectTriMesher ( VARIANT_BOOL _val );
    enum zMesherType GetTriMesher ( );
    void PutTriMesher ( enum zMesherType _val );
    VARIANT_BOOL GetMappedMeshingAllowed ( );
    void PutMappedMeshingAllowed ( VARIANT_BOOL _val );
    int GetNodeMergeOption ( );
    void PutNodeMergeOption ( int _val );
    double GetTetGrowthRatio ( );
    void PutTetGrowthRatio ( double _val );
    double GetInitialSizeRatio ( );
    void PutInitialSizeRatio ( double _val );
    VARIANT_BOOL GetAskAlreadyMeshed ( );
    void PutAskAlreadyMeshed ( VARIANT_BOOL _val );
    double GetNarrowSizePct ( );
    void PutNarrowSizePct ( double _val );
    double GetCurveSuppressPct ( );
    void PutCurveSuppressPct ( double _val );
    double GetNarrowAngle ( );
    void PutNarrowAngle ( double _val );
    double GetFeatureEdgeAngle ( );
    void PutFeatureEdgeAngle ( double _val );
    double GetCombinedCurveAngle ( );
    void PutCombinedCurveAngle ( double _val );
    VARIANT_BOOL GetGeometryCleanup ( );
    void PutGeometryCleanup ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSuppressVoids ( );
    void PutSuppressVoids ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDetectClosePoints ( );
    void PutDetectClosePoints ( VARIANT_BOOL _val );
    VARIANT_BOOL GetCutSlivers ( );
    void PutCutSlivers ( VARIANT_BOOL _val );
    VARIANT_BOOL GetProcessBlends ( );
    void PutProcessBlends ( VARIANT_BOOL _val );
    VARIANT_BOOL GetCombineSmallSurfaces ( );
    void PutCombineSmallSurfaces ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMinElemOnEdgeOn ( );
    void PutMinElemOnEdgeOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMaxAngleToleranceOn ( );
    void PutMaxAngleToleranceOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMaxElemSmallFeatureOn ( );
    void PutMaxElemSmallFeatureOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMaxPctSmallFeatureOn ( );
    void PutMaxPctSmallFeatureOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetVertexAspectRatioOn ( );
    void PutVertexAspectRatioOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMappedMeshingRefinement ( );
    void PutMappedMeshingRefinement ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSuppressShortEdgesPctOn ( );
    void PutSuppressShortEdgesPctOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAutoBoundarySmallSurfPctOn ( );
    void PutAutoBoundarySmallSurfPctOn ( VARIANT_BOOL _val );
    int GetMinElemOnEdge ( );
    void PutMinElemOnEdge ( int _val );
    double GetMaxAngleTolerance ( );
    void PutMaxAngleTolerance ( double _val );
    int GetMaxElemSmallFeature ( );
    void PutMaxElemSmallFeature ( int _val );
    double GetMaxPctSmallFeature ( );
    void PutMaxPctSmallFeature ( double _val );
    double GetVertexAspectRatio ( );
    void PutVertexAspectRatio ( double _val );
    double GetSuppressShortEdgesPct ( );
    void PutSuppressShortEdgesPct ( double _val );
    double GetAutoBoundarySmallSurfPct ( );
    void PutAutoBoundarySmallSurfPct ( double _val );
    VARIANT_BOOL GetRefinementRatioOn ( );
    void PutRefinementRatioOn ( VARIANT_BOOL _val );
    double GetRefinementRatio ( );
    void PutRefinementRatio ( double _val );
    VARIANT_BOOL GetRefineSurfaceMesh ( );
    void PutRefineSurfaceMesh ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAdjacentSurfaceMatching ( );
    void PutAdjacentSurfaceMatching ( VARIANT_BOOL _val );
    VARIANT_BOOL GetRemovePreviousSlaving ( );
    void PutRemovePreviousSlaving ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAdjustColors ( );
    void PutAdjustColors ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSkipSizingOnSlaved ( );
    void PutSkipSizingOnSlaved ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPreV10Meshing ( );
    void PutPreV10Meshing ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMidsideMoveToGeometry ( );
    void PutMidsideMoveToGeometry ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMidsideMaxDistortionAngleOn ( );
    void PutMidsideMaxDistortionAngleOn ( VARIANT_BOOL _val );
    double GetMidsideMaxDistortionAngle ( );
    void PutMidsideMaxDistortionAngle ( double _val );
    VARIANT_BOOL GetConnectEdgeNodesOn ( );
    void PutConnectEdgeNodesOn ( VARIANT_BOOL _val );
    double GetConnectEdgeNodes ( );
    void PutConnectEdgeNodes ( double _val );
    VARIANT_BOOL GetSmoothingLaplacian ( );
    void PutSmoothingLaplacian ( VARIANT_BOOL _val );
    int GetSmoothingIterations ( );
    void PutSmoothingIterations ( int _val );
    double GetSmoothingTolerance ( );
    void PutSmoothingTolerance ( double _val );
    enum zMeshOffsetFrom GetOffsetMeshMode ( );
    void PutOffsetMeshMode ( enum zMeshOffsetFrom _val );
    double GetOffsetMeshDistance ( );
    void PutOffsetMeshDistance ( double _val );
    double GetMapMaxAngleDeviation ( );
    void PutMapMaxAngleDeviation ( double _val );
    double GetMapMinCornerAngle ( );
    void PutMapMinCornerAngle ( double _val );
    VARIANT_BOOL GetMapEqualSidesOnly ( );
    void PutMapEqualSidesOnly ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMapSubdivisions ( );
    void PutMapSubdivisions ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMapSplitQuadMap ( );
    void PutMapSplitQuadMap ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMapAlternateBias ( );
    void PutMapAlternateBias ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMapRightBias ( );
    void PutMapRightBias ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPostMeshingCleanup ( );
    void PutPostMeshingCleanup ( VARIANT_BOOL _val );
    int GetQuadEdgeLayers ( );
    void PutQuadEdgeLayers ( int _val );
    double GetCutQuadDeviationAngle ( );
    void PutCutQuadDeviationAngle ( double _val );
    int GetMinElemBetweenBoundary ( );
    void PutMinElemBetweenBoundary ( int _val );
    double GetMaxElemAspectRatio ( );
    void PutMaxElemAspectRatio ( double _val );
    VARIANT_BOOL GetQuickCutBoundaryOn ( );
    void PutQuickCutBoundaryOn ( VARIANT_BOOL _val );
    int GetQuickCutMaxNodes ( );
    void PutQuickCutMaxNodes ( int _val );
    VARIANT_BOOL GetAttributePropOnly ( );
    void PutAttributePropOnly ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTetStatusMessages ( );
    void PutTetStatusMessages ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTetQualityToDataTable ( );
    void PutTetQualityToDataTable ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTetCheckSurfaceElem ( );
    void PutTetCheckSurfaceElem ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTetDeleteSurfaceElem ( );
    void PutTetDeleteSurfaceElem ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTetSmoothSolidElemOn ( );
    void PutTetSmoothSolidElemOn ( VARIANT_BOOL _val );
    double GetTetSmoothSolidElem ( );
    void PutTetSmoothSolidElem ( double _val );
    VARIANT_BOOL GetTetMidsideMoveToGeometry ( );
    void PutTetMidsideMoveToGeometry ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTetMidsideMaxDistortionAngleOn ( );
    void PutTetMidsideMaxDistortionAngleOn ( VARIANT_BOOL _val );
    double GetTetMidsideMaxDistortionAngle ( );
    void PutTetMidsideMaxDistortionAngle ( double _val );
    VARIANT_BOOL GetTetAdjustNodalPrecision ( );
    void PutTetAdjustNodalPrecision ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTetMeshVoids ( );
    void PutTetMeshVoids ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTetPreV10Meshing ( );
    void PutTetPreV10Meshing ( VARIANT_BOOL _val );
    VARIANT_BOOL GetRemovePreviousOnly ( );
    void PutRemovePreviousOnly ( VARIANT_BOOL _val );
    VARIANT_BOOL GetRemovePreviousPrep ( );
    void PutRemovePreviousPrep ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDeletePreviousMesh ( );
    void PutDeletePreviousMesh ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSilent ( );
    void PutSilent ( VARIANT_BOOL _val );
    int GetFixedGroupID ( );
    void PutFixedGroupID ( int _val );
};

enum zMesherType
{
    FMSH_AUTO = 0,
    FMSH_SUBDIVISION = 1,
    FMSH_FASTTRI = 2,
    FMSH_3DTRI = 3
};

enum zMeshOffsetFrom
{
    FMOF_CENTERLINE = 0,
    FMOF_TOP = 1,
    FMOF_BOTTOM = 2
};

struct __declspec(uuid("b0bd5ea5-c79d-4140-83ff-0642f66d2f37"))
Mesher;
    // [ default ] dispinterface IMesher

struct __declspec(uuid("ded875d4-7d90-445b-89c7-17d709db45f9"))
IElementQuality : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAspectRatioOn,put=PutAspectRatioOn))
    VARIANT_BOOL AspectRatioOn;
    __declspec(property(get=GetTaperOn,put=PutTaperOn))
    VARIANT_BOOL TaperOn;
    __declspec(property(get=GetAlternateTaperOn,put=PutAlternateTaperOn))
    VARIANT_BOOL AlternateTaperOn;
    __declspec(property(get=GetInternalAngleOn,put=PutInternalAngleOn))
    VARIANT_BOOL InternalAngleOn;
    __declspec(property(get=GetSkewOn,put=PutSkewOn))
    VARIANT_BOOL SkewOn;
    __declspec(property(get=GetWarpingOn,put=PutWarpingOn))
    VARIANT_BOOL WarpingOn;
    __declspec(property(get=GetNastranWarpingOn,put=PutNastranWarpingOn))
    VARIANT_BOOL NastranWarpingOn;
    __declspec(property(get=GetTetCollapseOn,put=PutTetCollapseOn))
    VARIANT_BOOL TetCollapseOn;
    __declspec(property(get=GetJacobianOn,put=PutJacobianOn))
    VARIANT_BOOL JacobianOn;
    __declspec(property(get=GetCombinedOn,put=PutCombinedOn))
    VARIANT_BOOL CombinedOn;
    __declspec(property(get=GetExplicitTimeStepOn,put=PutExplicitTimeStepOn))
    VARIANT_BOOL ExplicitTimeStepOn;
    __declspec(property(get=GetAspectRatioLimit,put=PutAspectRatioLimit))
    double AspectRatioLimit;
    __declspec(property(get=GetTaperLimit,put=PutTaperLimit))
    double TaperLimit;
    __declspec(property(get=GetAlternateTaperLimit,put=PutAlternateTaperLimit))
    double AlternateTaperLimit;
    __declspec(property(get=GetInternalAngleLimit,put=PutInternalAngleLimit))
    double InternalAngleLimit;
    __declspec(property(get=GetSkewLimit,put=PutSkewLimit))
    double SkewLimit;
    __declspec(property(get=GetWarpingLimit,put=PutWarpingLimit))
    double WarpingLimit;
    __declspec(property(get=GetNastranWarpingLimit,put=PutNastranWarpingLimit))
    double NastranWarpingLimit;
    __declspec(property(get=GetTetCollapseLimit,put=PutTetCollapseLimit))
    double TetCollapseLimit;
    __declspec(property(get=GetJacobianLimit,put=PutJacobianLimit))
    double JacobianLimit;
    __declspec(property(get=GetCombinedLimit,put=PutCombinedLimit))
    double CombinedLimit;
    __declspec(property(get=GetExplicitTimeStepLimit,put=PutExplicitTimeStepLimit))
    double ExplicitTimeStepLimit;
    __declspec(property(get=GetNastranQuadSkewOn,put=PutNastranQuadSkewOn))
    VARIANT_BOOL NastranQuadSkewOn;
    __declspec(property(get=GetNastranQuadSkewLimit,put=PutNastranQuadSkewLimit))
    double NastranQuadSkewLimit;
    __declspec(property(get=GetNastranQuadTaperOn,put=PutNastranQuadTaperOn))
    VARIANT_BOOL NastranQuadTaperOn;
    __declspec(property(get=GetNastranQuadTaperLimit,put=PutNastranQuadTaperLimit))
    double NastranQuadTaperLimit;
    __declspec(property(get=GetNastranQuadWarpOn,put=PutNastranQuadWarpOn))
    VARIANT_BOOL NastranQuadWarpOn;
    __declspec(property(get=GetNastranQuadWarpLimit,put=PutNastranQuadWarpLimit))
    double NastranQuadWarpLimit;
    __declspec(property(get=GetNastranQuadIAMinOn,put=PutNastranQuadIAMinOn))
    VARIANT_BOOL NastranQuadIAMinOn;
    __declspec(property(get=GetNastranQuadIAMinLimit,put=PutNastranQuadIAMinLimit))
    double NastranQuadIAMinLimit;
    __declspec(property(get=GetNastranQuadIAMaxOn,put=PutNastranQuadIAMaxOn))
    VARIANT_BOOL NastranQuadIAMaxOn;
    __declspec(property(get=GetNastranQuadIAMaxLimit,put=PutNastranQuadIAMaxLimit))
    double NastranQuadIAMaxLimit;
    __declspec(property(get=GetNastranTriaSkewOn,put=PutNastranTriaSkewOn))
    VARIANT_BOOL NastranTriaSkewOn;
    __declspec(property(get=GetNastranTriaSkewLimit,put=PutNastranTriaSkewLimit))
    double NastranTriaSkewLimit;
    __declspec(property(get=GetNastranTriaIAMaxOn,put=PutNastranTriaIAMaxOn))
    VARIANT_BOOL NastranTriaIAMaxOn;
    __declspec(property(get=GetNastranTriaIAMaxLimit,put=PutNastranTriaIAMaxLimit))
    double NastranTriaIAMaxLimit;
    __declspec(property(get=GetNastranTetraAROn,put=PutNastranTetraAROn))
    VARIANT_BOOL NastranTetraAROn;
    __declspec(property(get=GetNastranTetraARLimit,put=PutNastranTetraARLimit))
    double NastranTetraARLimit;
    __declspec(property(get=GetNastranTetraEPLROn,put=PutNastranTetraEPLROn))
    VARIANT_BOOL NastranTetraEPLROn;
    __declspec(property(get=GetNastranTetraEPLRLimit,put=PutNastranTetraEPLRLimit))
    double NastranTetraEPLRLimit;
    __declspec(property(get=GetNastranTetraDetJOn,put=PutNastranTetraDetJOn))
    VARIANT_BOOL NastranTetraDetJOn;
    __declspec(property(get=GetNastranTetraDetJLimit,put=PutNastranTetraDetJLimit))
    double NastranTetraDetJLimit;
    __declspec(property(get=GetNastranHexAROn,put=PutNastranHexAROn))
    VARIANT_BOOL NastranHexAROn;
    __declspec(property(get=GetNastranHexARLimit,put=PutNastranHexARLimit))
    double NastranHexARLimit;
    __declspec(property(get=GetNastranHexEPLROn,put=PutNastranHexEPLROn))
    VARIANT_BOOL NastranHexEPLROn;
    __declspec(property(get=GetNastranHexEPLRLimit,put=PutNastranHexEPLRLimit))
    double NastranHexEPLRLimit;
    __declspec(property(get=GetNastranHexDetJOn,put=PutNastranHexDetJOn))
    VARIANT_BOOL NastranHexDetJOn;
    __declspec(property(get=GetNastranHexDetJLimit,put=PutNastranHexDetJLimit))
    double NastranHexDetJLimit;
    __declspec(property(get=GetNastranHexWarpOn,put=PutNastranHexWarpOn))
    VARIANT_BOOL NastranHexWarpOn;
    __declspec(property(get=GetNastranHexWarpLimit,put=PutNastranHexWarpLimit))
    double NastranHexWarpLimit;
    __declspec(property(get=GetNastranPenAROn,put=PutNastranPenAROn))
    VARIANT_BOOL NastranPenAROn;
    __declspec(property(get=GetNastranPenARLimit,put=PutNastranPenARLimit))
    double NastranPenARLimit;
    __declspec(property(get=GetNastranPenEPLROn,put=PutNastranPenEPLROn))
    VARIANT_BOOL NastranPenEPLROn;
    __declspec(property(get=GetNastranPenEPLRLimit,put=PutNastranPenEPLRLimit))
    double NastranPenEPLRLimit;
    __declspec(property(get=GetNastranPenDetJOn,put=PutNastranPenDetJOn))
    VARIANT_BOOL NastranPenDetJOn;
    __declspec(property(get=GetNastranPenDetJLimit,put=PutNastranPenDetJLimit))
    double NastranPenDetJLimit;
    __declspec(property(get=GetNastranPenWarpOn,put=PutNastranPenWarpOn))
    VARIANT_BOOL NastranPenWarpOn;
    __declspec(property(get=GetNastranPenWarpLimit,put=PutNastranPenWarpLimit))
    double NastranPenWarpLimit;
    __declspec(property(get=GetNastranPyrAROn,put=PutNastranPyrAROn))
    VARIANT_BOOL NastranPyrAROn;
    __declspec(property(get=GetNastranPyrARLimit,put=PutNastranPyrARLimit))
    double NastranPyrARLimit;
    __declspec(property(get=GetNastranPyrEPLROn,put=PutNastranPyrEPLROn))
    VARIANT_BOOL NastranPyrEPLROn;
    __declspec(property(get=GetNastranPyrEPLRLimit,put=PutNastranPyrEPLRLimit))
    double NastranPyrEPLRLimit;
    __declspec(property(get=GetNastranPyrDetJOn,put=PutNastranPyrDetJOn))
    VARIANT_BOOL NastranPyrDetJOn;
    __declspec(property(get=GetNastranPyrDetJLimit,put=PutNastranPyrDetJLimit))
    double NastranPyrDetJLimit;
    __declspec(property(get=GetNastranPyrWarpOn,put=PutNastranPyrWarpOn))
    VARIANT_BOOL NastranPyrWarpOn;
    __declspec(property(get=GetNastranPyrWarpLimit,put=PutNastranPyrWarpLimit))
    double NastranPyrWarpLimit;
    __declspec(property(get=GetNastranQuadAROn,put=PutNastranQuadAROn))
    VARIANT_BOOL NastranQuadAROn;
    __declspec(property(get=GetNastranQuadARLimit,put=PutNastranQuadARLimit))
    double NastranQuadARLimit;
    __declspec(property(get=GetNastranTriaAROn,put=PutNastranTriaAROn))
    VARIANT_BOOL NastranTriaAROn;
    __declspec(property(get=GetNastranTriaARLimit,put=PutNastranTriaARLimit))
    double NastranTriaARLimit;
    __declspec(property(get=GetNastranTriaEPLROn,put=PutNastranTriaEPLROn))
    VARIANT_BOOL NastranTriaEPLROn;
    __declspec(property(get=GetNastranTriaEPLRLimit,put=PutNastranTriaEPLRLimit))
    double NastranTriaEPLRLimit;
    __declspec(property(get=GetNastranTetraEPIAOn,put=PutNastranTetraEPIAOn))
    VARIANT_BOOL NastranTetraEPIAOn;
    __declspec(property(get=GetNastranTetraEPIALimit,put=PutNastranTetraEPIALimit))
    double NastranTetraEPIALimit;
    __declspec(property(get=GetNastranHexEPIAOn,put=PutNastranHexEPIAOn))
    VARIANT_BOOL NastranHexEPIAOn;
    __declspec(property(get=GetNastranHexEPIALimit,put=PutNastranHexEPIALimit))
    double NastranHexEPIALimit;
    __declspec(property(get=GetNastranPenEPIAOn,put=PutNastranPenEPIAOn))
    VARIANT_BOOL NastranPenEPIAOn;
    __declspec(property(get=GetNastranPenEPIALimit,put=PutNastranPenEPIALimit))
    double NastranPenEPIALimit;
    __declspec(property(get=GetNastranPyrEPIAOn,put=PutNastranPyrEPIAOn))
    VARIANT_BOOL NastranPyrEPIAOn;
    __declspec(property(get=GetNastranPyrEPIALimit,put=PutNastranPyrEPIALimit))
    double NastranPyrEPIALimit;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode clear ( );
    enum zReturnCode GetAspectRatio (
        int nElemID,
        double * pdValue );
    ISortSetPtr AspectRatio (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetTaper (
        int nElemID,
        double * pdValue );
    ISortSetPtr Taper (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetAlternateTaper (
        int nElemID,
        double * pdValue );
    ISortSetPtr AlternateTaper (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetInternalAngle (
        int nElemID,
        double * pdValue );
    ISortSetPtr InternalAngle (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetSkew (
        int nElemID,
        double * pdValue );
    ISortSetPtr Skew (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetWarping (
        int nElemID,
        double * pdValue );
    ISortSetPtr Warping (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranWarping (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranWarping (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetTetCollapse (
        int nElemID,
        double * pdValue );
    ISortSetPtr TetCollapse (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetJacobian (
        int nElemID,
        double * pdValue );
    ISortSetPtr Jacobian (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetCombined (
        int nElemID,
        double * pdValue );
    ISortSetPtr Combined (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetExplicitTimeStep (
        int nElemID,
        double * pdValue );
    ISortSetPtr ExplicitTimeStep (
        int nElemSet,
        double dLimitVal );
    ISetPtr CheckQuality (
        int nElemSet,
        VARIANT_BOOL bList,
        VARIANT_BOOL bGroup );
    enum zReturnCode SetModelDefaults ( );
    enum zReturnCode GetModelDefaults ( );
    enum zReturnCode GetNastranQuadSkew (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranQuadSkew (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranQuadTaper (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranQuadTaper (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranQuadWarp (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranQuadWarp (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranQuadIAMin (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranQuadIAMin (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranQuadIAMax (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranQuadIAMax (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranTriaSkew (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranTriaSkew (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranTriaIAMax (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranTriaIAMax (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranTetraAR (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranTetraAR (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranTetraEPLR (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranTetraEPLR (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranTetraDetJ (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranTetraDetJ (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranHexAR (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranHexAR (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranHexEPLR (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranHexEPLR (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranHexDetJ (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranHexDetJ (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranHexWarp (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranHexWarp (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranPenAR (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranPenAR (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranPenEPLR (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranPenEPLR (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranPenDetJ (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranPenDetJ (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranPenWarp (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranPenWarp (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranPyrAR (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranPyrAR (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranPyrEPLR (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranPyrEPLR (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranPyrWarp (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranPyrWarp (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranPyrDetJ (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranPyrDetJ (
        int nElemSet,
        double dLimitVal );
    ISetPtr CheckNastranQuality (
        int nElemSet,
        VARIANT_BOOL bList,
        VARIANT_BOOL bGroup );
    enum zReturnCode GetNastranQuadAR (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranQuadAR (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranTriaAR (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranTriaAR (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranTriaEPLR (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranTriaEPLR (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranTetraEPIA (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranTetraEPIA (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranHexEPIA (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranHexEPIA (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranPenEPIA (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranPenEPIA (
        int nElemSet,
        double dLimitVal );
    enum zReturnCode GetNastranPyrEPIA (
        int nElemID,
        double * pdValue );
    ISortSetPtr NastranPyrEPIA (
        int nElemSet,
        double dLimitVal );

    // Properties:
    VARIANT_BOOL GetAspectRatioOn ( );
    void PutAspectRatioOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTaperOn ( );
    void PutTaperOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAlternateTaperOn ( );
    void PutAlternateTaperOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetInternalAngleOn ( );
    void PutInternalAngleOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSkewOn ( );
    void PutSkewOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetWarpingOn ( );
    void PutWarpingOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNastranWarpingOn ( );
    void PutNastranWarpingOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTetCollapseOn ( );
    void PutTetCollapseOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetJacobianOn ( );
    void PutJacobianOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetCombinedOn ( );
    void PutCombinedOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetExplicitTimeStepOn ( );
    void PutExplicitTimeStepOn ( VARIANT_BOOL _val );
    double GetAspectRatioLimit ( );
    void PutAspectRatioLimit ( double _val );
    double GetTaperLimit ( );
    void PutTaperLimit ( double _val );
    double GetAlternateTaperLimit ( );
    void PutAlternateTaperLimit ( double _val );
    double GetInternalAngleLimit ( );
    void PutInternalAngleLimit ( double _val );
    double GetSkewLimit ( );
    void PutSkewLimit ( double _val );
    double GetWarpingLimit ( );
    void PutWarpingLimit ( double _val );
    double GetNastranWarpingLimit ( );
    void PutNastranWarpingLimit ( double _val );
    double GetTetCollapseLimit ( );
    void PutTetCollapseLimit ( double _val );
    double GetJacobianLimit ( );
    void PutJacobianLimit ( double _val );
    double GetCombinedLimit ( );
    void PutCombinedLimit ( double _val );
    double GetExplicitTimeStepLimit ( );
    void PutExplicitTimeStepLimit ( double _val );
    VARIANT_BOOL GetNastranQuadSkewOn ( );
    void PutNastranQuadSkewOn ( VARIANT_BOOL _val );
    double GetNastranQuadSkewLimit ( );
    void PutNastranQuadSkewLimit ( double _val );
    VARIANT_BOOL GetNastranQuadTaperOn ( );
    void PutNastranQuadTaperOn ( VARIANT_BOOL _val );
    double GetNastranQuadTaperLimit ( );
    void PutNastranQuadTaperLimit ( double _val );
    VARIANT_BOOL GetNastranQuadWarpOn ( );
    void PutNastranQuadWarpOn ( VARIANT_BOOL _val );
    double GetNastranQuadWarpLimit ( );
    void PutNastranQuadWarpLimit ( double _val );
    VARIANT_BOOL GetNastranQuadIAMinOn ( );
    void PutNastranQuadIAMinOn ( VARIANT_BOOL _val );
    double GetNastranQuadIAMinLimit ( );
    void PutNastranQuadIAMinLimit ( double _val );
    VARIANT_BOOL GetNastranQuadIAMaxOn ( );
    void PutNastranQuadIAMaxOn ( VARIANT_BOOL _val );
    double GetNastranQuadIAMaxLimit ( );
    void PutNastranQuadIAMaxLimit ( double _val );
    VARIANT_BOOL GetNastranTriaSkewOn ( );
    void PutNastranTriaSkewOn ( VARIANT_BOOL _val );
    double GetNastranTriaSkewLimit ( );
    void PutNastranTriaSkewLimit ( double _val );
    VARIANT_BOOL GetNastranTriaIAMaxOn ( );
    void PutNastranTriaIAMaxOn ( VARIANT_BOOL _val );
    double GetNastranTriaIAMaxLimit ( );
    void PutNastranTriaIAMaxLimit ( double _val );
    VARIANT_BOOL GetNastranTetraAROn ( );
    void PutNastranTetraAROn ( VARIANT_BOOL _val );
    double GetNastranTetraARLimit ( );
    void PutNastranTetraARLimit ( double _val );
    VARIANT_BOOL GetNastranTetraEPLROn ( );
    void PutNastranTetraEPLROn ( VARIANT_BOOL _val );
    double GetNastranTetraEPLRLimit ( );
    void PutNastranTetraEPLRLimit ( double _val );
    VARIANT_BOOL GetNastranTetraDetJOn ( );
    void PutNastranTetraDetJOn ( VARIANT_BOOL _val );
    double GetNastranTetraDetJLimit ( );
    void PutNastranTetraDetJLimit ( double _val );
    VARIANT_BOOL GetNastranHexAROn ( );
    void PutNastranHexAROn ( VARIANT_BOOL _val );
    double GetNastranHexARLimit ( );
    void PutNastranHexARLimit ( double _val );
    VARIANT_BOOL GetNastranHexEPLROn ( );
    void PutNastranHexEPLROn ( VARIANT_BOOL _val );
    double GetNastranHexEPLRLimit ( );
    void PutNastranHexEPLRLimit ( double _val );
    VARIANT_BOOL GetNastranHexDetJOn ( );
    void PutNastranHexDetJOn ( VARIANT_BOOL _val );
    double GetNastranHexDetJLimit ( );
    void PutNastranHexDetJLimit ( double _val );
    VARIANT_BOOL GetNastranHexWarpOn ( );
    void PutNastranHexWarpOn ( VARIANT_BOOL _val );
    double GetNastranHexWarpLimit ( );
    void PutNastranHexWarpLimit ( double _val );
    VARIANT_BOOL GetNastranPenAROn ( );
    void PutNastranPenAROn ( VARIANT_BOOL _val );
    double GetNastranPenARLimit ( );
    void PutNastranPenARLimit ( double _val );
    VARIANT_BOOL GetNastranPenEPLROn ( );
    void PutNastranPenEPLROn ( VARIANT_BOOL _val );
    double GetNastranPenEPLRLimit ( );
    void PutNastranPenEPLRLimit ( double _val );
    VARIANT_BOOL GetNastranPenDetJOn ( );
    void PutNastranPenDetJOn ( VARIANT_BOOL _val );
    double GetNastranPenDetJLimit ( );
    void PutNastranPenDetJLimit ( double _val );
    VARIANT_BOOL GetNastranPenWarpOn ( );
    void PutNastranPenWarpOn ( VARIANT_BOOL _val );
    double GetNastranPenWarpLimit ( );
    void PutNastranPenWarpLimit ( double _val );
    VARIANT_BOOL GetNastranPyrAROn ( );
    void PutNastranPyrAROn ( VARIANT_BOOL _val );
    double GetNastranPyrARLimit ( );
    void PutNastranPyrARLimit ( double _val );
    VARIANT_BOOL GetNastranPyrEPLROn ( );
    void PutNastranPyrEPLROn ( VARIANT_BOOL _val );
    double GetNastranPyrEPLRLimit ( );
    void PutNastranPyrEPLRLimit ( double _val );
    VARIANT_BOOL GetNastranPyrDetJOn ( );
    void PutNastranPyrDetJOn ( VARIANT_BOOL _val );
    double GetNastranPyrDetJLimit ( );
    void PutNastranPyrDetJLimit ( double _val );
    VARIANT_BOOL GetNastranPyrWarpOn ( );
    void PutNastranPyrWarpOn ( VARIANT_BOOL _val );
    double GetNastranPyrWarpLimit ( );
    void PutNastranPyrWarpLimit ( double _val );
    VARIANT_BOOL GetNastranQuadAROn ( );
    void PutNastranQuadAROn ( VARIANT_BOOL _val );
    double GetNastranQuadARLimit ( );
    void PutNastranQuadARLimit ( double _val );
    VARIANT_BOOL GetNastranTriaAROn ( );
    void PutNastranTriaAROn ( VARIANT_BOOL _val );
    double GetNastranTriaARLimit ( );
    void PutNastranTriaARLimit ( double _val );
    VARIANT_BOOL GetNastranTriaEPLROn ( );
    void PutNastranTriaEPLROn ( VARIANT_BOOL _val );
    double GetNastranTriaEPLRLimit ( );
    void PutNastranTriaEPLRLimit ( double _val );
    VARIANT_BOOL GetNastranTetraEPIAOn ( );
    void PutNastranTetraEPIAOn ( VARIANT_BOOL _val );
    double GetNastranTetraEPIALimit ( );
    void PutNastranTetraEPIALimit ( double _val );
    VARIANT_BOOL GetNastranHexEPIAOn ( );
    void PutNastranHexEPIAOn ( VARIANT_BOOL _val );
    double GetNastranHexEPIALimit ( );
    void PutNastranHexEPIALimit ( double _val );
    VARIANT_BOOL GetNastranPenEPIAOn ( );
    void PutNastranPenEPIAOn ( VARIANT_BOOL _val );
    double GetNastranPenEPIALimit ( );
    void PutNastranPenEPIALimit ( double _val );
    VARIANT_BOOL GetNastranPyrEPIAOn ( );
    void PutNastranPyrEPIAOn ( VARIANT_BOOL _val );
    double GetNastranPyrEPIALimit ( );
    void PutNastranPyrEPIALimit ( double _val );
};

struct __declspec(uuid("ded875d6-7d90-445b-89c7-17d709db45f9"))
ElementQuality;
    // [ default ] dispinterface IElementQuality

struct __declspec(uuid("08b1c6b1-3124-4d88-be4c-dfe7642e817e"))
IStressLinear : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumElem,put=PutNumElem))
    int NumElem;
    __declspec(property(get=GetDataMode,put=PutDataMode))
    int DataMode;
    __declspec(property(get=GetAvgMode,put=PutAvgMode))
    int AvgMode;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode clear ( );
    enum zReturnCode AddElem (
        int nElemSet );
    enum zReturnCode ElemAlongLine (
        const _variant_t & vXYZ1,
        const _variant_t & vXYZ2,
        int nSetID );
    enum zReturnCode LoadData (
        int nElemSet,
        VARIANT_BOOL bSolids,
        int dataType,
        int setID,
        int vectorID );
    enum zReturnCode FindElemWithXYZ (
        const _variant_t & vXYZ,
        int * elemID,
        int * virtElemID );
    enum zReturnCode GetInterpValues (
        const _variant_t & vXYZ,
        int virtElemID,
        VARIANT * values );
    enum zReturnCode Transform3DStress (
        int cSysFromID,
        int cSysToID,
        const _variant_t & vStressTensorIn,
        VARIANT * vStressTensorOut );
    enum zReturnCode CalcSolidPrinStresses (
        const _variant_t & vStressTensorIn,
        VARIANT * vPrinTrescaData );

    // Properties:
    int GetNumElem ( );
    void PutNumElem ( int _val );
    int GetDataMode ( );
    void PutDataMode ( int _val );
    int GetAvgMode ( );
    void PutAvgMode ( int _val );
};

struct __declspec(uuid("08b1c6b3-3124-4d88-be4c-dfe7642e817e"))
StressLinear;
    // [ default ] dispinterface IStressLinear

struct __declspec(uuid("90561a64-eb1f-11d4-9447-001083fff11c"))
IDBase : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("90561a66-eb1f-11d4-9447-001083fff11c"))
DBase;
    // [ default ] dispinterface IDBase

struct __declspec(uuid("ab06c174-0e7e-11d5-9471-001083fff11c"))
IAnalysisCase : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNasSubseqCase,put=PutNasSubseqCase))
    int NasSubseqCase[];
    __declspec(property(get=GetNasSubseqFactor,put=PutNasSubseqFactor))
    double NasSubseqFactor[];
    __declspec(property(get=GetBCSet,put=PutBCSet))
    int BCSet[];
    __declspec(property(get=GetOutput,put=PutOutput))
    int Output[];
    __declspec(property(get=GetNasCnlConvergenceFlags,put=PutNasCnlConvergenceFlags))
    VARIANT_BOOL NasCnlConvergenceFlags[];
    __declspec(property(get=GetNasCnlConvergenceValue,put=PutNasCnlConvergenceValue))
    double NasCnlConvergenceValue[];
    __declspec(property(get=GetMSCNasCnlConvergenceFlags,put=PutMSCNasCnlConvergenceFlags))
    VARIANT_BOOL MSCNasCnlConvergenceFlags[];
    __declspec(property(get=GetCaseTitle,put=PutCaseTitle))
    _bstr_t CaseTitle;
    __declspec(property(get=GetcaseID,put=PutcaseID))
    int caseID;
    __declspec(property(get=GetEcho,put=PutEcho))
    _bstr_t Echo;
    __declspec(property(get=GetSkipStandard,put=PutSkipStandard))
    VARIANT_BOOL SkipStandard;
    __declspec(property(get=GetStartText,put=PutStartText))
    int StartText;
    __declspec(property(get=GetEndText,put=PutEndText))
    int EndText;
    __declspec(property(get=GetDestination,put=PutDestination))
    int Destination;
    __declspec(property(get=GetImaginary,put=PutImaginary))
    int Imaginary;
    __declspec(property(get=GetCornerOutput,put=PutCornerOutput))
    int CornerOutput;
    __declspec(property(get=GetIntegrationOutput,put=PutIntegrationOutput))
    int IntegrationOutput;
    __declspec(property(get=GetAbaHistOn,put=PutAbaHistOn))
    VARIANT_BOOL AbaHistOn;
    __declspec(property(get=GetAbaHistTimePeriod,put=PutAbaHistTimePeriod))
    double AbaHistTimePeriod;
    __declspec(property(get=GetAbaHistInitTimeInc,put=PutAbaHistInitTimeInc))
    double AbaHistInitTimeInc;
    __declspec(property(get=GetAbaHistMinTimeInc,put=PutAbaHistMinTimeInc))
    double AbaHistMinTimeInc;
    __declspec(property(get=GetAbaHistMaxTimeInc,put=PutAbaHistMaxTimeInc))
    double AbaHistMaxTimeInc;
    __declspec(property(get=GetAbaHistEigenvectors,put=PutAbaHistEigenvectors))
    int AbaHistEigenvectors;
    __declspec(property(get=GetAbaHistMinFreq,put=PutAbaHistMinFreq))
    double AbaHistMinFreq;
    __declspec(property(get=GetAbaHistMaxFreq,put=PutAbaHistMaxFreq))
    double AbaHistMaxFreq;
    __declspec(property(get=GetAbaHistShiftFreq,put=PutAbaHistShiftFreq))
    double AbaHistShiftFreq;
    __declspec(property(get=GetAbaHistScaleFactor,put=PutAbaHistScaleFactor))
    double AbaHistScaleFactor;
    __declspec(property(get=GetAbaHistOutInterval,put=PutAbaHistOutInterval))
    int AbaHistOutInterval;
    __declspec(property(get=GetAbaHistNonlinGeom,put=PutAbaHistNonlinGeom))
    VARIANT_BOOL AbaHistNonlinGeom;
    __declspec(property(get=GetAbaHistLinearPert,put=PutAbaHistLinearPert))
    VARIANT_BOOL AbaHistLinearPert;
    __declspec(property(get=GetAbaHistAutoContact,put=PutAbaHistAutoContact))
    VARIANT_BOOL AbaHistAutoContact;
    __declspec(property(get=GetAbaHistStabilize,put=PutAbaHistStabilize))
    VARIANT_BOOL AbaHistStabilize;
    __declspec(property(get=GetAbaHistOutZeroInc,put=PutAbaHistOutZeroInc))
    VARIANT_BOOL AbaHistOutZeroInc;
    __declspec(property(get=GetAbaHistStepAmp,put=PutAbaHistStepAmp))
    int AbaHistStepAmp;
    __declspec(property(get=GetAbaHistStepLoad,put=PutAbaHistStepLoad))
    int AbaHistStepLoad;
    __declspec(property(get=GetAbaHistStepConstr,put=PutAbaHistStepConstr))
    int AbaHistStepConstr;
    __declspec(property(get=GetAbaHistAnalysisType,put=PutAbaHistAnalysisType))
    enum zAnalysisType AbaHistAnalysisType;
    __declspec(property(get=GetAnsDOFOn,put=PutAnsDOFOn))
    VARIANT_BOOL AnsDOFOn;
    __declspec(property(get=GetAnsDOFDoSet,put=PutAnsDOFDoSet))
    VARIANT_BOOL AnsDOFDoSet;
    __declspec(property(get=GetAnsDOFAutomatic,put=PutAnsDOFAutomatic))
    VARIANT_BOOL AnsDOFAutomatic;
    __declspec(property(get=GetAnsDOFNoRotation,put=PutAnsDOFNoRotation))
    VARIANT_BOOL AnsDOFNoRotation;
    __declspec(property(get=GetAnsDOFSetID,put=PutAnsDOFSetID))
    int AnsDOFSetID;
    __declspec(property(get=GetAnsDOFNumber,put=PutAnsDOFNumber))
    int AnsDOFNumber;
    __declspec(property(get=GetAnsModesOn,put=PutAnsModesOn))
    VARIANT_BOOL AnsModesOn;
    __declspec(property(get=GetAnsModesNumModes,put=PutAnsModesNumModes))
    int AnsModesNumModes;
    __declspec(property(get=GetAnsModesMinFreq,put=PutAnsModesMinFreq))
    double AnsModesMinFreq;
    __declspec(property(get=GetAnsModesMaxFreq,put=PutAnsModesMaxFreq))
    double AnsModesMaxFreq;
    __declspec(property(get=GetAnsModesModalMethod,put=PutAnsModesModalMethod))
    double AnsModesModalMethod;
    __declspec(property(get=GetAnsModesElemResults,put=PutAnsModesElemResults))
    VARIANT_BOOL AnsModesElemResults;
    __declspec(property(get=GetAnsHeatOn,put=PutAnsHeatOn))
    VARIANT_BOOL AnsHeatOn;
    __declspec(property(get=GetAnsHeatEndTime,put=PutAnsHeatEndTime))
    double AnsHeatEndTime;
    __declspec(property(get=GetAnsHeatTimeStep,put=PutAnsHeatTimeStep))
    double AnsHeatTimeStep;
    __declspec(property(get=GetAnsHeatOutputFreq,put=PutAnsHeatOutputFreq))
    int AnsHeatOutputFreq;
    __declspec(property(get=GetMarHistOn,put=PutMarHistOn))
    VARIANT_BOOL MarHistOn;
    __declspec(property(get=GetMarHistContactProp,put=PutMarHistContactProp))
    int MarHistContactProp;
    __declspec(property(get=GetMarHistCtrlMethod,put=PutMarHistCtrlMethod))
    int MarHistCtrlMethod;
    __declspec(property(get=GetMarHistSolverMeth,put=PutMarHistSolverMeth))
    int MarHistSolverMeth;
    __declspec(property(get=GetMarHistCtrlMaxStep,put=PutMarHistCtrlMaxStep))
    int MarHistCtrlMaxStep;
    __declspec(property(get=GetMarHistCtrlMaxRecycle,put=PutMarHistCtrlMaxRecycle))
    int MarHistCtrlMaxRecycle;
    __declspec(property(get=GetMarHistCtrlMinRecycle,put=PutMarHistCtrlMinRecycle))
    int MarHistCtrlMinRecycle;
    __declspec(property(get=GetMarHistMaxResidual,put=PutMarHistMaxResidual))
    double MarHistMaxResidual;
    __declspec(property(get=GetMarHistConvergeMeth,put=PutMarHistConvergeMeth))
    int MarHistConvergeMeth;
    __declspec(property(get=GetMarHistNonPosDefinite,put=PutMarHistNonPosDefinite))
    VARIANT_BOOL MarHistNonPosDefinite;
    __declspec(property(get=GetMarHistNonSymmetric,put=PutMarHistNonSymmetric))
    VARIANT_BOOL MarHistNonSymmetric;
    __declspec(property(get=GetMarHistModalMinFreq,put=PutMarHistModalMinFreq))
    double MarHistModalMinFreq;
    __declspec(property(get=GetMarHistModalMaxFreq,put=PutMarHistModalMaxFreq))
    double MarHistModalMaxFreq;
    __declspec(property(get=GetMarHistModalEigen,put=PutMarHistModalEigen))
    int MarHistModalEigen;
    __declspec(property(get=GetMarHistChecking,put=PutMarHistChecking))
    int MarHistChecking;
    __declspec(property(get=GetMarHistAutoSwitch,put=PutMarHistAutoSwitch))
    VARIANT_BOOL MarHistAutoSwitch;
    __declspec(property(get=GetMarHistAnalCaseSol,put=PutMarHistAnalCaseSol))
    enum zAnalysisType MarHistAnalCaseSol;
    __declspec(property(get=GetMarHistBuckleNumModes,put=PutMarHistBuckleNumModes))
    int MarHistBuckleNumModes;
    __declspec(property(get=GetMarHistBucklePosEigen,put=PutMarHistBucklePosEigen))
    int MarHistBucklePosEigen;
    __declspec(property(get=GetMarIncOn,put=PutMarIncOn))
    VARIANT_BOOL MarIncOn;
    __declspec(property(get=GetMarIncArcLenMeth,put=PutMarIncArcLenMeth))
    int MarIncArcLenMeth;
    __declspec(property(get=GetMarIncTimePeriod,put=PutMarIncTimePeriod))
    double MarIncTimePeriod;
    __declspec(property(get=GetMarIncInitTimeInc,put=PutMarIncInitTimeInc))
    double MarIncInitTimeInc;
    __declspec(property(get=GetMarIncMinTimeInc,put=PutMarIncMinTimeInc))
    double MarIncMinTimeInc;
    __declspec(property(get=GetMarIncMaxTimeInc,put=PutMarIncMaxTimeInc))
    double MarIncMaxTimeInc;
    __declspec(property(get=GetMarIncScaleFact,put=PutMarIncScaleFact))
    double MarIncScaleFact;
    __declspec(property(get=GetMarIncMaxStep,put=PutMarIncMaxStep))
    int MarIncMaxStep;
    __declspec(property(get=GetMarIncNumOutInc,put=PutMarIncNumOutInc))
    int MarIncNumOutInc;
    __declspec(property(get=GetMarIncQuasiStatDamp,put=PutMarIncQuasiStatDamp))
    VARIANT_BOOL MarIncQuasiStatDamp;
    __declspec(property(get=GetMarIncFracFirst,put=PutMarIncFracFirst))
    double MarIncFracFirst;
    __declspec(property(get=GetMarIncMaxNumInc,put=PutMarIncMaxNumInc))
    int MarIncMaxNumInc;
    __declspec(property(get=GetMarIncCtrlMaxRecycle,put=PutMarIncCtrlMaxRecycle))
    int MarIncCtrlMaxRecycle;
    __declspec(property(get=GetMarIncMaxFracForAll,put=PutMarIncMaxFracForAll))
    double MarIncMaxFracForAll;
    __declspec(property(get=GetMarIncTotalTime,put=PutMarIncTotalTime))
    double MarIncTotalTime;
    __declspec(property(get=GetMarCtblOn,put=PutMarCtblOn))
    VARIANT_BOOL MarCtblOn;
    __declspec(property(get=GetMarCtblWrite,put=PutMarCtblWrite))
    VARIANT_BOOL MarCtblWrite;
    __declspec(property(get=GetNasOmodesOn,put=PutNasOmodesOn))
    VARIANT_BOOL NasOmodesOn;
    __declspec(property(get=GetNasOmodes,put=PutNasOmodes))
    _bstr_t NasOmodes;
    __declspec(property(get=GetvBCSet,put=PutvBCSet))
    _variant_t vBCSet;
    __declspec(property(get=GetvOutput,put=PutvOutput))
    _variant_t vOutput;
    __declspec(property(get=GetCaseType,put=PutCaseType))
    int CaseType;
    __declspec(property(get=GetDynHistOn,put=PutDynHistOn))
    VARIANT_BOOL DynHistOn;
    __declspec(property(get=GetDynHistBodyLoadGrp,put=PutDynHistBodyLoadGrp))
    int DynHistBodyLoadGrp;
    __declspec(property(get=GetDynHistMassDampOn,put=PutDynHistMassDampOn))
    VARIANT_BOOL DynHistMassDampOn;
    __declspec(property(get=GetDynHistMsssDamp,put=PutDynHistMsssDamp))
    double DynHistMsssDamp;
    __declspec(property(get=GetDynHistImplicit,put=PutDynHistImplicit))
    VARIANT_BOOL DynHistImplicit;
    __declspec(property(get=GetDynHistSpringback,put=PutDynHistSpringback))
    VARIANT_BOOL DynHistSpringback;
    __declspec(property(get=GetDynHistStrainOutput,put=PutDynHistStrainOutput))
    VARIANT_BOOL DynHistStrainOutput;
    __declspec(property(get=GetDynHistTotalTime,put=PutDynHistTotalTime))
    double DynHistTotalTime;
    __declspec(property(get=GetDynHistTimeHistOuput,put=PutDynHistTimeHistOuput))
    double DynHistTimeHistOuput;
    __declspec(property(get=GetDynHistPrintHistOutput,put=PutDynHistPrintHistOutput))
    double DynHistPrintHistOutput;
    __declspec(property(get=GetDynHistPlateIntgPts,put=PutDynHistPlateIntgPts))
    int DynHistPlateIntgPts;
    __declspec(property(get=GetDynHistGroupHistId,put=PutDynHistGroupHistId))
    int DynHistGroupHistId;
    __declspec(property(get=GetNasCnlOn,put=PutNasCnlOn))
    VARIANT_BOOL NasCnlOn;
    __declspec(property(get=GetNasCnlUseLoadSet,put=PutNasCnlUseLoadSet))
    VARIANT_BOOL NasCnlUseLoadSet;
    __declspec(property(get=GetNasCnlIncrements,put=PutNasCnlIncrements))
    int NasCnlIncrements;
    __declspec(property(get=GetNasCnlTime_Increment,put=PutNasCnlTime_Increment))
    double NasCnlTime_Increment;
    __declspec(property(get=GetNasCnlMaxIter,put=PutNasCnlMaxIter))
    int NasCnlMaxIter;
    __declspec(property(get=GetvNasCnlConvergenceFlags,put=PutvNasCnlConvergenceFlags))
    _variant_t vNasCnlConvergenceFlags;
    __declspec(property(get=GetvNasCnlConvergenceValue,put=PutvNasCnlConvergenceValue))
    _variant_t vNasCnlConvergenceValue;
    __declspec(property(get=GetNasCnlCtiffnessMethod,put=PutNasCnlCtiffnessMethod))
    int NasCnlCtiffnessMethod;
    __declspec(property(get=GetNasCnlKstep,put=PutNasCnlKstep))
    int NasCnlKstep;
    __declspec(property(get=GetNasCnlIntermediateOutput,put=PutNasCnlIntermediateOutput))
    int NasCnlIntermediateOutput;
    __declspec(property(get=GetNasCnlOutputInterval,put=PutNasCnlOutputInterval))
    int NasCnlOutputInterval;
    __declspec(property(get=GetNasCnlSolutionStrategy,put=PutNasCnlSolutionStrategy))
    int NasCnlSolutionStrategy;
    __declspec(property(get=GetNasCnlSolutionOverrides,put=PutNasCnlSolutionOverrides))
    int NasCnlSolutionOverrides;
    __declspec(property(get=GetNasCnlModnewtonLineSearch,put=PutNasCnlModnewtonLineSearch))
    VARIANT_BOOL NasCnlModnewtonLineSearch;
    __declspec(property(get=GetNasCnlModnewtonQuasiNewton,put=PutNasCnlModnewtonQuasiNewton))
    VARIANT_BOOL NasCnlModnewtonQuasiNewton;
    __declspec(property(get=GetNasCnlModnewtonBisection,put=PutNasCnlModnewtonBisection))
    VARIANT_BOOL NasCnlModnewtonBisection;
    __declspec(property(get=GetNasCnlArcConstraintType,put=PutNasCnlArcConstraintType))
    int NasCnlArcConstraintType;
    __declspec(property(get=GetNasCnlArcMinAdjust,put=PutNasCnlArcMinAdjust))
    double NasCnlArcMinAdjust;
    __declspec(property(get=GetNasCnlArcMaxAdjust,put=PutNasCnlArcMaxAdjust))
    double NasCnlArcMaxAdjust;
    __declspec(property(get=GetNasCnlArcLoadScale,put=PutNasCnlArcLoadScale))
    double NasCnlArcLoadScale;
    __declspec(property(get=GetNasCnlArcDesiredIter,put=PutNasCnlArcDesiredIter))
    int NasCnlArcDesiredIter;
    __declspec(property(get=GetNasCnlArcMaxSteps,put=PutNasCnlArcMaxSteps))
    int NasCnlArcMaxSteps;
    __declspec(property(get=GetNasCnlTimeSkipAdjust,put=PutNasCnlTimeSkipAdjust))
    int NasCnlTimeSkipAdjust;
    __declspec(property(get=GetNasCnlDominantPeriodSteps,put=PutNasCnlDominantPeriodSteps))
    int NasCnlDominantPeriodSteps;
    __declspec(property(get=GetNasCnlBoundsRb,put=PutNasCnlBoundsRb))
    double NasCnlBoundsRb;
    __declspec(property(get=GetNasCnlStabilityTolerance,put=PutNasCnlStabilityTolerance))
    double NasCnlStabilityTolerance;
    __declspec(property(get=GetNasCnlDivergenceLimit,put=PutNasCnlDivergenceLimit))
    int NasCnlDivergenceLimit;
    __declspec(property(get=GetNasCnlQuasiNewtonVectors,put=PutNasCnlQuasiNewtonVectors))
    int NasCnlQuasiNewtonVectors;
    __declspec(property(get=GetNasCnlMaxLineSearch,put=PutNasCnlMaxLineSearch))
    int NasCnlMaxLineSearch;
    __declspec(property(get=GetNasCnlLineSearchTolerance,put=PutNasCnlLineSearchTolerance))
    double NasCnlLineSearchTolerance;
    __declspec(property(get=GetNasCnlMaxBisections,put=PutNasCnlMaxBisections))
    int NasCnlMaxBisections;
    __declspec(property(get=GetNasCnlMaxRotation,put=PutNasCnlMaxRotation))
    double NasCnlMaxRotation;
    __declspec(property(get=GetNasCnlFstress,put=PutNasCnlFstress))
    double NasCnlFstress;
    __declspec(property(get=GetNasCnlMaxAdjust,put=PutNasCnlMaxAdjust))
    double NasCnlMaxAdjust;
    __declspec(property(get=GetNasCnlCreep,put=PutNasCnlCreep))
    VARIANT_BOOL NasCnlCreep;
    __declspec(property(get=GetNasCnlSkipNLPARM,put=PutNasCnlSkipNLPARM))
    VARIANT_BOOL NasCnlSkipNLPARM;
    __declspec(property(get=GetNasCaeOn,put=PutNasCaeOn))
    VARIANT_BOOL NasCaeOn;
    __declspec(property(get=GetNasCaeMachNumber,put=PutNasCaeMachNumber))
    double NasCaeMachNumber;
    __declspec(property(get=GetNasCaeDynPressure,put=PutNasCaeDynPressure))
    double NasCaeDynPressure;
    __declspec(property(get=GetNasCaeRigidTrim,put=PutNasCaeRigidTrim))
    VARIANT_BOOL NasCaeRigidTrim;
    __declspec(property(get=GetNasCaeWrtieTrim,put=PutNasCaeWrtieTrim))
    VARIANT_BOOL NasCaeWrtieTrim;
    __declspec(property(get=GetNasCflOn,put=PutNasCflOn))
    VARIANT_BOOL NasCflOn;
    __declspec(property(get=GetNasCflMethod,put=PutNasCflMethod))
    int NasCflMethod;
    __declspec(property(get=GetNasCflDenID,put=PutNasCflDenID))
    int NasCflDenID;
    __declspec(property(get=GetNasCflMachFactID,put=PutNasCflMachFactID))
    int NasCflMachFactID;
    __declspec(property(get=GetNasCflRfreqFactID,put=PutNasCflRfreqFactID))
    int NasCflRfreqFactID;
    __declspec(property(get=GetNasCflFliMethod,put=PutNasCflFliMethod))
    int NasCflFliMethod;
    __declspec(property(get=GetNasCflEig,put=PutNasCflEig))
    int NasCflEig;
    __declspec(property(get=GetNasCflEps,put=PutNasCflEps))
    double NasCflEps;
    __declspec(property(get=GetNasCflWriteFlutter,put=PutNasCflWriteFlutter))
    VARIANT_BOOL NasCflWriteFlutter;
    __declspec(property(get=GetNasSELoad,put=PutNasSELoad))
    int NasSELoad;
    __declspec(property(get=GetNasCflSdampID,put=PutNasCflSdampID))
    int NasCflSdampID;
    __declspec(property(get=GetNasCnlkDAMP,put=PutNasCnlkDAMP))
    VARIANT_BOOL NasCnlkDAMP;
    __declspec(property(get=GetNasCnlkUPDATE,put=PutNasCnlkUPDATE))
    int NasCnlkUPDATE;
    __declspec(property(get=GetNasRelEMotion,put=PutNasRelEMotion))
    VARIANT_BOOL NasRelEMotion;
    __declspec(property(get=GetNasCnlStiffnessMethod,put=PutNasCnlStiffnessMethod))
    int NasCnlStiffnessMethod;
    __declspec(property(get=GetCaseLabel,put=PutCaseLabel))
    _bstr_t CaseLabel;
    __declspec(property(get=GetContactOption,put=PutContactOption))
    int ContactOption;
    __declspec(property(get=GetContactSetType,put=PutContactSetType))
    int ContactSetType;
    __declspec(property(get=GetvMSCNasCnlConvergenceFlags,put=PutvMSCNasCnlConvergenceFlags))
    _variant_t vMSCNasCnlConvergenceFlags;
    __declspec(property(get=GetNasCurvatureStrain,put=PutNasCurvatureStrain))
    VARIANT_BOOL NasCurvatureStrain;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int GetNasSubseqCase (
        int nVectorIndex );
    void PutNasSubseqCase (
        int nVectorIndex,
        int _arg2 );
    double GetNasSubseqFactor (
        int nVectorIndex );
    void PutNasSubseqFactor (
        int nVectorIndex,
        double _arg2 );
    int GetBCSet (
        int nVectorIndex );
    void PutBCSet (
        int nVectorIndex,
        int _arg2 );
    int GetOutput (
        int nVectorIndex );
    void PutOutput (
        int nVectorIndex,
        int _arg2 );
    VARIANT_BOOL GetNasCnlConvergenceFlags (
        int nVectorIndex );
    void PutNasCnlConvergenceFlags (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double GetNasCnlConvergenceValue (
        int nVectorIndex );
    void PutNasCnlConvergenceValue (
        int nVectorIndex,
        double _arg2 );
    VARIANT_BOOL GetMSCNasCnlConvergenceFlags (
        int nVectorIndex );
    void PutMSCNasCnlConvergenceFlags (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode GetContactTable (
        int * Count,
        VARIANT * rowSeg,
        VARIANT * colSeg,
        VARIANT * tieType,
        VARIANT * distTol,
        VARIANT * sepForce,
        VARIANT * friction,
        VARIANT * interClose );
    enum zReturnCode PutContactTable (
        int Count,
        const _variant_t & rowSeg,
        const _variant_t & colSeg,
        const _variant_t & tieType,
        const _variant_t & distTol,
        const _variant_t & sepForce,
        const _variant_t & friction,
        const _variant_t & interClose );
    enum zReturnCode InitAnalysisCase (
        int nSetID,
        int nCaseID );
    enum zReturnCode DeleteAnalysisCase (
        int nSetID,
        int nCaseID );
    enum zReturnCode GetStandardTrim (
        VARIANT * useTrim,
        VARIANT * TrimID,
        VARIANT * TrimVal );
    enum zReturnCode PutStandardTrim (
        const _variant_t & useTrim,
        const _variant_t & TrimID,
        const _variant_t & TrimVal );
    enum zReturnCode GetTrimControlSurf (
        VARIANT * useTrim,
        VARIANT * TrimID,
        VARIANT * TrimVal );
    enum zReturnCode PutTrimControlSurf (
        const _variant_t & useTrim,
        const _variant_t & TrimID,
        const _variant_t & TrimVal );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t GetCaseTitle ( );
    void PutCaseTitle ( _bstr_t _val );
    int GetcaseID ( );
    void PutcaseID ( int _val );
    _bstr_t GetEcho ( );
    void PutEcho ( _bstr_t _val );
    VARIANT_BOOL GetSkipStandard ( );
    void PutSkipStandard ( VARIANT_BOOL _val );
    int GetStartText ( );
    void PutStartText ( int _val );
    int GetEndText ( );
    void PutEndText ( int _val );
    int GetDestination ( );
    void PutDestination ( int _val );
    int GetImaginary ( );
    void PutImaginary ( int _val );
    int GetCornerOutput ( );
    void PutCornerOutput ( int _val );
    int GetIntegrationOutput ( );
    void PutIntegrationOutput ( int _val );
    VARIANT_BOOL GetAbaHistOn ( );
    void PutAbaHistOn ( VARIANT_BOOL _val );
    double GetAbaHistTimePeriod ( );
    void PutAbaHistTimePeriod ( double _val );
    double GetAbaHistInitTimeInc ( );
    void PutAbaHistInitTimeInc ( double _val );
    double GetAbaHistMinTimeInc ( );
    void PutAbaHistMinTimeInc ( double _val );
    double GetAbaHistMaxTimeInc ( );
    void PutAbaHistMaxTimeInc ( double _val );
    int GetAbaHistEigenvectors ( );
    void PutAbaHistEigenvectors ( int _val );
    double GetAbaHistMinFreq ( );
    void PutAbaHistMinFreq ( double _val );
    double GetAbaHistMaxFreq ( );
    void PutAbaHistMaxFreq ( double _val );
    double GetAbaHistShiftFreq ( );
    void PutAbaHistShiftFreq ( double _val );
    double GetAbaHistScaleFactor ( );
    void PutAbaHistScaleFactor ( double _val );
    int GetAbaHistOutInterval ( );
    void PutAbaHistOutInterval ( int _val );
    VARIANT_BOOL GetAbaHistNonlinGeom ( );
    void PutAbaHistNonlinGeom ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAbaHistLinearPert ( );
    void PutAbaHistLinearPert ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAbaHistAutoContact ( );
    void PutAbaHistAutoContact ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAbaHistStabilize ( );
    void PutAbaHistStabilize ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAbaHistOutZeroInc ( );
    void PutAbaHistOutZeroInc ( VARIANT_BOOL _val );
    int GetAbaHistStepAmp ( );
    void PutAbaHistStepAmp ( int _val );
    int GetAbaHistStepLoad ( );
    void PutAbaHistStepLoad ( int _val );
    int GetAbaHistStepConstr ( );
    void PutAbaHistStepConstr ( int _val );
    enum zAnalysisType GetAbaHistAnalysisType ( );
    void PutAbaHistAnalysisType ( enum zAnalysisType _val );
    VARIANT_BOOL GetAnsDOFOn ( );
    void PutAnsDOFOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsDOFDoSet ( );
    void PutAnsDOFDoSet ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsDOFAutomatic ( );
    void PutAnsDOFAutomatic ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsDOFNoRotation ( );
    void PutAnsDOFNoRotation ( VARIANT_BOOL _val );
    int GetAnsDOFSetID ( );
    void PutAnsDOFSetID ( int _val );
    int GetAnsDOFNumber ( );
    void PutAnsDOFNumber ( int _val );
    VARIANT_BOOL GetAnsModesOn ( );
    void PutAnsModesOn ( VARIANT_BOOL _val );
    int GetAnsModesNumModes ( );
    void PutAnsModesNumModes ( int _val );
    double GetAnsModesMinFreq ( );
    void PutAnsModesMinFreq ( double _val );
    double GetAnsModesMaxFreq ( );
    void PutAnsModesMaxFreq ( double _val );
    double GetAnsModesModalMethod ( );
    void PutAnsModesModalMethod ( double _val );
    VARIANT_BOOL GetAnsModesElemResults ( );
    void PutAnsModesElemResults ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsHeatOn ( );
    void PutAnsHeatOn ( VARIANT_BOOL _val );
    double GetAnsHeatEndTime ( );
    void PutAnsHeatEndTime ( double _val );
    double GetAnsHeatTimeStep ( );
    void PutAnsHeatTimeStep ( double _val );
    int GetAnsHeatOutputFreq ( );
    void PutAnsHeatOutputFreq ( int _val );
    VARIANT_BOOL GetMarHistOn ( );
    void PutMarHistOn ( VARIANT_BOOL _val );
    int GetMarHistContactProp ( );
    void PutMarHistContactProp ( int _val );
    int GetMarHistCtrlMethod ( );
    void PutMarHistCtrlMethod ( int _val );
    int GetMarHistSolverMeth ( );
    void PutMarHistSolverMeth ( int _val );
    int GetMarHistCtrlMaxStep ( );
    void PutMarHistCtrlMaxStep ( int _val );
    int GetMarHistCtrlMaxRecycle ( );
    void PutMarHistCtrlMaxRecycle ( int _val );
    int GetMarHistCtrlMinRecycle ( );
    void PutMarHistCtrlMinRecycle ( int _val );
    double GetMarHistMaxResidual ( );
    void PutMarHistMaxResidual ( double _val );
    int GetMarHistConvergeMeth ( );
    void PutMarHistConvergeMeth ( int _val );
    VARIANT_BOOL GetMarHistNonPosDefinite ( );
    void PutMarHistNonPosDefinite ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarHistNonSymmetric ( );
    void PutMarHistNonSymmetric ( VARIANT_BOOL _val );
    double GetMarHistModalMinFreq ( );
    void PutMarHistModalMinFreq ( double _val );
    double GetMarHistModalMaxFreq ( );
    void PutMarHistModalMaxFreq ( double _val );
    int GetMarHistModalEigen ( );
    void PutMarHistModalEigen ( int _val );
    int GetMarHistChecking ( );
    void PutMarHistChecking ( int _val );
    VARIANT_BOOL GetMarHistAutoSwitch ( );
    void PutMarHistAutoSwitch ( VARIANT_BOOL _val );
    enum zAnalysisType GetMarHistAnalCaseSol ( );
    void PutMarHistAnalCaseSol ( enum zAnalysisType _val );
    int GetMarHistBuckleNumModes ( );
    void PutMarHistBuckleNumModes ( int _val );
    int GetMarHistBucklePosEigen ( );
    void PutMarHistBucklePosEigen ( int _val );
    VARIANT_BOOL GetMarIncOn ( );
    void PutMarIncOn ( VARIANT_BOOL _val );
    int GetMarIncArcLenMeth ( );
    void PutMarIncArcLenMeth ( int _val );
    double GetMarIncTimePeriod ( );
    void PutMarIncTimePeriod ( double _val );
    double GetMarIncInitTimeInc ( );
    void PutMarIncInitTimeInc ( double _val );
    double GetMarIncMinTimeInc ( );
    void PutMarIncMinTimeInc ( double _val );
    double GetMarIncMaxTimeInc ( );
    void PutMarIncMaxTimeInc ( double _val );
    double GetMarIncScaleFact ( );
    void PutMarIncScaleFact ( double _val );
    int GetMarIncMaxStep ( );
    void PutMarIncMaxStep ( int _val );
    int GetMarIncNumOutInc ( );
    void PutMarIncNumOutInc ( int _val );
    VARIANT_BOOL GetMarIncQuasiStatDamp ( );
    void PutMarIncQuasiStatDamp ( VARIANT_BOOL _val );
    double GetMarIncFracFirst ( );
    void PutMarIncFracFirst ( double _val );
    int GetMarIncMaxNumInc ( );
    void PutMarIncMaxNumInc ( int _val );
    int GetMarIncCtrlMaxRecycle ( );
    void PutMarIncCtrlMaxRecycle ( int _val );
    double GetMarIncMaxFracForAll ( );
    void PutMarIncMaxFracForAll ( double _val );
    double GetMarIncTotalTime ( );
    void PutMarIncTotalTime ( double _val );
    VARIANT_BOOL GetMarCtblOn ( );
    void PutMarCtblOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarCtblWrite ( );
    void PutMarCtblWrite ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasOmodesOn ( );
    void PutNasOmodesOn ( VARIANT_BOOL _val );
    _bstr_t GetNasOmodes ( );
    void PutNasOmodes ( _bstr_t _val );
    _variant_t GetvBCSet ( );
    void PutvBCSet ( const _variant_t & _val );
    _variant_t GetvOutput ( );
    void PutvOutput ( const _variant_t & _val );
    int GetCaseType ( );
    void PutCaseType ( int _val );
    VARIANT_BOOL GetDynHistOn ( );
    void PutDynHistOn ( VARIANT_BOOL _val );
    int GetDynHistBodyLoadGrp ( );
    void PutDynHistBodyLoadGrp ( int _val );
    VARIANT_BOOL GetDynHistMassDampOn ( );
    void PutDynHistMassDampOn ( VARIANT_BOOL _val );
    double GetDynHistMsssDamp ( );
    void PutDynHistMsssDamp ( double _val );
    VARIANT_BOOL GetDynHistImplicit ( );
    void PutDynHistImplicit ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDynHistSpringback ( );
    void PutDynHistSpringback ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDynHistStrainOutput ( );
    void PutDynHistStrainOutput ( VARIANT_BOOL _val );
    double GetDynHistTotalTime ( );
    void PutDynHistTotalTime ( double _val );
    double GetDynHistTimeHistOuput ( );
    void PutDynHistTimeHistOuput ( double _val );
    double GetDynHistPrintHistOutput ( );
    void PutDynHistPrintHistOutput ( double _val );
    int GetDynHistPlateIntgPts ( );
    void PutDynHistPlateIntgPts ( int _val );
    int GetDynHistGroupHistId ( );
    void PutDynHistGroupHistId ( int _val );
    VARIANT_BOOL GetNasCnlOn ( );
    void PutNasCnlOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasCnlUseLoadSet ( );
    void PutNasCnlUseLoadSet ( VARIANT_BOOL _val );
    int GetNasCnlIncrements ( );
    void PutNasCnlIncrements ( int _val );
    double GetNasCnlTime_Increment ( );
    void PutNasCnlTime_Increment ( double _val );
    int GetNasCnlMaxIter ( );
    void PutNasCnlMaxIter ( int _val );
    _variant_t GetvNasCnlConvergenceFlags ( );
    void PutvNasCnlConvergenceFlags ( const _variant_t & _val );
    _variant_t GetvNasCnlConvergenceValue ( );
    void PutvNasCnlConvergenceValue ( const _variant_t & _val );
    int GetNasCnlCtiffnessMethod ( );
    void PutNasCnlCtiffnessMethod ( int _val );
    int GetNasCnlKstep ( );
    void PutNasCnlKstep ( int _val );
    int GetNasCnlIntermediateOutput ( );
    void PutNasCnlIntermediateOutput ( int _val );
    int GetNasCnlOutputInterval ( );
    void PutNasCnlOutputInterval ( int _val );
    int GetNasCnlSolutionStrategy ( );
    void PutNasCnlSolutionStrategy ( int _val );
    int GetNasCnlSolutionOverrides ( );
    void PutNasCnlSolutionOverrides ( int _val );
    VARIANT_BOOL GetNasCnlModnewtonLineSearch ( );
    void PutNasCnlModnewtonLineSearch ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasCnlModnewtonQuasiNewton ( );
    void PutNasCnlModnewtonQuasiNewton ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasCnlModnewtonBisection ( );
    void PutNasCnlModnewtonBisection ( VARIANT_BOOL _val );
    int GetNasCnlArcConstraintType ( );
    void PutNasCnlArcConstraintType ( int _val );
    double GetNasCnlArcMinAdjust ( );
    void PutNasCnlArcMinAdjust ( double _val );
    double GetNasCnlArcMaxAdjust ( );
    void PutNasCnlArcMaxAdjust ( double _val );
    double GetNasCnlArcLoadScale ( );
    void PutNasCnlArcLoadScale ( double _val );
    int GetNasCnlArcDesiredIter ( );
    void PutNasCnlArcDesiredIter ( int _val );
    int GetNasCnlArcMaxSteps ( );
    void PutNasCnlArcMaxSteps ( int _val );
    int GetNasCnlTimeSkipAdjust ( );
    void PutNasCnlTimeSkipAdjust ( int _val );
    int GetNasCnlDominantPeriodSteps ( );
    void PutNasCnlDominantPeriodSteps ( int _val );
    double GetNasCnlBoundsRb ( );
    void PutNasCnlBoundsRb ( double _val );
    double GetNasCnlStabilityTolerance ( );
    void PutNasCnlStabilityTolerance ( double _val );
    int GetNasCnlDivergenceLimit ( );
    void PutNasCnlDivergenceLimit ( int _val );
    int GetNasCnlQuasiNewtonVectors ( );
    void PutNasCnlQuasiNewtonVectors ( int _val );
    int GetNasCnlMaxLineSearch ( );
    void PutNasCnlMaxLineSearch ( int _val );
    double GetNasCnlLineSearchTolerance ( );
    void PutNasCnlLineSearchTolerance ( double _val );
    int GetNasCnlMaxBisections ( );
    void PutNasCnlMaxBisections ( int _val );
    double GetNasCnlMaxRotation ( );
    void PutNasCnlMaxRotation ( double _val );
    double GetNasCnlFstress ( );
    void PutNasCnlFstress ( double _val );
    double GetNasCnlMaxAdjust ( );
    void PutNasCnlMaxAdjust ( double _val );
    VARIANT_BOOL GetNasCnlCreep ( );
    void PutNasCnlCreep ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasCnlSkipNLPARM ( );
    void PutNasCnlSkipNLPARM ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasCaeOn ( );
    void PutNasCaeOn ( VARIANT_BOOL _val );
    double GetNasCaeMachNumber ( );
    void PutNasCaeMachNumber ( double _val );
    double GetNasCaeDynPressure ( );
    void PutNasCaeDynPressure ( double _val );
    VARIANT_BOOL GetNasCaeRigidTrim ( );
    void PutNasCaeRigidTrim ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasCaeWrtieTrim ( );
    void PutNasCaeWrtieTrim ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasCflOn ( );
    void PutNasCflOn ( VARIANT_BOOL _val );
    int GetNasCflMethod ( );
    void PutNasCflMethod ( int _val );
    int GetNasCflDenID ( );
    void PutNasCflDenID ( int _val );
    int GetNasCflMachFactID ( );
    void PutNasCflMachFactID ( int _val );
    int GetNasCflRfreqFactID ( );
    void PutNasCflRfreqFactID ( int _val );
    int GetNasCflFliMethod ( );
    void PutNasCflFliMethod ( int _val );
    int GetNasCflEig ( );
    void PutNasCflEig ( int _val );
    double GetNasCflEps ( );
    void PutNasCflEps ( double _val );
    VARIANT_BOOL GetNasCflWriteFlutter ( );
    void PutNasCflWriteFlutter ( VARIANT_BOOL _val );
    int GetNasSELoad ( );
    void PutNasSELoad ( int _val );
    int GetNasCflSdampID ( );
    void PutNasCflSdampID ( int _val );
    VARIANT_BOOL GetNasCnlkDAMP ( );
    void PutNasCnlkDAMP ( VARIANT_BOOL _val );
    int GetNasCnlkUPDATE ( );
    void PutNasCnlkUPDATE ( int _val );
    VARIANT_BOOL GetNasRelEMotion ( );
    void PutNasRelEMotion ( VARIANT_BOOL _val );
    int GetNasCnlStiffnessMethod ( );
    void PutNasCnlStiffnessMethod ( int _val );
    _bstr_t GetCaseLabel ( );
    void PutCaseLabel ( _bstr_t _val );
    int GetContactOption ( );
    void PutContactOption ( int _val );
    int GetContactSetType ( );
    void PutContactSetType ( int _val );
    _variant_t GetvMSCNasCnlConvergenceFlags ( );
    void PutvMSCNasCnlConvergenceFlags ( const _variant_t & _val );
    VARIANT_BOOL GetNasCurvatureStrain ( );
    void PutNasCurvatureStrain ( VARIANT_BOOL _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("ab06c176-0e7e-11d5-9471-001083fff11c"))
AnalysisCase;
    // [ default ] dispinterface IAnalysisCase

struct __declspec(uuid("43752af6-e669-11d4-9441-001083fff11c"))
INode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetpermBC,put=PutpermBC))
    VARIANT_BOOL permBC[];
    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getz,put=Putz))
    double z;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Gettype,put=Puttype))
    enum zNodeType type;
    __declspec(property(get=GetdefCSys,put=PutdefCSys))
    int defCSys;
    __declspec(property(get=GetoutCSys,put=PutoutCSys))
    int outCSys;
    __declspec(property(get=GetvpermBC,put=PutvpermBC))
    _variant_t vpermBC;
    __declspec(property(get=GetsuperelementID,put=PutsuperelementID))
    int superelementID;
    __declspec(property(get=Getxyz,put=Putxyz))
    _variant_t xyz;
    __declspec(property(get=GetNumberOfElements,put=PutNumberOfElements))
    int NumberOfElements;
    __declspec(property(get=GetNumberOfLoads,put=PutNumberOfLoads))
    int NumberOfLoads;
    __declspec(property(get=GetNumberOfConstraints,put=PutNumberOfConstraints))
    int NumberOfConstraints;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetpermBC (
        int nVectorIndex );
    void PutpermBC (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    enum zReturnCode GetCoordArray (
        int setID,
        int * numNode,
        VARIANT * entID,
        VARIANT * xyz );
    enum zReturnCode GetAllArray (
        int setID,
        int * numNode,
        VARIANT * entID,
        VARIANT * xyz,
        VARIANT * layer,
        VARIANT * color,
        VARIANT * ndType,
        VARIANT * defCSys,
        VARIANT * outCSys,
        VARIANT * permBC );
    enum zReturnCode GetAll (
        int entID,
        double * x,
        double * y,
        double * z,
        int * nlayer,
        enum zColor * nColor,
        enum zNodeType * ntype,
        int * defCSys,
        int * outCSys,
        VARIANT * permBC );
    enum zReturnCode PutAll (
        int entID,
        double x,
        double y,
        double z,
        int layer,
        enum zColor color,
        enum zNodeType ndType,
        int defCSys,
        int outCSys,
        const _variant_t & permBC );
    enum zReturnCode PutAllArray (
        int numNode,
        const _variant_t & entID,
        const _variant_t & xyz,
        const _variant_t & layer,
        const _variant_t & color,
        const _variant_t & ndType,
        const _variant_t & defCSys,
        const _variant_t & outCSys,
        const _variant_t & permBC );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode GetClosest (
        const _variant_t & vXYZ );
    enum zReturnCode IsMidsideNode (
        int elemSET );
    enum zReturnCode PutCoordArray (
        int numNode,
        const _variant_t & entID,
        const _variant_t & xyz );
    enum zReturnCode GetCoordArray2 (
        int setID,
        int * numNode,
        VARIANT * entID,
        VARIANT * Exist,
        VARIANT * xyz );
    enum zReturnCode GetAllArray2 (
        int setID,
        int * numNode,
        VARIANT * entID,
        VARIANT * Exist,
        VARIANT * xyz,
        VARIANT * layer,
        VARIANT * color,
        VARIANT * ndType,
        VARIANT * defCSys,
        VARIANT * outCSys,
        VARIANT * permBC );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getz ( );
    void Putz ( double _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    enum zNodeType Gettype ( );
    void Puttype ( enum zNodeType _val );
    int GetdefCSys ( );
    void PutdefCSys ( int _val );
    int GetoutCSys ( );
    void PutoutCSys ( int _val );
    _variant_t GetvpermBC ( );
    void PutvpermBC ( const _variant_t & _val );
    int GetsuperelementID ( );
    void PutsuperelementID ( int _val );
    _variant_t Getxyz ( );
    void Putxyz ( const _variant_t & _val );
    int GetNumberOfElements ( );
    void PutNumberOfElements ( int _val );
    int GetNumberOfLoads ( );
    void PutNumberOfLoads ( int _val );
    int GetNumberOfConstraints ( );
    void PutNumberOfConstraints ( int _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zColor
{
    FCL_BLACK = 0,
    FCL_SEPIA = 1,
    FCL_DARKRED = 2,
    FCL_MAROON = 3,
    FCL_RED = 4,
    FCL_DARKESTGREEN = 5,
    FCL_DARKOLIVEGREEN = 6,
    FCL_BROWN = 7,
    FCL_SIENNA = 8,
    FCL_ORANGERED = 9,
    FCL_GREEN = 10,
    FCL_FERNGREEN = 11,
    FCL_OLIVE = 12,
    FCL_DARKGOLDENROD = 13,
    FCL_ORANGE = 14,
    FCL_LIMEGREEN = 15,
    FCL_YELLOWLIMEGREEN = 16,
    FCL_AVOCADO = 17,
    FCL_OLIVEYELLOW = 18,
    FCL_GOLD = 19,
    FCL_LIME = 20,
    FCL_BRIGHTLIME = 21,
    FCL_CHARTREUSE = 22,
    FCL_BRIGHTCHARTREUSE = 23,
    FCL_YELLOW = 24,
    FCL_MIDNIGHTBLUE = 25,
    FCL_EGGPLANT = 26,
    FCL_DARKRASPBERRY = 27,
    FCL_RASPBERRY = 28,
    FCL_CRIMSON = 29,
    FCL_DARKSLATEGRAY = 30,
    FCL_DARKGRAY = 31,
    FCL_CAMOUFLAGEGREEN = 32,
    FCL_FIREBRICK = 33,
    FCL_TOMATO = 34,
    FCL_PINEGREEN = 35,
    FCL_FORESTGREEN = 36,
    FCL_PALEOLIVE = 37,
    FCL_PERU = 38,
    FCL_CORAL = 39,
    FCL_DARKPASTELGREEN = 40,
    FCL_PALELIMEGREEN = 41,
    FCL_YELLOWGREEN = 42,
    FCL_OLDGOLD = 43,
    FCL_GOLDENROD = 44,
    FCL_BLUELIME = 45,
    FCL_PALELIME = 46,
    FCL_PALEBRIGHTGREEN = 47,
    FCL_GREENYELLOW = 48,
    FCL_NOTEYELLOW = 49,
    FCL_DARKBLUE = 50,
    FCL_INDIGO = 51,
    FCL_PURPLE = 52,
    FCL_MEDIUMVIOLETRED = 53,
    FCL_DEEPPINK = 54,
    FCL_DARKCERULEAN = 55,
    FCL_DARKSLATEBLUE = 56,
    FCL_PALEPURPLE = 57,
    FCL_MAUVE = 58,
    FCL_CERISE = 59,
    FCL_DARKCYAN = 60,
    FCL_VIRIDIAN = 61,
    FCL_GRAY = 62,
    FCL_ROSYBROWN = 63,
    FCL_LIGHTSALMON = 64,
    FCL_JADE = 65,
    FCL_SEAGREEN = 66,
    FCL_DARKSEAGREEN = 67,
    FCL_DARKKHAKI = 68,
    FCL_SANDYBROWN = 69,
    FCL_SPRINGGREEN = 70,
    FCL_LIGHTSPRINGGREEN = 71,
    FCL_LIGHTGREEN = 72,
    FCL_TEAGREEN = 73,
    FCL_PALEYELLOW = 74,
    FCL_MEDIUMBLUE = 75,
    FCL_BLUEINDIGO = 76,
    FCL_DARKVIOLET = 77,
    FCL_VIOLETEGGPLANT = 78,
    FCL_FUCHSIA = 79,
    FCL_COBALT = 80,
    FCL_PALEBLUEPURPLE = 81,
    FCL_MEDIUMPURPLE = 82,
    FCL_ORCHID = 83,
    FCL_PINKCERISE = 84,
    FCL_CERULEAN = 85,
    FCL_STEELBLUE = 86,
    FCL_SLATEBLUE = 87,
    FCL_PLUM = 88,
    FCL_REDPINK = 89,
    FCL_DARKTURQUOISE = 90,
    FCL_MEDIUMTURQUOISE = 91,
    FCL_MEDIUMAQUAMARINE = 92,
    FCL_SILVER = 93,
    FCL_PALEREDVIOLET = 94,
    FCL_MEDIUMSPRINGGREEN = 95,
    FCL_TURQUOISE = 96,
    FCL_AQUAMARINE = 97,
    FCL_MINTCREAM = 98,
    FCL_LEMONCHIFFON = 99,
    FCL_BLUE = 100,
    FCL_PERSIANBLUE = 101,
    FCL_VIOLET = 102,
    FCL_BRIGHTVIOLET = 103,
    FCL_MAGENTA = 104,
    FCL_BRIGHTCOBALT = 105,
    FCL_PALECOBALT = 106,
    FCL_BLUEVIOLET = 107,
    FCL_MEDIUMORCHID = 108,
    FCL_HOTPINK = 109,
    FCL_DODGERBLUE = 110,
    FCL_ROYALBLUE = 111,
    FCL_MEDIUMSLATEBLUE = 112,
    FCL_WISTERIA = 113,
    FCL_PINK = 114,
    FCL_DEEPSKYBLUE = 115,
    FCL_SKYBLUE = 116,
    FCL_PALESKYBLUE = 117,
    FCL_THISTLE = 118,
    FCL_PALEPINK = 119,
    FCL_CYAN = 120,
    FCL_BRIGHTTURQUOISE = 121,
    FCL_PALEBLUE = 122,
    FCL_POWDERBLUE = 123,
    FCL_WHITE = 124,
    FCL_GRAY10 = 125,
    FCL_GRAY20 = 126,
    FCL_GRAY30 = 127,
    FCL_GRAY40 = 128,
    FCL_GRAY50 = 129,
    FCL_GRAY60 = 130,
    FCL_GRAY70 = 131,
    FCL_GRAY80 = 132,
    FCL_GRAY90 = 133,
    FCL_GRAY100 = 134,
    FCL_GRAY110 = 135,
    FCL_GRAY120 = 136,
    FCL_GRAY130 = 137,
    FCL_GRAY140 = 138,
    FCL_GRAY150 = 139,
    FCL_GRAY160 = 140,
    FCL_GRAY170 = 141,
    FCL_GRAY180 = 142,
    FCL_GRAY190 = 143,
    FCL_GRAY200 = 144,
    FCL_GRAY210 = 145,
    FCL_GRAY220 = 146,
    FCL_GRAY230 = 147,
    FCL_GRAY240 = 148,
    FCL_GRAY250 = 149,
    FPF_SOLID = 0,
    FPF_HORIZONTAL = 256,
    FPF_VERTICAL = 512,
    FPF_FDIAGONAL = 768,
    FPF_BDIAGONAL = 1024,
    FPF_CROSS = 1280,
    FPF_DIAGCROSS = 1536,
    FPF_TRANSPARENT8 = 1792,
    FPF_TRANSPARENT7 = 2048,
    FPF_TRANSPARENT6 = 2304,
    FPF_TRANSPARENT5 = 2560,
    FPF_TRANSPARENT4 = 2816,
    FPF_TRANSPARENT3 = 3072,
    FPF_TRANSPARENT2 = 3328,
    FPF_TRANSPARENT1 = 3584,
    FPL_SOLID = 0,
    FPL_DASH = 4096,
    FPL_DOT = 8192,
    FPL_DASHDOT = 12288,
    FPL_DASHDOTDOT = 16384,
    FPL_THICK2 = 20480,
    FPL_THICK3 = 24576,
    FPL_THICK4 = 28672
};

enum zNodeType
{
    FND_NODE = 0,
    FND_SPOINT = 1,
    FND_EPOINT = 2,
    FND_FLPOINT = 3
};

struct __declspec(uuid("43752af8-e669-11d4-9441-001083fff11c"))
Node;
    // [ default ] dispinterface INode

struct __declspec(uuid("00ef42f8-0e77-11d5-9471-001083fff11c"))
IAnalysisMgr : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNasNonlinEpsFlag,put=PutNasNonlinEpsFlag))
    VARIANT_BOOL NasNonlinEpsFlag[];
    __declspec(property(get=GetNasNonlinEps,put=PutNasNonlinEps))
    double NasNonlinEps[];
    __declspec(property(get=GetNasModeFreqRange,put=PutNasModeFreqRange))
    double NasModeFreqRange[];
    __declspec(property(get=GetNasModeXYRequest,put=PutNasModeXYRequest))
    int NasModeXYRequest[];
    __declspec(property(get=GetNasRandomRequest,put=PutNasRandomRequest))
    int NasRandomRequest[];
    __declspec(property(get=GetNasRandXYRequest,put=PutNasRandXYRequest))
    VARIANT_BOOL NasRandXYRequest[];
    __declspec(property(get=GetNasGenSpecRequest,put=PutNasGenSpecRequest))
    VARIANT_BOOL NasGenSpecRequest[];
    __declspec(property(get=GetNasGCheckTest,put=PutNasGCheckTest))
    VARIANT_BOOL NasGCheckTest[];
    __declspec(property(get=GetNasGCheckTol,put=PutNasGCheckTol))
    double NasGCheckTol[];
    __declspec(property(get=GetNasGCheckMsg,put=PutNasGCheckMsg))
    int NasGCheckMsg[];
    __declspec(property(get=GetNasMCheckWtDOFSet,put=PutNasMCheckWtDOFSet))
    VARIANT_BOOL NasMCheckWtDOFSet[];
    __declspec(property(get=GetNasMCheckGrndDOFSet,put=PutNasMCheckGrndDOFSet))
    VARIANT_BOOL NasMCheckGrndDOFSet[];
    __declspec(property(get=GetFStDynFreqRange,put=PutFStDynFreqRange))
    double FStDynFreqRange[];
    __declspec(property(get=GetNasModeImagFreqRange,put=PutNasModeImagFreqRange))
    double NasModeImagFreqRange[];
    __declspec(property(get=GetNasDdamCoeffOn,put=PutNasDdamCoeffOn))
    VARIANT_BOOL NasDdamCoeffOn[];
    __declspec(property(get=GetNasDdamCoeffVal,put=PutNasDdamCoeffVal))
    double NasDdamCoeffVal[];
    __declspec(property(get=GetNasDynKeepFreq,put=PutNasDynKeepFreq))
    double NasDynKeepFreq[];
    __declspec(property(get=GetNasGCheckTest2,put=PutNasGCheckTest2))
    VARIANT_BOOL NasGCheckTest2[];
    __declspec(property(get=GetNasGCheckTol2,put=PutNasGCheckTol2))
    double NasGCheckTol2[];
    __declspec(property(get=GetNasGCheckMsg2,put=PutNasGCheckMsg2))
    int NasGCheckMsg2[];
    __declspec(property(get=GetNasBulkAlpha1Val,put=PutNasBulkAlpha1Val))
    double NasBulkAlpha1Val[];
    __declspec(property(get=GetNasBulkAlpha2Val,put=PutNasBulkAlpha2Val))
    double NasBulkAlpha2Val[];
    __declspec(property(get=GetBCSet,put=PutBCSet))
    int BCSet[];
    __declspec(property(get=GetOutput,put=PutOutput))
    int Output[];
    __declspec(property(get=GetNasCnlConvergenceFlags,put=PutNasCnlConvergenceFlags))
    VARIANT_BOOL NasCnlConvergenceFlags[];
    __declspec(property(get=GetNasCnlConvergenceValue,put=PutNasCnlConvergenceValue))
    double NasCnlConvergenceValue[];
    __declspec(property(get=GetMSCNasCnlConvergenceFlags,put=PutMSCNasCnlConvergenceFlags))
    VARIANT_BOOL MSCNasCnlConvergenceFlags[];
    __declspec(property(get=GetSolver,put=PutSolver))
    enum zAnalysisMgrProgram Solver;
    __declspec(property(get=GetAnalysisType,put=PutAnalysisType))
    enum zAnalysisType AnalysisType;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetNasExecOn,put=PutNasExecOn))
    VARIANT_BOOL NasExecOn;
    __declspec(property(get=GetNasExecVersion,put=PutNasExecVersion))
    int NasExecVersion;
    __declspec(property(get=GetNasExecOutDir,put=PutNasExecOutDir))
    _bstr_t NasExecOutDir;
    __declspec(property(get=GetNasExecProblem,put=PutNasExecProblem))
    _bstr_t NasExecProblem;
    __declspec(property(get=GetNasExecSolName,put=PutNasExecSolName))
    _bstr_t NasExecSolName;
    __declspec(property(get=GetNasExecMaxTime,put=PutNasExecMaxTime))
    double NasExecMaxTime;
    __declspec(property(get=GetNasExecDiag,put=PutNasExecDiag))
    _bstr_t NasExecDiag;
    __declspec(property(get=GetNasExecIterSolve,put=PutNasExecIterSolve))
    VARIANT_BOOL NasExecIterSolve;
    __declspec(property(get=GetNasExecNumCPU,put=PutNasExecNumCPU))
    int NasExecNumCPU;
    __declspec(property(get=GetNasExecSaveDB,put=PutNasExecSaveDB))
    VARIANT_BOOL NasExecSaveDB;
    __declspec(property(get=GetNasExecRestart,put=PutNasExecRestart))
    VARIANT_BOOL NasExecRestart;
    __declspec(property(get=GetNasExecRestartDB,put=PutNasExecRestartDB))
    _bstr_t NasExecRestartDB;
    __declspec(property(get=GetNasExecSkipStandard,put=PutNasExecSkipStandard))
    VARIANT_BOOL NasExecSkipStandard;
    __declspec(property(get=GetNasExecStartText,put=PutNasExecStartText))
    int NasExecStartText;
    __declspec(property(get=GetNasExecEndText,put=PutNasExecEndText))
    int NasExecEndText;
    __declspec(property(get=GetNasBulkOn,put=PutNasBulkOn))
    VARIANT_BOOL NasBulkOn;
    __declspec(property(get=GetNasBulkAutospc,put=PutNasBulkAutospc))
    VARIANT_BOOL NasBulkAutospc;
    __declspec(property(get=GetNasBulkGrdpnt,put=PutNasBulkGrdpnt))
    VARIANT_BOOL NasBulkGrdpnt;
    __declspec(property(get=GetNasBulkWtmass,put=PutNasBulkWtmass))
    VARIANT_BOOL NasBulkWtmass;
    __declspec(property(get=GetNasBulkK6rot,put=PutNasBulkK6rot))
    VARIANT_BOOL NasBulkK6rot;
    __declspec(property(get=GetNasBulkMaxratio,put=PutNasBulkMaxratio))
    VARIANT_BOOL NasBulkMaxratio;
    __declspec(property(get=GetNasBulkNdamp,put=PutNasBulkNdamp))
    VARIANT_BOOL NasBulkNdamp;
    __declspec(property(get=GetNasBulkInrel,put=PutNasBulkInrel))
    VARIANT_BOOL NasBulkInrel;
    __declspec(property(get=GetNasBulkLangle,put=PutNasBulkLangle))
    VARIANT_BOOL NasBulkLangle;
    __declspec(property(get=GetNasBulkPrgpst,put=PutNasBulkPrgpst))
    VARIANT_BOOL NasBulkPrgpst;
    __declspec(property(get=GetNasBulkLgdisp,put=PutNasBulkLgdisp))
    VARIANT_BOOL NasBulkLgdisp;
    __declspec(property(get=GetNasBulkDdrmmOff,put=PutNasBulkDdrmmOff))
    VARIANT_BOOL NasBulkDdrmmOff;
    __declspec(property(get=GetNasBulkModacc,put=PutNasBulkModacc))
    VARIANT_BOOL NasBulkModacc;
    __declspec(property(get=GetNasBulkResVec,put=PutNasBulkResVec))
    VARIANT_BOOL NasBulkResVec;
    __declspec(property(get=GetNasBulkGrdpntVal,put=PutNasBulkGrdpntVal))
    int NasBulkGrdpntVal;
    __declspec(property(get=GetNasBulkWtmassVal,put=PutNasBulkWtmassVal))
    double NasBulkWtmassVal;
    __declspec(property(get=GetNasBulkK6rotVal,put=PutNasBulkK6rotVal))
    double NasBulkK6rotVal;
    __declspec(property(get=GetNasBulkMaxratioVal,put=PutNasBulkMaxratioVal))
    double NasBulkMaxratioVal;
    __declspec(property(get=GetNasBulkNdampVal,put=PutNasBulkNdampVal))
    double NasBulkNdampVal;
    __declspec(property(get=GetNasBulkLargeField,put=PutNasBulkLargeField))
    int NasBulkLargeField;
    __declspec(property(get=GetNasBulkQuadr,put=PutNasBulkQuadr))
    VARIANT_BOOL NasBulkQuadr;
    __declspec(property(get=GetNasBulkSkipStandard,put=PutNasBulkSkipStandard))
    VARIANT_BOOL NasBulkSkipStandard;
    __declspec(property(get=GetNasBulkStartText,put=PutNasBulkStartText))
    int NasBulkStartText;
    __declspec(property(get=GetNasBulkEndText,put=PutNasBulkEndText))
    int NasBulkEndText;
    __declspec(property(get=GetNasBulkGroupID,put=PutNasBulkGroupID))
    int NasBulkGroupID;
    __declspec(property(get=GetNasNonlinOn,put=PutNasNonlinOn))
    VARIANT_BOOL NasNonlinOn;
    __declspec(property(get=GetNasNonlinNDT,put=PutNasNonlinNDT))
    int NasNonlinNDT;
    __declspec(property(get=GetNasNonlinDT,put=PutNasNonlinDT))
    double NasNonlinDT;
    __declspec(property(get=GetNasNonlinNO,put=PutNasNonlinNO))
    int NasNonlinNO;
    __declspec(property(get=GetNasNonlinMaxIter,put=PutNasNonlinMaxIter))
    int NasNonlinMaxIter;
    __declspec(property(get=GetNasModeOn,put=PutNasModeOn))
    VARIANT_BOOL NasModeOn;
    __declspec(property(get=GetNasModeEigrSet,put=PutNasModeEigrSet))
    int NasModeEigrSet;
    __declspec(property(get=GetNasModeMethod,put=PutNasModeMethod))
    int NasModeMethod;
    __declspec(property(get=GetNasModeSolutionType,put=PutNasModeSolutionType))
    VARIANT_BOOL NasModeSolutionType;
    __declspec(property(get=GetNasModeEstRoots,put=PutNasModeEstRoots))
    int NasModeEstRoots;
    __declspec(property(get=GetNasModeDesiredRoots,put=PutNasModeDesiredRoots))
    int NasModeDesiredRoots;
    __declspec(property(get=GetNasModeNormOpt,put=PutNasModeNormOpt))
    int NasModeNormOpt;
    __declspec(property(get=GetNasModeNormNode,put=PutNasModeNormNode))
    int NasModeNormNode;
    __declspec(property(get=GetNasModeNormDOF,put=PutNasModeNormDOF))
    int NasModeNormDOF;
    __declspec(property(get=GetNasModeMassForm,put=PutNasModeMassForm))
    int NasModeMassForm;
    __declspec(property(get=GetNasModeXYOn,put=PutNasModeXYOn))
    VARIANT_BOOL NasModeXYOn;
    __declspec(property(get=GetNasModeXYRefNode,put=PutNasModeXYRefNode))
    int NasModeXYRefNode;
    __declspec(property(get=GetNasRandomOn,put=PutNasRandomOn))
    VARIANT_BOOL NasRandomOn;
    __declspec(property(get=GetNasRandXYOn,put=PutNasRandXYOn))
    VARIANT_BOOL NasRandXYOn;
    __declspec(property(get=GetNasRandXYSummary,put=PutNasRandXYSummary))
    VARIANT_BOOL NasRandXYSummary;
    __declspec(property(get=GetNasRandXYNodeGroup,put=PutNasRandXYNodeGroup))
    int NasRandXYNodeGroup;
    __declspec(property(get=GetNasRandXYElemGroup,put=PutNasRandXYElemGroup))
    int NasRandXYElemGroup;
    __declspec(property(get=GetNasGenSpecOn,put=PutNasGenSpecOn))
    VARIANT_BOOL NasGenSpecOn;
    __declspec(property(get=GetNasGenSpecAbsolute,put=PutNasGenSpecAbsolute))
    VARIANT_BOOL NasGenSpecAbsolute;
    __declspec(property(get=GetNasGenSpecNodeGroup,put=PutNasGenSpecNodeGroup))
    int NasGenSpecNodeGroup;
    __declspec(property(get=GetNasAppSpecOn,put=PutNasAppSpecOn))
    VARIANT_BOOL NasAppSpecOn;
    __declspec(property(get=GetNasAppSpecType,put=PutNasAppSpecType))
    int NasAppSpecType;
    __declspec(property(get=GetNasAppSpecFunction,put=PutNasAppSpecFunction))
    int NasAppSpecFunction;
    __declspec(property(get=GetNasAppSpecScale,put=PutNasAppSpecScale))
    double NasAppSpecScale;
    __declspec(property(get=GetNasAppSpecMethod,put=PutNasAppSpecMethod))
    int NasAppSpecMethod;
    __declspec(property(get=GetNasAppSpecClose,put=PutNasAppSpecClose))
    double NasAppSpecClose;
    __declspec(property(get=GetNasAppSpecSuport,put=PutNasAppSpecSuport))
    int NasAppSpecSuport;
    __declspec(property(get=GetNasAppSpecDamp,put=PutNasAppSpecDamp))
    int NasAppSpecDamp;
    __declspec(property(get=GetNasGCheckOn,put=PutNasGCheckOn))
    VARIANT_BOOL NasGCheckOn;
    __declspec(property(get=GetNasGCheckSummary,put=PutNasGCheckSummary))
    VARIANT_BOOL NasGCheckSummary;
    __declspec(property(get=GetNasGCheckMsgLimit,put=PutNasGCheckMsgLimit))
    int NasGCheckMsgLimit;
    __declspec(property(get=GetNasMCheckOn,put=PutNasMCheckOn))
    VARIANT_BOOL NasMCheckOn;
    __declspec(property(get=GetNasMCheckWtCG,put=PutNasMCheckWtCG))
    VARIANT_BOOL NasMCheckWtCG;
    __declspec(property(get=GetNasMCheckWtRefNode,put=PutNasMCheckWtRefNode))
    int NasMCheckWtRefNode;
    __declspec(property(get=GetNasMCheckWtUnits,put=PutNasMCheckWtUnits))
    int NasMCheckWtUnits;
    __declspec(property(get=GetNasMCheckGrndRefNode,put=PutNasMCheckGrndRefNode))
    int NasMCheckGrndRefNode;
    __declspec(property(get=GetNasMCheckMaxStrnEn,put=PutNasMCheckMaxStrnEn))
    double NasMCheckMaxStrnEn;
    __declspec(property(get=GetNasMCheckDataRec,put=PutNasMCheckDataRec))
    VARIANT_BOOL NasMCheckDataRec;
    __declspec(property(get=GetNasMCheckDataTol,put=PutNasMCheckDataTol))
    double NasMCheckDataTol;
    __declspec(property(get=GetAbaModOn,put=PutAbaModOn))
    VARIANT_BOOL AbaModOn;
    __declspec(property(get=GetAbaModTitleSetNames,put=PutAbaModTitleSetNames))
    VARIANT_BOOL AbaModTitleSetNames;
    __declspec(property(get=GetAbaModGroupsAsSets,put=PutAbaModGroupsAsSets))
    VARIANT_BOOL AbaModGroupsAsSets;
    __declspec(property(get=GetAbaModSkipStandard,put=PutAbaModSkipStandard))
    VARIANT_BOOL AbaModSkipStandard;
    __declspec(property(get=GetAbaModVersion,put=PutAbaModVersion))
    int AbaModVersion;
    __declspec(property(get=GetAbaModStartText,put=PutAbaModStartText))
    int AbaModStartText;
    __declspec(property(get=GetAbaModEndText,put=PutAbaModEndText))
    int AbaModEndText;
    __declspec(property(get=GetAnsModOn,put=PutAnsModOn))
    VARIANT_BOOL AnsModOn;
    __declspec(property(get=GetAnsModTitleSetNames,put=PutAnsModTitleSetNames))
    VARIANT_BOOL AnsModTitleSetNames;
    __declspec(property(get=GetAnsModGroupsAsSets,put=PutAnsModGroupsAsSets))
    VARIANT_BOOL AnsModGroupsAsSets;
    __declspec(property(get=GetAnsModSkipStandard,put=PutAnsModSkipStandard))
    VARIANT_BOOL AnsModSkipStandard;
    __declspec(property(get=GetAnsModStartText,put=PutAnsModStartText))
    int AnsModStartText;
    __declspec(property(get=GetAnsModEndText,put=PutAnsModEndText))
    int AnsModEndText;
    __declspec(property(get=GetAnsModTitle,put=PutAnsModTitle))
    _bstr_t AnsModTitle;
    __declspec(property(get=GetAnsModWriteSolCmd,put=PutAnsModWriteSolCmd))
    VARIANT_BOOL AnsModWriteSolCmd;
    __declspec(property(get=GetAnsModWriteIter,put=PutAnsModWriteIter))
    VARIANT_BOOL AnsModWriteIter;
    __declspec(property(get=GetAnsModWriteLargeDef,put=PutAnsModWriteLargeDef))
    VARIANT_BOOL AnsModWriteLargeDef;
    __declspec(property(get=GetAnsModMemory,put=PutAnsModMemory))
    int AnsModMemory;
    __declspec(property(get=GetAnsModVersion,put=PutAnsModVersion))
    int AnsModVersion;
    __declspec(property(get=GetAnsRandOn,put=PutAnsRandOn))
    VARIANT_BOOL AnsRandOn;
    __declspec(property(get=GetAnsRandDisp,put=PutAnsRandDisp))
    VARIANT_BOOL AnsRandDisp;
    __declspec(property(get=GetAnsRandVel,put=PutAnsRandVel))
    VARIANT_BOOL AnsRandVel;
    __declspec(property(get=GetAnsRandAccel,put=PutAnsRandAccel))
    VARIANT_BOOL AnsRandAccel;
    __declspec(property(get=GetAnsRandDispRelative,put=PutAnsRandDispRelative))
    VARIANT_BOOL AnsRandDispRelative;
    __declspec(property(get=GetAnsRandVelRelative,put=PutAnsRandVelRelative))
    VARIANT_BOOL AnsRandVelRelative;
    __declspec(property(get=GetAnsRandAccelRelative,put=PutAnsRandAccelRelative))
    VARIANT_BOOL AnsRandAccelRelative;
    __declspec(property(get=GetFStFilOn,put=PutFStFilOn))
    VARIANT_BOOL FStFilOn;
    __declspec(property(get=GetFStFilLogFile,put=PutFStFilLogFile))
    _bstr_t FStFilLogFile;
    __declspec(property(get=GetFStFilKeepLogFile,put=PutFStFilKeepLogFile))
    VARIANT_BOOL FStFilKeepLogFile;
    __declspec(property(get=GetFStFilEchoLogFile,put=PutFStFilEchoLogFile))
    VARIANT_BOOL FStFilEchoLogFile;
    __declspec(property(get=GetFStFilHyper1,put=PutFStFilHyper1))
    _bstr_t FStFilHyper1;
    __declspec(property(get=GetFStFilHyper2,put=PutFStFilHyper2))
    _bstr_t FStFilHyper2;
    __declspec(property(get=GetFStFilKeepHyper,put=PutFStFilKeepHyper))
    VARIANT_BOOL FStFilKeepHyper;
    __declspec(property(get=GetFStFilScratch1,put=PutFStFilScratch1))
    _bstr_t FStFilScratch1;
    __declspec(property(get=GetFStFilScratch2,put=PutFStFilScratch2))
    _bstr_t FStFilScratch2;
    __declspec(property(get=GetFStHeatOn,put=PutFStHeatOn))
    VARIANT_BOOL FStHeatOn;
    __declspec(property(get=GetFStHeatTempTol,put=PutFStHeatTempTol))
    double FStHeatTempTol;
    __declspec(property(get=GetFStHeatConvergeType,put=PutFStHeatConvergeType))
    int FStHeatConvergeType;
    __declspec(property(get=GetFStHeatMaxIter,put=PutFStHeatMaxIter))
    int FStHeatMaxIter;
    __declspec(property(get=GetFStDynOn,put=PutFStDynOn))
    VARIANT_BOOL FStDynOn;
    __declspec(property(get=GetFStDynSolMethod,put=PutFStDynSolMethod))
    int FStDynSolMethod;
    __declspec(property(get=GetFStDynMassForm,put=PutFStDynMassForm))
    VARIANT_BOOL FStDynMassForm;
    __declspec(property(get=GetFStDynModalDamp,put=PutFStDynModalDamp))
    VARIANT_BOOL FStDynModalDamp;
    __declspec(property(get=GetFStDynModalNorm,put=PutFStDynModalNorm))
    VARIANT_BOOL FStDynModalNorm;
    __declspec(property(get=GetFStDynNumModes,put=PutFStDynNumModes))
    int FStDynNumModes;
    __declspec(property(get=GetFStDynRigidModes,put=PutFStDynRigidModes))
    int FStDynRigidModes;
    __declspec(property(get=GetFStDynFreqMethod,put=PutFStDynFreqMethod))
    int FStDynFreqMethod;
    __declspec(property(get=GetFStDynMassDir,put=PutFStDynMassDir))
    int FStDynMassDir;
    __declspec(property(get=GetFStDynMassTol,put=PutFStDynMassTol))
    double FStDynMassTol;
    __declspec(property(get=GetFStDynIterVec,put=PutFStDynIterVec))
    int FStDynIterVec;
    __declspec(property(get=GetFStDynMaxIter,put=PutFStDynMaxIter))
    int FStDynMaxIter;
    __declspec(property(get=GetFStDynSigDigits,put=PutFStDynSigDigits))
    int FStDynSigDigits;
    __declspec(property(get=GetFStSolOn,put=PutFStSolOn))
    VARIANT_BOOL FStSolOn;
    __declspec(property(get=GetFStSolIter,put=PutFStSolIter))
    VARIANT_BOOL FStSolIter;
    __declspec(property(get=GetFStSolIterConvTol,put=PutFStSolIterConvTol))
    double FStSolIterConvTol;
    __declspec(property(get=GetFStSolIterMaxIter,put=PutFStSolIterMaxIter))
    int FStSolIterMaxIter;
    __declspec(property(get=GetFStSolMemIterMax,put=PutFStSolMemIterMax))
    int FStSolMemIterMax;
    __declspec(property(get=GetFStSolMemVirtMax,put=PutFStSolMemVirtMax))
    int FStSolMemVirtMax;
    __declspec(property(get=GetFStSolMemAppPct,put=PutFStSolMemAppPct))
    int FStSolMemAppPct;
    __declspec(property(get=GetFStSolMemFortranPct,put=PutFStSolMemFortranPct))
    int FStSolMemFortranPct;
    __declspec(property(get=GetFStSolStressStiff,put=PutFStSolStressStiff))
    VARIANT_BOOL FStSolStressStiff;
    __declspec(property(get=GetFStSolSpinSoft,put=PutFStSolSpinSoft))
    VARIANT_BOOL FStSolSpinSoft;
    __declspec(property(get=GetFStSolStiffSoftLoad,put=PutFStSolStiffSoftLoad))
    int FStSolStiffSoftLoad;
    __declspec(property(get=GetFStSolShellAuto,put=PutFStSolShellAuto))
    int FStSolShellAuto;
    __declspec(property(get=GetFStSolSingularity,put=PutFStSolSingularity))
    VARIANT_BOOL FStSolSingularity;
    __declspec(property(get=GetFStSolVerification,put=PutFStSolVerification))
    VARIANT_BOOL FStSolVerification;
    __declspec(property(get=GetFStSolShellAutoAng,put=PutFStSolShellAutoAng))
    double FStSolShellAutoAng;
    __declspec(property(get=GetFStSolSingCriteria,put=PutFStSolSingCriteria))
    double FStSolSingCriteria;
    __declspec(property(get=GetFStSolNodeGroup,put=PutFStSolNodeGroup))
    int FStSolNodeGroup;
    __declspec(property(get=GetFStSolElemGroup,put=PutFStSolElemGroup))
    int FStSolElemGroup;
    __declspec(property(get=GetMarModOn,put=PutMarModOn))
    VARIANT_BOOL MarModOn;
    __declspec(property(get=GetMarModSkipStandard,put=PutMarModSkipStandard))
    VARIANT_BOOL MarModSkipStandard;
    __declspec(property(get=GetMarModStartText,put=PutMarModStartText))
    int MarModStartText;
    __declspec(property(get=GetMarModEndText,put=PutMarModEndText))
    int MarModEndText;
    __declspec(property(get=GetMarModTitle,put=PutMarModTitle))
    _bstr_t MarModTitle;
    __declspec(property(get=GetMarModWorkSpVec,put=PutMarModWorkSpVec))
    int MarModWorkSpVec;
    __declspec(property(get=GetMarModMaxConstrain,put=PutMarModMaxConstrain))
    int MarModMaxConstrain;
    __declspec(property(get=GetMarModFolOn,put=PutMarModFolOn))
    VARIANT_BOOL MarModFolOn;
    __declspec(property(get=GetMarModFolOpt,put=PutMarModFolOpt))
    int MarModFolOpt;
    __declspec(property(get=GetMarModPlasOn,put=PutMarModPlasOn))
    VARIANT_BOOL MarModPlasOn;
    __declspec(property(get=GetMarModPlasOpt,put=PutMarModPlasOpt))
    int MarModPlasOpt;
    __declspec(property(get=GetMarModElasOn,put=PutMarModElasOn))
    VARIANT_BOOL MarModElasOn;
    __declspec(property(get=GetMarModElasTotal,put=PutMarModElasTotal))
    VARIANT_BOOL MarModElasTotal;
    __declspec(property(get=GetMarModElasIs,put=PutMarModElasIs))
    VARIANT_BOOL MarModElasIs;
    __declspec(property(get=GetMarModConstDil,put=PutMarModConstDil))
    VARIANT_BOOL MarModConstDil;
    __declspec(property(get=GetMarModLgDisp,put=PutMarModLgDisp))
    VARIANT_BOOL MarModLgDisp;
    __declspec(property(get=GetMarModUpdate,put=PutMarModUpdate))
    VARIANT_BOOL MarModUpdate;
    __declspec(property(get=GetMarModFinite,put=PutMarModFinite))
    VARIANT_BOOL MarModFinite;
    __declspec(property(get=GetMarModEchoInput,put=PutMarModEchoInput))
    VARIANT_BOOL MarModEchoInput;
    __declspec(property(get=GetMarModWriteGroupSet,put=PutMarModWriteGroupSet))
    VARIANT_BOOL MarModWriteGroupSet;
    __declspec(property(get=GetMarModExtInput,put=PutMarModExtInput))
    VARIANT_BOOL MarModExtInput;
    __declspec(property(get=GetMarModShlTrShear,put=PutMarModShlTrShear))
    VARIANT_BOOL MarModShlTrShear;
    __declspec(property(get=GetMarModPltIntegPt,put=PutMarModPltIntegPt))
    int MarModPltIntegPt;
    __declspec(property(get=GetMarModDistLoadOn,put=PutMarModDistLoadOn))
    VARIANT_BOOL MarModDistLoadOn;
    __declspec(property(get=GetMarModDistLoadList,put=PutMarModDistLoadList))
    int MarModDistLoadList;
    __declspec(property(get=GetMarModDistLoadElem,put=PutMarModDistLoadElem))
    int MarModDistLoadElem;
    __declspec(property(get=GetMarModDistLoadNode,put=PutMarModDistLoadNode))
    int MarModDistLoadNode;
    __declspec(property(get=GetMarModTyingOn,put=PutMarModTyingOn))
    VARIANT_BOOL MarModTyingOn;
    __declspec(property(get=GetMarModTyingCe,put=PutMarModTyingCe))
    int MarModTyingCe;
    __declspec(property(get=GetMarModTyingType,put=PutMarModTyingType))
    int MarModTyingType;
    __declspec(property(get=GetMarModTyingServoNd,put=PutMarModTyingServoNd))
    int MarModTyingServoNd;
    __declspec(property(get=GetMarModTyingServoLk,put=PutMarModTyingServoLk))
    int MarModTyingServoLk;
    __declspec(property(get=GetMarModOutOfCore,put=PutMarModOutOfCore))
    VARIANT_BOOL MarModOutOfCore;
    __declspec(property(get=GetMarModCoreVal,put=PutMarModCoreVal))
    int MarModCoreVal;
    __declspec(property(get=GetMarModProcessors,put=PutMarModProcessors))
    VARIANT_BOOL MarModProcessors;
    __declspec(property(get=GetMarModNoCpu,put=PutMarModNoCpu))
    int MarModNoCpu;
    __declspec(property(get=GetMarModVecLength,put=PutMarModVecLength))
    int MarModVecLength;
    __declspec(property(get=GetMarModParallel,put=PutMarModParallel))
    VARIANT_BOOL MarModParallel;
    __declspec(property(get=GetMarModBWOpt,put=PutMarModBWOpt))
    VARIANT_BOOL MarModBWOpt;
    __declspec(property(get=GetNasBulkResVecOn,put=PutNasBulkResVecOn))
    VARIANT_BOOL NasBulkResVecOn;
    __declspec(property(get=GetNasBulkOgeom,put=PutNasBulkOgeom))
    VARIANT_BOOL NasBulkOgeom;
    __declspec(property(get=GetNasBulkSkipBeamShape,put=PutNasBulkSkipBeamShape))
    VARIANT_BOOL NasBulkSkipBeamShape;
    __declspec(property(get=GetNasExecIterSolve2,put=PutNasExecIterSolve2))
    int NasExecIterSolve2;
    __declspec(property(get=GetvNasNonlinEpsFlag,put=PutvNasNonlinEpsFlag))
    _variant_t vNasNonlinEpsFlag;
    __declspec(property(get=GetvNasNonlinEps,put=PutvNasNonlinEps))
    _variant_t vNasNonlinEps;
    __declspec(property(get=GetvNasModeFreqRange,put=PutvNasModeFreqRange))
    _variant_t vNasModeFreqRange;
    __declspec(property(get=GetvNasModeXYRequest,put=PutvNasModeXYRequest))
    _variant_t vNasModeXYRequest;
    __declspec(property(get=GetvNasRandomRequest,put=PutvNasRandomRequest))
    _variant_t vNasRandomRequest;
    __declspec(property(get=GetvNasRandXYRequest,put=PutvNasRandXYRequest))
    _variant_t vNasRandXYRequest;
    __declspec(property(get=GetvNasGenSpecRequest,put=PutvNasGenSpecRequest))
    _variant_t vNasGenSpecRequest;
    __declspec(property(get=GetvNasGCheckTest,put=PutvNasGCheckTest))
    _variant_t vNasGCheckTest;
    __declspec(property(get=GetvNasGCheckTol,put=PutvNasGCheckTol))
    _variant_t vNasGCheckTol;
    __declspec(property(get=GetvNasGCheckMsg,put=PutvNasGCheckMsg))
    _variant_t vNasGCheckMsg;
    __declspec(property(get=GetvNasMCheckWtDOFSet,put=PutvNasMCheckWtDOFSet))
    _variant_t vNasMCheckWtDOFSet;
    __declspec(property(get=GetvNasMCheckGrndDOFSet,put=PutvNasMCheckGrndDOFSet))
    _variant_t vNasMCheckGrndDOFSet;
    __declspec(property(get=GetvFStDynFreqRange,put=PutvFStDynFreqRange))
    _variant_t vFStDynFreqRange;
    __declspec(property(get=GetNasBulkAutompc,put=PutNasBulkAutompc))
    VARIANT_BOOL NasBulkAutompc;
    __declspec(property(get=GetNasNXStratOn,put=PutNasNXStratOn))
    VARIANT_BOOL NasNXStratOn;
    __declspec(property(get=GetNasNXStratSolver,put=PutNasNXStratSolver))
    int NasNXStratSolver;
    __declspec(property(get=GetNasNXStratAuto,put=PutNasNXStratAuto))
    int NasNXStratAuto;
    __declspec(property(get=GetNasNXStratNposit,put=PutNasNXStratNposit))
    VARIANT_BOOL NasNXStratNposit;
    __declspec(property(get=GetNasNXStratMasstyp,put=PutNasNXStratMasstyp))
    VARIANT_BOOL NasNXStratMasstyp;
    __declspec(property(get=GetNasNXStratTint,put=PutNasNXStratTint))
    int NasNXStratTint;
    __declspec(property(get=GetNasNXStratMstab,put=PutNasNXStratMstab))
    VARIANT_BOOL NasNXStratMstab;
    __declspec(property(get=GetNasNXStratMsfac,put=PutNasNXStratMsfac))
    double NasNXStratMsfac;
    __declspec(property(get=GetNasNXStratDtdelay,put=PutNasNXStratDtdelay))
    double NasNXStratDtdelay;
    __declspec(property(get=GetNasNXStratSdofang,put=PutNasNXStratSdofang))
    double NasNXStratSdofang;
    __declspec(property(get=GetNasNXStratUpform,put=PutNasNXStratUpform))
    VARIANT_BOOL NasNXStratUpform;
    __declspec(property(get=GetNasNXStratDispopt,put=PutNasNXStratDispopt))
    VARIANT_BOOL NasNXStratDispopt;
    __declspec(property(get=GetNasNXStratLoadopt,put=PutNasNXStratLoadopt))
    VARIANT_BOOL NasNXStratLoadopt;
    __declspec(property(get=GetNasNXStratAlpha,put=PutNasNXStratAlpha))
    double NasNXStratAlpha;
    __declspec(property(get=GetNasNXStratDelta,put=PutNasNXStratDelta))
    double NasNXStratDelta;
    __declspec(property(get=GetNasNXStratItemax,put=PutNasNXStratItemax))
    int NasNXStratItemax;
    __declspec(property(get=GetNasNXStratEpsia,put=PutNasNXStratEpsia))
    double NasNXStratEpsia;
    __declspec(property(get=GetNasNXStratEpsib,put=PutNasNXStratEpsib))
    double NasNXStratEpsib;
    __declspec(property(get=GetNasNXStratEpsii,put=PutNasNXStratEpsii))
    double NasNXStratEpsii;
    __declspec(property(get=GetNasNXStratLsearch,put=PutNasNXStratLsearch))
    int NasNXStratLsearch;
    __declspec(property(get=GetNasNXStratMaxite,put=PutNasNXStratMaxite))
    int NasNXStratMaxite;
    __declspec(property(get=GetNasNXStratConvcri,put=PutNasNXStratConvcri))
    int NasNXStratConvcri;
    __declspec(property(get=GetNasNXStratEtol,put=PutNasNXStratEtol))
    double NasNXStratEtol;
    __declspec(property(get=GetNasNXStratRtol,put=PutNasNXStratRtol))
    double NasNXStratRtol;
    __declspec(property(get=GetNasNXStratRnorm,put=PutNasNXStratRnorm))
    double NasNXStratRnorm;
    __declspec(property(get=GetNasNXStratRmnorm,put=PutNasNXStratRmnorm))
    double NasNXStratRmnorm;
    __declspec(property(get=GetNasNXStratRctol,put=PutNasNXStratRctol))
    double NasNXStratRctol;
    __declspec(property(get=GetNasNXStratDtol,put=PutNasNXStratDtol))
    double NasNXStratDtol;
    __declspec(property(get=GetNasNXStratDnorm,put=PutNasNXStratDnorm))
    double NasNXStratDnorm;
    __declspec(property(get=GetNasNXStratDmnorm,put=PutNasNXStratDmnorm))
    double NasNXStratDmnorm;
    __declspec(property(get=GetNasNXStratStol,put=PutNasNXStratStol))
    double NasNXStratStol;
    __declspec(property(get=GetNasNXStratRconsm,put=PutNasNXStratRconsm))
    double NasNXStratRconsm;
    __declspec(property(get=GetNasNXStratEnlsth,put=PutNasNXStratEnlsth))
    double NasNXStratEnlsth;
    __declspec(property(get=GetNasNXStratAtssubd,put=PutNasNXStratAtssubd))
    int NasNXStratAtssubd;
    __declspec(property(get=GetNasNXStratAtsmxdt,put=PutNasNXStratAtsmxdt))
    double NasNXStratAtsmxdt;
    __declspec(property(get=GetNasNXStratAtsnext,put=PutNasNXStratAtsnext))
    int NasNXStratAtsnext;
    __declspec(property(get=GetNasNXStratAtsdfac,put=PutNasNXStratAtsdfac))
    double NasNXStratAtsdfac;
    __declspec(property(get=GetNasNXStratAtslows,put=PutNasNXStratAtslows))
    VARIANT_BOOL NasNXStratAtslows;
    __declspec(property(get=GetNasNXStratAtsdamp,put=PutNasNXStratAtsdamp))
    double NasNXStratAtsdamp;
    __declspec(property(get=GetNasNXStratLdcgrid,put=PutNasNXStratLdcgrid))
    int NasNXStratLdcgrid;
    __declspec(property(get=GetNasNXStratLdcdof,put=PutNasNXStratLdcdof))
    int NasNXStratLdcdof;
    __declspec(property(get=GetNasNXStratLdcdisp,put=PutNasNXStratLdcdisp))
    double NasNXStratLdcdisp;
    __declspec(property(get=GetNasNXStratLdcimax,put=PutNasNXStratLdcimax))
    double NasNXStratLdcimax;
    __declspec(property(get=GetNasNXStratLdcdmax,put=PutNasNXStratLdcdmax))
    double NasNXStratLdcdmax;
    __declspec(property(get=GetNasNXStratLdccont,put=PutNasNXStratLdccont))
    VARIANT_BOOL NasNXStratLdccont;
    __declspec(property(get=GetNasNXStratLdcsubd,put=PutNasNXStratLdcsubd))
    int NasNXStratLdcsubd;
    __declspec(property(get=GetNasNXStratImpact,put=PutNasNXStratImpact))
    int NasNXStratImpact;
    __declspec(property(get=GetNasNXStratNsupp,put=PutNasNXStratNsupp))
    int NasNXStratNsupp;
    __declspec(property(get=GetNasNXStratTstart,put=PutNasNXStratTstart))
    double NasNXStratTstart;
    __declspec(property(get=GetNasNXStratIrint,put=PutNasNXStratIrint))
    int NasNXStratIrint;
    __declspec(property(get=GetNasNXStratNsubgrp,put=PutNasNXStratNsubgrp))
    int NasNXStratNsubgrp;
    __declspec(property(get=GetNasNXStratElcv,put=PutNasNXStratElcv))
    VARIANT_BOOL NasNXStratElcv;
    __declspec(property(get=GetNasNXStratEqrbar,put=PutNasNXStratEqrbar))
    int NasNXStratEqrbar;
    __declspec(property(get=GetNasNXStratEqrbe2,put=PutNasNXStratEqrbe2))
    int NasNXStratEqrbe2;
    __declspec(property(get=GetNasNXStratSpringk,put=PutNasNXStratSpringk))
    double NasNXStratSpringk;
    __declspec(property(get=GetNasNXStratBeame,put=PutNasNXStratBeame))
    double NasNXStratBeame;
    __declspec(property(get=GetNasNXStratBeama,put=PutNasNXStratBeama))
    double NasNXStratBeama;
    __declspec(property(get=GetNasNXStratRblcrit,put=PutNasNXStratRblcrit))
    double NasNXStratRblcrit;
    __declspec(property(get=GetNasNXStratXstep,put=PutNasNXStratXstep))
    int NasNXStratXstep;
    __declspec(property(get=GetNasNXStratXdtcal,put=PutNasNXStratXdtcal))
    int NasNXStratXdtcal;
    __declspec(property(get=GetNasNXStratXdtfac,put=PutNasNXStratXdtfac))
    double NasNXStratXdtfac;
    __declspec(property(get=GetNasNXStratXmscale,put=PutNasNXStratXmscale))
    double NasNXStratXmscale;
    __declspec(property(get=GetNasNXStratXdtmin1,put=PutNasNXStratXdtmin1))
    double NasNXStratXdtmin1;
    __declspec(property(get=GetNasNXStratXdtmin2,put=PutNasNXStratXdtmin2))
    double NasNXStratXdtmin2;
    __declspec(property(get=GetNasNXStratIcmode,put=PutNasNXStratIcmode))
    int NasNXStratIcmode;
    __declspec(property(get=GetNasNXStratUlform,put=PutNasNXStratUlform))
    int NasNXStratUlform;
    __declspec(property(get=GetNasNXStratTimeSteps,put=PutNasNXStratTimeSteps))
    _variant_t NasNXStratTimeSteps;
    __declspec(property(get=GetNasNXStratTimeIncrement,put=PutNasNXStratTimeIncrement))
    _variant_t NasNXStratTimeIncrement;
    __declspec(property(get=GetNasNXStratSkipFactor,put=PutNasNXStratSkipFactor))
    _variant_t NasNXStratSkipFactor;
    __declspec(property(get=GetNasNXStratCstype,put=PutNasNXStratCstype))
    int NasNXStratCstype;
    __declspec(property(get=GetDynModOn,put=PutDynModOn))
    VARIANT_BOOL DynModOn;
    __declspec(property(get=GetDynModExportRigidNodes,put=PutDynModExportRigidNodes))
    VARIANT_BOOL DynModExportRigidNodes;
    __declspec(property(get=GetDynModMatlBasedParts,put=PutDynModMatlBasedParts))
    VARIANT_BOOL DynModMatlBasedParts;
    __declspec(property(get=GetDynModGroupsAsSets,put=PutDynModGroupsAsSets))
    VARIANT_BOOL DynModGroupsAsSets;
    __declspec(property(get=GetDynModSkipStandard,put=PutDynModSkipStandard))
    VARIANT_BOOL DynModSkipStandard;
    __declspec(property(get=GetDynModStartText,put=PutDynModStartText))
    int DynModStartText;
    __declspec(property(get=GetDynModEndText,put=PutDynModEndText))
    int DynModEndText;
    __declspec(property(get=GetNasBulkAutospcType,put=PutNasBulkAutospcType))
    int NasBulkAutospcType;
    __declspec(property(get=GetNasExecMemory,put=PutNasExecMemory))
    int NasExecMemory;
    __declspec(property(get=GetNasExecExtendedMessages,put=PutNasExecExtendedMessages))
    VARIANT_BOOL NasExecExtendedMessages;
    __declspec(property(get=GetNasExecSystemCell,put=PutNasExecSystemCell))
    _bstr_t NasExecSystemCell;
    __declspec(property(get=GetNasExecScratchDir1,put=PutNasExecScratchDir1))
    _bstr_t NasExecScratchDir1;
    __declspec(property(get=GetNasExecScratchDir2,put=PutNasExecScratchDir2))
    _bstr_t NasExecScratchDir2;
    __declspec(property(get=GetNasExecScratchSize1,put=PutNasExecScratchSize1))
    int NasExecScratchSize1;
    __declspec(property(get=GetNasExecScratchSize2,put=PutNasExecScratchSize2))
    int NasExecScratchSize2;
    __declspec(property(get=GetNasBulkRigidThermalExp,put=PutNasBulkRigidThermalExp))
    VARIANT_BOOL NasBulkRigidThermalExp;
    __declspec(property(get=GetNasBulkSrcomps,put=PutNasBulkSrcomps))
    VARIANT_BOOL NasBulkSrcomps;
    __declspec(property(get=GetNasBulkNofisr,put=PutNasBulkNofisr))
    VARIANT_BOOL NasBulkNofisr;
    __declspec(property(get=GetNasBulkLgstrn,put=PutNasBulkLgstrn))
    VARIANT_BOOL NasBulkLgstrn;
    __declspec(property(get=GetNasModesSkipEigr,put=PutNasModesSkipEigr))
    VARIANT_BOOL NasModesSkipEigr;
    __declspec(property(get=GetvNasModeImagFreqRange,put=PutvNasModeImagFreqRange))
    _variant_t vNasModeImagFreqRange;
    __declspec(property(get=GetNasModesComplexConverge,put=PutNasModesComplexConverge))
    double NasModesComplexConverge;
    __declspec(property(get=GetNasModesComplexRegionWidth,put=PutNasModesComplexRegionWidth))
    double NasModesComplexRegionWidth;
    __declspec(property(get=GetNasNXStratElrescs,put=PutNasNXStratElrescs))
    VARIANT_BOOL NasNXStratElrescs;
    __declspec(property(get=GetNasDdamOn,put=PutNasDdamOn))
    VARIANT_BOOL NasDdamOn;
    __declspec(property(get=GetNasDdamEnabled,put=PutNasDdamEnabled))
    VARIANT_BOOL NasDdamEnabled;
    __declspec(property(get=GetNasDdamIncludePath,put=PutNasDdamIncludePath))
    VARIANT_BOOL NasDdamIncludePath;
    __declspec(property(get=GetNasDdamIsDDAM,put=PutNasDdamIsDDAM))
    VARIANT_BOOL NasDdamIsDDAM;
    __declspec(property(get=GetNasDdamUseBuiltInCoeff,put=PutNasDdamUseBuiltInCoeff))
    int NasDdamUseBuiltInCoeff;
    __declspec(property(get=GetNasDdamEquationType,put=PutNasDdamEquationType))
    int NasDdamEquationType;
    __declspec(property(get=GetNasDdamSurfaceShip,put=PutNasDdamSurfaceShip))
    int NasDdamSurfaceShip;
    __declspec(property(get=GetNasDdamEquipmentLocation,put=PutNasDdamEquipmentLocation))
    int NasDdamEquipmentLocation;
    __declspec(property(get=GetNasDdamElasticPlastic,put=PutNasDdamElasticPlastic))
    int NasDdamElasticPlastic;
    __declspec(property(get=GetNasDdamForeAftDirection,put=PutNasDdamForeAftDirection))
    int NasDdamForeAftDirection;
    __declspec(property(get=GetNasDdamVerticalDirection,put=PutNasDdamVerticalDirection))
    int NasDdamVerticalDirection;
    __declspec(property(get=GetNasDdamDirectionSequence,put=PutNasDdamDirectionSequence))
    int NasDdamDirectionSequence;
    __declspec(property(get=GetNasDdamMassToWeight,put=PutNasDdamMassToWeight))
    double NasDdamMassToWeight;
    __declspec(property(get=GetNasDdamWeightCutoffPct,put=PutNasDdamWeightCutoffPct))
    double NasDdamWeightCutoffPct;
    __declspec(property(get=GetNasDdamGCutoff,put=PutNasDdamGCutoff))
    double NasDdamGCutoff;
    __declspec(property(get=GetNasDdamSpecCoeffFile,put=PutNasDdamSpecCoeffFile))
    _bstr_t NasDdamSpecCoeffFile;
    __declspec(property(get=GetvNasDdamCoeffOn,put=PutvNasDdamCoeffOn))
    _variant_t vNasDdamCoeffOn;
    __declspec(property(get=GetvNasDdamCoeffVal,put=PutvNasDdamCoeffVal))
    _variant_t vNasDdamCoeffVal;
    __declspec(property(get=GetNasRotorOn,put=PutNasRotorOn))
    VARIANT_BOOL NasRotorOn;
    __declspec(property(get=GetNasRotorEnabled,put=PutNasRotorEnabled))
    VARIANT_BOOL NasRotorEnabled;
    __declspec(property(get=GetNasRotorIncludePath,put=PutNasRotorIncludePath))
    VARIANT_BOOL NasRotorIncludePath;
    __declspec(property(get=GetNasRotorSingleRotor,put=PutNasRotorSingleRotor))
    VARIANT_BOOL NasRotorSingleRotor;
    __declspec(property(get=GetNasRotorFixedRefSys,put=PutNasRotorFixedRefSys))
    VARIANT_BOOL NasRotorFixedRefSys;
    __declspec(property(get=GetNasRotorAsyncResponse,put=PutNasRotorAsyncResponse))
    VARIANT_BOOL NasRotorAsyncResponse;
    __declspec(property(get=GetNasRotorSteinerInertia,put=PutNasRotorSteinerInertia))
    VARIANT_BOOL NasRotorSteinerInertia;
    __declspec(property(get=GetNasRotorForceExcitation,put=PutNasRotorForceExcitation))
    VARIANT_BOOL NasRotorForceExcitation;
    __declspec(property(get=GetNasRotorDoCSV,put=PutNasRotorDoCSV))
    VARIANT_BOOL NasRotorDoCSV;
    __declspec(property(get=GetNasRotorDoGPF,put=PutNasRotorDoGPF))
    VARIANT_BOOL NasRotorDoGPF;
    __declspec(property(get=GetNasRotorInputUnits,put=PutNasRotorInputUnits))
    int NasRotorInputUnits;
    __declspec(property(get=GetNasRotorOutputUnits,put=PutNasRotorOutputUnits))
    int NasRotorOutputUnits;
    __declspec(property(get=GetNasRotorPrintedOutput,put=PutNasRotorPrintedOutput))
    int NasRotorPrintedOutput;
    __declspec(property(get=GetNasRotorSpeedNumSteps,put=PutNasRotorSpeedNumSteps))
    int NasRotorSpeedNumSteps;
    __declspec(property(get=GetNasRotorComplexModeOutput,put=PutNasRotorComplexModeOutput))
    double NasRotorComplexModeOutput;
    __declspec(property(get=GetNasRotorWhirlThreshold,put=PutNasRotorWhirlThreshold))
    double NasRotorWhirlThreshold;
    __declspec(property(get=GetNasRotorExcitationOrder,put=PutNasRotorExcitationOrder))
    double NasRotorExcitationOrder;
    __declspec(property(get=GetNasRotorSpeedStart,put=PutNasRotorSpeedStart))
    double NasRotorSpeedStart;
    __declspec(property(get=GetNasRotorSpeedStep,put=PutNasRotorSpeedStep))
    double NasRotorSpeedStep;
    __declspec(property(get=GetNasRotorModeSelection,put=PutNasRotorModeSelection))
    _bstr_t NasRotorModeSelection;
    __declspec(property(get=GetNasNXStratCtdisp,put=PutNasNXStratCtdisp))
    int NasNXStratCtdisp;
    __declspec(property(get=GetNasNXStratCtdamp,put=PutNasNXStratCtdamp))
    int NasNXStratCtdamp;
    __declspec(property(get=GetNasNXStratCtdampN,put=PutNasNXStratCtdampN))
    double NasNXStratCtdampN;
    __declspec(property(get=GetNasNXStratCtdampT,put=PutNasNXStratCtdampT))
    double NasNXStratCtdampT;
    __declspec(property(get=GetNasBulkInrelVal,put=PutNasBulkInrelVal))
    int NasBulkInrelVal;
    __declspec(property(get=GetNasBulkGapsAsContact,put=PutNasBulkGapsAsContact))
    VARIANT_BOOL NasBulkGapsAsContact;
    __declspec(property(get=GetNasNXStratMaxDisp,put=PutNasNXStratMaxDisp))
    double NasNXStratMaxDisp;
    __declspec(property(get=GetNasNXStratBoltstp,put=PutNasNXStratBoltstp))
    int NasNXStratBoltstp;
    __declspec(property(get=GetNasBulkBoltFact,put=PutNasBulkBoltFact))
    VARIANT_BOOL NasBulkBoltFact;
    __declspec(property(get=GetNasBulkBoltFactVal,put=PutNasBulkBoltFactVal))
    double NasBulkBoltFactVal;
    __declspec(property(get=GetNasNXStratCvssval,put=PutNasNXStratCvssval))
    VARIANT_BOOL NasNXStratCvssval;
    __declspec(property(get=GetNasNXStratXtcurve,put=PutNasNXStratXtcurve))
    VARIANT_BOOL NasNXStratXtcurve;
    __declspec(property(get=GetNasNXStratRtalg,put=PutNasNXStratRtalg))
    VARIANT_BOOL NasNXStratRtalg;
    __declspec(property(get=GetNasNXStratTnslcf,put=PutNasNXStratTnslcf))
    VARIANT_BOOL NasNXStratTnslcf;
    __declspec(property(get=GetNasNXStratDrillkf,put=PutNasNXStratDrillkf))
    double NasNXStratDrillkf;
    __declspec(property(get=GetNasNXStratLslower,put=PutNasNXStratLslower))
    double NasNXStratLslower;
    __declspec(property(get=GetNasNXStratLsupper,put=PutNasNXStratLsupper))
    double NasNXStratLsupper;
    __declspec(property(get=GetNasExecSolutionMonitor,put=PutNasExecSolutionMonitor))
    VARIANT_BOOL NasExecSolutionMonitor;
    __declspec(property(get=GetNasBulkDynLdAsLOADSET,put=PutNasBulkDynLdAsLOADSET))
    VARIANT_BOOL NasBulkDynLdAsLOADSET;
    __declspec(property(get=GetNasBulkResViner,put=PutNasBulkResViner))
    VARIANT_BOOL NasBulkResViner;
    __declspec(property(get=GetNasGCheckNone,put=PutNasGCheckNone))
    VARIANT_BOOL NasGCheckNone;
    __declspec(property(get=GetNasBulkWriteAllLoadBCSets,put=PutNasBulkWriteAllLoadBCSets))
    VARIANT_BOOL NasBulkWriteAllLoadBCSets;
    __declspec(property(get=GetNasDynOn,put=PutNasDynOn))
    VARIANT_BOOL NasDynOn;
    __declspec(property(get=GetNasDynUseLoadSet,put=PutNasDynUseLoadSet))
    VARIANT_BOOL NasDynUseLoadSet;
    __declspec(property(get=GetNasDynDampOverall,put=PutNasDynDampOverall))
    double NasDynDampOverall;
    __declspec(property(get=GetNasDynDampW3,put=PutNasDynDampW3))
    double NasDynDampW3;
    __declspec(property(get=GetNasDynDampW4,put=PutNasDynDampW4))
    double NasDynDampW4;
    __declspec(property(get=GetvNasDynKeepFreq,put=PutvNasDynKeepFreq))
    _variant_t vNasDynKeepFreq;
    __declspec(property(get=GetNasDynTranDT,put=PutNasDynTranDT))
    double NasDynTranDT;
    __declspec(property(get=GetNasDynFreqTbl,put=PutNasDynFreqTbl))
    int NasDynFreqTbl;
    __declspec(property(get=GetNasDynDampModalTbl,put=PutNasDynDampModalTbl))
    int NasDynDampModalTbl;
    __declspec(property(get=GetNasDynKeepModes,put=PutNasDynKeepModes))
    int NasDynKeepModes;
    __declspec(property(get=GetNasDynTranTimeSteps,put=PutNasDynTranTimeSteps))
    int NasDynTranTimeSteps;
    __declspec(property(get=GetNasDynTransOutInt,put=PutNasDynTransOutInt))
    int NasDynTransOutInt;
    __declspec(property(get=GetNasDynDampModalMethod,put=PutNasDynDampModalMethod))
    VARIANT_BOOL NasDynDampModalMethod;
    __declspec(property(get=GetNasDynRespSpect,put=PutNasDynRespSpect))
    int NasDynRespSpect;
    __declspec(property(get=GetNasDynFreqID,put=PutNasDynFreqID))
    int NasDynFreqID;
    __declspec(property(get=GetNasModeDampOverall,put=PutNasModeDampOverall))
    double NasModeDampOverall;
    __declspec(property(get=GetNasBulkEnfmotn,put=PutNasBulkEnfmotn))
    VARIANT_BOOL NasBulkEnfmotn;
    __declspec(property(get=GetNasBulkEnfmotnOpt,put=PutNasBulkEnfmotnOpt))
    int NasBulkEnfmotnOpt;
    __declspec(property(get=GetNasDynFzero,put=PutNasDynFzero))
    VARIANT_BOOL NasDynFzero;
    __declspec(property(get=GetNasDynFzeroVal,put=PutNasDynFzeroVal))
    double NasDynFzeroVal;
    __declspec(property(get=GetNasDynWmodal,put=PutNasDynWmodal))
    VARIANT_BOOL NasDynWmodal;
    __declspec(property(get=GetNasDdamForceConversion,put=PutNasDdamForceConversion))
    double NasDdamForceConversion;
    __declspec(property(get=GetNasDdamAccelConversion,put=PutNasDdamAccelConversion))
    double NasDdamAccelConversion;
    __declspec(property(get=GetNasNXStratAtsmass,put=PutNasNXStratAtsmass))
    double NasNXStratAtsmass;
    __declspec(property(get=GetNasNXStratModexNew,put=PutNasNXStratModexNew))
    int NasNXStratModexNew;
    __declspec(property(get=GetNasBulkCntAset,put=PutNasBulkCntAset))
    VARIANT_BOOL NasBulkCntAset;
    __declspec(property(get=GetNasAeroOn,put=PutNasAeroOn))
    VARIANT_BOOL NasAeroOn;
    __declspec(property(get=GetNasAeroCsID,put=PutNasAeroCsID))
    int NasAeroCsID;
    __declspec(property(get=GetNasAeroRefCsID,put=PutNasAeroRefCsID))
    int NasAeroRefCsID;
    __declspec(property(get=GetNasAeroRefLength,put=PutNasAeroRefLength))
    double NasAeroRefLength;
    __declspec(property(get=GetNasAeroRefSpan,put=PutNasAeroRefSpan))
    double NasAeroRefSpan;
    __declspec(property(get=GetNasAeroRefArea,put=PutNasAeroRefArea))
    double NasAeroRefArea;
    __declspec(property(get=GetNasAeroSymXY,put=PutNasAeroSymXY))
    int NasAeroSymXY;
    __declspec(property(get=GetNasAeroSymxz,put=PutNasAeroSymxz))
    int NasAeroSymxz;
    __declspec(property(get=GetNasAeroVelo,put=PutNasAeroVelo))
    double NasAeroVelo;
    __declspec(property(get=GetNasAeroRefDens,put=PutNasAeroRefDens))
    double NasAeroRefDens;
    __declspec(property(get=GetNasAeroMkFuID,put=PutNasAeroMkFuID))
    int NasAeroMkFuID;
    __declspec(property(get=GetNasAeroAeunit,put=PutNasAeroAeunit))
    VARIANT_BOOL NasAeroAeunit;
    __declspec(property(get=GetNasAeroAeunitVal,put=PutNasAeroAeunitVal))
    double NasAeroAeunitVal;
    __declspec(property(get=GetvNasAeroFreqKeep,put=PutvNasAeroFreqKeep))
    _variant_t vNasAeroFreqKeep;
    __declspec(property(get=GetNasAeroModesKeep,put=PutNasAeroModesKeep))
    int NasAeroModesKeep;
    __declspec(property(get=GetNasAerobPARAMfzero,put=PutNasAerobPARAMfzero))
    VARIANT_BOOL NasAerobPARAMfzero;
    __declspec(property(get=GetNasAerodPARAMfzero,put=PutNasAerodPARAMfzero))
    double NasAerodPARAMfzero;
    __declspec(property(get=GetNasAeroDampMethod,put=PutNasAeroDampMethod))
    int NasAeroDampMethod;
    __declspec(property(get=GetNasExtSEOutOn,put=PutNasExtSEOutOn))
    VARIANT_BOOL NasExtSEOutOn;
    __declspec(property(get=GetNasExtSEOutExtID,put=PutNasExtSEOutExtID))
    int NasExtSEOutExtID;
    __declspec(property(get=GetNasExtSEOutMatStiffness,put=PutNasExtSEOutMatStiffness))
    VARIANT_BOOL NasExtSEOutMatStiffness;
    __declspec(property(get=GetNasExtSEOutMatMass,put=PutNasExtSEOutMatMass))
    VARIANT_BOOL NasExtSEOutMatMass;
    __declspec(property(get=GetNasExtSEOutMatK4damp,put=PutNasExtSEOutMatK4damp))
    VARIANT_BOOL NasExtSEOutMatK4damp;
    __declspec(property(get=GetNasExtSEOutMatLoads,put=PutNasExtSEOutMatLoads))
    VARIANT_BOOL NasExtSEOutMatLoads;
    __declspec(property(get=GetNasExtSEOutTo,put=PutNasExtSEOutTo))
    enum zAnalysisExtSEOutTo NasExtSEOutTo;
    __declspec(property(get=GetNasExtSEOutUnitID,put=PutNasExtSEOutUnitID))
    int NasExtSEOutUnitID;
    __declspec(property(get=GetNasExtSEOutAssignTitle,put=PutNasExtSEOutAssignTitle))
    _bstr_t NasExtSEOutAssignTitle;
    __declspec(property(get=GetNasExtSEOutOptGeom,put=PutNasExtSEOutOptGeom))
    VARIANT_BOOL NasExtSEOutOptGeom;
    __declspec(property(get=GetNasExtSEOutOptAsmbulk,put=PutNasExtSEOutOptAsmbulk))
    VARIANT_BOOL NasExtSEOutOptAsmbulk;
    __declspec(property(get=GetNasExtSEOutOptExtbulk,put=PutNasExtSEOutOptExtbulk))
    VARIANT_BOOL NasExtSEOutOptExtbulk;
    __declspec(property(get=GetNasBulkSecomb,put=PutNasBulkSecomb))
    VARIANT_BOOL NasBulkSecomb;
    __declspec(property(get=GetNasExecAllowDuplicateNodes,put=PutNasExecAllowDuplicateNodes))
    VARIANT_BOOL NasExecAllowDuplicateNodes;
    __declspec(property(get=GetNasExecWriteSERefPath,put=PutNasExecWriteSERefPath))
    VARIANT_BOOL NasExecWriteSERefPath;
    __declspec(property(get=GetAnsModSkipPreprocessCMD,put=PutAnsModSkipPreprocessCMD))
    VARIANT_BOOL AnsModSkipPreprocessCMD;
    __declspec(property(get=GetNasBulkPARAMBailout,put=PutNasBulkPARAMBailout))
    VARIANT_BOOL NasBulkPARAMBailout;
    __declspec(property(get=GetNasExecDuplicateTolerance,put=PutNasExecDuplicateTolerance))
    double NasExecDuplicateTolerance;
    __declspec(property(get=GetNasExecRestartReadOnly,put=PutNasExecRestartReadOnly))
    VARIANT_BOOL NasExecRestartReadOnly;
    __declspec(property(get=GetNasExecRestartVersion,put=PutNasExecRestartVersion))
    int NasExecRestartVersion;
    __declspec(property(get=GetNasExecRestartSubcase,put=PutNasExecRestartSubcase))
    int NasExecRestartSubcase;
    __declspec(property(get=GetNasOptimAnalysisType,put=PutNasOptimAnalysisType))
    enum zAnalysisType NasOptimAnalysisType;
    __declspec(property(get=GetNasOptimTrackModes,put=PutNasOptimTrackModes))
    VARIANT_BOOL NasOptimTrackModes;
    __declspec(property(get=GetNasNonlinKDAMP,put=PutNasNonlinKDAMP))
    VARIANT_BOOL NasNonlinKDAMP;
    __declspec(property(get=GetNasNonlinKUPDATE,put=PutNasNonlinKUPDATE))
    int NasNonlinKUPDATE;
    __declspec(property(get=GetNasExecAnalyzeFilename,put=PutNasExecAnalyzeFilename))
    _bstr_t NasExecAnalyzeFilename;
    __declspec(property(get=GetvNasGCheckTest2,put=PutvNasGCheckTest2))
    _variant_t vNasGCheckTest2;
    __declspec(property(get=GetvNasGCheckTol2,put=PutvNasGCheckTol2))
    _variant_t vNasGCheckTol2;
    __declspec(property(get=GetvNasGCheckMsg2,put=PutvNasGCheckMsg2))
    _variant_t vNasGCheckMsg2;
    __declspec(property(get=GetNasExtSEOutAssignForm,put=PutNasExtSEOutAssignForm))
    enum zAnalysisAssignForm NasExtSEOutAssignForm;
    __declspec(property(get=GetNasMscCtOn,put=PutNasMscCtOn))
    VARIANT_BOOL NasMscCtOn;
    __declspec(property(get=GetNasMscCtEnable,put=PutNasMscCtEnable))
    VARIANT_BOOL NasMscCtEnable;
    __declspec(property(get=GetNasMscCtDDULMT,put=PutNasMscCtDDULMT))
    double NasMscCtDDULMT;
    __declspec(property(get=GetNasMscCtRVCNST,put=PutNasMscCtRVCNST))
    double NasMscCtRVCNST;
    __declspec(property(get=GetNasMscCtSLDLMT,put=PutNasMscCtSLDLMT))
    double NasMscCtSLDLMT;
    __declspec(property(get=GetNasMscCtTAUGMNT,put=PutNasMscCtTAUGMNT))
    VARIANT_BOOL NasMscCtTAUGMNT;
    __declspec(property(get=GetNasMscCtAUGMENT,put=PutNasMscCtAUGMENT))
    int NasMscCtAUGMENT;
    __declspec(property(get=GetNasMscCtBEAMB,put=PutNasMscCtBEAMB))
    VARIANT_BOOL NasMscCtBEAMB;
    __declspec(property(get=GetNasMscCtERRBAS,put=PutNasMscCtERRBAS))
    VARIANT_BOOL NasMscCtERRBAS;
    __declspec(property(get=GetNasMscCtFTYPE,put=PutNasMscCtFTYPE))
    int NasMscCtFTYPE;
    __declspec(property(get=GetNasMscCtIBSEP,put=PutNasMscCtIBSEP))
    int NasMscCtIBSEP;
    __declspec(property(get=GetNasMscCtICSEP,put=PutNasMscCtICSEP))
    int NasMscCtICSEP;
    __declspec(property(get=GetNasMscCtMAXSEP,put=PutNasMscCtMAXSEP))
    int NasMscCtMAXSEP;
    __declspec(property(get=GetNasMscCtMETHOD,put=PutNasMscCtMETHOD))
    int NasMscCtMETHOD;
    __declspec(property(get=GetNasMscCtNLGLUE,put=PutNasMscCtNLGLUE))
    VARIANT_BOOL NasMscCtNLGLUE;
    __declspec(property(get=GetNasMscCtNODSEP,put=PutNasMscCtNODSEP))
    int NasMscCtNODSEP;
    __declspec(property(get=GetNasMscCtSEGSYM,put=PutNasMscCtSEGSYM))
    VARIANT_BOOL NasMscCtSEGSYM;
    __declspec(property(get=GetNasMscCtAUGDIST,put=PutNasMscCtAUGDIST))
    double NasMscCtAUGDIST;
    __declspec(property(get=GetNasMscCtBIAS,put=PutNasMscCtBIAS))
    double NasMscCtBIAS;
    __declspec(property(get=GetNasMscCtERROR,put=PutNasMscCtERROR))
    double NasMscCtERROR;
    __declspec(property(get=GetNasMscCtFNTOL,put=PutNasMscCtFNTOL))
    double NasMscCtFNTOL;
    __declspec(property(get=GetNasMscCtPENALT,put=PutNasMscCtPENALT))
    double NasMscCtPENALT;
    __declspec(property(get=GetNasMscCtSTKSLP,put=PutNasMscCtSTKSLP))
    double NasMscCtSTKSLP;
    __declspec(property(get=GetNasMscCtTPENALT,put=PutNasMscCtTPENALT))
    double NasMscCtTPENALT;
    __declspec(property(get=GetNasBulkMgrid,put=PutNasBulkMgrid))
    VARIANT_BOOL NasBulkMgrid;
    __declspec(property(get=GetNasBulkSwpangle,put=PutNasBulkSwpangle))
    VARIANT_BOOL NasBulkSwpangle;
    __declspec(property(get=GetNasBulkAlpha1,put=PutNasBulkAlpha1))
    VARIANT_BOOL NasBulkAlpha1;
    __declspec(property(get=GetNasBulkAlpha2,put=PutNasBulkAlpha2))
    VARIANT_BOOL NasBulkAlpha2;
    __declspec(property(get=GetNasBulkSwpangleVal,put=PutNasBulkSwpangleVal))
    double NasBulkSwpangleVal;
    __declspec(property(get=GetNasBulkMdofVal,put=PutNasBulkMdofVal))
    int NasBulkMdofVal;
    __declspec(property(get=GetNasBulkMgridID,put=PutNasBulkMgridID))
    int NasBulkMgridID;
    __declspec(property(get=GetvNasBulkAlpha1Val,put=PutvNasBulkAlpha1Val))
    _variant_t vNasBulkAlpha1Val;
    __declspec(property(get=GetvNasBulkAlpha2Val,put=PutvNasBulkAlpha2Val))
    _variant_t vNasBulkAlpha2Val;
    __declspec(property(get=GetNasAerobOPPHIPA,put=PutNasAerobOPPHIPA))
    VARIANT_BOOL NasAerobOPPHIPA;
    __declspec(property(get=GetNasNXStratBeamalg,put=PutNasNXStratBeamalg))
    VARIANT_BOOL NasNXStratBeamalg;
    __declspec(property(get=GetNasExecGPU,put=PutNasExecGPU))
    VARIANT_BOOL NasExecGPU;
    __declspec(property(get=GetNasBulkEndTextOutsideBulk,put=PutNasBulkEndTextOutsideBulk))
    VARIANT_BOOL NasBulkEndTextOutsideBulk;
    __declspec(property(get=GetNasExecGPUOpt,put=PutNasExecGPUOpt))
    int NasExecGPUOpt;
    __declspec(property(get=GetLinkedSolverOption,put=PutLinkedSolverOption))
    enum zLinkedSolver LinkedSolverOption;
    __declspec(property(get=GetNasNXStratPlasalg,put=PutNasNXStratPlasalg))
    int NasNXStratPlasalg;
    __declspec(property(get=GetNasExecUserCmdLine,put=PutNasExecUserCmdLine))
    _bstr_t NasExecUserCmdLine;
    __declspec(property(get=GetNasRandCorrOn,put=PutNasRandCorrOn))
    VARIANT_BOOL NasRandCorrOn;
    __declspec(property(get=GetNasRandCorrLagInterval,put=PutNasRandCorrLagInterval))
    int NasRandCorrLagInterval;
    __declspec(property(get=GetNasRandCorrLagStart,put=PutNasRandCorrLagStart))
    double NasRandCorrLagStart;
    __declspec(property(get=GetNasRandCorrLagMax,put=PutNasRandCorrLagMax))
    double NasRandCorrLagMax;
    __declspec(property(get=GetvNasRandXYRequest2,put=PutvNasRandXYRequest2))
    _variant_t vNasRandXYRequest2;
    __declspec(property(get=GetNasRandXYAuto,put=PutNasRandXYAuto))
    VARIANT_BOOL NasRandXYAuto;
    __declspec(property(get=GetNasRandXYPsdf,put=PutNasRandXYPsdf))
    VARIANT_BOOL NasRandXYPsdf;
    __declspec(property(get=GetNasNonlinAdapt,put=PutNasNonlinAdapt))
    VARIANT_BOOL NasNonlinAdapt;
    __declspec(property(get=GetCaseTitle,put=PutCaseTitle))
    _bstr_t CaseTitle;
    __declspec(property(get=GetEcho,put=PutEcho))
    _bstr_t Echo;
    __declspec(property(get=GetSkipStandard,put=PutSkipStandard))
    VARIANT_BOOL SkipStandard;
    __declspec(property(get=GetStartText,put=PutStartText))
    int StartText;
    __declspec(property(get=GetEndText,put=PutEndText))
    int EndText;
    __declspec(property(get=GetDestination,put=PutDestination))
    int Destination;
    __declspec(property(get=GetImaginary,put=PutImaginary))
    int Imaginary;
    __declspec(property(get=GetCornerOutput,put=PutCornerOutput))
    int CornerOutput;
    __declspec(property(get=GetIntegrationOutput,put=PutIntegrationOutput))
    int IntegrationOutput;
    __declspec(property(get=GetAbaHistOn,put=PutAbaHistOn))
    VARIANT_BOOL AbaHistOn;
    __declspec(property(get=GetAbaHistTimePeriod,put=PutAbaHistTimePeriod))
    double AbaHistTimePeriod;
    __declspec(property(get=GetAbaHistInitTimeInc,put=PutAbaHistInitTimeInc))
    double AbaHistInitTimeInc;
    __declspec(property(get=GetAbaHistMinTimeInc,put=PutAbaHistMinTimeInc))
    double AbaHistMinTimeInc;
    __declspec(property(get=GetAbaHistMaxTimeInc,put=PutAbaHistMaxTimeInc))
    double AbaHistMaxTimeInc;
    __declspec(property(get=GetAbaHistEigenvectors,put=PutAbaHistEigenvectors))
    int AbaHistEigenvectors;
    __declspec(property(get=GetAbaHistMinFreq,put=PutAbaHistMinFreq))
    double AbaHistMinFreq;
    __declspec(property(get=GetAbaHistMaxFreq,put=PutAbaHistMaxFreq))
    double AbaHistMaxFreq;
    __declspec(property(get=GetAbaHistShiftFreq,put=PutAbaHistShiftFreq))
    double AbaHistShiftFreq;
    __declspec(property(get=GetAbaHistScaleFactor,put=PutAbaHistScaleFactor))
    double AbaHistScaleFactor;
    __declspec(property(get=GetAbaHistOutInterval,put=PutAbaHistOutInterval))
    int AbaHistOutInterval;
    __declspec(property(get=GetAbaHistNonlinGeom,put=PutAbaHistNonlinGeom))
    VARIANT_BOOL AbaHistNonlinGeom;
    __declspec(property(get=GetAbaHistLinearPert,put=PutAbaHistLinearPert))
    VARIANT_BOOL AbaHistLinearPert;
    __declspec(property(get=GetAbaHistAutoContact,put=PutAbaHistAutoContact))
    VARIANT_BOOL AbaHistAutoContact;
    __declspec(property(get=GetAbaHistStabilize,put=PutAbaHistStabilize))
    VARIANT_BOOL AbaHistStabilize;
    __declspec(property(get=GetAbaHistOutZeroInc,put=PutAbaHistOutZeroInc))
    VARIANT_BOOL AbaHistOutZeroInc;
    __declspec(property(get=GetAbaHistStepAmp,put=PutAbaHistStepAmp))
    int AbaHistStepAmp;
    __declspec(property(get=GetAbaHistStepLoad,put=PutAbaHistStepLoad))
    int AbaHistStepLoad;
    __declspec(property(get=GetAbaHistStepConstr,put=PutAbaHistStepConstr))
    int AbaHistStepConstr;
    __declspec(property(get=GetAbaHistAnalysisType,put=PutAbaHistAnalysisType))
    enum zAnalysisType AbaHistAnalysisType;
    __declspec(property(get=GetAnsDOFOn,put=PutAnsDOFOn))
    VARIANT_BOOL AnsDOFOn;
    __declspec(property(get=GetAnsDOFDoSet,put=PutAnsDOFDoSet))
    VARIANT_BOOL AnsDOFDoSet;
    __declspec(property(get=GetAnsDOFAutomatic,put=PutAnsDOFAutomatic))
    VARIANT_BOOL AnsDOFAutomatic;
    __declspec(property(get=GetAnsDOFNoRotation,put=PutAnsDOFNoRotation))
    VARIANT_BOOL AnsDOFNoRotation;
    __declspec(property(get=GetAnsDOFSetID,put=PutAnsDOFSetID))
    int AnsDOFSetID;
    __declspec(property(get=GetAnsDOFNumber,put=PutAnsDOFNumber))
    int AnsDOFNumber;
    __declspec(property(get=GetAnsModesOn,put=PutAnsModesOn))
    VARIANT_BOOL AnsModesOn;
    __declspec(property(get=GetAnsModesNumModes,put=PutAnsModesNumModes))
    int AnsModesNumModes;
    __declspec(property(get=GetAnsModesMinFreq,put=PutAnsModesMinFreq))
    double AnsModesMinFreq;
    __declspec(property(get=GetAnsModesMaxFreq,put=PutAnsModesMaxFreq))
    double AnsModesMaxFreq;
    __declspec(property(get=GetAnsModesModalMethod,put=PutAnsModesModalMethod))
    double AnsModesModalMethod;
    __declspec(property(get=GetAnsModesElemResults,put=PutAnsModesElemResults))
    VARIANT_BOOL AnsModesElemResults;
    __declspec(property(get=GetAnsHeatOn,put=PutAnsHeatOn))
    VARIANT_BOOL AnsHeatOn;
    __declspec(property(get=GetAnsHeatEndTime,put=PutAnsHeatEndTime))
    double AnsHeatEndTime;
    __declspec(property(get=GetAnsHeatTimeStep,put=PutAnsHeatTimeStep))
    double AnsHeatTimeStep;
    __declspec(property(get=GetAnsHeatOutputFreq,put=PutAnsHeatOutputFreq))
    int AnsHeatOutputFreq;
    __declspec(property(get=GetMarHistOn,put=PutMarHistOn))
    VARIANT_BOOL MarHistOn;
    __declspec(property(get=GetMarHistContactProp,put=PutMarHistContactProp))
    int MarHistContactProp;
    __declspec(property(get=GetMarHistCtrlMethod,put=PutMarHistCtrlMethod))
    int MarHistCtrlMethod;
    __declspec(property(get=GetMarHistSolverMeth,put=PutMarHistSolverMeth))
    int MarHistSolverMeth;
    __declspec(property(get=GetMarHistCtrlMaxStep,put=PutMarHistCtrlMaxStep))
    int MarHistCtrlMaxStep;
    __declspec(property(get=GetMarHistCtrlMaxRecycle,put=PutMarHistCtrlMaxRecycle))
    int MarHistCtrlMaxRecycle;
    __declspec(property(get=GetMarHistCtrlMinRecycle,put=PutMarHistCtrlMinRecycle))
    int MarHistCtrlMinRecycle;
    __declspec(property(get=GetMarHistMaxResidual,put=PutMarHistMaxResidual))
    double MarHistMaxResidual;
    __declspec(property(get=GetMarHistConvergeMeth,put=PutMarHistConvergeMeth))
    int MarHistConvergeMeth;
    __declspec(property(get=GetMarHistNonPosDefinite,put=PutMarHistNonPosDefinite))
    VARIANT_BOOL MarHistNonPosDefinite;
    __declspec(property(get=GetMarHistNonSymmetric,put=PutMarHistNonSymmetric))
    VARIANT_BOOL MarHistNonSymmetric;
    __declspec(property(get=GetMarHistModalMinFreq,put=PutMarHistModalMinFreq))
    double MarHistModalMinFreq;
    __declspec(property(get=GetMarHistModalMaxFreq,put=PutMarHistModalMaxFreq))
    double MarHistModalMaxFreq;
    __declspec(property(get=GetMarHistModalEigen,put=PutMarHistModalEigen))
    int MarHistModalEigen;
    __declspec(property(get=GetMarHistChecking,put=PutMarHistChecking))
    int MarHistChecking;
    __declspec(property(get=GetMarHistAutoSwitch,put=PutMarHistAutoSwitch))
    VARIANT_BOOL MarHistAutoSwitch;
    __declspec(property(get=GetMarHistAnalCaseSol,put=PutMarHistAnalCaseSol))
    enum zAnalysisType MarHistAnalCaseSol;
    __declspec(property(get=GetMarHistBuckleNumModes,put=PutMarHistBuckleNumModes))
    int MarHistBuckleNumModes;
    __declspec(property(get=GetMarHistBucklePosEigen,put=PutMarHistBucklePosEigen))
    int MarHistBucklePosEigen;
    __declspec(property(get=GetMarIncOn,put=PutMarIncOn))
    VARIANT_BOOL MarIncOn;
    __declspec(property(get=GetMarIncArcLenMeth,put=PutMarIncArcLenMeth))
    int MarIncArcLenMeth;
    __declspec(property(get=GetMarIncTimePeriod,put=PutMarIncTimePeriod))
    double MarIncTimePeriod;
    __declspec(property(get=GetMarIncInitTimeInc,put=PutMarIncInitTimeInc))
    double MarIncInitTimeInc;
    __declspec(property(get=GetMarIncMinTimeInc,put=PutMarIncMinTimeInc))
    double MarIncMinTimeInc;
    __declspec(property(get=GetMarIncMaxTimeInc,put=PutMarIncMaxTimeInc))
    double MarIncMaxTimeInc;
    __declspec(property(get=GetMarIncScaleFact,put=PutMarIncScaleFact))
    double MarIncScaleFact;
    __declspec(property(get=GetMarIncMaxStep,put=PutMarIncMaxStep))
    int MarIncMaxStep;
    __declspec(property(get=GetMarIncNumOutInc,put=PutMarIncNumOutInc))
    int MarIncNumOutInc;
    __declspec(property(get=GetMarIncQuasiStatDamp,put=PutMarIncQuasiStatDamp))
    VARIANT_BOOL MarIncQuasiStatDamp;
    __declspec(property(get=GetMarIncFracFirst,put=PutMarIncFracFirst))
    double MarIncFracFirst;
    __declspec(property(get=GetMarIncMaxNumInc,put=PutMarIncMaxNumInc))
    int MarIncMaxNumInc;
    __declspec(property(get=GetMarIncCtrlMaxRecycle,put=PutMarIncCtrlMaxRecycle))
    int MarIncCtrlMaxRecycle;
    __declspec(property(get=GetMarIncMaxFracForAll,put=PutMarIncMaxFracForAll))
    double MarIncMaxFracForAll;
    __declspec(property(get=GetMarIncTotalTime,put=PutMarIncTotalTime))
    double MarIncTotalTime;
    __declspec(property(get=GetMarCtblOn,put=PutMarCtblOn))
    VARIANT_BOOL MarCtblOn;
    __declspec(property(get=GetMarCtblWrite,put=PutMarCtblWrite))
    VARIANT_BOOL MarCtblWrite;
    __declspec(property(get=GetNasOmodesOn,put=PutNasOmodesOn))
    VARIANT_BOOL NasOmodesOn;
    __declspec(property(get=GetNasOmodes,put=PutNasOmodes))
    _bstr_t NasOmodes;
    __declspec(property(get=GetvBCSet,put=PutvBCSet))
    _variant_t vBCSet;
    __declspec(property(get=GetvOutput,put=PutvOutput))
    _variant_t vOutput;
    __declspec(property(get=GetCaseType,put=PutCaseType))
    int CaseType;
    __declspec(property(get=GetDynHistOn,put=PutDynHistOn))
    VARIANT_BOOL DynHistOn;
    __declspec(property(get=GetDynHistBodyLoadGrp,put=PutDynHistBodyLoadGrp))
    int DynHistBodyLoadGrp;
    __declspec(property(get=GetDynHistMassDampOn,put=PutDynHistMassDampOn))
    VARIANT_BOOL DynHistMassDampOn;
    __declspec(property(get=GetDynHistMsssDamp,put=PutDynHistMsssDamp))
    double DynHistMsssDamp;
    __declspec(property(get=GetDynHistImplicit,put=PutDynHistImplicit))
    VARIANT_BOOL DynHistImplicit;
    __declspec(property(get=GetDynHistSpringback,put=PutDynHistSpringback))
    VARIANT_BOOL DynHistSpringback;
    __declspec(property(get=GetDynHistStrainOutput,put=PutDynHistStrainOutput))
    VARIANT_BOOL DynHistStrainOutput;
    __declspec(property(get=GetDynHistTotalTime,put=PutDynHistTotalTime))
    double DynHistTotalTime;
    __declspec(property(get=GetDynHistTimeHistOuput,put=PutDynHistTimeHistOuput))
    double DynHistTimeHistOuput;
    __declspec(property(get=GetDynHistPrintHistOutput,put=PutDynHistPrintHistOutput))
    double DynHistPrintHistOutput;
    __declspec(property(get=GetDynHistPlateIntgPts,put=PutDynHistPlateIntgPts))
    int DynHistPlateIntgPts;
    __declspec(property(get=GetDynHistGroupHistId,put=PutDynHistGroupHistId))
    int DynHistGroupHistId;
    __declspec(property(get=GetNasCnlOn,put=PutNasCnlOn))
    VARIANT_BOOL NasCnlOn;
    __declspec(property(get=GetNasCnlUseLoadSet,put=PutNasCnlUseLoadSet))
    VARIANT_BOOL NasCnlUseLoadSet;
    __declspec(property(get=GetNasCnlIncrements,put=PutNasCnlIncrements))
    int NasCnlIncrements;
    __declspec(property(get=GetNasCnlTime_Increment,put=PutNasCnlTime_Increment))
    double NasCnlTime_Increment;
    __declspec(property(get=GetNasCnlMaxIter,put=PutNasCnlMaxIter))
    int NasCnlMaxIter;
    __declspec(property(get=GetvNasCnlConvergenceFlags,put=PutvNasCnlConvergenceFlags))
    _variant_t vNasCnlConvergenceFlags;
    __declspec(property(get=GetvNasCnlConvergenceValue,put=PutvNasCnlConvergenceValue))
    _variant_t vNasCnlConvergenceValue;
    __declspec(property(get=GetNasCnlCtiffnessMethod,put=PutNasCnlCtiffnessMethod))
    int NasCnlCtiffnessMethod;
    __declspec(property(get=GetNasCnlKstep,put=PutNasCnlKstep))
    int NasCnlKstep;
    __declspec(property(get=GetNasCnlIntermediateOutput,put=PutNasCnlIntermediateOutput))
    int NasCnlIntermediateOutput;
    __declspec(property(get=GetNasCnlOutputInterval,put=PutNasCnlOutputInterval))
    int NasCnlOutputInterval;
    __declspec(property(get=GetNasCnlSolutionStrategy,put=PutNasCnlSolutionStrategy))
    int NasCnlSolutionStrategy;
    __declspec(property(get=GetNasCnlSolutionOverrides,put=PutNasCnlSolutionOverrides))
    int NasCnlSolutionOverrides;
    __declspec(property(get=GetNasCnlModnewtonLineSearch,put=PutNasCnlModnewtonLineSearch))
    VARIANT_BOOL NasCnlModnewtonLineSearch;
    __declspec(property(get=GetNasCnlModnewtonQuasiNewton,put=PutNasCnlModnewtonQuasiNewton))
    VARIANT_BOOL NasCnlModnewtonQuasiNewton;
    __declspec(property(get=GetNasCnlModnewtonBisection,put=PutNasCnlModnewtonBisection))
    VARIANT_BOOL NasCnlModnewtonBisection;
    __declspec(property(get=GetNasCnlArcConstraintType,put=PutNasCnlArcConstraintType))
    int NasCnlArcConstraintType;
    __declspec(property(get=GetNasCnlArcMinAdjust,put=PutNasCnlArcMinAdjust))
    double NasCnlArcMinAdjust;
    __declspec(property(get=GetNasCnlArcMaxAdjust,put=PutNasCnlArcMaxAdjust))
    double NasCnlArcMaxAdjust;
    __declspec(property(get=GetNasCnlArcLoadScale,put=PutNasCnlArcLoadScale))
    double NasCnlArcLoadScale;
    __declspec(property(get=GetNasCnlArcDesiredIter,put=PutNasCnlArcDesiredIter))
    int NasCnlArcDesiredIter;
    __declspec(property(get=GetNasCnlArcMaxSteps,put=PutNasCnlArcMaxSteps))
    int NasCnlArcMaxSteps;
    __declspec(property(get=GetNasCnlTimeSkipAdjust,put=PutNasCnlTimeSkipAdjust))
    int NasCnlTimeSkipAdjust;
    __declspec(property(get=GetNasCnlDominantPeriodSteps,put=PutNasCnlDominantPeriodSteps))
    int NasCnlDominantPeriodSteps;
    __declspec(property(get=GetNasCnlBoundsRb,put=PutNasCnlBoundsRb))
    double NasCnlBoundsRb;
    __declspec(property(get=GetNasCnlStabilityTolerance,put=PutNasCnlStabilityTolerance))
    double NasCnlStabilityTolerance;
    __declspec(property(get=GetNasCnlDivergenceLimit,put=PutNasCnlDivergenceLimit))
    int NasCnlDivergenceLimit;
    __declspec(property(get=GetNasCnlQuasiNewtonVectors,put=PutNasCnlQuasiNewtonVectors))
    int NasCnlQuasiNewtonVectors;
    __declspec(property(get=GetNasCnlMaxLineSearch,put=PutNasCnlMaxLineSearch))
    int NasCnlMaxLineSearch;
    __declspec(property(get=GetNasCnlLineSearchTolerance,put=PutNasCnlLineSearchTolerance))
    double NasCnlLineSearchTolerance;
    __declspec(property(get=GetNasCnlMaxBisections,put=PutNasCnlMaxBisections))
    int NasCnlMaxBisections;
    __declspec(property(get=GetNasCnlMaxRotation,put=PutNasCnlMaxRotation))
    double NasCnlMaxRotation;
    __declspec(property(get=GetNasCnlFstress,put=PutNasCnlFstress))
    double NasCnlFstress;
    __declspec(property(get=GetNasCnlMaxAdjust,put=PutNasCnlMaxAdjust))
    double NasCnlMaxAdjust;
    __declspec(property(get=GetNasCnlCreep,put=PutNasCnlCreep))
    VARIANT_BOOL NasCnlCreep;
    __declspec(property(get=GetNasCnlSkipNLPARM,put=PutNasCnlSkipNLPARM))
    VARIANT_BOOL NasCnlSkipNLPARM;
    __declspec(property(get=GetNasCaeOn,put=PutNasCaeOn))
    VARIANT_BOOL NasCaeOn;
    __declspec(property(get=GetNasCaeMachNumber,put=PutNasCaeMachNumber))
    double NasCaeMachNumber;
    __declspec(property(get=GetNasCaeDynPressure,put=PutNasCaeDynPressure))
    double NasCaeDynPressure;
    __declspec(property(get=GetNasCaeRigidTrim,put=PutNasCaeRigidTrim))
    VARIANT_BOOL NasCaeRigidTrim;
    __declspec(property(get=GetNasCaeWrtieTrim,put=PutNasCaeWrtieTrim))
    VARIANT_BOOL NasCaeWrtieTrim;
    __declspec(property(get=GetNasCflOn,put=PutNasCflOn))
    VARIANT_BOOL NasCflOn;
    __declspec(property(get=GetNasCflMethod,put=PutNasCflMethod))
    int NasCflMethod;
    __declspec(property(get=GetNasCflDenID,put=PutNasCflDenID))
    int NasCflDenID;
    __declspec(property(get=GetNasCflMachFactID,put=PutNasCflMachFactID))
    int NasCflMachFactID;
    __declspec(property(get=GetNasCflRfreqFactID,put=PutNasCflRfreqFactID))
    int NasCflRfreqFactID;
    __declspec(property(get=GetNasCflFliMethod,put=PutNasCflFliMethod))
    int NasCflFliMethod;
    __declspec(property(get=GetNasCflEig,put=PutNasCflEig))
    int NasCflEig;
    __declspec(property(get=GetNasCflEps,put=PutNasCflEps))
    double NasCflEps;
    __declspec(property(get=GetNasCflWriteFlutter,put=PutNasCflWriteFlutter))
    VARIANT_BOOL NasCflWriteFlutter;
    __declspec(property(get=GetNasCflSdampID,put=PutNasCflSdampID))
    int NasCflSdampID;
    __declspec(property(get=GetNasSELoad,put=PutNasSELoad))
    int NasSELoad;
    __declspec(property(get=GetNasCnlkDAMP,put=PutNasCnlkDAMP))
    VARIANT_BOOL NasCnlkDAMP;
    __declspec(property(get=GetNasCnlkUPDATE,put=PutNasCnlkUPDATE))
    int NasCnlkUPDATE;
    __declspec(property(get=GetNasRelEMotion,put=PutNasRelEMotion))
    VARIANT_BOOL NasRelEMotion;
    __declspec(property(get=GetNasCnlStiffnessMethod,put=PutNasCnlStiffnessMethod))
    int NasCnlStiffnessMethod;
    __declspec(property(get=GetCaseLabel,put=PutCaseLabel))
    _bstr_t CaseLabel;
    __declspec(property(get=GetContactOption,put=PutContactOption))
    int ContactOption;
    __declspec(property(get=GetContactSetType,put=PutContactSetType))
    int ContactSetType;
    __declspec(property(get=GetvMSCNasCnlConvergenceFlags,put=PutvMSCNasCnlConvergenceFlags))
    _variant_t vMSCNasCnlConvergenceFlags;
    __declspec(property(get=GetNasCurvatureStrain,put=PutNasCurvatureStrain))
    VARIANT_BOOL NasCurvatureStrain;
    __declspec(property(get=GetAnsCmlOn,put=PutAnsCmlOn))
    VARIANT_BOOL AnsCmlOn;
    __declspec(property(get=GetAnsCmlVersion,put=PutAnsCmlVersion))
    int AnsCmlVersion;
    __declspec(property(get=GetAnsCmlPid,put=PutAnsCmlPid))
    int AnsCmlPid;
    __declspec(property(get=GetAnsCmlProd,put=PutAnsCmlProd))
    _bstr_t AnsCmlProd;
    __declspec(property(get=GetAnsCmlList,put=PutAnsCmlList))
    VARIANT_BOOL AnsCmlList;
    __declspec(property(get=GetAnsCmlJobname,put=PutAnsCmlJobname))
    _bstr_t AnsCmlJobname;
    __declspec(property(get=GetAnsCmlDir,put=PutAnsCmlDir))
    _bstr_t AnsCmlDir;
    __declspec(property(get=GetAnsCmlDBmem,put=PutAnsCmlDBmem))
    int AnsCmlDBmem;
    __declspec(property(get=GetAnsCmlWSmem,put=PutAnsCmlWSmem))
    int AnsCmlWSmem;
    __declspec(property(get=GetAnsCmlUser,put=PutAnsCmlUser))
    _bstr_t AnsCmlUser;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetNasNonlinEpsFlag (
        int nVectorIndex );
    void PutNasNonlinEpsFlag (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double GetNasNonlinEps (
        int nVectorIndex );
    void PutNasNonlinEps (
        int nVectorIndex,
        double _arg2 );
    double GetNasModeFreqRange (
        int nVectorIndex );
    void PutNasModeFreqRange (
        int nVectorIndex,
        double _arg2 );
    int GetNasModeXYRequest (
        int nVectorIndex );
    void PutNasModeXYRequest (
        int nVectorIndex,
        int _arg2 );
    int GetNasRandomRequest (
        int nVectorIndex );
    void PutNasRandomRequest (
        int nVectorIndex,
        int _arg2 );
    VARIANT_BOOL GetNasRandXYRequest (
        int nVectorIndex );
    void PutNasRandXYRequest (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetNasGenSpecRequest (
        int nVectorIndex );
    void PutNasGenSpecRequest (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetNasGCheckTest (
        int nVectorIndex );
    void PutNasGCheckTest (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double GetNasGCheckTol (
        int nVectorIndex );
    void PutNasGCheckTol (
        int nVectorIndex,
        double _arg2 );
    int GetNasGCheckMsg (
        int nVectorIndex );
    void PutNasGCheckMsg (
        int nVectorIndex,
        int _arg2 );
    VARIANT_BOOL GetNasMCheckWtDOFSet (
        int nVectorIndex );
    void PutNasMCheckWtDOFSet (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetNasMCheckGrndDOFSet (
        int nVectorIndex );
    void PutNasMCheckGrndDOFSet (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double GetFStDynFreqRange (
        int nVectorIndex );
    void PutFStDynFreqRange (
        int nVectorIndex,
        double _arg2 );
    double GetNasModeImagFreqRange (
        int nVectorIndex );
    void PutNasModeImagFreqRange (
        int nVectorIndex,
        double _arg2 );
    VARIANT_BOOL GetNasDdamCoeffOn (
        int nVectorIndex );
    void PutNasDdamCoeffOn (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double GetNasDdamCoeffVal (
        int nVectorIndex );
    void PutNasDdamCoeffVal (
        int nVectorIndex,
        double _arg2 );
    double GetNasDynKeepFreq (
        int nVectorIndex );
    void PutNasDynKeepFreq (
        int nVectorIndex,
        double _arg2 );
    VARIANT_BOOL GetNasGCheckTest2 (
        int nVectorIndex );
    void PutNasGCheckTest2 (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double GetNasGCheckTol2 (
        int nVectorIndex );
    void PutNasGCheckTol2 (
        int nVectorIndex,
        double _arg2 );
    int GetNasGCheckMsg2 (
        int nVectorIndex );
    void PutNasGCheckMsg2 (
        int nVectorIndex,
        int _arg2 );
    double GetNasBulkAlpha1Val (
        int nVectorIndex );
    void PutNasBulkAlpha1Val (
        int nVectorIndex,
        double _arg2 );
    double GetNasBulkAlpha2Val (
        int nVectorIndex );
    void PutNasBulkAlpha2Val (
        int nVectorIndex,
        double _arg2 );
    int GetBCSet (
        int nVectorIndex );
    void PutBCSet (
        int nVectorIndex,
        int _arg2 );
    int GetOutput (
        int nVectorIndex );
    void PutOutput (
        int nVectorIndex,
        int _arg2 );
    VARIANT_BOOL GetNasCnlConvergenceFlags (
        int nVectorIndex );
    void PutNasCnlConvergenceFlags (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double GetNasCnlConvergenceValue (
        int nVectorIndex );
    void PutNasCnlConvergenceValue (
        int nVectorIndex,
        double _arg2 );
    VARIANT_BOOL GetMSCNasCnlConvergenceFlags (
        int nVectorIndex );
    void PutMSCNasCnlConvergenceFlags (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    enum zReturnCode GetText (
        int textID,
        BSTR * text );
    enum zReturnCode PutText (
        int textID,
        _bstr_t text );
    enum zReturnCode GetCorrelate (
        int * Count,
        VARIANT * excitedCase,
        VARIANT * appliedCase,
        VARIANT * realScale,
        VARIANT * imagScale,
        VARIANT * realFunc,
        VARIANT * imagFunc );
    enum zReturnCode PutCorrelate (
        int Count,
        const _variant_t & excitedCase,
        const _variant_t & appliedCase,
        const _variant_t & realScale,
        const _variant_t & imagScale,
        const _variant_t & realFunc,
        const _variant_t & imagFunc );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    IAnalysisCasePtr Case (
        int entID );
    enum zReturnCode Analyze (
        int entID );
    enum zReturnCode AnalyzeMultiple (
        int setID );
    enum zReturnCode ClearAnalysisQueue ( );
    enum zReturnCode GetCorrelate2 (
        int * Count,
        VARIANT * excitedCase,
        VARIANT * appliedCase,
        VARIANT * realScale,
        VARIANT * imagScale,
        VARIANT * realFunc,
        VARIANT * imagFunc,
        VARIANT * realInterp,
        VARIANT * imagInterp );
    enum zReturnCode PutCorrelate2 (
        int Count,
        const _variant_t & excitedCase,
        const _variant_t & appliedCase,
        const _variant_t & realScale,
        const _variant_t & imagScale,
        const _variant_t & realFunc,
        const _variant_t & imagFunc,
        const _variant_t & realInterp,
        const _variant_t & imagInterp );
    enum zReturnCode Preview (
        int entID );
    enum zReturnCode GetStandardTrim (
        VARIANT * useTrim,
        VARIANT * TrimID,
        VARIANT * TrimVal );
    enum zReturnCode PutStandardTrim (
        const _variant_t & useTrim,
        const _variant_t & TrimID,
        const _variant_t & TrimVal );
    enum zReturnCode GetTrimControlSurf (
        VARIANT * useTrim,
        VARIANT * TrimID,
        VARIANT * TrimVal );
    enum zReturnCode PutTrimControlSurf (
        const _variant_t & useTrim,
        const _variant_t & TrimID,
        const _variant_t & TrimVal );
    enum zReturnCode GetContactTable (
        int * Count,
        VARIANT * rowSeg,
        VARIANT * colSeg,
        VARIANT * tieType,
        VARIANT * distTol,
        VARIANT * sepForce,
        VARIANT * friction,
        VARIANT * interClose );
    enum zReturnCode PutContactTable (
        int Count,
        const _variant_t & rowSeg,
        const _variant_t & colSeg,
        const _variant_t & tieType,
        const _variant_t & distTol,
        const _variant_t & sepForce,
        const _variant_t & friction,
        const _variant_t & interClose );
    enum zReturnCode InitAnalysisMgr (
        enum zAnalysisMgrProgram analysis_program,
        enum zAnalysisType analysis_type,
        VARIANT_BOOL InitMasterCase );
    enum zReturnCode DeleteAnalysisCase (
        int nSetID,
        int nCaseID );
    enum zReturnCode AllFreqOn ( );
    enum zReturnCode AllFreqOff ( );
    enum zReturnCode TurnOnFreq (
        int freqID );
    enum zReturnCode TurnOffFreq (
        int freqID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    enum zAnalysisMgrProgram GetSolver ( );
    void PutSolver ( enum zAnalysisMgrProgram _val );
    enum zAnalysisType GetAnalysisType ( );
    void PutAnalysisType ( enum zAnalysisType _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    VARIANT_BOOL GetNasExecOn ( );
    void PutNasExecOn ( VARIANT_BOOL _val );
    int GetNasExecVersion ( );
    void PutNasExecVersion ( int _val );
    _bstr_t GetNasExecOutDir ( );
    void PutNasExecOutDir ( _bstr_t _val );
    _bstr_t GetNasExecProblem ( );
    void PutNasExecProblem ( _bstr_t _val );
    _bstr_t GetNasExecSolName ( );
    void PutNasExecSolName ( _bstr_t _val );
    double GetNasExecMaxTime ( );
    void PutNasExecMaxTime ( double _val );
    _bstr_t GetNasExecDiag ( );
    void PutNasExecDiag ( _bstr_t _val );
    VARIANT_BOOL GetNasExecIterSolve ( );
    void PutNasExecIterSolve ( VARIANT_BOOL _val );
    int GetNasExecNumCPU ( );
    void PutNasExecNumCPU ( int _val );
    VARIANT_BOOL GetNasExecSaveDB ( );
    void PutNasExecSaveDB ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasExecRestart ( );
    void PutNasExecRestart ( VARIANT_BOOL _val );
    _bstr_t GetNasExecRestartDB ( );
    void PutNasExecRestartDB ( _bstr_t _val );
    VARIANT_BOOL GetNasExecSkipStandard ( );
    void PutNasExecSkipStandard ( VARIANT_BOOL _val );
    int GetNasExecStartText ( );
    void PutNasExecStartText ( int _val );
    int GetNasExecEndText ( );
    void PutNasExecEndText ( int _val );
    VARIANT_BOOL GetNasBulkOn ( );
    void PutNasBulkOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkAutospc ( );
    void PutNasBulkAutospc ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkGrdpnt ( );
    void PutNasBulkGrdpnt ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkWtmass ( );
    void PutNasBulkWtmass ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkK6rot ( );
    void PutNasBulkK6rot ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkMaxratio ( );
    void PutNasBulkMaxratio ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkNdamp ( );
    void PutNasBulkNdamp ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkInrel ( );
    void PutNasBulkInrel ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkLangle ( );
    void PutNasBulkLangle ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkPrgpst ( );
    void PutNasBulkPrgpst ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkLgdisp ( );
    void PutNasBulkLgdisp ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkDdrmmOff ( );
    void PutNasBulkDdrmmOff ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkModacc ( );
    void PutNasBulkModacc ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkResVec ( );
    void PutNasBulkResVec ( VARIANT_BOOL _val );
    int GetNasBulkGrdpntVal ( );
    void PutNasBulkGrdpntVal ( int _val );
    double GetNasBulkWtmassVal ( );
    void PutNasBulkWtmassVal ( double _val );
    double GetNasBulkK6rotVal ( );
    void PutNasBulkK6rotVal ( double _val );
    double GetNasBulkMaxratioVal ( );
    void PutNasBulkMaxratioVal ( double _val );
    double GetNasBulkNdampVal ( );
    void PutNasBulkNdampVal ( double _val );
    int GetNasBulkLargeField ( );
    void PutNasBulkLargeField ( int _val );
    VARIANT_BOOL GetNasBulkQuadr ( );
    void PutNasBulkQuadr ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkSkipStandard ( );
    void PutNasBulkSkipStandard ( VARIANT_BOOL _val );
    int GetNasBulkStartText ( );
    void PutNasBulkStartText ( int _val );
    int GetNasBulkEndText ( );
    void PutNasBulkEndText ( int _val );
    int GetNasBulkGroupID ( );
    void PutNasBulkGroupID ( int _val );
    VARIANT_BOOL GetNasNonlinOn ( );
    void PutNasNonlinOn ( VARIANT_BOOL _val );
    int GetNasNonlinNDT ( );
    void PutNasNonlinNDT ( int _val );
    double GetNasNonlinDT ( );
    void PutNasNonlinDT ( double _val );
    int GetNasNonlinNO ( );
    void PutNasNonlinNO ( int _val );
    int GetNasNonlinMaxIter ( );
    void PutNasNonlinMaxIter ( int _val );
    VARIANT_BOOL GetNasModeOn ( );
    void PutNasModeOn ( VARIANT_BOOL _val );
    int GetNasModeEigrSet ( );
    void PutNasModeEigrSet ( int _val );
    int GetNasModeMethod ( );
    void PutNasModeMethod ( int _val );
    VARIANT_BOOL GetNasModeSolutionType ( );
    void PutNasModeSolutionType ( VARIANT_BOOL _val );
    int GetNasModeEstRoots ( );
    void PutNasModeEstRoots ( int _val );
    int GetNasModeDesiredRoots ( );
    void PutNasModeDesiredRoots ( int _val );
    int GetNasModeNormOpt ( );
    void PutNasModeNormOpt ( int _val );
    int GetNasModeNormNode ( );
    void PutNasModeNormNode ( int _val );
    int GetNasModeNormDOF ( );
    void PutNasModeNormDOF ( int _val );
    int GetNasModeMassForm ( );
    void PutNasModeMassForm ( int _val );
    VARIANT_BOOL GetNasModeXYOn ( );
    void PutNasModeXYOn ( VARIANT_BOOL _val );
    int GetNasModeXYRefNode ( );
    void PutNasModeXYRefNode ( int _val );
    VARIANT_BOOL GetNasRandomOn ( );
    void PutNasRandomOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasRandXYOn ( );
    void PutNasRandXYOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasRandXYSummary ( );
    void PutNasRandXYSummary ( VARIANT_BOOL _val );
    int GetNasRandXYNodeGroup ( );
    void PutNasRandXYNodeGroup ( int _val );
    int GetNasRandXYElemGroup ( );
    void PutNasRandXYElemGroup ( int _val );
    VARIANT_BOOL GetNasGenSpecOn ( );
    void PutNasGenSpecOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasGenSpecAbsolute ( );
    void PutNasGenSpecAbsolute ( VARIANT_BOOL _val );
    int GetNasGenSpecNodeGroup ( );
    void PutNasGenSpecNodeGroup ( int _val );
    VARIANT_BOOL GetNasAppSpecOn ( );
    void PutNasAppSpecOn ( VARIANT_BOOL _val );
    int GetNasAppSpecType ( );
    void PutNasAppSpecType ( int _val );
    int GetNasAppSpecFunction ( );
    void PutNasAppSpecFunction ( int _val );
    double GetNasAppSpecScale ( );
    void PutNasAppSpecScale ( double _val );
    int GetNasAppSpecMethod ( );
    void PutNasAppSpecMethod ( int _val );
    double GetNasAppSpecClose ( );
    void PutNasAppSpecClose ( double _val );
    int GetNasAppSpecSuport ( );
    void PutNasAppSpecSuport ( int _val );
    int GetNasAppSpecDamp ( );
    void PutNasAppSpecDamp ( int _val );
    VARIANT_BOOL GetNasGCheckOn ( );
    void PutNasGCheckOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasGCheckSummary ( );
    void PutNasGCheckSummary ( VARIANT_BOOL _val );
    int GetNasGCheckMsgLimit ( );
    void PutNasGCheckMsgLimit ( int _val );
    VARIANT_BOOL GetNasMCheckOn ( );
    void PutNasMCheckOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasMCheckWtCG ( );
    void PutNasMCheckWtCG ( VARIANT_BOOL _val );
    int GetNasMCheckWtRefNode ( );
    void PutNasMCheckWtRefNode ( int _val );
    int GetNasMCheckWtUnits ( );
    void PutNasMCheckWtUnits ( int _val );
    int GetNasMCheckGrndRefNode ( );
    void PutNasMCheckGrndRefNode ( int _val );
    double GetNasMCheckMaxStrnEn ( );
    void PutNasMCheckMaxStrnEn ( double _val );
    VARIANT_BOOL GetNasMCheckDataRec ( );
    void PutNasMCheckDataRec ( VARIANT_BOOL _val );
    double GetNasMCheckDataTol ( );
    void PutNasMCheckDataTol ( double _val );
    VARIANT_BOOL GetAbaModOn ( );
    void PutAbaModOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAbaModTitleSetNames ( );
    void PutAbaModTitleSetNames ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAbaModGroupsAsSets ( );
    void PutAbaModGroupsAsSets ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAbaModSkipStandard ( );
    void PutAbaModSkipStandard ( VARIANT_BOOL _val );
    int GetAbaModVersion ( );
    void PutAbaModVersion ( int _val );
    int GetAbaModStartText ( );
    void PutAbaModStartText ( int _val );
    int GetAbaModEndText ( );
    void PutAbaModEndText ( int _val );
    VARIANT_BOOL GetAnsModOn ( );
    void PutAnsModOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsModTitleSetNames ( );
    void PutAnsModTitleSetNames ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsModGroupsAsSets ( );
    void PutAnsModGroupsAsSets ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsModSkipStandard ( );
    void PutAnsModSkipStandard ( VARIANT_BOOL _val );
    int GetAnsModStartText ( );
    void PutAnsModStartText ( int _val );
    int GetAnsModEndText ( );
    void PutAnsModEndText ( int _val );
    _bstr_t GetAnsModTitle ( );
    void PutAnsModTitle ( _bstr_t _val );
    VARIANT_BOOL GetAnsModWriteSolCmd ( );
    void PutAnsModWriteSolCmd ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsModWriteIter ( );
    void PutAnsModWriteIter ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsModWriteLargeDef ( );
    void PutAnsModWriteLargeDef ( VARIANT_BOOL _val );
    int GetAnsModMemory ( );
    void PutAnsModMemory ( int _val );
    int GetAnsModVersion ( );
    void PutAnsModVersion ( int _val );
    VARIANT_BOOL GetAnsRandOn ( );
    void PutAnsRandOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsRandDisp ( );
    void PutAnsRandDisp ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsRandVel ( );
    void PutAnsRandVel ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsRandAccel ( );
    void PutAnsRandAccel ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsRandDispRelative ( );
    void PutAnsRandDispRelative ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsRandVelRelative ( );
    void PutAnsRandVelRelative ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsRandAccelRelative ( );
    void PutAnsRandAccelRelative ( VARIANT_BOOL _val );
    VARIANT_BOOL GetFStFilOn ( );
    void PutFStFilOn ( VARIANT_BOOL _val );
    _bstr_t GetFStFilLogFile ( );
    void PutFStFilLogFile ( _bstr_t _val );
    VARIANT_BOOL GetFStFilKeepLogFile ( );
    void PutFStFilKeepLogFile ( VARIANT_BOOL _val );
    VARIANT_BOOL GetFStFilEchoLogFile ( );
    void PutFStFilEchoLogFile ( VARIANT_BOOL _val );
    _bstr_t GetFStFilHyper1 ( );
    void PutFStFilHyper1 ( _bstr_t _val );
    _bstr_t GetFStFilHyper2 ( );
    void PutFStFilHyper2 ( _bstr_t _val );
    VARIANT_BOOL GetFStFilKeepHyper ( );
    void PutFStFilKeepHyper ( VARIANT_BOOL _val );
    _bstr_t GetFStFilScratch1 ( );
    void PutFStFilScratch1 ( _bstr_t _val );
    _bstr_t GetFStFilScratch2 ( );
    void PutFStFilScratch2 ( _bstr_t _val );
    VARIANT_BOOL GetFStHeatOn ( );
    void PutFStHeatOn ( VARIANT_BOOL _val );
    double GetFStHeatTempTol ( );
    void PutFStHeatTempTol ( double _val );
    int GetFStHeatConvergeType ( );
    void PutFStHeatConvergeType ( int _val );
    int GetFStHeatMaxIter ( );
    void PutFStHeatMaxIter ( int _val );
    VARIANT_BOOL GetFStDynOn ( );
    void PutFStDynOn ( VARIANT_BOOL _val );
    int GetFStDynSolMethod ( );
    void PutFStDynSolMethod ( int _val );
    VARIANT_BOOL GetFStDynMassForm ( );
    void PutFStDynMassForm ( VARIANT_BOOL _val );
    VARIANT_BOOL GetFStDynModalDamp ( );
    void PutFStDynModalDamp ( VARIANT_BOOL _val );
    VARIANT_BOOL GetFStDynModalNorm ( );
    void PutFStDynModalNorm ( VARIANT_BOOL _val );
    int GetFStDynNumModes ( );
    void PutFStDynNumModes ( int _val );
    int GetFStDynRigidModes ( );
    void PutFStDynRigidModes ( int _val );
    int GetFStDynFreqMethod ( );
    void PutFStDynFreqMethod ( int _val );
    int GetFStDynMassDir ( );
    void PutFStDynMassDir ( int _val );
    double GetFStDynMassTol ( );
    void PutFStDynMassTol ( double _val );
    int GetFStDynIterVec ( );
    void PutFStDynIterVec ( int _val );
    int GetFStDynMaxIter ( );
    void PutFStDynMaxIter ( int _val );
    int GetFStDynSigDigits ( );
    void PutFStDynSigDigits ( int _val );
    VARIANT_BOOL GetFStSolOn ( );
    void PutFStSolOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetFStSolIter ( );
    void PutFStSolIter ( VARIANT_BOOL _val );
    double GetFStSolIterConvTol ( );
    void PutFStSolIterConvTol ( double _val );
    int GetFStSolIterMaxIter ( );
    void PutFStSolIterMaxIter ( int _val );
    int GetFStSolMemIterMax ( );
    void PutFStSolMemIterMax ( int _val );
    int GetFStSolMemVirtMax ( );
    void PutFStSolMemVirtMax ( int _val );
    int GetFStSolMemAppPct ( );
    void PutFStSolMemAppPct ( int _val );
    int GetFStSolMemFortranPct ( );
    void PutFStSolMemFortranPct ( int _val );
    VARIANT_BOOL GetFStSolStressStiff ( );
    void PutFStSolStressStiff ( VARIANT_BOOL _val );
    VARIANT_BOOL GetFStSolSpinSoft ( );
    void PutFStSolSpinSoft ( VARIANT_BOOL _val );
    int GetFStSolStiffSoftLoad ( );
    void PutFStSolStiffSoftLoad ( int _val );
    int GetFStSolShellAuto ( );
    void PutFStSolShellAuto ( int _val );
    VARIANT_BOOL GetFStSolSingularity ( );
    void PutFStSolSingularity ( VARIANT_BOOL _val );
    VARIANT_BOOL GetFStSolVerification ( );
    void PutFStSolVerification ( VARIANT_BOOL _val );
    double GetFStSolShellAutoAng ( );
    void PutFStSolShellAutoAng ( double _val );
    double GetFStSolSingCriteria ( );
    void PutFStSolSingCriteria ( double _val );
    int GetFStSolNodeGroup ( );
    void PutFStSolNodeGroup ( int _val );
    int GetFStSolElemGroup ( );
    void PutFStSolElemGroup ( int _val );
    VARIANT_BOOL GetMarModOn ( );
    void PutMarModOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarModSkipStandard ( );
    void PutMarModSkipStandard ( VARIANT_BOOL _val );
    int GetMarModStartText ( );
    void PutMarModStartText ( int _val );
    int GetMarModEndText ( );
    void PutMarModEndText ( int _val );
    _bstr_t GetMarModTitle ( );
    void PutMarModTitle ( _bstr_t _val );
    int GetMarModWorkSpVec ( );
    void PutMarModWorkSpVec ( int _val );
    int GetMarModMaxConstrain ( );
    void PutMarModMaxConstrain ( int _val );
    VARIANT_BOOL GetMarModFolOn ( );
    void PutMarModFolOn ( VARIANT_BOOL _val );
    int GetMarModFolOpt ( );
    void PutMarModFolOpt ( int _val );
    VARIANT_BOOL GetMarModPlasOn ( );
    void PutMarModPlasOn ( VARIANT_BOOL _val );
    int GetMarModPlasOpt ( );
    void PutMarModPlasOpt ( int _val );
    VARIANT_BOOL GetMarModElasOn ( );
    void PutMarModElasOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarModElasTotal ( );
    void PutMarModElasTotal ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarModElasIs ( );
    void PutMarModElasIs ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarModConstDil ( );
    void PutMarModConstDil ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarModLgDisp ( );
    void PutMarModLgDisp ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarModUpdate ( );
    void PutMarModUpdate ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarModFinite ( );
    void PutMarModFinite ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarModEchoInput ( );
    void PutMarModEchoInput ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarModWriteGroupSet ( );
    void PutMarModWriteGroupSet ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarModExtInput ( );
    void PutMarModExtInput ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarModShlTrShear ( );
    void PutMarModShlTrShear ( VARIANT_BOOL _val );
    int GetMarModPltIntegPt ( );
    void PutMarModPltIntegPt ( int _val );
    VARIANT_BOOL GetMarModDistLoadOn ( );
    void PutMarModDistLoadOn ( VARIANT_BOOL _val );
    int GetMarModDistLoadList ( );
    void PutMarModDistLoadList ( int _val );
    int GetMarModDistLoadElem ( );
    void PutMarModDistLoadElem ( int _val );
    int GetMarModDistLoadNode ( );
    void PutMarModDistLoadNode ( int _val );
    VARIANT_BOOL GetMarModTyingOn ( );
    void PutMarModTyingOn ( VARIANT_BOOL _val );
    int GetMarModTyingCe ( );
    void PutMarModTyingCe ( int _val );
    int GetMarModTyingType ( );
    void PutMarModTyingType ( int _val );
    int GetMarModTyingServoNd ( );
    void PutMarModTyingServoNd ( int _val );
    int GetMarModTyingServoLk ( );
    void PutMarModTyingServoLk ( int _val );
    VARIANT_BOOL GetMarModOutOfCore ( );
    void PutMarModOutOfCore ( VARIANT_BOOL _val );
    int GetMarModCoreVal ( );
    void PutMarModCoreVal ( int _val );
    VARIANT_BOOL GetMarModProcessors ( );
    void PutMarModProcessors ( VARIANT_BOOL _val );
    int GetMarModNoCpu ( );
    void PutMarModNoCpu ( int _val );
    int GetMarModVecLength ( );
    void PutMarModVecLength ( int _val );
    VARIANT_BOOL GetMarModParallel ( );
    void PutMarModParallel ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarModBWOpt ( );
    void PutMarModBWOpt ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkResVecOn ( );
    void PutNasBulkResVecOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkOgeom ( );
    void PutNasBulkOgeom ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkSkipBeamShape ( );
    void PutNasBulkSkipBeamShape ( VARIANT_BOOL _val );
    int GetNasExecIterSolve2 ( );
    void PutNasExecIterSolve2 ( int _val );
    _variant_t GetvNasNonlinEpsFlag ( );
    void PutvNasNonlinEpsFlag ( const _variant_t & _val );
    _variant_t GetvNasNonlinEps ( );
    void PutvNasNonlinEps ( const _variant_t & _val );
    _variant_t GetvNasModeFreqRange ( );
    void PutvNasModeFreqRange ( const _variant_t & _val );
    _variant_t GetvNasModeXYRequest ( );
    void PutvNasModeXYRequest ( const _variant_t & _val );
    _variant_t GetvNasRandomRequest ( );
    void PutvNasRandomRequest ( const _variant_t & _val );
    _variant_t GetvNasRandXYRequest ( );
    void PutvNasRandXYRequest ( const _variant_t & _val );
    _variant_t GetvNasGenSpecRequest ( );
    void PutvNasGenSpecRequest ( const _variant_t & _val );
    _variant_t GetvNasGCheckTest ( );
    void PutvNasGCheckTest ( const _variant_t & _val );
    _variant_t GetvNasGCheckTol ( );
    void PutvNasGCheckTol ( const _variant_t & _val );
    _variant_t GetvNasGCheckMsg ( );
    void PutvNasGCheckMsg ( const _variant_t & _val );
    _variant_t GetvNasMCheckWtDOFSet ( );
    void PutvNasMCheckWtDOFSet ( const _variant_t & _val );
    _variant_t GetvNasMCheckGrndDOFSet ( );
    void PutvNasMCheckGrndDOFSet ( const _variant_t & _val );
    _variant_t GetvFStDynFreqRange ( );
    void PutvFStDynFreqRange ( const _variant_t & _val );
    VARIANT_BOOL GetNasBulkAutompc ( );
    void PutNasBulkAutompc ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasNXStratOn ( );
    void PutNasNXStratOn ( VARIANT_BOOL _val );
    int GetNasNXStratSolver ( );
    void PutNasNXStratSolver ( int _val );
    int GetNasNXStratAuto ( );
    void PutNasNXStratAuto ( int _val );
    VARIANT_BOOL GetNasNXStratNposit ( );
    void PutNasNXStratNposit ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasNXStratMasstyp ( );
    void PutNasNXStratMasstyp ( VARIANT_BOOL _val );
    int GetNasNXStratTint ( );
    void PutNasNXStratTint ( int _val );
    VARIANT_BOOL GetNasNXStratMstab ( );
    void PutNasNXStratMstab ( VARIANT_BOOL _val );
    double GetNasNXStratMsfac ( );
    void PutNasNXStratMsfac ( double _val );
    double GetNasNXStratDtdelay ( );
    void PutNasNXStratDtdelay ( double _val );
    double GetNasNXStratSdofang ( );
    void PutNasNXStratSdofang ( double _val );
    VARIANT_BOOL GetNasNXStratUpform ( );
    void PutNasNXStratUpform ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasNXStratDispopt ( );
    void PutNasNXStratDispopt ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasNXStratLoadopt ( );
    void PutNasNXStratLoadopt ( VARIANT_BOOL _val );
    double GetNasNXStratAlpha ( );
    void PutNasNXStratAlpha ( double _val );
    double GetNasNXStratDelta ( );
    void PutNasNXStratDelta ( double _val );
    int GetNasNXStratItemax ( );
    void PutNasNXStratItemax ( int _val );
    double GetNasNXStratEpsia ( );
    void PutNasNXStratEpsia ( double _val );
    double GetNasNXStratEpsib ( );
    void PutNasNXStratEpsib ( double _val );
    double GetNasNXStratEpsii ( );
    void PutNasNXStratEpsii ( double _val );
    int GetNasNXStratLsearch ( );
    void PutNasNXStratLsearch ( int _val );
    int GetNasNXStratMaxite ( );
    void PutNasNXStratMaxite ( int _val );
    int GetNasNXStratConvcri ( );
    void PutNasNXStratConvcri ( int _val );
    double GetNasNXStratEtol ( );
    void PutNasNXStratEtol ( double _val );
    double GetNasNXStratRtol ( );
    void PutNasNXStratRtol ( double _val );
    double GetNasNXStratRnorm ( );
    void PutNasNXStratRnorm ( double _val );
    double GetNasNXStratRmnorm ( );
    void PutNasNXStratRmnorm ( double _val );
    double GetNasNXStratRctol ( );
    void PutNasNXStratRctol ( double _val );
    double GetNasNXStratDtol ( );
    void PutNasNXStratDtol ( double _val );
    double GetNasNXStratDnorm ( );
    void PutNasNXStratDnorm ( double _val );
    double GetNasNXStratDmnorm ( );
    void PutNasNXStratDmnorm ( double _val );
    double GetNasNXStratStol ( );
    void PutNasNXStratStol ( double _val );
    double GetNasNXStratRconsm ( );
    void PutNasNXStratRconsm ( double _val );
    double GetNasNXStratEnlsth ( );
    void PutNasNXStratEnlsth ( double _val );
    int GetNasNXStratAtssubd ( );
    void PutNasNXStratAtssubd ( int _val );
    double GetNasNXStratAtsmxdt ( );
    void PutNasNXStratAtsmxdt ( double _val );
    int GetNasNXStratAtsnext ( );
    void PutNasNXStratAtsnext ( int _val );
    double GetNasNXStratAtsdfac ( );
    void PutNasNXStratAtsdfac ( double _val );
    VARIANT_BOOL GetNasNXStratAtslows ( );
    void PutNasNXStratAtslows ( VARIANT_BOOL _val );
    double GetNasNXStratAtsdamp ( );
    void PutNasNXStratAtsdamp ( double _val );
    int GetNasNXStratLdcgrid ( );
    void PutNasNXStratLdcgrid ( int _val );
    int GetNasNXStratLdcdof ( );
    void PutNasNXStratLdcdof ( int _val );
    double GetNasNXStratLdcdisp ( );
    void PutNasNXStratLdcdisp ( double _val );
    double GetNasNXStratLdcimax ( );
    void PutNasNXStratLdcimax ( double _val );
    double GetNasNXStratLdcdmax ( );
    void PutNasNXStratLdcdmax ( double _val );
    VARIANT_BOOL GetNasNXStratLdccont ( );
    void PutNasNXStratLdccont ( VARIANT_BOOL _val );
    int GetNasNXStratLdcsubd ( );
    void PutNasNXStratLdcsubd ( int _val );
    int GetNasNXStratImpact ( );
    void PutNasNXStratImpact ( int _val );
    int GetNasNXStratNsupp ( );
    void PutNasNXStratNsupp ( int _val );
    double GetNasNXStratTstart ( );
    void PutNasNXStratTstart ( double _val );
    int GetNasNXStratIrint ( );
    void PutNasNXStratIrint ( int _val );
    int GetNasNXStratNsubgrp ( );
    void PutNasNXStratNsubgrp ( int _val );
    VARIANT_BOOL GetNasNXStratElcv ( );
    void PutNasNXStratElcv ( VARIANT_BOOL _val );
    int GetNasNXStratEqrbar ( );
    void PutNasNXStratEqrbar ( int _val );
    int GetNasNXStratEqrbe2 ( );
    void PutNasNXStratEqrbe2 ( int _val );
    double GetNasNXStratSpringk ( );
    void PutNasNXStratSpringk ( double _val );
    double GetNasNXStratBeame ( );
    void PutNasNXStratBeame ( double _val );
    double GetNasNXStratBeama ( );
    void PutNasNXStratBeama ( double _val );
    double GetNasNXStratRblcrit ( );
    void PutNasNXStratRblcrit ( double _val );
    int GetNasNXStratXstep ( );
    void PutNasNXStratXstep ( int _val );
    int GetNasNXStratXdtcal ( );
    void PutNasNXStratXdtcal ( int _val );
    double GetNasNXStratXdtfac ( );
    void PutNasNXStratXdtfac ( double _val );
    double GetNasNXStratXmscale ( );
    void PutNasNXStratXmscale ( double _val );
    double GetNasNXStratXdtmin1 ( );
    void PutNasNXStratXdtmin1 ( double _val );
    double GetNasNXStratXdtmin2 ( );
    void PutNasNXStratXdtmin2 ( double _val );
    int GetNasNXStratIcmode ( );
    void PutNasNXStratIcmode ( int _val );
    int GetNasNXStratUlform ( );
    void PutNasNXStratUlform ( int _val );
    _variant_t GetNasNXStratTimeSteps ( );
    void PutNasNXStratTimeSteps ( const _variant_t & _val );
    _variant_t GetNasNXStratTimeIncrement ( );
    void PutNasNXStratTimeIncrement ( const _variant_t & _val );
    _variant_t GetNasNXStratSkipFactor ( );
    void PutNasNXStratSkipFactor ( const _variant_t & _val );
    int GetNasNXStratCstype ( );
    void PutNasNXStratCstype ( int _val );
    VARIANT_BOOL GetDynModOn ( );
    void PutDynModOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDynModExportRigidNodes ( );
    void PutDynModExportRigidNodes ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDynModMatlBasedParts ( );
    void PutDynModMatlBasedParts ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDynModGroupsAsSets ( );
    void PutDynModGroupsAsSets ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDynModSkipStandard ( );
    void PutDynModSkipStandard ( VARIANT_BOOL _val );
    int GetDynModStartText ( );
    void PutDynModStartText ( int _val );
    int GetDynModEndText ( );
    void PutDynModEndText ( int _val );
    int GetNasBulkAutospcType ( );
    void PutNasBulkAutospcType ( int _val );
    int GetNasExecMemory ( );
    void PutNasExecMemory ( int _val );
    VARIANT_BOOL GetNasExecExtendedMessages ( );
    void PutNasExecExtendedMessages ( VARIANT_BOOL _val );
    _bstr_t GetNasExecSystemCell ( );
    void PutNasExecSystemCell ( _bstr_t _val );
    _bstr_t GetNasExecScratchDir1 ( );
    void PutNasExecScratchDir1 ( _bstr_t _val );
    _bstr_t GetNasExecScratchDir2 ( );
    void PutNasExecScratchDir2 ( _bstr_t _val );
    int GetNasExecScratchSize1 ( );
    void PutNasExecScratchSize1 ( int _val );
    int GetNasExecScratchSize2 ( );
    void PutNasExecScratchSize2 ( int _val );
    VARIANT_BOOL GetNasBulkRigidThermalExp ( );
    void PutNasBulkRigidThermalExp ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkSrcomps ( );
    void PutNasBulkSrcomps ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkNofisr ( );
    void PutNasBulkNofisr ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkLgstrn ( );
    void PutNasBulkLgstrn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasModesSkipEigr ( );
    void PutNasModesSkipEigr ( VARIANT_BOOL _val );
    _variant_t GetvNasModeImagFreqRange ( );
    void PutvNasModeImagFreqRange ( const _variant_t & _val );
    double GetNasModesComplexConverge ( );
    void PutNasModesComplexConverge ( double _val );
    double GetNasModesComplexRegionWidth ( );
    void PutNasModesComplexRegionWidth ( double _val );
    VARIANT_BOOL GetNasNXStratElrescs ( );
    void PutNasNXStratElrescs ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasDdamOn ( );
    void PutNasDdamOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasDdamEnabled ( );
    void PutNasDdamEnabled ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasDdamIncludePath ( );
    void PutNasDdamIncludePath ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasDdamIsDDAM ( );
    void PutNasDdamIsDDAM ( VARIANT_BOOL _val );
    int GetNasDdamUseBuiltInCoeff ( );
    void PutNasDdamUseBuiltInCoeff ( int _val );
    int GetNasDdamEquationType ( );
    void PutNasDdamEquationType ( int _val );
    int GetNasDdamSurfaceShip ( );
    void PutNasDdamSurfaceShip ( int _val );
    int GetNasDdamEquipmentLocation ( );
    void PutNasDdamEquipmentLocation ( int _val );
    int GetNasDdamElasticPlastic ( );
    void PutNasDdamElasticPlastic ( int _val );
    int GetNasDdamForeAftDirection ( );
    void PutNasDdamForeAftDirection ( int _val );
    int GetNasDdamVerticalDirection ( );
    void PutNasDdamVerticalDirection ( int _val );
    int GetNasDdamDirectionSequence ( );
    void PutNasDdamDirectionSequence ( int _val );
    double GetNasDdamMassToWeight ( );
    void PutNasDdamMassToWeight ( double _val );
    double GetNasDdamWeightCutoffPct ( );
    void PutNasDdamWeightCutoffPct ( double _val );
    double GetNasDdamGCutoff ( );
    void PutNasDdamGCutoff ( double _val );
    _bstr_t GetNasDdamSpecCoeffFile ( );
    void PutNasDdamSpecCoeffFile ( _bstr_t _val );
    _variant_t GetvNasDdamCoeffOn ( );
    void PutvNasDdamCoeffOn ( const _variant_t & _val );
    _variant_t GetvNasDdamCoeffVal ( );
    void PutvNasDdamCoeffVal ( const _variant_t & _val );
    VARIANT_BOOL GetNasRotorOn ( );
    void PutNasRotorOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasRotorEnabled ( );
    void PutNasRotorEnabled ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasRotorIncludePath ( );
    void PutNasRotorIncludePath ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasRotorSingleRotor ( );
    void PutNasRotorSingleRotor ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasRotorFixedRefSys ( );
    void PutNasRotorFixedRefSys ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasRotorAsyncResponse ( );
    void PutNasRotorAsyncResponse ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasRotorSteinerInertia ( );
    void PutNasRotorSteinerInertia ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasRotorForceExcitation ( );
    void PutNasRotorForceExcitation ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasRotorDoCSV ( );
    void PutNasRotorDoCSV ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasRotorDoGPF ( );
    void PutNasRotorDoGPF ( VARIANT_BOOL _val );
    int GetNasRotorInputUnits ( );
    void PutNasRotorInputUnits ( int _val );
    int GetNasRotorOutputUnits ( );
    void PutNasRotorOutputUnits ( int _val );
    int GetNasRotorPrintedOutput ( );
    void PutNasRotorPrintedOutput ( int _val );
    int GetNasRotorSpeedNumSteps ( );
    void PutNasRotorSpeedNumSteps ( int _val );
    double GetNasRotorComplexModeOutput ( );
    void PutNasRotorComplexModeOutput ( double _val );
    double GetNasRotorWhirlThreshold ( );
    void PutNasRotorWhirlThreshold ( double _val );
    double GetNasRotorExcitationOrder ( );
    void PutNasRotorExcitationOrder ( double _val );
    double GetNasRotorSpeedStart ( );
    void PutNasRotorSpeedStart ( double _val );
    double GetNasRotorSpeedStep ( );
    void PutNasRotorSpeedStep ( double _val );
    _bstr_t GetNasRotorModeSelection ( );
    void PutNasRotorModeSelection ( _bstr_t _val );
    int GetNasNXStratCtdisp ( );
    void PutNasNXStratCtdisp ( int _val );
    int GetNasNXStratCtdamp ( );
    void PutNasNXStratCtdamp ( int _val );
    double GetNasNXStratCtdampN ( );
    void PutNasNXStratCtdampN ( double _val );
    double GetNasNXStratCtdampT ( );
    void PutNasNXStratCtdampT ( double _val );
    int GetNasBulkInrelVal ( );
    void PutNasBulkInrelVal ( int _val );
    VARIANT_BOOL GetNasBulkGapsAsContact ( );
    void PutNasBulkGapsAsContact ( VARIANT_BOOL _val );
    double GetNasNXStratMaxDisp ( );
    void PutNasNXStratMaxDisp ( double _val );
    int GetNasNXStratBoltstp ( );
    void PutNasNXStratBoltstp ( int _val );
    VARIANT_BOOL GetNasBulkBoltFact ( );
    void PutNasBulkBoltFact ( VARIANT_BOOL _val );
    double GetNasBulkBoltFactVal ( );
    void PutNasBulkBoltFactVal ( double _val );
    VARIANT_BOOL GetNasNXStratCvssval ( );
    void PutNasNXStratCvssval ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasNXStratXtcurve ( );
    void PutNasNXStratXtcurve ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasNXStratRtalg ( );
    void PutNasNXStratRtalg ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasNXStratTnslcf ( );
    void PutNasNXStratTnslcf ( VARIANT_BOOL _val );
    double GetNasNXStratDrillkf ( );
    void PutNasNXStratDrillkf ( double _val );
    double GetNasNXStratLslower ( );
    void PutNasNXStratLslower ( double _val );
    double GetNasNXStratLsupper ( );
    void PutNasNXStratLsupper ( double _val );
    VARIANT_BOOL GetNasExecSolutionMonitor ( );
    void PutNasExecSolutionMonitor ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkDynLdAsLOADSET ( );
    void PutNasBulkDynLdAsLOADSET ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkResViner ( );
    void PutNasBulkResViner ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasGCheckNone ( );
    void PutNasGCheckNone ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkWriteAllLoadBCSets ( );
    void PutNasBulkWriteAllLoadBCSets ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasDynOn ( );
    void PutNasDynOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasDynUseLoadSet ( );
    void PutNasDynUseLoadSet ( VARIANT_BOOL _val );
    double GetNasDynDampOverall ( );
    void PutNasDynDampOverall ( double _val );
    double GetNasDynDampW3 ( );
    void PutNasDynDampW3 ( double _val );
    double GetNasDynDampW4 ( );
    void PutNasDynDampW4 ( double _val );
    _variant_t GetvNasDynKeepFreq ( );
    void PutvNasDynKeepFreq ( const _variant_t & _val );
    double GetNasDynTranDT ( );
    void PutNasDynTranDT ( double _val );
    int GetNasDynFreqTbl ( );
    void PutNasDynFreqTbl ( int _val );
    int GetNasDynDampModalTbl ( );
    void PutNasDynDampModalTbl ( int _val );
    int GetNasDynKeepModes ( );
    void PutNasDynKeepModes ( int _val );
    int GetNasDynTranTimeSteps ( );
    void PutNasDynTranTimeSteps ( int _val );
    int GetNasDynTransOutInt ( );
    void PutNasDynTransOutInt ( int _val );
    VARIANT_BOOL GetNasDynDampModalMethod ( );
    void PutNasDynDampModalMethod ( VARIANT_BOOL _val );
    int GetNasDynRespSpect ( );
    void PutNasDynRespSpect ( int _val );
    int GetNasDynFreqID ( );
    void PutNasDynFreqID ( int _val );
    double GetNasModeDampOverall ( );
    void PutNasModeDampOverall ( double _val );
    VARIANT_BOOL GetNasBulkEnfmotn ( );
    void PutNasBulkEnfmotn ( VARIANT_BOOL _val );
    int GetNasBulkEnfmotnOpt ( );
    void PutNasBulkEnfmotnOpt ( int _val );
    VARIANT_BOOL GetNasDynFzero ( );
    void PutNasDynFzero ( VARIANT_BOOL _val );
    double GetNasDynFzeroVal ( );
    void PutNasDynFzeroVal ( double _val );
    VARIANT_BOOL GetNasDynWmodal ( );
    void PutNasDynWmodal ( VARIANT_BOOL _val );
    double GetNasDdamForceConversion ( );
    void PutNasDdamForceConversion ( double _val );
    double GetNasDdamAccelConversion ( );
    void PutNasDdamAccelConversion ( double _val );
    double GetNasNXStratAtsmass ( );
    void PutNasNXStratAtsmass ( double _val );
    int GetNasNXStratModexNew ( );
    void PutNasNXStratModexNew ( int _val );
    VARIANT_BOOL GetNasBulkCntAset ( );
    void PutNasBulkCntAset ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasAeroOn ( );
    void PutNasAeroOn ( VARIANT_BOOL _val );
    int GetNasAeroCsID ( );
    void PutNasAeroCsID ( int _val );
    int GetNasAeroRefCsID ( );
    void PutNasAeroRefCsID ( int _val );
    double GetNasAeroRefLength ( );
    void PutNasAeroRefLength ( double _val );
    double GetNasAeroRefSpan ( );
    void PutNasAeroRefSpan ( double _val );
    double GetNasAeroRefArea ( );
    void PutNasAeroRefArea ( double _val );
    int GetNasAeroSymXY ( );
    void PutNasAeroSymXY ( int _val );
    int GetNasAeroSymxz ( );
    void PutNasAeroSymxz ( int _val );
    double GetNasAeroVelo ( );
    void PutNasAeroVelo ( double _val );
    double GetNasAeroRefDens ( );
    void PutNasAeroRefDens ( double _val );
    int GetNasAeroMkFuID ( );
    void PutNasAeroMkFuID ( int _val );
    VARIANT_BOOL GetNasAeroAeunit ( );
    void PutNasAeroAeunit ( VARIANT_BOOL _val );
    double GetNasAeroAeunitVal ( );
    void PutNasAeroAeunitVal ( double _val );
    _variant_t GetvNasAeroFreqKeep ( );
    void PutvNasAeroFreqKeep ( const _variant_t & _val );
    int GetNasAeroModesKeep ( );
    void PutNasAeroModesKeep ( int _val );
    VARIANT_BOOL GetNasAerobPARAMfzero ( );
    void PutNasAerobPARAMfzero ( VARIANT_BOOL _val );
    double GetNasAerodPARAMfzero ( );
    void PutNasAerodPARAMfzero ( double _val );
    int GetNasAeroDampMethod ( );
    void PutNasAeroDampMethod ( int _val );
    VARIANT_BOOL GetNasExtSEOutOn ( );
    void PutNasExtSEOutOn ( VARIANT_BOOL _val );
    int GetNasExtSEOutExtID ( );
    void PutNasExtSEOutExtID ( int _val );
    VARIANT_BOOL GetNasExtSEOutMatStiffness ( );
    void PutNasExtSEOutMatStiffness ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasExtSEOutMatMass ( );
    void PutNasExtSEOutMatMass ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasExtSEOutMatK4damp ( );
    void PutNasExtSEOutMatK4damp ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasExtSEOutMatLoads ( );
    void PutNasExtSEOutMatLoads ( VARIANT_BOOL _val );
    enum zAnalysisExtSEOutTo GetNasExtSEOutTo ( );
    void PutNasExtSEOutTo ( enum zAnalysisExtSEOutTo _val );
    int GetNasExtSEOutUnitID ( );
    void PutNasExtSEOutUnitID ( int _val );
    _bstr_t GetNasExtSEOutAssignTitle ( );
    void PutNasExtSEOutAssignTitle ( _bstr_t _val );
    VARIANT_BOOL GetNasExtSEOutOptGeom ( );
    void PutNasExtSEOutOptGeom ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasExtSEOutOptAsmbulk ( );
    void PutNasExtSEOutOptAsmbulk ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasExtSEOutOptExtbulk ( );
    void PutNasExtSEOutOptExtbulk ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkSecomb ( );
    void PutNasBulkSecomb ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasExecAllowDuplicateNodes ( );
    void PutNasExecAllowDuplicateNodes ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasExecWriteSERefPath ( );
    void PutNasExecWriteSERefPath ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsModSkipPreprocessCMD ( );
    void PutAnsModSkipPreprocessCMD ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkPARAMBailout ( );
    void PutNasBulkPARAMBailout ( VARIANT_BOOL _val );
    double GetNasExecDuplicateTolerance ( );
    void PutNasExecDuplicateTolerance ( double _val );
    VARIANT_BOOL GetNasExecRestartReadOnly ( );
    void PutNasExecRestartReadOnly ( VARIANT_BOOL _val );
    int GetNasExecRestartVersion ( );
    void PutNasExecRestartVersion ( int _val );
    int GetNasExecRestartSubcase ( );
    void PutNasExecRestartSubcase ( int _val );
    enum zAnalysisType GetNasOptimAnalysisType ( );
    void PutNasOptimAnalysisType ( enum zAnalysisType _val );
    VARIANT_BOOL GetNasOptimTrackModes ( );
    void PutNasOptimTrackModes ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasNonlinKDAMP ( );
    void PutNasNonlinKDAMP ( VARIANT_BOOL _val );
    int GetNasNonlinKUPDATE ( );
    void PutNasNonlinKUPDATE ( int _val );
    _bstr_t GetNasExecAnalyzeFilename ( );
    void PutNasExecAnalyzeFilename ( _bstr_t _val );
    _variant_t GetvNasGCheckTest2 ( );
    void PutvNasGCheckTest2 ( const _variant_t & _val );
    _variant_t GetvNasGCheckTol2 ( );
    void PutvNasGCheckTol2 ( const _variant_t & _val );
    _variant_t GetvNasGCheckMsg2 ( );
    void PutvNasGCheckMsg2 ( const _variant_t & _val );
    enum zAnalysisAssignForm GetNasExtSEOutAssignForm ( );
    void PutNasExtSEOutAssignForm ( enum zAnalysisAssignForm _val );
    VARIANT_BOOL GetNasMscCtOn ( );
    void PutNasMscCtOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasMscCtEnable ( );
    void PutNasMscCtEnable ( VARIANT_BOOL _val );
    double GetNasMscCtDDULMT ( );
    void PutNasMscCtDDULMT ( double _val );
    double GetNasMscCtRVCNST ( );
    void PutNasMscCtRVCNST ( double _val );
    double GetNasMscCtSLDLMT ( );
    void PutNasMscCtSLDLMT ( double _val );
    VARIANT_BOOL GetNasMscCtTAUGMNT ( );
    void PutNasMscCtTAUGMNT ( VARIANT_BOOL _val );
    int GetNasMscCtAUGMENT ( );
    void PutNasMscCtAUGMENT ( int _val );
    VARIANT_BOOL GetNasMscCtBEAMB ( );
    void PutNasMscCtBEAMB ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasMscCtERRBAS ( );
    void PutNasMscCtERRBAS ( VARIANT_BOOL _val );
    int GetNasMscCtFTYPE ( );
    void PutNasMscCtFTYPE ( int _val );
    int GetNasMscCtIBSEP ( );
    void PutNasMscCtIBSEP ( int _val );
    int GetNasMscCtICSEP ( );
    void PutNasMscCtICSEP ( int _val );
    int GetNasMscCtMAXSEP ( );
    void PutNasMscCtMAXSEP ( int _val );
    int GetNasMscCtMETHOD ( );
    void PutNasMscCtMETHOD ( int _val );
    VARIANT_BOOL GetNasMscCtNLGLUE ( );
    void PutNasMscCtNLGLUE ( VARIANT_BOOL _val );
    int GetNasMscCtNODSEP ( );
    void PutNasMscCtNODSEP ( int _val );
    VARIANT_BOOL GetNasMscCtSEGSYM ( );
    void PutNasMscCtSEGSYM ( VARIANT_BOOL _val );
    double GetNasMscCtAUGDIST ( );
    void PutNasMscCtAUGDIST ( double _val );
    double GetNasMscCtBIAS ( );
    void PutNasMscCtBIAS ( double _val );
    double GetNasMscCtERROR ( );
    void PutNasMscCtERROR ( double _val );
    double GetNasMscCtFNTOL ( );
    void PutNasMscCtFNTOL ( double _val );
    double GetNasMscCtPENALT ( );
    void PutNasMscCtPENALT ( double _val );
    double GetNasMscCtSTKSLP ( );
    void PutNasMscCtSTKSLP ( double _val );
    double GetNasMscCtTPENALT ( );
    void PutNasMscCtTPENALT ( double _val );
    VARIANT_BOOL GetNasBulkMgrid ( );
    void PutNasBulkMgrid ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkSwpangle ( );
    void PutNasBulkSwpangle ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkAlpha1 ( );
    void PutNasBulkAlpha1 ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkAlpha2 ( );
    void PutNasBulkAlpha2 ( VARIANT_BOOL _val );
    double GetNasBulkSwpangleVal ( );
    void PutNasBulkSwpangleVal ( double _val );
    int GetNasBulkMdofVal ( );
    void PutNasBulkMdofVal ( int _val );
    int GetNasBulkMgridID ( );
    void PutNasBulkMgridID ( int _val );
    _variant_t GetvNasBulkAlpha1Val ( );
    void PutvNasBulkAlpha1Val ( const _variant_t & _val );
    _variant_t GetvNasBulkAlpha2Val ( );
    void PutvNasBulkAlpha2Val ( const _variant_t & _val );
    VARIANT_BOOL GetNasAerobOPPHIPA ( );
    void PutNasAerobOPPHIPA ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasNXStratBeamalg ( );
    void PutNasNXStratBeamalg ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasExecGPU ( );
    void PutNasExecGPU ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasBulkEndTextOutsideBulk ( );
    void PutNasBulkEndTextOutsideBulk ( VARIANT_BOOL _val );
    int GetNasExecGPUOpt ( );
    void PutNasExecGPUOpt ( int _val );
    enum zLinkedSolver GetLinkedSolverOption ( );
    void PutLinkedSolverOption ( enum zLinkedSolver _val );
    int GetNasNXStratPlasalg ( );
    void PutNasNXStratPlasalg ( int _val );
    _bstr_t GetNasExecUserCmdLine ( );
    void PutNasExecUserCmdLine ( _bstr_t _val );
    VARIANT_BOOL GetNasRandCorrOn ( );
    void PutNasRandCorrOn ( VARIANT_BOOL _val );
    int GetNasRandCorrLagInterval ( );
    void PutNasRandCorrLagInterval ( int _val );
    double GetNasRandCorrLagStart ( );
    void PutNasRandCorrLagStart ( double _val );
    double GetNasRandCorrLagMax ( );
    void PutNasRandCorrLagMax ( double _val );
    _variant_t GetvNasRandXYRequest2 ( );
    void PutvNasRandXYRequest2 ( const _variant_t & _val );
    VARIANT_BOOL GetNasRandXYAuto ( );
    void PutNasRandXYAuto ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasRandXYPsdf ( );
    void PutNasRandXYPsdf ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasNonlinAdapt ( );
    void PutNasNonlinAdapt ( VARIANT_BOOL _val );
    _bstr_t GetCaseTitle ( );
    void PutCaseTitle ( _bstr_t _val );
    _bstr_t GetEcho ( );
    void PutEcho ( _bstr_t _val );
    VARIANT_BOOL GetSkipStandard ( );
    void PutSkipStandard ( VARIANT_BOOL _val );
    int GetStartText ( );
    void PutStartText ( int _val );
    int GetEndText ( );
    void PutEndText ( int _val );
    int GetDestination ( );
    void PutDestination ( int _val );
    int GetImaginary ( );
    void PutImaginary ( int _val );
    int GetCornerOutput ( );
    void PutCornerOutput ( int _val );
    int GetIntegrationOutput ( );
    void PutIntegrationOutput ( int _val );
    VARIANT_BOOL GetAbaHistOn ( );
    void PutAbaHistOn ( VARIANT_BOOL _val );
    double GetAbaHistTimePeriod ( );
    void PutAbaHistTimePeriod ( double _val );
    double GetAbaHistInitTimeInc ( );
    void PutAbaHistInitTimeInc ( double _val );
    double GetAbaHistMinTimeInc ( );
    void PutAbaHistMinTimeInc ( double _val );
    double GetAbaHistMaxTimeInc ( );
    void PutAbaHistMaxTimeInc ( double _val );
    int GetAbaHistEigenvectors ( );
    void PutAbaHistEigenvectors ( int _val );
    double GetAbaHistMinFreq ( );
    void PutAbaHistMinFreq ( double _val );
    double GetAbaHistMaxFreq ( );
    void PutAbaHistMaxFreq ( double _val );
    double GetAbaHistShiftFreq ( );
    void PutAbaHistShiftFreq ( double _val );
    double GetAbaHistScaleFactor ( );
    void PutAbaHistScaleFactor ( double _val );
    int GetAbaHistOutInterval ( );
    void PutAbaHistOutInterval ( int _val );
    VARIANT_BOOL GetAbaHistNonlinGeom ( );
    void PutAbaHistNonlinGeom ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAbaHistLinearPert ( );
    void PutAbaHistLinearPert ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAbaHistAutoContact ( );
    void PutAbaHistAutoContact ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAbaHistStabilize ( );
    void PutAbaHistStabilize ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAbaHistOutZeroInc ( );
    void PutAbaHistOutZeroInc ( VARIANT_BOOL _val );
    int GetAbaHistStepAmp ( );
    void PutAbaHistStepAmp ( int _val );
    int GetAbaHistStepLoad ( );
    void PutAbaHistStepLoad ( int _val );
    int GetAbaHistStepConstr ( );
    void PutAbaHistStepConstr ( int _val );
    enum zAnalysisType GetAbaHistAnalysisType ( );
    void PutAbaHistAnalysisType ( enum zAnalysisType _val );
    VARIANT_BOOL GetAnsDOFOn ( );
    void PutAnsDOFOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsDOFDoSet ( );
    void PutAnsDOFDoSet ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsDOFAutomatic ( );
    void PutAnsDOFAutomatic ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsDOFNoRotation ( );
    void PutAnsDOFNoRotation ( VARIANT_BOOL _val );
    int GetAnsDOFSetID ( );
    void PutAnsDOFSetID ( int _val );
    int GetAnsDOFNumber ( );
    void PutAnsDOFNumber ( int _val );
    VARIANT_BOOL GetAnsModesOn ( );
    void PutAnsModesOn ( VARIANT_BOOL _val );
    int GetAnsModesNumModes ( );
    void PutAnsModesNumModes ( int _val );
    double GetAnsModesMinFreq ( );
    void PutAnsModesMinFreq ( double _val );
    double GetAnsModesMaxFreq ( );
    void PutAnsModesMaxFreq ( double _val );
    double GetAnsModesModalMethod ( );
    void PutAnsModesModalMethod ( double _val );
    VARIANT_BOOL GetAnsModesElemResults ( );
    void PutAnsModesElemResults ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsHeatOn ( );
    void PutAnsHeatOn ( VARIANT_BOOL _val );
    double GetAnsHeatEndTime ( );
    void PutAnsHeatEndTime ( double _val );
    double GetAnsHeatTimeStep ( );
    void PutAnsHeatTimeStep ( double _val );
    int GetAnsHeatOutputFreq ( );
    void PutAnsHeatOutputFreq ( int _val );
    VARIANT_BOOL GetMarHistOn ( );
    void PutMarHistOn ( VARIANT_BOOL _val );
    int GetMarHistContactProp ( );
    void PutMarHistContactProp ( int _val );
    int GetMarHistCtrlMethod ( );
    void PutMarHistCtrlMethod ( int _val );
    int GetMarHistSolverMeth ( );
    void PutMarHistSolverMeth ( int _val );
    int GetMarHistCtrlMaxStep ( );
    void PutMarHistCtrlMaxStep ( int _val );
    int GetMarHistCtrlMaxRecycle ( );
    void PutMarHistCtrlMaxRecycle ( int _val );
    int GetMarHistCtrlMinRecycle ( );
    void PutMarHistCtrlMinRecycle ( int _val );
    double GetMarHistMaxResidual ( );
    void PutMarHistMaxResidual ( double _val );
    int GetMarHistConvergeMeth ( );
    void PutMarHistConvergeMeth ( int _val );
    VARIANT_BOOL GetMarHistNonPosDefinite ( );
    void PutMarHistNonPosDefinite ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarHistNonSymmetric ( );
    void PutMarHistNonSymmetric ( VARIANT_BOOL _val );
    double GetMarHistModalMinFreq ( );
    void PutMarHistModalMinFreq ( double _val );
    double GetMarHistModalMaxFreq ( );
    void PutMarHistModalMaxFreq ( double _val );
    int GetMarHistModalEigen ( );
    void PutMarHistModalEigen ( int _val );
    int GetMarHistChecking ( );
    void PutMarHistChecking ( int _val );
    VARIANT_BOOL GetMarHistAutoSwitch ( );
    void PutMarHistAutoSwitch ( VARIANT_BOOL _val );
    enum zAnalysisType GetMarHistAnalCaseSol ( );
    void PutMarHistAnalCaseSol ( enum zAnalysisType _val );
    int GetMarHistBuckleNumModes ( );
    void PutMarHistBuckleNumModes ( int _val );
    int GetMarHistBucklePosEigen ( );
    void PutMarHistBucklePosEigen ( int _val );
    VARIANT_BOOL GetMarIncOn ( );
    void PutMarIncOn ( VARIANT_BOOL _val );
    int GetMarIncArcLenMeth ( );
    void PutMarIncArcLenMeth ( int _val );
    double GetMarIncTimePeriod ( );
    void PutMarIncTimePeriod ( double _val );
    double GetMarIncInitTimeInc ( );
    void PutMarIncInitTimeInc ( double _val );
    double GetMarIncMinTimeInc ( );
    void PutMarIncMinTimeInc ( double _val );
    double GetMarIncMaxTimeInc ( );
    void PutMarIncMaxTimeInc ( double _val );
    double GetMarIncScaleFact ( );
    void PutMarIncScaleFact ( double _val );
    int GetMarIncMaxStep ( );
    void PutMarIncMaxStep ( int _val );
    int GetMarIncNumOutInc ( );
    void PutMarIncNumOutInc ( int _val );
    VARIANT_BOOL GetMarIncQuasiStatDamp ( );
    void PutMarIncQuasiStatDamp ( VARIANT_BOOL _val );
    double GetMarIncFracFirst ( );
    void PutMarIncFracFirst ( double _val );
    int GetMarIncMaxNumInc ( );
    void PutMarIncMaxNumInc ( int _val );
    int GetMarIncCtrlMaxRecycle ( );
    void PutMarIncCtrlMaxRecycle ( int _val );
    double GetMarIncMaxFracForAll ( );
    void PutMarIncMaxFracForAll ( double _val );
    double GetMarIncTotalTime ( );
    void PutMarIncTotalTime ( double _val );
    VARIANT_BOOL GetMarCtblOn ( );
    void PutMarCtblOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarCtblWrite ( );
    void PutMarCtblWrite ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasOmodesOn ( );
    void PutNasOmodesOn ( VARIANT_BOOL _val );
    _bstr_t GetNasOmodes ( );
    void PutNasOmodes ( _bstr_t _val );
    _variant_t GetvBCSet ( );
    void PutvBCSet ( const _variant_t & _val );
    _variant_t GetvOutput ( );
    void PutvOutput ( const _variant_t & _val );
    int GetCaseType ( );
    void PutCaseType ( int _val );
    VARIANT_BOOL GetDynHistOn ( );
    void PutDynHistOn ( VARIANT_BOOL _val );
    int GetDynHistBodyLoadGrp ( );
    void PutDynHistBodyLoadGrp ( int _val );
    VARIANT_BOOL GetDynHistMassDampOn ( );
    void PutDynHistMassDampOn ( VARIANT_BOOL _val );
    double GetDynHistMsssDamp ( );
    void PutDynHistMsssDamp ( double _val );
    VARIANT_BOOL GetDynHistImplicit ( );
    void PutDynHistImplicit ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDynHistSpringback ( );
    void PutDynHistSpringback ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDynHistStrainOutput ( );
    void PutDynHistStrainOutput ( VARIANT_BOOL _val );
    double GetDynHistTotalTime ( );
    void PutDynHistTotalTime ( double _val );
    double GetDynHistTimeHistOuput ( );
    void PutDynHistTimeHistOuput ( double _val );
    double GetDynHistPrintHistOutput ( );
    void PutDynHistPrintHistOutput ( double _val );
    int GetDynHistPlateIntgPts ( );
    void PutDynHistPlateIntgPts ( int _val );
    int GetDynHistGroupHistId ( );
    void PutDynHistGroupHistId ( int _val );
    VARIANT_BOOL GetNasCnlOn ( );
    void PutNasCnlOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasCnlUseLoadSet ( );
    void PutNasCnlUseLoadSet ( VARIANT_BOOL _val );
    int GetNasCnlIncrements ( );
    void PutNasCnlIncrements ( int _val );
    double GetNasCnlTime_Increment ( );
    void PutNasCnlTime_Increment ( double _val );
    int GetNasCnlMaxIter ( );
    void PutNasCnlMaxIter ( int _val );
    _variant_t GetvNasCnlConvergenceFlags ( );
    void PutvNasCnlConvergenceFlags ( const _variant_t & _val );
    _variant_t GetvNasCnlConvergenceValue ( );
    void PutvNasCnlConvergenceValue ( const _variant_t & _val );
    int GetNasCnlCtiffnessMethod ( );
    void PutNasCnlCtiffnessMethod ( int _val );
    int GetNasCnlKstep ( );
    void PutNasCnlKstep ( int _val );
    int GetNasCnlIntermediateOutput ( );
    void PutNasCnlIntermediateOutput ( int _val );
    int GetNasCnlOutputInterval ( );
    void PutNasCnlOutputInterval ( int _val );
    int GetNasCnlSolutionStrategy ( );
    void PutNasCnlSolutionStrategy ( int _val );
    int GetNasCnlSolutionOverrides ( );
    void PutNasCnlSolutionOverrides ( int _val );
    VARIANT_BOOL GetNasCnlModnewtonLineSearch ( );
    void PutNasCnlModnewtonLineSearch ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasCnlModnewtonQuasiNewton ( );
    void PutNasCnlModnewtonQuasiNewton ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasCnlModnewtonBisection ( );
    void PutNasCnlModnewtonBisection ( VARIANT_BOOL _val );
    int GetNasCnlArcConstraintType ( );
    void PutNasCnlArcConstraintType ( int _val );
    double GetNasCnlArcMinAdjust ( );
    void PutNasCnlArcMinAdjust ( double _val );
    double GetNasCnlArcMaxAdjust ( );
    void PutNasCnlArcMaxAdjust ( double _val );
    double GetNasCnlArcLoadScale ( );
    void PutNasCnlArcLoadScale ( double _val );
    int GetNasCnlArcDesiredIter ( );
    void PutNasCnlArcDesiredIter ( int _val );
    int GetNasCnlArcMaxSteps ( );
    void PutNasCnlArcMaxSteps ( int _val );
    int GetNasCnlTimeSkipAdjust ( );
    void PutNasCnlTimeSkipAdjust ( int _val );
    int GetNasCnlDominantPeriodSteps ( );
    void PutNasCnlDominantPeriodSteps ( int _val );
    double GetNasCnlBoundsRb ( );
    void PutNasCnlBoundsRb ( double _val );
    double GetNasCnlStabilityTolerance ( );
    void PutNasCnlStabilityTolerance ( double _val );
    int GetNasCnlDivergenceLimit ( );
    void PutNasCnlDivergenceLimit ( int _val );
    int GetNasCnlQuasiNewtonVectors ( );
    void PutNasCnlQuasiNewtonVectors ( int _val );
    int GetNasCnlMaxLineSearch ( );
    void PutNasCnlMaxLineSearch ( int _val );
    double GetNasCnlLineSearchTolerance ( );
    void PutNasCnlLineSearchTolerance ( double _val );
    int GetNasCnlMaxBisections ( );
    void PutNasCnlMaxBisections ( int _val );
    double GetNasCnlMaxRotation ( );
    void PutNasCnlMaxRotation ( double _val );
    double GetNasCnlFstress ( );
    void PutNasCnlFstress ( double _val );
    double GetNasCnlMaxAdjust ( );
    void PutNasCnlMaxAdjust ( double _val );
    VARIANT_BOOL GetNasCnlCreep ( );
    void PutNasCnlCreep ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasCnlSkipNLPARM ( );
    void PutNasCnlSkipNLPARM ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasCaeOn ( );
    void PutNasCaeOn ( VARIANT_BOOL _val );
    double GetNasCaeMachNumber ( );
    void PutNasCaeMachNumber ( double _val );
    double GetNasCaeDynPressure ( );
    void PutNasCaeDynPressure ( double _val );
    VARIANT_BOOL GetNasCaeRigidTrim ( );
    void PutNasCaeRigidTrim ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasCaeWrtieTrim ( );
    void PutNasCaeWrtieTrim ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNasCflOn ( );
    void PutNasCflOn ( VARIANT_BOOL _val );
    int GetNasCflMethod ( );
    void PutNasCflMethod ( int _val );
    int GetNasCflDenID ( );
    void PutNasCflDenID ( int _val );
    int GetNasCflMachFactID ( );
    void PutNasCflMachFactID ( int _val );
    int GetNasCflRfreqFactID ( );
    void PutNasCflRfreqFactID ( int _val );
    int GetNasCflFliMethod ( );
    void PutNasCflFliMethod ( int _val );
    int GetNasCflEig ( );
    void PutNasCflEig ( int _val );
    double GetNasCflEps ( );
    void PutNasCflEps ( double _val );
    VARIANT_BOOL GetNasCflWriteFlutter ( );
    void PutNasCflWriteFlutter ( VARIANT_BOOL _val );
    int GetNasCflSdampID ( );
    void PutNasCflSdampID ( int _val );
    int GetNasSELoad ( );
    void PutNasSELoad ( int _val );
    VARIANT_BOOL GetNasCnlkDAMP ( );
    void PutNasCnlkDAMP ( VARIANT_BOOL _val );
    int GetNasCnlkUPDATE ( );
    void PutNasCnlkUPDATE ( int _val );
    VARIANT_BOOL GetNasRelEMotion ( );
    void PutNasRelEMotion ( VARIANT_BOOL _val );
    int GetNasCnlStiffnessMethod ( );
    void PutNasCnlStiffnessMethod ( int _val );
    _bstr_t GetCaseLabel ( );
    void PutCaseLabel ( _bstr_t _val );
    int GetContactOption ( );
    void PutContactOption ( int _val );
    int GetContactSetType ( );
    void PutContactSetType ( int _val );
    _variant_t GetvMSCNasCnlConvergenceFlags ( );
    void PutvMSCNasCnlConvergenceFlags ( const _variant_t & _val );
    VARIANT_BOOL GetNasCurvatureStrain ( );
    void PutNasCurvatureStrain ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAnsCmlOn ( );
    void PutAnsCmlOn ( VARIANT_BOOL _val );
    int GetAnsCmlVersion ( );
    void PutAnsCmlVersion ( int _val );
    int GetAnsCmlPid ( );
    void PutAnsCmlPid ( int _val );
    _bstr_t GetAnsCmlProd ( );
    void PutAnsCmlProd ( _bstr_t _val );
    VARIANT_BOOL GetAnsCmlList ( );
    void PutAnsCmlList ( VARIANT_BOOL _val );
    _bstr_t GetAnsCmlJobname ( );
    void PutAnsCmlJobname ( _bstr_t _val );
    _bstr_t GetAnsCmlDir ( );
    void PutAnsCmlDir ( _bstr_t _val );
    int GetAnsCmlDBmem ( );
    void PutAnsCmlDBmem ( int _val );
    int GetAnsCmlWSmem ( );
    void PutAnsCmlWSmem ( int _val );
    _bstr_t GetAnsCmlUser ( );
    void PutAnsCmlUser ( _bstr_t _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zAnalysisMgrProgram
{
    FAM_UNKNOWN = 0,
    FAM_MSC_NASTRAN = 4,
    FAM_ANSYS = 5,
    FAM_ABAQUS = 16,
    FAM_MARC = 29,
    FAM_NE_NASTRAN = 31,
    FAM_FEMAP_STRUCTURAL = 34,
    FAM_NX_NASTRAN = 36,
    FAM_LS_DYNA = 28
};

enum zAnalysisExtSEOutTo
{
    EXTSEOUTTO_DMIGPCH = 0,
    EXTSEOUTTO_DMIGOP2 = 1,
    EXTSEOUTTO_MATOP4 = 2
};

enum zAnalysisAssignForm
{
    AAF_NONE = 0,
    AAF_FORMATTED = 1,
    AAF_UNFORMATTED = 2,
    AAF_LITTLENDIAN = 3,
    AAF_BIGENDIAN = 4
};

enum zLinkedSolver
{
    FS_INTEGRATED = 0,
    FS_LINKED = 1,
    FS_VISQ = 2
};

struct __declspec(uuid("00ef42fa-0e77-11d5-9471-001083fff11c"))
AnalysisMgr;
    // [ default ] dispinterface IAnalysisMgr

struct __declspec(uuid("56434b14-f392-11d4-9453-001083fff11c"))
IBCEqn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getdof,put=Putdof))
    int dof[];
    __declspec(property(get=GetNode,put=PutNode))
    int Node[];
    __declspec(property(get=Getcoefficient,put=Putcoefficient))
    double coefficient[];
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=GetCount,put=PutCount))
    int Count;
    __declspec(property(get=Getvdof,put=Putvdof))
    _variant_t vdof;
    __declspec(property(get=Getvnode,put=Putvnode))
    _variant_t vnode;
    __declspec(property(get=Getvcoefficient,put=Putvcoefficient))
    _variant_t vcoefficient;
    __declspec(property(get=GetBCDefinitionID,put=PutBCDefinitionID))
    int BCDefinitionID;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int Getdof (
        int nVectorIndex );
    void Putdof (
        int nVectorIndex,
        int _arg2 );
    int GetNode (
        int nVectorIndex );
    void PutNode (
        int nVectorIndex,
        int _arg2 );
    double Getcoefficient (
        int nVectorIndex );
    void Putcoefficient (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode GetAll (
        int nID,
        int nSetID,
        int * pnDefID,
        int * pnCount,
        VARIANT * pvNode,
        VARIANT * pvDof,
        VARIANT * pvCoeff,
        enum zColor * peColor,
        int * pnLayer );
    enum zReturnCode PutAll (
        int nID,
        int nSetID,
        int nDefID,
        int nCount,
        const _variant_t & vnode,
        const _variant_t & vdof,
        const _variant_t & vCoeff,
        enum zColor eColor,
        int nlayer );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    int GetCount ( );
    void PutCount ( int _val );
    _variant_t Getvdof ( );
    void Putvdof ( const _variant_t & _val );
    _variant_t Getvnode ( );
    void Putvnode ( const _variant_t & _val );
    _variant_t Getvcoefficient ( );
    void Putvcoefficient ( const _variant_t & _val );
    int GetBCDefinitionID ( );
    void PutBCDefinitionID ( int _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("56434b16-f392-11d4-9453-001083fff11c"))
BCEqn;
    // [ default ] dispinterface IBCEqn

struct __declspec(uuid("d7297e16-f305-11d4-9452-001083fff11c"))
IBCGeom : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getdof,put=Putdof))
    VARIANT_BOOL dof[];
    __declspec(property(get=Getdirection,put=Putdirection))
    double direction[];
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getexpanded,put=Putexpanded))
    VARIANT_BOOL expanded;
    __declspec(property(get=GetgeomID,put=PutgeomID))
    int geomID;
    __declspec(property(get=GetgeomTYPE,put=PutgeomTYPE))
    enum zDataType geomTYPE;
    __declspec(property(get=Gettype,put=Puttype))
    enum zBCGeomType type;
    __declspec(property(get=GetoutCSys,put=PutoutCSys))
    int outCSys;
    __declspec(property(get=Getdofvec,put=Putdofvec))
    _variant_t dofvec;
    __declspec(property(get=Getvdof,put=Putvdof))
    _variant_t vdof;
    __declspec(property(get=Getvdirection,put=Putvdirection))
    _variant_t vdirection;
    __declspec(property(get=GetBCDefinitionID,put=PutBCDefinitionID))
    int BCDefinitionID;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Getdof (
        int nVectorIndex );
    void Putdof (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double Getdirection (
        int nVectorIndex );
    void Putdirection (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode GetSearch (
        enum zDataType geomTYPE,
        int geomID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode SetSurfSliding (
        int surfID );
    enum zReturnCode SetSurfNormal (
        int surfID );
    enum zReturnCode SetSurfDirection (
        int surfID,
        double x,
        double y,
        double z );
    enum zReturnCode SetCylinder (
        int surfID,
        VARIANT_BOOL radius,
        VARIANT_BOOL rotation,
        VARIANT_BOOL sliding );
    enum zReturnCode SetFixed (
        enum zDataType geomTYPE,
        int geomID );
    enum zReturnCode SetPinned (
        enum zDataType geomTYPE,
        int geomID );
    enum zReturnCode SetNoRotation (
        enum zDataType geomTYPE,
        int geomID );
    enum zReturnCode SetArbitrary (
        enum zDataType geomTYPE,
        int geomID,
        int csysID,
        VARIANT_BOOL bDOF1,
        VARIANT_BOOL bDOF2,
        VARIANT_BOOL bDOF3,
        VARIANT_BOOL bDOF4,
        VARIANT_BOOL bDOF5,
        VARIANT_BOOL bDOF6 );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    VARIANT_BOOL Getexpanded ( );
    void Putexpanded ( VARIANT_BOOL _val );
    int GetgeomID ( );
    void PutgeomID ( int _val );
    enum zDataType GetgeomTYPE ( );
    void PutgeomTYPE ( enum zDataType _val );
    enum zBCGeomType Gettype ( );
    void Puttype ( enum zBCGeomType _val );
    int GetoutCSys ( );
    void PutoutCSys ( int _val );
    _variant_t Getdofvec ( );
    void Putdofvec ( const _variant_t & _val );
    _variant_t Getvdof ( );
    void Putvdof ( const _variant_t & _val );
    _variant_t Getvdirection ( );
    void Putvdirection ( const _variant_t & _val );
    int GetBCDefinitionID ( );
    void PutBCDefinitionID ( int _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zBCGeomType
{
    FBG_DOF = 0,
    FBG_GENERAL = 1,
    FBG_SURFSLIDING = 2,
    FBG_SURFNONSLIDING = 3,
    FBG_SURFDIRSLIDING = 4,
    FBG_CYLINDER = 5
};

struct __declspec(uuid("d7297e18-f305-11d4-9452-001083fff11c"))
BCGeom;
    // [ default ] dispinterface IBCGeom

struct __declspec(uuid("d0e25456-f2fb-11d4-9452-001083fff11c"))
IBCNode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getdof,put=Putdof))
    VARIANT_BOOL dof[];
    __declspec(property(get=Getvalue,put=Putvalue))
    double value[];
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getexpanded,put=Putexpanded))
    VARIANT_BOOL expanded;
    __declspec(property(get=Getdofvec,put=Putdofvec))
    _variant_t dofvec;
    __declspec(property(get=Getvdof,put=Putvdof))
    _variant_t vdof;
    __declspec(property(get=GetBCDefinitionID,put=PutBCDefinitionID))
    int BCDefinitionID;
    __declspec(property(get=GetNonZeroConstraint,put=PutNonZeroConstraint))
    VARIANT_BOOL NonZeroConstraint;
    __declspec(property(get=Getvvalue,put=Putvvalue))
    _variant_t vvalue;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Getdof (
        int nVectorIndex );
    void Putdof (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double Getvalue (
        int nVectorIndex );
    void Putvalue (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode AddArray (
        int Count,
        VARIANT_BOOL doDOF,
        const _variant_t & NodeID,
        const _variant_t & dof );
    enum zReturnCode Add (
        int setID,
        VARIANT_BOOL bDOF1,
        VARIANT_BOOL bDOF2,
        VARIANT_BOOL bDOF3,
        VARIANT_BOOL bDOF4,
        VARIANT_BOOL bDOF5,
        VARIANT_BOOL bDOF6 );
    enum zReturnCode AddNonZero (
        int setID,
        VARIANT_BOOL bDOF1,
        double dVal1,
        VARIANT_BOOL bDOF2,
        double dVal2,
        VARIANT_BOOL bDOF3,
        double dVal3,
        VARIANT_BOOL bDOF4,
        double dVal4,
        VARIANT_BOOL bDOF5,
        double dVal5,
        VARIANT_BOOL bDOF6,
        double dVal6 );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    VARIANT_BOOL Getexpanded ( );
    void Putexpanded ( VARIANT_BOOL _val );
    _variant_t Getdofvec ( );
    void Putdofvec ( const _variant_t & _val );
    _variant_t Getvdof ( );
    void Putvdof ( const _variant_t & _val );
    int GetBCDefinitionID ( );
    void PutBCDefinitionID ( int _val );
    VARIANT_BOOL GetNonZeroConstraint ( );
    void PutNonZeroConstraint ( VARIANT_BOOL _val );
    _variant_t Getvvalue ( );
    void Putvvalue ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("d0e25458-f2fb-11d4-9452-001083fff11c"))
BCNode;
    // [ default ] dispinterface IBCNode

struct __declspec(uuid("5d2f5e14-f2f1-11d4-9452-001083fff11c"))
IBCSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetIsCombination,put=PutIsCombination))
    VARIANT_BOOL IsCombination;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode Expand ( );
    enum zReturnCode Compress ( );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode ResetNextBC (
        enum zDataType enDataType,
        VARIANT_BOOL bOtherBCOnly,
        VARIANT_BOOL bIncludeExpanded );
    enum zReturnCode NextBC (
        IDispatch * * pDispatch );
    enum zReturnCode ResetNextBCDef (
        VARIANT_BOOL bAllDataTypes,
        enum zDataType enDataType );
    enum zReturnCode NextBCDef (
        IDispatch * * pDispatch );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode GetCombination (
        int * nCombo,
        VARIANT * nSetID );
    enum zReturnCode PutCombination (
        int nCombo,
        const _variant_t & nSetID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    VARIANT_BOOL GetIsCombination ( );
    void PutIsCombination ( VARIANT_BOOL _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("5d2f5e16-f2f1-11d4-9452-001083fff11c"))
BCSet;
    // [ default ] dispinterface IBCSet

struct __declspec(uuid("14057452-0382-11d5-9465-001083fff11c"))
IContact : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getbox,put=Putbox))
    double box[][];
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=GetrefNode,put=PutrefNode))
    int refNode;
    __declspec(property(get=GetOutput,put=PutOutput))
    enum zDataType Output;
    __declspec(property(get=Getrigid,put=Putrigid))
    VARIANT_BOOL rigid;
    __declspec(property(get=Getvbox,put=Putvbox))
    _variant_t vbox;
    __declspec(property(get=GetCount,put=PutCount))
    int Count;
    __declspec(property(get=Gettype,put=Puttype))
    enum zConnectionRegionType type;
    __declspec(property(get=GetrefCSys,put=PutrefCSys))
    int refCSys;
    __declspec(property(get=GetRotorLoadSet,put=PutRotorLoadSet))
    int RotorLoadSet;
    __declspec(property(get=Getoffset,put=Putoffset))
    double offset;
    __declspec(property(get=GetFluidZFreeOn,put=PutFluidZFreeOn))
    VARIANT_BOOL FluidZFreeOn;
    __declspec(property(get=GetFluidZFree,put=PutFluidZFree))
    double FluidZFree;
    __declspec(property(get=GetFluidDensity,put=PutFluidDensity))
    double FluidDensity;
    __declspec(property(get=GetFluidXZSymmetry,put=PutFluidXZSymmetry))
    int FluidXZSymmetry;
    __declspec(property(get=GetFluidYZSymmetry,put=PutFluidYZSymmetry))
    int FluidYZSymmetry;
    __declspec(property(get=GetFluidCharLength,put=PutFluidCharLength))
    double FluidCharLength;
    __declspec(property(get=GetFluidExactIntegFact,put=PutFluidExactIntegFact))
    double FluidExactIntegFact;
    __declspec(property(get=GetRotorOverallDamp,put=PutRotorOverallDamp))
    double RotorOverallDamp;
    __declspec(property(get=GetRotorMatlDamp,put=PutRotorMatlDamp))
    double RotorMatlDamp;
    __declspec(property(get=GetRotorSpeed,put=PutRotorSpeed))
    double RotorSpeed;
    __declspec(property(get=GetBoltDir,put=PutBoltDir))
    int BoltDir;
    __declspec(property(get=GetBoltType,put=PutBoltType))
    int BoltType;
    __declspec(property(get=GetMassType,put=PutMassType))
    int MassType;
    __declspec(property(get=GetMassNSM,put=PutMassNSM))
    double MassNSM;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getbox (
        int nRowIndex,
        int nColIndex );
    void Putbox (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode GetContactList (
        int * listcount,
        VARIANT * listTYPE,
        VARIANT * entityID,
        VARIANT * faceID,
        VARIANT * expanded );
    enum zReturnCode PutContactList (
        int listcount,
        const _variant_t & listTYPE,
        const _variant_t & entityID,
        const _variant_t & faceID,
        const _variant_t & expanded );
    enum zReturnCode Expand ( );
    enum zReturnCode Compress ( );
    enum zReturnCode AddContact (
        enum zDataType entityTYPE,
        int entityID,
        int faceID );
    enum zReturnCode SetOutputType (
        enum zDataType entityTYPE );
    enum zReturnCode SetOffset (
        double offset );
    enum zReturnCode GetOffset (
        double * offset );
    enum zReturnCode SetRigidType (
        VARIANT_BOOL isRigid );
    enum zReturnCode IsRigidType ( );
    enum zReturnCode clear ( );
    ISortSetPtr GetEntities (
        enum zDataType entityTYPE,
        VARIANT_BOOL bGetExpanded );
    enum zReturnCode Enable (
        VARIANT_BOOL bEnable );
    enum zReturnCode IsEnabled ( );
    enum zReturnCode Reverse ( );
    enum zReturnCode BoundingBox (
        VARIANT * box );
    enum zReturnCode IsEmpty ( );
    enum zReturnCode BoundingBoxInCSys (
        int nCSysID,
        VARIANT * box );
    ISetPtr GetEntitySet (
        enum zDataType entityTYPE,
        VARIANT_BOOL bGetExpanded );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    int GetrefNode ( );
    void PutrefNode ( int _val );
    enum zDataType GetOutput ( );
    void PutOutput ( enum zDataType _val );
    VARIANT_BOOL Getrigid ( );
    void Putrigid ( VARIANT_BOOL _val );
    _variant_t Getvbox ( );
    void Putvbox ( const _variant_t & _val );
    int GetCount ( );
    void PutCount ( int _val );
    enum zConnectionRegionType Gettype ( );
    void Puttype ( enum zConnectionRegionType _val );
    int GetrefCSys ( );
    void PutrefCSys ( int _val );
    int GetRotorLoadSet ( );
    void PutRotorLoadSet ( int _val );
    double Getoffset ( );
    void Putoffset ( double _val );
    VARIANT_BOOL GetFluidZFreeOn ( );
    void PutFluidZFreeOn ( VARIANT_BOOL _val );
    double GetFluidZFree ( );
    void PutFluidZFree ( double _val );
    double GetFluidDensity ( );
    void PutFluidDensity ( double _val );
    int GetFluidXZSymmetry ( );
    void PutFluidXZSymmetry ( int _val );
    int GetFluidYZSymmetry ( );
    void PutFluidYZSymmetry ( int _val );
    double GetFluidCharLength ( );
    void PutFluidCharLength ( double _val );
    double GetFluidExactIntegFact ( );
    void PutFluidExactIntegFact ( double _val );
    double GetRotorOverallDamp ( );
    void PutRotorOverallDamp ( double _val );
    double GetRotorMatlDamp ( );
    void PutRotorMatlDamp ( double _val );
    double GetRotorSpeed ( );
    void PutRotorSpeed ( double _val );
    int GetBoltDir ( );
    void PutBoltDir ( int _val );
    int GetBoltType ( );
    void PutBoltType ( int _val );
    int GetMassType ( );
    void PutMassType ( int _val );
    double GetMassNSM ( );
    void PutMassNSM ( double _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zConnectionRegionType
{
    FRT_CONNECTION = 0,
    FRT_FLUID = 1,
    FRT_BOLT = 2,
    FRT_ROTOR = 3,
    FRT_NSM = 4
};

struct __declspec(uuid("14057454-0382-11d5-9465-001083fff11c"))
Contact;
    // [ default ] dispinterface IContact

struct __declspec(uuid("14057456-0382-11d5-9465-001083fff11c"))
ConnectionRegion;
    // [ default ] dispinterface IContact

struct __declspec(uuid("10ce53b8-f2e2-11d4-9452-001083fff11c"))
ICSys : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetdefCSys,put=PutdefCSys))
    int defCSys;
    __declspec(property(get=Gettype,put=Puttype))
    enum zCSysType type;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getz,put=Putz))
    double z;
    __declspec(property(get=Getrotx,put=Putrotx))
    double rotx;
    __declspec(property(get=Getroty,put=Putroty))
    double roty;
    __declspec(property(get=Getrotz,put=Putrotz))
    double rotz;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getorigin,put=Putorigin))
    _variant_t origin;
    __declspec(property(get=Getrotation,put=Putrotation))
    _variant_t rotation;
    __declspec(property(get=Getmatrix,put=Putmatrix))
    _variant_t matrix;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode XYPoints (
        const _variant_t & origin,
        const _variant_t & xaxis,
        const _variant_t & xyplane );
    enum zReturnCode Put (
        int entID );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode Axis (
        int nCSysType,
        int nAxisDir,
        const _variant_t & origin,
        const _variant_t & Axis );
    enum zReturnCode TwoAxes (
        int nCSysType,
        int nNormalAxisDir,
        const _variant_t & origin,
        const _variant_t & axis1,
        const _variant_t & axis2 );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    int GetdefCSys ( );
    void PutdefCSys ( int _val );
    enum zCSysType Gettype ( );
    void Puttype ( enum zCSysType _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getz ( );
    void Putz ( double _val );
    double Getrotx ( );
    void Putrotx ( double _val );
    double Getroty ( );
    void Putroty ( double _val );
    double Getrotz ( );
    void Putrotz ( double _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    _variant_t Getorigin ( );
    void Putorigin ( const _variant_t & _val );
    _variant_t Getrotation ( );
    void Putrotation ( const _variant_t & _val );
    _variant_t Getmatrix ( );
    void Putmatrix ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zCSysType
{
    FCS_RECTANGULAR = 0,
    FCS_CYLINDRICAL = 1,
    FCS_SPHERICAL = 2
};

struct __declspec(uuid("10ce53ba-f2e2-11d4-9452-001083fff11c"))
CSys;
    // [ default ] dispinterface ICSys

struct __declspec(uuid("1f9f16ce-09d6-11d5-946c-001083fff11c"))
ICurve : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStdPoint,put=PutStdPoint))
    int StdPoint[];
    __declspec(property(get=GetattrOrient,put=PutattrOrient))
    double attrOrient[];
    __declspec(property(get=GetBSplinePoint,put=PutBSplinePoint))
    int BSplinePoint[];
    __declspec(property(get=GetBSplineKnot,put=PutBSplineKnot))
    double BSplineKnot[];
    __declspec(property(get=GetBSplineWeight,put=PutBSplineWeight))
    double BSplineWeight[];
    __declspec(property(get=GetMeshElem,put=PutMeshElem))
    int MeshElem[];
    __declspec(property(get=GetMeshBias,put=PutMeshBias))
    double MeshBias[];
    __declspec(property(get=GetMeshMaxParam,put=PutMeshMaxParam))
    double MeshMaxParam[];
    __declspec(property(get=GetLengthSpacing,put=PutLengthSpacing))
    VARIANT_BOOL LengthSpacing[];
    __declspec(property(get=GetCenterBias,put=PutCenterBias))
    VARIANT_BOOL CenterBias[];
    __declspec(property(get=GetGeometricBias,put=PutGeometricBias))
    VARIANT_BOOL GeometricBias[];
    __declspec(property(get=GetattrOffset,put=PutattrOffset))
    double attrOffset[][];
    __declspec(property(get=GetattrRelease,put=PutattrRelease))
    int attrRelease[][];
    __declspec(property(get=Gettype,put=Puttype))
    enum zCurveType type;
    __declspec(property(get=GetattrPID,put=PutattrPID))
    int attrPID;
    __declspec(property(get=GetattrOrientType,put=PutattrOrientType))
    enum zCurveOrientType attrOrientType;
    __declspec(property(get=GetattrOffsetType,put=PutattrOffsetType))
    enum zCurveOffsetType attrOffsetType;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=GetAddress,put=PutAddress))
    int Address;
    __declspec(property(get=GetEngine,put=PutEngine))
    int Engine;
    __declspec(property(get=GetSuppressed,put=PutSuppressed))
    VARIANT_BOOL Suppressed;
    __declspec(property(get=GetBSplineOrder,put=PutBSplineOrder))
    int BSplineOrder;
    __declspec(property(get=GetBSplineNumPoints,put=PutBSplineNumPoints))
    int BSplineNumPoints;
    __declspec(property(get=GetBSplineT0,put=PutBSplineT0))
    double BSplineT0;
    __declspec(property(get=GetBSplineT1,put=PutBSplineT1))
    double BSplineT1;
    __declspec(property(get=GetBSplinePlanar,put=PutBSplinePlanar))
    VARIANT_BOOL BSplinePlanar;
    __declspec(property(get=GetBSplineClosed,put=PutBSplineClosed))
    VARIANT_BOOL BSplineClosed;
    __declspec(property(get=GetBSplineRational,put=PutBSplineRational))
    VARIANT_BOOL BSplineRational;
    __declspec(property(get=GetBSplinePeriodic,put=PutBSplinePeriodic))
    VARIANT_BOOL BSplinePeriodic;
    __declspec(property(get=GetHasCustomMesh,put=PutHasCustomMesh))
    VARIANT_BOOL HasCustomMesh;
    __declspec(property(get=GetvStdPoint,put=PutvStdPoint))
    _variant_t vStdPoint;
    __declspec(property(get=GetvattrOrient,put=PutvattrOrient))
    _variant_t vattrOrient;
    __declspec(property(get=GetvBSplinePoint,put=PutvBSplinePoint))
    _variant_t vBSplinePoint;
    __declspec(property(get=GetvBSplineKnot,put=PutvBSplineKnot))
    _variant_t vBSplineKnot;
    __declspec(property(get=GetvBSplineWeight,put=PutvBSplineWeight))
    _variant_t vBSplineWeight;
    __declspec(property(get=GetvMeshElem,put=PutvMeshElem))
    _variant_t vMeshElem;
    __declspec(property(get=GetvMeshBias,put=PutvMeshBias))
    _variant_t vMeshBias;
    __declspec(property(get=GetvMeshMaxParam,put=PutvMeshMaxParam))
    _variant_t vMeshMaxParam;
    __declspec(property(get=GetvLengthSpacing,put=PutvLengthSpacing))
    _variant_t vLengthSpacing;
    __declspec(property(get=GetvCenterBias,put=PutvCenterBias))
    _variant_t vCenterBias;
    __declspec(property(get=GetvGeometricBias,put=PutvGeometricBias))
    _variant_t vGeometricBias;
    __declspec(property(get=GetvattrOffset,put=PutvattrOffset))
    _variant_t vattrOffset;
    __declspec(property(get=GetvattrRelease,put=PutvattrRelease))
    _variant_t vattrRelease;
    __declspec(property(get=GetInternalToBoundary,put=PutInternalToBoundary))
    int InternalToBoundary;
    __declspec(property(get=GetInCombinedCurve,put=PutInCombinedCurve))
    int InCombinedCurve;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int GetStdPoint (
        int nVectorIndex );
    void PutStdPoint (
        int nVectorIndex,
        int _arg2 );
    double GetattrOrient (
        int nVectorIndex );
    void PutattrOrient (
        int nVectorIndex,
        double _arg2 );
    int GetBSplinePoint (
        int nVectorIndex );
    void PutBSplinePoint (
        int nVectorIndex,
        int _arg2 );
    double GetBSplineKnot (
        int nVectorIndex );
    void PutBSplineKnot (
        int nVectorIndex,
        double _arg2 );
    double GetBSplineWeight (
        int nVectorIndex );
    void PutBSplineWeight (
        int nVectorIndex,
        double _arg2 );
    int GetMeshElem (
        int nVectorIndex );
    void PutMeshElem (
        int nVectorIndex,
        int _arg2 );
    double GetMeshBias (
        int nVectorIndex );
    void PutMeshBias (
        int nVectorIndex,
        double _arg2 );
    double GetMeshMaxParam (
        int nVectorIndex );
    void PutMeshMaxParam (
        int nVectorIndex,
        double _arg2 );
    VARIANT_BOOL GetLengthSpacing (
        int nVectorIndex );
    void PutLengthSpacing (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetCenterBias (
        int nVectorIndex );
    void PutCenterBias (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetGeometricBias (
        int nVectorIndex );
    void PutGeometricBias (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double GetattrOffset (
        int nRowIndex,
        int nColIndex );
    void PutattrOffset (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    int GetattrRelease (
        int nRowIndex,
        int nColIndex );
    void PutattrRelease (
        int nRowIndex,
        int nColIndex,
        int _arg3 );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode Reverse ( );
    enum zReturnCode EndPoints (
        int * startPt,
        int * endPt );
    enum zReturnCode ArcCircleInfo (
        VARIANT * center,
        VARIANT * normal,
        VARIANT * startloc,
        VARIANT * endloc,
        double * angle,
        double * radius );
    enum zReturnCode ParamToXYZ (
        double s,
        VARIANT * xyz );
    enum zReturnCode XYZToParam (
        const _variant_t & xyz,
        double * s );
    enum zReturnCode Project (
        const _variant_t & fromxyz,
        VARIANT * toxyz );
    enum zReturnCode Tangent (
        VARIANT_BOOL outward,
        const _variant_t & fromxyz,
        VARIANT * Tangent );
    double Length ( );
    double PartialLength (
        double s0,
        double s1 );
    double ParamAtLength (
        VARIANT_BOOL fromstart,
        double Length );
    enum zReturnCode MeshParam (
        int * numParam,
        VARIANT * MeshParam );
    enum zReturnCode AddMeshLoc (
        double s,
        int NumElem,
        int spacing,
        int biasMethod,
        double bias,
        int biasLoc );
    enum zReturnCode AddMeshLocXYZ (
        const _variant_t & xyz,
        int NumElem,
        int spacing,
        int biasMethod,
        double bias,
        int biasLoc );
    enum zReturnCode Nodes (
        VARIANT_BOOL getBoundary,
        VARIANT_BOOL getInterior,
        int * numNodes,
        VARIANT * NodeID );
    enum zReturnCode Elements (
        int * numElems,
        VARIANT * elemID );
    enum zReturnCode ElementsWithFaces (
        int * numElems,
        VARIANT * elemID );
    enum zReturnCode BoundingBox (
        VARIANT * box );
    enum zReturnCode GetMeshLoc (
        int * numLoc,
        VARIANT * MeshParam );
    enum zReturnCode GetMeshLocXYZ (
        int * numLoc,
        VARIANT * meshXYZ );
    enum zReturnCode IsSmoothEdge (
        double dAngle,
        int * nConvexityType );
    enum zReturnCode Surfaces (
        enum zCombinedMode nCombinedMode,
        int * numSurfaces,
        VARIANT * surfaceID );
    enum zReturnCode SurfacesAsSet (
        enum zCombinedMode nCombinedMode,
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode ElementsAsSet (
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode NodesAsSet (
        VARIANT_BOOL getBoundary,
        VARIANT_BOOL getInterior,
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode normal (
        const _variant_t & xyz,
        VARIANT * vNormal );
    enum zReturnCode IsCombinedCurve ( );
    enum zReturnCode GetCombinedCurves (
        int * nNumCurves,
        VARIANT * curveID );
    enum zReturnCode CombineCurves (
        int nNumCurves,
        const _variant_t & curveID );
    enum zReturnCode CombinedCurvesAsSet (
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode Facets (
        int * numPoints,
        VARIANT * xyzPoint );
    double PartialLengthXYZ (
        const _variant_t & xyz0,
        const _variant_t & xyz1 );
    double PartialLengthNode (
        int nNode0,
        int nNode1 );
    enum zReturnCode IsStraight ( );
    enum zReturnCode IsNonManifold ( );
    enum zReturnCode IsSmooth (
        double dAngle );
    enum zReturnCode TangentAtEnds (
        VARIANT_BOOL outward,
        VARIANT * pvEnd1Tan,
        VARIANT * pvEnd2Tan );
    enum zReturnCode CurvatureAcrossEdge (
        double * pdMinVal,
        double * pdMaxVal,
        double * pdAngleBetweenNormals );
    enum zReturnCode ClosestPointToSurface (
        int nSurfaceID,
        double * pdX,
        double * pdY,
        double * pdZ,
        double * pdDistance,
        double * pdAngleOfTangentToSurfNormal );
    enum zReturnCode MinRadius (
        double * pdMinRadius );
    enum zReturnCode ParamOnCombinedCurve (
        double s,
        int * curveID );
    enum zReturnCode IsSuppressed ( );
    enum zReturnCode ClearMeshLoc ( );
    enum zReturnCode HasMeshSize ( );
    enum zReturnCode SetSimpleMeshLoc (
        int NumElem,
        int spacing,
        int biasMethod,
        double bias,
        int biasLoc );
    enum zReturnCode MeshCount (
        int * NumElem,
        VARIANT_BOOL * CustomSize );
    enum zReturnCode CommonPoint (
        int nOtherCurveID,
        int * nCommonPoint,
        VARIANT_BOOL * bMultipleCommon );
    enum zReturnCode PointsAsSet (
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode ProjectToClosest (
        VARIANT_BOOL bExtendCurve,
        const _variant_t & vOrig,
        VARIANT * vProj );
    enum zReturnCode ProjectAlongVector (
        const _variant_t & vAlong,
        const _variant_t & vOrig,
        VARIANT * vProj );
    enum zReturnCode IsArc ( );
    enum zReturnCode ClosestPointToCurve (
        int nCurveID,
        double * pdX,
        double * pdY,
        double * pdZ,
        double * pdDistance,
        double * pdAngleOfTangents );
    enum zReturnCode IsGeneral ( );
    enum zReturnCode Solid (
        int * pnSolidID );
    enum zReturnCode Midpoint (
        VARIANT * Midpoint );
    enum zReturnCode center (
        VARIANT * center );
    double GetPrecision ( );
    enum zReturnCode ResetPrecision ( );
    enum zReturnCode IsMergeable ( );
    enum zReturnCode BoundingBoxInCSys (
        int nCSysID,
        VARIANT * box );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    enum zCurveType Gettype ( );
    void Puttype ( enum zCurveType _val );
    int GetattrPID ( );
    void PutattrPID ( int _val );
    enum zCurveOrientType GetattrOrientType ( );
    void PutattrOrientType ( enum zCurveOrientType _val );
    enum zCurveOffsetType GetattrOffsetType ( );
    void PutattrOffsetType ( enum zCurveOffsetType _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    int GetAddress ( );
    void PutAddress ( int _val );
    int GetEngine ( );
    void PutEngine ( int _val );
    VARIANT_BOOL GetSuppressed ( );
    void PutSuppressed ( VARIANT_BOOL _val );
    int GetBSplineOrder ( );
    void PutBSplineOrder ( int _val );
    int GetBSplineNumPoints ( );
    void PutBSplineNumPoints ( int _val );
    double GetBSplineT0 ( );
    void PutBSplineT0 ( double _val );
    double GetBSplineT1 ( );
    void PutBSplineT1 ( double _val );
    VARIANT_BOOL GetBSplinePlanar ( );
    void PutBSplinePlanar ( VARIANT_BOOL _val );
    VARIANT_BOOL GetBSplineClosed ( );
    void PutBSplineClosed ( VARIANT_BOOL _val );
    VARIANT_BOOL GetBSplineRational ( );
    void PutBSplineRational ( VARIANT_BOOL _val );
    VARIANT_BOOL GetBSplinePeriodic ( );
    void PutBSplinePeriodic ( VARIANT_BOOL _val );
    VARIANT_BOOL GetHasCustomMesh ( );
    void PutHasCustomMesh ( VARIANT_BOOL _val );
    _variant_t GetvStdPoint ( );
    void PutvStdPoint ( const _variant_t & _val );
    _variant_t GetvattrOrient ( );
    void PutvattrOrient ( const _variant_t & _val );
    _variant_t GetvBSplinePoint ( );
    void PutvBSplinePoint ( const _variant_t & _val );
    _variant_t GetvBSplineKnot ( );
    void PutvBSplineKnot ( const _variant_t & _val );
    _variant_t GetvBSplineWeight ( );
    void PutvBSplineWeight ( const _variant_t & _val );
    _variant_t GetvMeshElem ( );
    void PutvMeshElem ( const _variant_t & _val );
    _variant_t GetvMeshBias ( );
    void PutvMeshBias ( const _variant_t & _val );
    _variant_t GetvMeshMaxParam ( );
    void PutvMeshMaxParam ( const _variant_t & _val );
    _variant_t GetvLengthSpacing ( );
    void PutvLengthSpacing ( const _variant_t & _val );
    _variant_t GetvCenterBias ( );
    void PutvCenterBias ( const _variant_t & _val );
    _variant_t GetvGeometricBias ( );
    void PutvGeometricBias ( const _variant_t & _val );
    _variant_t GetvattrOffset ( );
    void PutvattrOffset ( const _variant_t & _val );
    _variant_t GetvattrRelease ( );
    void PutvattrRelease ( const _variant_t & _val );
    int GetInternalToBoundary ( );
    void PutInternalToBoundary ( int _val );
    int GetInCombinedCurve ( );
    void PutInCombinedCurve ( int _val );
    double GetScaleFactor ( );
    void PutScaleFactor ( double _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zCurveType
{
    FCU_LINE = 0,
    FCU_ARC = 1,
    FCU_CIRCLE = 2,
    FCU_SPLINE = 3,
    FCU_BSPLINE = 4,
    FCU_SOLID = 5,
    FCU_COMPOSITE = 6
};

enum zCurveOrientType
{
    FCR_BY_VECTOR = 0,
    FCR_BY_LOCATION = 1,
    FCR_BY_VECTOR_REV = 2,
    FCR_BY_LOCATION_REV = 3
};

enum zCurveOffsetType
{
    FCO_VECTOR = 0,
    FCO_RADIAL = 1,
    FCO_POINT = 2
};

enum zCombinedMode
{
    FCC_OFF = 0,
    FCC_ON = 1,
    FCC_BOTH = 2
};

struct __declspec(uuid("1f9f16d0-09d6-11d5-946c-001083fff11c"))
Curve;
    // [ default ] dispinterface ICurve

struct __declspec(uuid("cfa77c4c-63e9-11d5-94aa-001083fff11c"))
IUserData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetSize,put=PutSize))
    int Size;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode Get (
        int entID );
    enum zReturnCode GetTitle (
        _bstr_t title );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode PutTitle (
        _bstr_t title );
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode DeleteTitle (
        _bstr_t title );
    enum zReturnCode WriteDouble (
        double val );
    enum zReturnCode WriteDoubleArray (
        int num,
        const _variant_t & val );
    enum zReturnCode WriteFloat (
        float val );
    enum zReturnCode WriteLong (
        int val );
    enum zReturnCode WriteLongArray (
        int num,
        const _variant_t & val );
    enum zReturnCode WriteShort (
        short val );
    enum zReturnCode WriteBool (
        VARIANT_BOOL val );
    enum zReturnCode WriteBoolArray (
        int num,
        const _variant_t & val );
    enum zReturnCode WriteString (
        _bstr_t val );
    enum zReturnCode ReadDouble (
        double * val );
    enum zReturnCode ReadDoubleArray (
        int * num,
        VARIANT * val );
    enum zReturnCode ReadFloat (
        float * val );
    enum zReturnCode ReadLong (
        int * val );
    enum zReturnCode ReadLongArray (
        int * num,
        VARIANT * val );
    enum zReturnCode ReadShort (
        short * val );
    enum zReturnCode ReadBool (
        VARIANT_BOOL * val );
    enum zReturnCode ReadBoolArray (
        int * num,
        VARIANT * val );
    enum zReturnCode ReadString (
        BSTR * val );
    int Position ( );
    enum zReturnCode AtEOF ( );
    enum zReturnCode Jump (
        int jumpto );
    enum zReturnCode Truncate (
        int fsize );
    enum zReturnCode clear ( );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    int GetSize ( );
    void PutSize ( int _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
};

struct __declspec(uuid("cfa77c4e-63e9-11d5-94aa-001083fff11c"))
UserData;
    // [ default ] dispinterface IUserData

struct __declspec(uuid("edb333c3-3711-47a5-a628-33b4b8768f88"))
ILayup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getthickness,put=Putthickness))
    double thickness[];
    __declspec(property(get=Getangle,put=Putangle))
    double angle[];
    __declspec(property(get=GetmatlID,put=PutmatlID))
    int matlID[];
    __declspec(property(get=Getglobalply,put=Putglobalply))
    int globalply[];
    __declspec(property(get=GetAMatrix,put=PutAMatrix))
    double AMatrix[][];
    __declspec(property(get=GetBMatrix,put=PutBMatrix))
    double BMatrix[][];
    __declspec(property(get=GetDMatrix,put=PutDMatrix))
    double DMatrix[][];
    __declspec(property(get=GetAInvMatrix,put=PutAInvMatrix))
    double AInvMatrix[][];
    __declspec(property(get=GetBInvMatrix,put=PutBInvMatrix))
    double BInvMatrix[][];
    __declspec(property(get=GetDInvMatrix,put=PutDInvMatrix))
    double DInvMatrix[][];
    __declspec(property(get=GetInPlaneProp,put=PutInPlaneProp))
    double InPlaneProp[];
    __declspec(property(get=GetBendingProp,put=PutBendingProp))
    double BendingProp[];
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetNumberOfPlys,put=PutNumberOfPlys))
    int NumberOfPlys;
    __declspec(property(get=Getvthickness,put=Putvthickness))
    _variant_t vthickness;
    __declspec(property(get=Getvangle,put=Putvangle))
    _variant_t vangle;
    __declspec(property(get=GetvmatlID,put=PutvmatlID))
    _variant_t vmatlID;
    __declspec(property(get=Getvglobalply,put=Putvglobalply))
    _variant_t vglobalply;
    __declspec(property(get=GetLayupThickness,put=PutLayupThickness))
    double LayupThickness;
    __declspec(property(get=GetvInPlaneProp,put=PutvInPlaneProp))
    _variant_t vInPlaneProp;
    __declspec(property(get=GetvBendingProp,put=PutvBendingProp))
    _variant_t vBendingProp;
    __declspec(property(get=GetvAMatrix,put=PutvAMatrix))
    _variant_t vAMatrix;
    __declspec(property(get=GetvBMatrix,put=PutvBMatrix))
    _variant_t vBMatrix;
    __declspec(property(get=GetvDMatrix,put=PutvDMatrix))
    _variant_t vDMatrix;
    __declspec(property(get=GetvAInvMatrix,put=PutvAInvMatrix))
    _variant_t vAInvMatrix;
    __declspec(property(get=GetvBInvMatrix,put=PutvBInvMatrix))
    _variant_t vBInvMatrix;
    __declspec(property(get=GetvDInvMatrix,put=PutvDInvMatrix))
    _variant_t vDInvMatrix;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getthickness (
        int nVectorIndex );
    void Putthickness (
        int nVectorIndex,
        double _arg2 );
    double Getangle (
        int nVectorIndex );
    void Putangle (
        int nVectorIndex,
        double _arg2 );
    int GetmatlID (
        int nVectorIndex );
    void PutmatlID (
        int nVectorIndex,
        int _arg2 );
    int Getglobalply (
        int nVectorIndex );
    void Putglobalply (
        int nVectorIndex,
        int _arg2 );
    double GetAMatrix (
        int nRowIndex,
        int nColIndex );
    void PutAMatrix (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    double GetBMatrix (
        int nRowIndex,
        int nColIndex );
    void PutBMatrix (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    double GetDMatrix (
        int nRowIndex,
        int nColIndex );
    void PutDMatrix (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    double GetAInvMatrix (
        int nRowIndex,
        int nColIndex );
    void PutAInvMatrix (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    double GetBInvMatrix (
        int nRowIndex,
        int nColIndex );
    void PutBInvMatrix (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    double GetDInvMatrix (
        int nRowIndex,
        int nColIndex );
    void PutDInvMatrix (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    double GetInPlaneProp (
        int nVectorIndex );
    void PutInPlaneProp (
        int nVectorIndex,
        double _arg2 );
    double GetBendingProp (
        int nVectorIndex );
    void PutBendingProp (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode InsertPly (
        int nPlyID,
        int nMatlID,
        double dThickness,
        double dAngle,
        int nGlobalPly );
    enum zReturnCode AddPly (
        int nMatlID,
        double dThickness,
        double dAngle,
        int nGlobalPly );
    enum zReturnCode DeletePly (
        int nPlyID );
    enum zReturnCode clear ( );
    enum zReturnCode Compute (
        VARIANT_BOOL dynamic );
    enum zReturnCode HasGlobalPly (
        int nGlobalPlyID,
        int * nPlyNum );
    enum zReturnCode HasMaterial (
        int nMatlID );
    enum zReturnCode TotalThickness (
        double * dThickness );
    enum zReturnCode GetPly (
        int nPlyID,
        int * nMatlID,
        double * dThickness,
        double * dAngle,
        int * nGlobalPly );
    enum zReturnCode SetPly (
        int nPlyID,
        int nMatlID,
        double dThickness,
        double dAngle,
        int nGlobalPly );
    enum zReturnCode GetAllPly (
        int * nNumPly,
        VARIANT * nMatlID,
        VARIANT * dThickness,
        VARIANT * dAngle,
        VARIANT * nGlobalPly );
    enum zReturnCode SetAllPly (
        int nNumPly,
        const _variant_t & nMatlID,
        const _variant_t & dThickness,
        const _variant_t & dAngle,
        const _variant_t & nGlobalPly );
    enum zReturnCode Compute2 (
        int nOption );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode HasFullGlobalPly ( );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    int GetNumberOfPlys ( );
    void PutNumberOfPlys ( int _val );
    _variant_t Getvthickness ( );
    void Putvthickness ( const _variant_t & _val );
    _variant_t Getvangle ( );
    void Putvangle ( const _variant_t & _val );
    _variant_t GetvmatlID ( );
    void PutvmatlID ( const _variant_t & _val );
    _variant_t Getvglobalply ( );
    void Putvglobalply ( const _variant_t & _val );
    double GetLayupThickness ( );
    void PutLayupThickness ( double _val );
    _variant_t GetvInPlaneProp ( );
    void PutvInPlaneProp ( const _variant_t & _val );
    _variant_t GetvBendingProp ( );
    void PutvBendingProp ( const _variant_t & _val );
    _variant_t GetvAMatrix ( );
    void PutvAMatrix ( const _variant_t & _val );
    _variant_t GetvBMatrix ( );
    void PutvBMatrix ( const _variant_t & _val );
    _variant_t GetvDMatrix ( );
    void PutvDMatrix ( const _variant_t & _val );
    _variant_t GetvAInvMatrix ( );
    void PutvAInvMatrix ( const _variant_t & _val );
    _variant_t GetvBInvMatrix ( );
    void PutvBInvMatrix ( const _variant_t & _val );
    _variant_t GetvDInvMatrix ( );
    void PutvDInvMatrix ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("edb333c5-3711-47a5-a628-33b4b8768f88"))
Layup;
    // [ default ] dispinterface ILayup

struct __declspec(uuid("0ad6e2e8-ee3e-11d4-944c-001083fff11c"))
IMatl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetbVal,put=PutbVal))
    VARIANT_BOOL bVal[];
    __declspec(property(get=Getmval,put=Putmval))
    double mval[];
    __declspec(property(get=Getival,put=Putival))
    int ival[];
    __declspec(property(get=Getfval,put=Putfval))
    int fval[];
    __declspec(property(get=Gettval,put=Puttval))
    int tval[];
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Gettype,put=Puttype))
    enum zMaterialType type;
    __declspec(property(get=Getsubtype,put=Putsubtype))
    int subtype;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetEx,put=PutEx))
    double Ex;
    __declspec(property(get=GetEy,put=PutEy))
    double Ey;
    __declspec(property(get=GetEz,put=PutEz))
    double Ez;
    __declspec(property(get=GetGx,put=PutGx))
    double Gx;
    __declspec(property(get=GetGy,put=PutGy))
    double Gy;
    __declspec(property(get=GetGz,put=PutGz))
    double Gz;
    __declspec(property(get=GetNuxy,put=PutNuxy))
    double Nuxy;
    __declspec(property(get=GetNuyz,put=PutNuyz))
    double Nuyz;
    __declspec(property(get=GetNuxz,put=PutNuxz))
    double Nuxz;
    __declspec(property(get=GetAlphaxx,put=PutAlphaxx))
    double Alphaxx;
    __declspec(property(get=GetAlphayy,put=PutAlphayy))
    double Alphayy;
    __declspec(property(get=GetAlphazz,put=PutAlphazz))
    double Alphazz;
    __declspec(property(get=GetAlphaxy,put=PutAlphaxy))
    double Alphaxy;
    __declspec(property(get=GetAlphayz,put=PutAlphayz))
    double Alphayz;
    __declspec(property(get=GetAlphazx,put=PutAlphazx))
    double Alphazx;
    __declspec(property(get=GetKxx,put=PutKxx))
    double Kxx;
    __declspec(property(get=GetKyy,put=PutKyy))
    double Kyy;
    __declspec(property(get=GetKzz,put=PutKzz))
    double Kzz;
    __declspec(property(get=GetKxy,put=PutKxy))
    double Kxy;
    __declspec(property(get=GetKyz,put=PutKyz))
    double Kyz;
    __declspec(property(get=GetKzx,put=PutKzx))
    double Kzx;
    __declspec(property(get=GetCp,put=PutCp))
    double Cp;
    __declspec(property(get=GetDensity,put=PutDensity))
    double Density;
    __declspec(property(get=GetDamping,put=PutDamping))
    double Damping;
    __declspec(property(get=GetRefTemp,put=PutRefTemp))
    double RefTemp;
    __declspec(property(get=GetTensionLimit1,put=PutTensionLimit1))
    double TensionLimit1;
    __declspec(property(get=GetTensionLimit2,put=PutTensionLimit2))
    double TensionLimit2;
    __declspec(property(get=GetCompressionLimit1,put=PutCompressionLimit1))
    double CompressionLimit1;
    __declspec(property(get=GetCompressionLimit2,put=PutCompressionLimit2))
    double CompressionLimit2;
    __declspec(property(get=GetShearLimit,put=PutShearLimit))
    double ShearLimit;
    __declspec(property(get=GetTsaiWu,put=PutTsaiWu))
    double TsaiWu;
    __declspec(property(get=Getmmat,put=Putmmat))
    _variant_t mmat;
    __declspec(property(get=Getimat,put=Putimat))
    _variant_t imat;
    __declspec(property(get=Getfmat,put=Putfmat))
    _variant_t fmat;
    __declspec(property(get=Gettmat,put=Puttmat))
    _variant_t tmat;
    __declspec(property(get=Getvbval,put=Putvbval))
    _variant_t vbval;
    __declspec(property(get=Getvmval,put=Putvmval))
    _variant_t vmval;
    __declspec(property(get=Getvival,put=Putvival))
    _variant_t vival;
    __declspec(property(get=Getvfval,put=Putvfval))
    _variant_t vfval;
    __declspec(property(get=Getvtval,put=Putvtval))
    _variant_t vtval;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetbVal (
        int nVectorIndex );
    void PutbVal (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double Getmval (
        int nVectorIndex );
    void Putmval (
        int nVectorIndex,
        double _arg2 );
    int Getival (
        int nVectorIndex );
    void Putival (
        int nVectorIndex,
        int _arg2 );
    int Getfval (
        int nVectorIndex );
    void Putfval (
        int nVectorIndex,
        int _arg2 );
    int Gettval (
        int nVectorIndex );
    void Puttval (
        int nVectorIndex,
        int _arg2 );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode AutoComplete ( );
    enum zReturnCode AreDuplicate (
        int nMatl1,
        int nMatl2,
        VARIANT_BOOL ignoretitle );
    enum zReturnCode GetValueArray (
        int numValue,
        const _variant_t & nMatlID,
        const _variant_t & nMatlIndex,
        VARIANT * dValue );
    enum zReturnCode PutValueArray (
        int numValue,
        const _variant_t & nMatlID,
        const _variant_t & nMatlIndex,
        const _variant_t & dValue );
    enum zReturnCode PutValue (
        int nMatlSetID,
        int nMatlIndex,
        double dValue );
    enum zReturnCode CopyArray (
        VARIANT_BOOL bUpdateReferences,
        VARIANT_BOOL bCopyToStartID,
        int nCopyToStartID,
        int numID,
        const _variant_t & nOrigID,
        VARIANT * pnNewID );
    enum zReturnCode GetLibraryOfType (
        int libINDEX,
        enum zMaterialType libTYPE );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    enum zMaterialType Gettype ( );
    void Puttype ( enum zMaterialType _val );
    int Getsubtype ( );
    void Putsubtype ( int _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    double GetEx ( );
    void PutEx ( double _val );
    double GetEy ( );
    void PutEy ( double _val );
    double GetEz ( );
    void PutEz ( double _val );
    double GetGx ( );
    void PutGx ( double _val );
    double GetGy ( );
    void PutGy ( double _val );
    double GetGz ( );
    void PutGz ( double _val );
    double GetNuxy ( );
    void PutNuxy ( double _val );
    double GetNuyz ( );
    void PutNuyz ( double _val );
    double GetNuxz ( );
    void PutNuxz ( double _val );
    double GetAlphaxx ( );
    void PutAlphaxx ( double _val );
    double GetAlphayy ( );
    void PutAlphayy ( double _val );
    double GetAlphazz ( );
    void PutAlphazz ( double _val );
    double GetAlphaxy ( );
    void PutAlphaxy ( double _val );
    double GetAlphayz ( );
    void PutAlphayz ( double _val );
    double GetAlphazx ( );
    void PutAlphazx ( double _val );
    double GetKxx ( );
    void PutKxx ( double _val );
    double GetKyy ( );
    void PutKyy ( double _val );
    double GetKzz ( );
    void PutKzz ( double _val );
    double GetKxy ( );
    void PutKxy ( double _val );
    double GetKyz ( );
    void PutKyz ( double _val );
    double GetKzx ( );
    void PutKzx ( double _val );
    double GetCp ( );
    void PutCp ( double _val );
    double GetDensity ( );
    void PutDensity ( double _val );
    double GetDamping ( );
    void PutDamping ( double _val );
    double GetRefTemp ( );
    void PutRefTemp ( double _val );
    double GetTensionLimit1 ( );
    void PutTensionLimit1 ( double _val );
    double GetTensionLimit2 ( );
    void PutTensionLimit2 ( double _val );
    double GetCompressionLimit1 ( );
    void PutCompressionLimit1 ( double _val );
    double GetCompressionLimit2 ( );
    void PutCompressionLimit2 ( double _val );
    double GetShearLimit ( );
    void PutShearLimit ( double _val );
    double GetTsaiWu ( );
    void PutTsaiWu ( double _val );
    _variant_t Getmmat ( );
    void Putmmat ( const _variant_t & _val );
    _variant_t Getimat ( );
    void Putimat ( const _variant_t & _val );
    _variant_t Getfmat ( );
    void Putfmat ( const _variant_t & _val );
    _variant_t Gettmat ( );
    void Puttmat ( const _variant_t & _val );
    _variant_t Getvbval ( );
    void Putvbval ( const _variant_t & _val );
    _variant_t Getvmval ( );
    void Putvmval ( const _variant_t & _val );
    _variant_t Getvival ( );
    void Putvival ( const _variant_t & _val );
    _variant_t Getvfval ( );
    void Putvfval ( const _variant_t & _val );
    _variant_t Getvtval ( );
    void Putvtval ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zMaterialType
{
    FMT_ISOTROPIC = 0,
    FMT_ORTHOTROPIC_2D = 1,
    FMT_ORTHOTROPIC_3D = 2,
    FMT_ANISOTROPIC_2D = 3,
    FMT_ANISOTROPIC_3D = 4,
    FMT_HYPERELASTIC = 5,
    FMT_GENERAL = 6,
    FMT_FLUID = 7
};

struct __declspec(uuid("0ad6e2ea-ee3e-11d4-944c-001083fff11c"))
Matl;
    // [ default ] dispinterface IMatl

struct __declspec(uuid("7110873a-f096-11d4-944f-001083fff11c"))
IProp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getflag,put=Putflag))
    VARIANT_BOOL flag[];
    __declspec(property(get=GetflagI,put=PutflagI))
    int flagI[];
    __declspec(property(get=Getpval,put=Putpval))
    double pval[];
    __declspec(property(get=GetExtraMatlID,put=PutExtraMatlID))
    int ExtraMatlID[];
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=GetmatlID,put=PutmatlID))
    int matlID;
    __declspec(property(get=Gettype,put=Puttype))
    enum zElementType type;
    __declspec(property(get=GetrefCS,put=PutrefCS))
    int refCS;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getextramat,put=Putextramat))
    _variant_t extramat;
    __declspec(property(get=Getpmat,put=Putpmat))
    _variant_t pmat;
    __declspec(property(get=Getoutline,put=Putoutline))
    _variant_t outline;
    __declspec(property(get=GetnumOutline,put=PutnumOutline))
    int numOutline;
    __declspec(property(get=Getvflag,put=Putvflag))
    _variant_t vflag;
    __declspec(property(get=GetvflagI,put=PutvflagI))
    _variant_t vflagI;
    __declspec(property(get=Getvpval,put=Putvpval))
    _variant_t vpval;
    __declspec(property(get=GetvExtraMatlID,put=PutvExtraMatlID))
    _variant_t vExtraMatlID;
    __declspec(property(get=GetlayupID,put=PutlayupID))
    int layupID;
    __declspec(property(get=Getcbush,put=Putcbush))
    int cbush;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Getflag (
        int nVectorIndex );
    void Putflag (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    int GetflagI (
        int nVectorIndex );
    void PutflagI (
        int nVectorIndex,
        int _arg2 );
    double Getpval (
        int nVectorIndex );
    void Putpval (
        int nVectorIndex,
        double _arg2 );
    int GetExtraMatlID (
        int nVectorIndex );
    void PutExtraMatlID (
        int nVectorIndex,
        int _arg2 );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode ComputeShape (
        VARIANT_BOOL shear_center_offset,
        VARIANT_BOOL Warping,
        VARIANT_BOOL stress_recovery );
    IMatlPtr Matl ( );
    ILayupPtr Layup ( );
    enum zReturnCode thickness (
        double * dAvgOrAtC1,
        double * dAtC2,
        double * dAtC3,
        double * dAtC4 );
    enum zReturnCode Area (
        double * dAreaA,
        double * dAreaB );
    enum zReturnCode Inertia (
        double * dI1A,
        double * dI2A,
        double * dI12A,
        double * dJA,
        double * dI1B,
        double * dI2B,
        double * dI12B,
        double * dJB );
    enum zReturnCode ComputeStdShape (
        enum zShapeStandard shapeID,
        const _variant_t & dimensions,
        enum zShapeOrient sOrient,
        enum zShapeEvaluator EvalMethod,
        VARIANT_BOOL shear_center_offset,
        VARIANT_BOOL Warping,
        VARIANT_BOOL stress_recovery );
    enum zReturnCode ComputeGeneralShape (
        int surfaceID,
        const _variant_t & vecDIR,
        enum zShapeOrient sOrient,
        enum zShapeEvaluator EvalMethod,
        VARIANT_BOOL shear_center_offset,
        VARIANT_BOOL Warping,
        VARIANT_BOOL stress_recovery );
    enum zReturnCode AreDuplicate (
        int nProp1,
        int nProp2,
        VARIANT_BOOL ignoretitle );
    enum zReturnCode GetValueArray (
        int numValue,
        const _variant_t & nPropID,
        const _variant_t & nPropIndex,
        VARIANT * dValue );
    enum zReturnCode PutValueArray (
        int numValue,
        const _variant_t & nPropID,
        const _variant_t & nPropIndex,
        const _variant_t & dValue );
    enum zReturnCode PutValue (
        int nPropSetID,
        int nPropIndex,
        double dValue );
    enum zReturnCode CopyArray (
        VARIANT_BOOL bUpdateReferences,
        VARIANT_BOOL bCopyToStartID,
        int nCopyToStartID,
        int numID,
        const _variant_t & nOrigID,
        VARIANT * pnNewID );
    enum zReturnCode GetLibraryOfType (
        int libINDEX,
        enum zElementType libTYPE );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    int GetmatlID ( );
    void PutmatlID ( int _val );
    enum zElementType Gettype ( );
    void Puttype ( enum zElementType _val );
    int GetrefCS ( );
    void PutrefCS ( int _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    _variant_t Getextramat ( );
    void Putextramat ( const _variant_t & _val );
    _variant_t Getpmat ( );
    void Putpmat ( const _variant_t & _val );
    _variant_t Getoutline ( );
    void Putoutline ( const _variant_t & _val );
    int GetnumOutline ( );
    void PutnumOutline ( int _val );
    _variant_t Getvflag ( );
    void Putvflag ( const _variant_t & _val );
    _variant_t GetvflagI ( );
    void PutvflagI ( const _variant_t & _val );
    _variant_t Getvpval ( );
    void Putvpval ( const _variant_t & _val );
    _variant_t GetvExtraMatlID ( );
    void PutvExtraMatlID ( const _variant_t & _val );
    int GetlayupID ( );
    void PutlayupID ( int _val );
    int Getcbush ( );
    void Putcbush ( int _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zElementType
{
    FET_NONE = 0,
    FET_L_ROD = 1,
    FET_L_BAR = 2,
    FET_L_TUBE = 3,
    FET_L_LINK = 4,
    FET_L_BEAM = 5,
    FET_L_SPRING = 6,
    FET_L_DOF_SPRING = 7,
    FET_L_CURVED_BEAM = 8,
    FET_L_GAP = 9,
    FET_L_PLOT = 10,
    FET_L_SHEAR = 11,
    FET_P_SHEAR = 12,
    FET_L_MEMBRANE = 13,
    FET_P_MEMBRANE = 14,
    FET_L_BENDING = 15,
    FET_P_BENDING = 16,
    FET_L_PLATE = 17,
    FET_P_PLATE = 18,
    FET_L_PLANE_STRAIN = 19,
    FET_P_PLANE_STRAIN = 20,
    FET_L_LAMINATE_PLATE = 21,
    FET_P_LAMINATE_PLATE = 22,
    FET_L_AXISYM = 23,
    FET_P_AXISYM = 24,
    FET_L_SOLID = 25,
    FET_P_SOLID = 26,
    FET_L_MASS = 27,
    FET_L_MASS_MATRIX = 28,
    FET_L_RIGID = 29,
    FET_L_GENERAL_MATRIX = 30,
    FET_L_CURVED_TUBE = 31,
    FET_L_PLOT_PLATE = 32,
    FET_L_SLIDE_LINE = 33,
    FET_L_CONTACT = 34,
    FET_L_AXISYM_SHELL = 35,
    FET_P_AXISYM_SHELL = 36,
    FET_P_BEAM = 37,
    FET_L_WELD = 38,
    FET_L_LAMINATE_SOLID = 39,
    FET_P_LAMINATE_SOLID = 40,
    FET_L_SPRING_TO_GROUND = 41,
    FET_L_DOF_SPRING_TO_GROUND = 42
};

enum zShapeStandard
{
    FSHP_RECT_BAR = 1,
    FSHP_RECT_TUBE = 2,
    FSHP_TRAP_BAR = 3,
    FSHP_TRAP_TUBE = 4,
    FSHP_CIRC_BAR = 5,
    FSHP_CIRC_TUBE = 6,
    FSHP_HEX_BAR = 7,
    FSHP_HEX_TUBE = 8,
    FSHP_I = 9,
    FSHP_C = 10,
    FSHP_L = 11,
    FSHP_T = 12,
    FSHP_Z = 13,
    FSHP_HAT = 14,
    FSHP_NAS_ROD = 16,
    FSHP_NAS_TUBE = 17,
    FSHP_NAS_L = 18,
    FSHP_NAS_I = 19,
    FSHP_NAS_CHAN = 20,
    FSHP_NAS_T = 21,
    FSHP_NAS_BOX = 22,
    FSHP_NAS_BAR = 23,
    FSHP_NAS_CROSS = 24,
    FSHP_NAS_H = 25,
    FSHP_NAS_T1 = 26,
    FSHP_NAS_I1 = 27,
    FSHP_NAS_CHAN1 = 28,
    FSHP_NAS_Z = 29,
    FSHP_NAS_CHAN2 = 30,
    FSHP_NAS_T2 = 31,
    FSHP_NAS_BOX1 = 32,
    FSHP_NAS_HEXA = 33,
    FSHP_NAS_HAT = 34,
    FSHP_NAS_HAT1 = 35
};

enum zShapeOrient
{
    FSOR_RIGHT = 0,
    FSOR_UP = 1,
    FSOR_LEFT = 2,
    FSOR_DOWN = 3
};

enum zShapeEvaluator
{
    FSEV_AUTO = 0,
    FSEV_ORIG = 1,
    FSEV_ALT = 2,
    FSEV_PBEAML = 3
};

struct __declspec(uuid("7110873c-f096-11d4-944f-001083fff11c"))
Prop;
    // [ default ] dispinterface IProp

struct __declspec(uuid("1e6c26fe-f16a-11d4-9450-001083fff11c"))
IElem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getformulation,put=Putformulation))
    int formulation[];
    __declspec(property(get=GetContact,put=PutContact))
    int Contact[];
    __declspec(property(get=GetNode,put=PutNode))
    int Node[];
    __declspec(property(get=Getorient,put=Putorient))
    double orient[];
    __declspec(property(get=Getoffset,put=Putoffset))
    double offset[][];
    __declspec(property(get=Getrelease,put=Putrelease))
    VARIANT_BOOL release[][];
    __declspec(property(get=GetconnectTYPE,put=PutconnectTYPE))
    int connectTYPE[];
    __declspec(property(get=GetconnectSEG,put=PutconnectSEG))
    int connectSEG[];
    __declspec(property(get=GetWarping,put=PutWarping))
    int Warping[];
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=GetpropID,put=PutpropID))
    int propID;
    __declspec(property(get=Gettype,put=Puttype))
    enum zElementType type;
    __declspec(property(get=Gettopology,put=Puttopology))
    enum zTopologyType topology;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=GetorientID,put=PutorientID))
    int orientID;
    __declspec(property(get=GetMaterialAngleFlag,put=PutMaterialAngleFlag))
    VARIANT_BOOL MaterialAngleFlag;
    __declspec(property(get=GetgeomID,put=PutgeomID))
    int geomID;
    __declspec(property(get=GetRigidInterpolate,put=PutRigidInterpolate))
    VARIANT_BOOL RigidInterpolate;
    __declspec(property(get=GetPlateOffset,put=PutPlateOffset))
    double PlateOffset;
    __declspec(property(get=GetMaterialAngle,put=PutMaterialAngle))
    double MaterialAngle;
    __declspec(property(get=GetNodes,put=PutNodes))
    _variant_t Nodes;
    __declspec(property(get=Getvformulation,put=Putvformulation))
    _variant_t vformulation;
    __declspec(property(get=Getvcontact,put=Putvcontact))
    _variant_t vcontact;
    __declspec(property(get=Getvnode,put=Putvnode))
    _variant_t vnode;
    __declspec(property(get=Getvorient,put=Putvorient))
    _variant_t vorient;
    __declspec(property(get=Getvoffset,put=Putvoffset))
    _variant_t voffset;
    __declspec(property(get=Getvrelease,put=Putvrelease))
    _variant_t vrelease;
    __declspec(property(get=GetvconnectTYPE,put=PutvconnectTYPE))
    _variant_t vconnectTYPE;
    __declspec(property(get=GetvconnectSEG,put=PutvconnectSEG))
    _variant_t vconnectSEG;
    __declspec(property(get=GetRigidThermalExpansion,put=PutRigidThermalExpansion))
    double RigidThermalExpansion;
    __declspec(property(get=GetRigidInterpolationFactor,put=PutRigidInterpolationFactor))
    double RigidInterpolationFactor;
    __declspec(property(get=GetMaterialOrientType,put=PutMaterialOrientType))
    int MaterialOrientType;
    __declspec(property(get=GetMaterialCSys,put=PutMaterialCSys))
    int MaterialCSys;
    __declspec(property(get=GetSpringUseLocation,put=PutSpringUseLocation))
    VARIANT_BOOL SpringUseLocation;
    __declspec(property(get=GetSpringLocation,put=PutSpringLocation))
    double SpringLocation;
    __declspec(property(get=GetSpringUsePropLocation,put=PutSpringUsePropLocation))
    VARIANT_BOOL SpringUsePropLocation;
    __declspec(property(get=GetSpringUseCID,put=PutSpringUseCID))
    VARIANT_BOOL SpringUseCID;
    __declspec(property(get=GetSpringNoOrient,put=PutSpringNoOrient))
    VARIANT_BOOL SpringNoOrient;
    __declspec(property(get=GetSpringCID,put=PutSpringCID))
    int SpringCID;
    __declspec(property(get=GetSpringUsePropCID,put=PutSpringUsePropCID))
    VARIANT_BOOL SpringUsePropCID;
    __declspec(property(get=Getvwarping,put=Putvwarping))
    _variant_t vwarping;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int Getformulation (
        int nVectorIndex );
    void Putformulation (
        int nVectorIndex,
        int _arg2 );
    int GetContact (
        int nVectorIndex );
    void PutContact (
        int nVectorIndex,
        int _arg2 );
    int GetNode (
        int nVectorIndex );
    void PutNode (
        int nVectorIndex,
        int _arg2 );
    double Getorient (
        int nVectorIndex );
    void Putorient (
        int nVectorIndex,
        double _arg2 );
    double Getoffset (
        int nRowIndex,
        int nColIndex );
    void Putoffset (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    VARIANT_BOOL Getrelease (
        int nRowIndex,
        int nColIndex );
    void Putrelease (
        int nRowIndex,
        int nColIndex,
        VARIANT_BOOL _arg3 );
    int GetconnectTYPE (
        int nVectorIndex );
    void PutconnectTYPE (
        int nVectorIndex,
        int _arg2 );
    int GetconnectSEG (
        int nVectorIndex );
    void PutconnectSEG (
        int nVectorIndex,
        int _arg2 );
    int GetWarping (
        int nVectorIndex );
    void PutWarping (
        int nVectorIndex,
        int _arg2 );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode GetNodeList (
        int listINDEX,
        int * nodecount,
        VARIANT * Node,
        VARIANT * face,
        VARIANT * weight,
        VARIANT * dof );
    enum zReturnCode PutNodeList (
        int listINDEX,
        int nodecount,
        const _variant_t & Node,
        const _variant_t & face,
        const _variant_t & weight,
        const _variant_t & dof );
    enum zReturnCode GetAllArray (
        int setID,
        int * NumElem,
        VARIANT * entID,
        VARIANT * propID,
        VARIANT * elemTYPE,
        VARIANT * topology,
        VARIANT * layer,
        VARIANT * color,
        VARIANT * formulation,
        VARIANT * orient,
        VARIANT * offset,
        VARIANT * release,
        VARIANT * orientSET,
        VARIANT * orientID,
        VARIANT * Nodes,
        VARIANT * connectTYPE,
        VARIANT * connectSEG );
    enum zReturnCode PutAllArray (
        int NumElem,
        const _variant_t & entID,
        const _variant_t & propID,
        const _variant_t & elemTYPE,
        const _variant_t & topology,
        const _variant_t & layer,
        const _variant_t & color,
        const _variant_t & formulation,
        const _variant_t & orient,
        const _variant_t & offset,
        const _variant_t & release,
        const _variant_t & orientSET,
        const _variant_t & orientID,
        const _variant_t & Nodes,
        const _variant_t & connectTYPE,
        const _variant_t & connectSEG );
    IPropPtr Prop ( );
    IMatlPtr Matl ( );
    enum zReturnCode GetFaceCentroid (
        int nFace,
        VARIANT * cgXYZ );
    enum zReturnCode GetFaceNormal (
        int nFace,
        VARIANT * normalXYZ );
    enum zReturnCode GetFaceArea (
        int nFace,
        double * dArea );
    enum zReturnCode ClearNodeList (
        int listINDEX );
    enum zReturnCode GetCentroid (
        VARIANT * cgXYZ );
    enum zReturnCode GetEdgeNodes (
        int nEdge,
        int * n1,
        int * n2,
        int * nmid );
    enum zReturnCode GetFaceNodes (
        int nFace,
        VARIANT * Nodes );
    enum zReturnCode IsParabolic ( );
    enum zReturnCode thickness (
        double * dAvg,
        double * dAtC1,
        double * dAtC2,
        double * dAtC3,
        double * dAtC4 );
    enum zReturnCode Area (
        double * dAreaA,
        double * dAreaB );
    enum zReturnCode Inertia (
        double * dI1A,
        double * dI2A,
        double * dI12A,
        double * dJA,
        double * dI1B,
        double * dI2B,
        double * dI12B,
        double * dJB );
    enum zReturnCode Length (
        double * dLength );
    enum zReturnCode GetMinMaxEdgeLength (
        double * dMinLen,
        double * dMaxLen );
    enum zReturnCode SetPlateThickness (
        double dAtC1,
        double dAtC2,
        double dAtC3,
        double dAtC4 );
    enum zReturnCode GetAllArray2 (
        int setID,
        int * NumElem,
        VARIANT * entID,
        VARIANT * Exist,
        VARIANT * propID,
        VARIANT * elemTYPE,
        VARIANT * topology,
        VARIANT * layer,
        VARIANT * color,
        VARIANT * formulation,
        VARIANT * orient,
        VARIANT * offset,
        VARIANT * release,
        VARIANT * orientSET,
        VARIANT * orientID,
        VARIANT * Nodes,
        VARIANT * connectTYPE,
        VARIANT * connectSEG );
    enum zReturnCode GetSpringOrient (
        enum zSpringOrient * enOrient,
        int * nOrient,
        double * dVec1,
        double * dVec2,
        double * dVec3 );
    enum zReturnCode SetSpringOrient (
        enum zSpringOrient enOrient,
        int nOrient,
        double dVec1,
        double dVec2,
        double dVec3 );
    enum zReturnCode GetSpringOffset (
        enum zSpringOffset * enOffset,
        double * dVec1,
        double * dVec2,
        double * dVec3 );
    enum zReturnCode SetSpringOffset (
        enum zSpringOffset enOffset,
        double dVec1,
        double dVec2,
        double dVec3 );
    enum zReturnCode GetAllArray3 (
        int setID,
        int * NumElem,
        VARIANT * entID,
        VARIANT * Exist,
        VARIANT * propID,
        VARIANT * elemTYPE,
        VARIANT * topology,
        VARIANT * layer,
        VARIANT * color,
        VARIANT * formulation,
        VARIANT * orient,
        VARIANT * offset,
        VARIANT * release,
        VARIANT * orientSET,
        VARIANT * orientID,
        VARIANT * Nodes,
        VARIANT * connectTYPE,
        VARIANT * connectSEG,
        VARIANT * MaterialOrientType,
        VARIANT * MaterialCSys,
        VARIANT * warpingID,
        VARIANT * SpringLocation );
    enum zReturnCode GetFaceNodes2 (
        VARIANT_BOOL bCornerPressureOrder,
        int nFace,
        VARIANT * Nodes );
    enum zReturnCode GetGeomPropArray (
        int setID,
        int * NumElem,
        VARIANT * entID,
        VARIANT * propID,
        VARIANT * matlID,
        VARIANT * elemTYPE,
        VARIANT * topology,
        VARIANT * vCG,
        VARIANT * Length,
        VARIANT * Area,
        VARIANT * volume );
    enum zReturnCode ElementHasThickness ( );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    int GetpropID ( );
    void PutpropID ( int _val );
    enum zElementType Gettype ( );
    void Puttype ( enum zElementType _val );
    enum zTopologyType Gettopology ( );
    void Puttopology ( enum zTopologyType _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    int GetorientID ( );
    void PutorientID ( int _val );
    VARIANT_BOOL GetMaterialAngleFlag ( );
    void PutMaterialAngleFlag ( VARIANT_BOOL _val );
    int GetgeomID ( );
    void PutgeomID ( int _val );
    VARIANT_BOOL GetRigidInterpolate ( );
    void PutRigidInterpolate ( VARIANT_BOOL _val );
    double GetPlateOffset ( );
    void PutPlateOffset ( double _val );
    double GetMaterialAngle ( );
    void PutMaterialAngle ( double _val );
    _variant_t GetNodes ( );
    void PutNodes ( const _variant_t & _val );
    _variant_t Getvformulation ( );
    void Putvformulation ( const _variant_t & _val );
    _variant_t Getvcontact ( );
    void Putvcontact ( const _variant_t & _val );
    _variant_t Getvnode ( );
    void Putvnode ( const _variant_t & _val );
    _variant_t Getvorient ( );
    void Putvorient ( const _variant_t & _val );
    _variant_t Getvoffset ( );
    void Putvoffset ( const _variant_t & _val );
    _variant_t Getvrelease ( );
    void Putvrelease ( const _variant_t & _val );
    _variant_t GetvconnectTYPE ( );
    void PutvconnectTYPE ( const _variant_t & _val );
    _variant_t GetvconnectSEG ( );
    void PutvconnectSEG ( const _variant_t & _val );
    double GetRigidThermalExpansion ( );
    void PutRigidThermalExpansion ( double _val );
    double GetRigidInterpolationFactor ( );
    void PutRigidInterpolationFactor ( double _val );
    int GetMaterialOrientType ( );
    void PutMaterialOrientType ( int _val );
    int GetMaterialCSys ( );
    void PutMaterialCSys ( int _val );
    VARIANT_BOOL GetSpringUseLocation ( );
    void PutSpringUseLocation ( VARIANT_BOOL _val );
    double GetSpringLocation ( );
    void PutSpringLocation ( double _val );
    VARIANT_BOOL GetSpringUsePropLocation ( );
    void PutSpringUsePropLocation ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSpringUseCID ( );
    void PutSpringUseCID ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSpringNoOrient ( );
    void PutSpringNoOrient ( VARIANT_BOOL _val );
    int GetSpringCID ( );
    void PutSpringCID ( int _val );
    VARIANT_BOOL GetSpringUsePropCID ( );
    void PutSpringUsePropCID ( VARIANT_BOOL _val );
    _variant_t Getvwarping ( );
    void Putvwarping ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zTopologyType
{
    FTO_LINE2 = 0,
    FTO_LINE3 = 1,
    FTO_TRIA3 = 2,
    FTO_TRIA6 = 3,
    FTO_QUAD4 = 4,
    FTO_QUAD8 = 5,
    FTO_TETRA4 = 6,
    FTO_WEDGE6 = 7,
    FTO_BRICK8 = 8,
    FTO_POINT1 = 9,
    FTO_TETRA10 = 10,
    FTO_WEDGE15 = 11,
    FTO_BRICK20 = 12,
    FTO_RIGIDLIST = 13,
    FTO_PYRAMID5 = 14,
    FTO_MULTILIST2 = 15,
    FTO_CONTACT2 = 16,
    FTO_WELD2 = 17,
    FTO_RIGIDLIST2 = 18,
    FTO_PYRAMID13 = 19
};

enum zSpringOrient
{
    FESO_NONE = 0,
    FESO_NODE = 1,
    FESO_VECTOR = 2,
    FESO_ELCID = 3,
    FESO_PRCID = 4
};

enum zSpringOffset
{
    FESL_DEFAULT = 0,
    FESL_ELLOC = 1,
    FESL_PRLOC = 2,
    FESL_OFFSET = 3
};

struct __declspec(uuid("1e6c2700-f16a-11d4-9450-001083fff11c"))
Elem;
    // [ default ] dispinterface IElem

struct __declspec(uuid("14481c56-0767-11d5-9467-001083fff11c"))
IFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Gettype,put=Puttype))
    enum zFunctionType type;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode GetFunctionList (
        int * listcount,
        VARIANT * x,
        VARIANT * y );
    enum zReturnCode PutFunctionList (
        int listcount,
        const _variant_t & x,
        const _variant_t & y );
    enum zReturnCode GetValue (
        int nMethod,
        double x,
        double * y );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    enum zFunctionType Gettype ( );
    void Puttype ( enum zFunctionType _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zFunctionType
{
    FTB_NONE = 0,
    FTB_TIME = 1,
    FTB_TEMP = 2,
    FTB_FREQ = 3,
    FTB_STRESSSTRAIN = 4,
    FTB_FUNCTEMP = 5,
    FTB_GDAMP = 6,
    FTB_CRITDAMP = 7,
    FTB_QDAMP = 8,
    FTB_STRAINRATE = 9,
    FTB_FUNCSTRAINRATE = 10,
    FTB_CURVELENGTH = 11,
    FTB_CURVEPARAM = 12,
    FTB_STRAINSTRESS = 13,
    FTB_PLASTICSTRAIN = 14,
    FTB_FUNCVAL = 15,
    FTB_DAMPFUNC = 16,
    FTB_ANGLEINCIDENCE = 17,
    FTB_DIRECTIONINCIDENCE = 18,
    FTB_TBLM1LINLIN = 19,
    FTB_TBLM1LOGLIN = 20,
    FTB_TBLM1LINLOG = 21,
    FTB_TBLM1LOGLOG = 22,
    FTB_MODE = 23,
    FTB_DISPFREQ = 24,
    FTB_ROTFREQ = 25,
    FTB_VELFREQ = 26,
    FTB_ANGVELFREQ = 27,
    FTB_ACCFREQ = 28,
    FTB_ANGACCFREQ = 29,
    FTB_FORCEFREQ = 30,
    FTB_MOMENTFREQ = 31,
    FTB_STRESSFREQ = 32,
    FTB_STRAINFREQ = 33,
    FTB_MACHFREQ = 34,
    FTB_AEROFACTOR = 35,
    FTB_ACCELLOC = 36,
    FTB_VELOCITY = 37,
    FTB_PRESSURE = 38,
    FTB_WAVELENGTH = 39,
    FTB_TEMPDIFF = 40,
    FTB_HEATFLOWRATE = 41,
    FTB_MASSFLOWRATE = 42,
    FTB_VOLUMEFLOWRATE = 43,
    FTB_THERMALCAPACITANCE = 44,
    FTB_LATITUDE = 45
};

struct __declspec(uuid("14481c58-0767-11d5-9467-001083fff11c"))
Function;
    // [ default ] dispinterface IFunction

struct __declspec(uuid("fa671d08-f7a8-11d4-9457-001083fff11c"))
IGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlaneClipNeg,put=PutPlaneClipNeg))
    VARIANT_BOOL PlaneClipNeg[];
    __declspec(property(get=GetPlaneClipOn,put=PutPlaneClipOn))
    VARIANT_BOOL PlaneClipOn[];
    __declspec(property(get=GetPlaneClipBase,put=PutPlaneClipBase))
    double PlaneClipBase[][];
    __declspec(property(get=GetPlaneClipDir,put=PutPlaneClipDir))
    double PlaneClipDir[][];
    __declspec(property(get=GetLayerMode,put=PutLayerMode))
    int LayerMode;
    __declspec(property(get=GetLayerMin,put=PutLayerMin))
    int LayerMin;
    __declspec(property(get=GetLayerMax,put=PutLayerMax))
    int LayerMax;
    __declspec(property(get=GetCoordClipOn,put=PutCoordClipOn))
    int CoordClipOn;
    __declspec(property(get=GetCoordClipMode,put=PutCoordClipMode))
    int CoordClipMode;
    __declspec(property(get=GetCoordClipMin,put=PutCoordClipMin))
    double CoordClipMin;
    __declspec(property(get=GetCoordClipMax,put=PutCoordClipMax))
    double CoordClipMax;
    __declspec(property(get=GetCoordClipCSys,put=PutCoordClipCSys))
    int CoordClipCSys;
    __declspec(property(get=GetCoordClipDir,put=PutCoordClipDir))
    int CoordClipDir;
    __declspec(property(get=GetPlaneClipMode,put=PutPlaneClipMode))
    int PlaneClipMode;
    __declspec(property(get=GetPlaneClipInside,put=PutPlaneClipInside))
    VARIANT_BOOL PlaneClipInside;
    __declspec(property(get=GetNeedEval,put=PutNeedEval))
    VARIANT_BOOL NeedEval;
    __declspec(property(get=GetCondense,put=PutCondense))
    VARIANT_BOOL Condense;
    __declspec(property(get=GetEvalAlways,put=PutEvalAlways))
    VARIANT_BOOL EvalAlways;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getrenumber,put=Putrenumber))
    VARIANT_BOOL renumber;
    __declspec(property(get=GetvPlaneClipNeg,put=PutvPlaneClipNeg))
    _variant_t vPlaneClipNeg;
    __declspec(property(get=GetvPlaneClipOn,put=PutvPlaneClipOn))
    _variant_t vPlaneClipOn;
    __declspec(property(get=GetvPlaneClipBase,put=PutvPlaneClipBase))
    _variant_t vPlaneClipBase;
    __declspec(property(get=GetvPlaneClipDir,put=PutvPlaneClipDir))
    _variant_t vPlaneClipDir;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetPlaneClipNeg (
        int nVectorIndex );
    void PutPlaneClipNeg (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetPlaneClipOn (
        int nVectorIndex );
    void PutPlaneClipOn (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double GetPlaneClipBase (
        int nRowIndex,
        int nColIndex );
    void PutPlaneClipBase (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    double GetPlaneClipDir (
        int nRowIndex,
        int nColIndex );
    void PutPlaneClipDir (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    enum zReturnCode RangeReset ( );
    enum zReturnCode RangeGetAll (
        enum zGroupDefinitionType rangeType,
        int * rangeCount,
        VARIANT * startID,
        VARIANT * stopID,
        VARIANT * increment,
        VARIANT * inClude );
    enum zReturnCode RangeNext (
        enum zGroupDefinitionType rangeType,
        int * startID,
        int * stopID,
        int * increment,
        int * inClude );
    enum zReturnCode RangeAdd (
        enum zGroupDefinitionType rangeType,
        int startID,
        int stopID,
        int increment,
        int inClude );
    enum zReturnCode RangeDelete (
        enum zGroupDefinitionType rangeType );
    enum zReturnCode RangeDeleteAll (
        enum zGroupDefinitionType rangeType );
    enum zReturnCode SetAdd (
        enum zDataType entityTYPE,
        int setID );
    ISetPtr List (
        enum zGroupDataType listTYPE );
    enum zReturnCode SelectModel ( );
    enum zReturnCode SelectMesh (
        int elemSET );
    enum zReturnCode SelectContact (
        int contactSET );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode SetAddOpt (
        enum zDataType entityTYPE,
        int setID,
        int addOpt );
    ISetPtr Range (
        enum zGroupDefinitionType rangeType );
    enum zReturnCode SelectAllOnLayer (
        int startLayer,
        int endLayer );
    enum zReturnCode Add (
        enum zDataType entityTYPE,
        int nEntityID );
    ISetPtr ReferencedGroups ( );
    enum zReturnCode GetList (
        enum zGroupDataType listTYPE,
        int setID );
    enum zReturnCode HasList (
        enum zGroupDataType listTYPE );
    int CountList (
        enum zGroupDataType listTYPE );
    enum zReturnCode Add2 (
        enum zGroupDataType entityTYPE,
        int nEntityID );
    enum zReturnCode SetAdd2 (
        enum zGroupDataType entityTYPE,
        int setID );
    enum zReturnCode SetAddOpt2 (
        enum zGroupDataType entityTYPE,
        int setID,
        int addOpt );
    enum zReturnCode AddRelated ( );
    enum zReturnCode addOpt (
        enum zDataType entityTYPE,
        int nEntityID,
        int addOpt );
    enum zReturnCode AddOpt2 (
        enum zGroupDataType entityTYPE,
        int nEntityID,
        int addOpt );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    int GetLayerMode ( );
    void PutLayerMode ( int _val );
    int GetLayerMin ( );
    void PutLayerMin ( int _val );
    int GetLayerMax ( );
    void PutLayerMax ( int _val );
    int GetCoordClipOn ( );
    void PutCoordClipOn ( int _val );
    int GetCoordClipMode ( );
    void PutCoordClipMode ( int _val );
    double GetCoordClipMin ( );
    void PutCoordClipMin ( double _val );
    double GetCoordClipMax ( );
    void PutCoordClipMax ( double _val );
    int GetCoordClipCSys ( );
    void PutCoordClipCSys ( int _val );
    int GetCoordClipDir ( );
    void PutCoordClipDir ( int _val );
    int GetPlaneClipMode ( );
    void PutPlaneClipMode ( int _val );
    VARIANT_BOOL GetPlaneClipInside ( );
    void PutPlaneClipInside ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNeedEval ( );
    void PutNeedEval ( VARIANT_BOOL _val );
    VARIANT_BOOL GetCondense ( );
    void PutCondense ( VARIANT_BOOL _val );
    VARIANT_BOOL GetEvalAlways ( );
    void PutEvalAlways ( VARIANT_BOOL _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    VARIANT_BOOL Getrenumber ( );
    void Putrenumber ( VARIANT_BOOL _val );
    _variant_t GetvPlaneClipNeg ( );
    void PutvPlaneClipNeg ( const _variant_t & _val );
    _variant_t GetvPlaneClipOn ( );
    void PutvPlaneClipOn ( const _variant_t & _val );
    _variant_t GetvPlaneClipBase ( );
    void PutvPlaneClipBase ( const _variant_t & _val );
    _variant_t GetvPlaneClipDir ( );
    void PutvPlaneClipDir ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zGroupDataType
{
    FGR_CSYS = 0,
    FGR_POINT = 1,
    FGR_CURVE = 2,
    FGR_SURFACE = 3,
    FGR_VOLUME = 4,
    FGR_TEXT = 5,
    FGR_NODE = 7,
    FGR_ELEM = 8,
    FGR_MATL = 9,
    FGR_PROP = 10,
    FGR_NLOAD = 11,
    FGR_ELOAD = 12,
    FGR_BCO = 13,
    FGR_BEQ = 14,
    FGR_PLOAD = 15,
    FGR_CLOAD = 16,
    FGR_SLOAD = 17,
    FGR_PBCO = 18,
    FGR_CBCO = 19,
    FGR_SBCO = 20,
    FGR_SOLID = 21,
    FGR_CONTACT = 22,
    FGR_CONNECTIONPROP = 24,
    FGR_CONNECTION = 23,
    FGR_LAYUP = 25,
    FGR_REGLOAD = 26
};

struct __declspec(uuid("fa671d0a-f7a8-11d4-9457-001083fff11c"))
Group;
    // [ default ] dispinterface IGroup

struct __declspec(uuid("e0974272-0376-11d5-9465-001083fff11c"))
ILayer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("e0974274-0376-11d5-9465-001083fff11c"))
layer;
    // [ default ] dispinterface ILayer

struct __declspec(uuid("1faf0e14-f6c9-11d4-9456-001083fff11c"))
ILoadETemp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettemp,put=Puttemp))
    double temp;
    __declspec(property(get=Getphase,put=Putphase))
    double phase;
    __declspec(property(get=GetFunction,put=PutFunction))
    int Function;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getexpanded,put=Putexpanded))
    VARIANT_BOOL expanded;
    __declspec(property(get=GetLoadDefinitionID,put=PutLoadDefinitionID))
    int LoadDefinitionID;
    __declspec(property(get=Getgradient,put=Putgradient))
    double gradient;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode Put (
        int entID );
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode AddArray (
        int Count,
        VARIANT_BOOL doValues,
        VARIANT_BOOL doFunctions,
        const _variant_t & elemID,
        const _variant_t & values,
        const _variant_t & FunctionID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    double Gettemp ( );
    void Puttemp ( double _val );
    double Getphase ( );
    void Putphase ( double _val );
    int GetFunction ( );
    void PutFunction ( int _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    VARIANT_BOOL Getexpanded ( );
    void Putexpanded ( VARIANT_BOOL _val );
    int GetLoadDefinitionID ( );
    void PutLoadDefinitionID ( int _val );
    double Getgradient ( );
    void Putgradient ( double _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("1faf0e16-f6c9-11d4-9456-001083fff11c"))
LoadETemp;
    // [ default ] dispinterface ILoadETemp

struct __declspec(uuid("78456266-f7a9-11d4-9457-001083fff11c"))
ILoadGeom : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getdirbase,put=Putdirbase))
    double dirbase[];
    __declspec(property(get=Getdirection,put=Putdirection))
    double direction[];
    __declspec(property(get=Getvarvalue,put=Putvarvalue))
    double varvalue[];
    __declspec(property(get=GetaddlID,put=PutaddlID))
    int addlID[];
    __declspec(property(get=Getdof,put=Putdof))
    int dof[];
    __declspec(property(get=Getflag,put=Putflag))
    VARIANT_BOOL flag[];
    __declspec(property(get=Getload,put=Putload))
    double load[];
    __declspec(property(get=Getfluxdir,put=Putfluxdir))
    double fluxdir[];
    __declspec(property(get=GetFunction,put=PutFunction))
    int Function[];
    __declspec(property(get=Getvarlocate,put=Putvarlocate))
    double varlocate[][];
    __declspec(property(get=GetDataSurface,put=PutDataSurface))
    int DataSurface[];
    __declspec(property(get=Getdirmode,put=Putdirmode))
    enum zLoadDirection dirmode;
    __declspec(property(get=GetdirID,put=PutdirID))
    int dirID;
    __declspec(property(get=Getvariation,put=Putvariation))
    enum zLoadVariation variation;
    __declspec(property(get=Getvarname,put=Putvarname))
    _bstr_t varname;
    __declspec(property(get=Getvareqn,put=Putvareqn))
    _bstr_t vareqn;
    __declspec(property(get=Getvarfunction,put=Putvarfunction))
    int varfunction;
    __declspec(property(get=Getmidside,put=Putmidside))
    VARIANT_BOOL midside;
    __declspec(property(get=GetgeomID,put=PutgeomID))
    int geomID;
    __declspec(property(get=GetCSys,put=PutCSys))
    int CSys;
    __declspec(property(get=Gettype,put=Puttype))
    enum zLoadType type;
    __declspec(property(get=Getsubtype,put=Putsubtype))
    int subtype;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=GetLoadDefinitionID,put=PutLoadDefinitionID))
    int LoadDefinitionID;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getexpanded,put=Putexpanded))
    VARIANT_BOOL expanded;
    __declspec(property(get=GetFaceNumber,put=PutFaceNumber))
    int FaceNumber;
    __declspec(property(get=GetXOn,put=PutXOn))
    VARIANT_BOOL XOn;
    __declspec(property(get=GetYOn,put=PutYOn))
    VARIANT_BOOL YOn;
    __declspec(property(get=GetZOn,put=PutZOn))
    VARIANT_BOOL ZOn;
    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getz,put=Putz))
    double z;
    __declspec(property(get=Gettemp,put=Puttemp))
    double temp;
    __declspec(property(get=Getphase,put=Putphase))
    double phase;
    __declspec(property(get=GetLoadFunction,put=PutLoadFunction))
    int LoadFunction;
    __declspec(property(get=GetTempVsTime,put=PutTempVsTime))
    int TempVsTime;
    __declspec(property(get=GetPhaseVsFreq,put=PutPhaseVsFreq))
    int PhaseVsFreq;
    __declspec(property(get=GetLoadValue,put=PutLoadValue))
    double LoadValue;
    __declspec(property(get=GetCornerPressure,put=PutCornerPressure))
    VARIANT_BOOL CornerPressure;
    __declspec(property(get=GetPressure,put=PutPressure))
    double Pressure;
    __declspec(property(get=GetHeatGen,put=PutHeatGen))
    double HeatGen;
    __declspec(property(get=GetHeatFlux,put=PutHeatFlux))
    double HeatFlux;
    __declspec(property(get=GetAbsorptivity,put=PutAbsorptivity))
    double Absorptivity;
    __declspec(property(get=GetAbsorptivityVsTemp,put=PutAbsorptivityVsTemp))
    int AbsorptivityVsTemp;
    __declspec(property(get=GetVectorFlux,put=PutVectorFlux))
    VARIANT_BOOL VectorFlux;
    __declspec(property(get=GetFluidValue,put=PutFluidValue))
    double FluidValue;
    __declspec(property(get=GetPeriodicMaster,put=PutPeriodicMaster))
    VARIANT_BOOL PeriodicMaster;
    __declspec(property(get=GetPeriodicDirection,put=PutPeriodicDirection))
    VARIANT_BOOL PeriodicDirection;
    __declspec(property(get=GetConvectionCoeff,put=PutConvectionCoeff))
    double ConvectionCoeff;
    __declspec(property(get=GetForcedConvection,put=PutForcedConvection))
    VARIANT_BOOL ForcedConvection;
    __declspec(property(get=GetFCDisableAdvection,put=PutFCDisableAdvection))
    VARIANT_BOOL FCDisableAdvection;
    __declspec(property(get=GetFCDisableConvection,put=PutFCDisableConvection))
    VARIANT_BOOL FCDisableConvection;
    __declspec(property(get=GetFlowRate,put=PutFlowRate))
    double FlowRate;
    __declspec(property(get=GetFlowDiameter,put=PutFlowDiameter))
    double FlowDiameter;
    __declspec(property(get=GetFlowAreaFactor,put=PutFlowAreaFactor))
    double FlowAreaFactor;
    __declspec(property(get=GetEmissivity,put=PutEmissivity))
    double Emissivity;
    __declspec(property(get=GetEmissivityFunc,put=PutEmissivityFunc))
    int EmissivityFunc;
    __declspec(property(get=GetViewFactor,put=PutViewFactor))
    double ViewFactor;
    __declspec(property(get=GetViewFactorVsTime,put=PutViewFactorVsTime))
    int ViewFactorVsTime;
    __declspec(property(get=GetEnclosureRadiation,put=PutEnclosureRadiation))
    VARIANT_BOOL EnclosureRadiation;
    __declspec(property(get=GetCanShade,put=PutCanShade))
    VARIANT_BOOL CanShade;
    __declspec(property(get=GetCanBeShaded,put=PutCanBeShaded))
    VARIANT_BOOL CanBeShaded;
    __declspec(property(get=GetCavityNumber,put=PutCavityNumber))
    int CavityNumber;
    __declspec(property(get=Getvdirbase,put=Putvdirbase))
    _variant_t vdirbase;
    __declspec(property(get=Getvdirection,put=Putvdirection))
    _variant_t vdirection;
    __declspec(property(get=Getvvarvalue,put=Putvvarvalue))
    _variant_t vvarvalue;
    __declspec(property(get=GetvaddlID,put=PutvaddlID))
    _variant_t vaddlID;
    __declspec(property(get=Getvdof,put=Putvdof))
    _variant_t vdof;
    __declspec(property(get=Getvflag,put=Putvflag))
    _variant_t vflag;
    __declspec(property(get=Getvload,put=Putvload))
    _variant_t vload;
    __declspec(property(get=Getvfluxdir,put=Putvfluxdir))
    _variant_t vfluxdir;
    __declspec(property(get=Getvfunction,put=Putvfunction))
    _variant_t vfunction;
    __declspec(property(get=Getvvarlocate,put=Putvvarlocate))
    _variant_t vvarlocate;
    __declspec(property(get=GetgeomTYPE,put=PutgeomTYPE))
    enum zDataType geomTYPE;
    __declspec(property(get=GetvDataSurface,put=PutvDataSurface))
    _variant_t vDataSurface;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getdirbase (
        int nVectorIndex );
    void Putdirbase (
        int nVectorIndex,
        double _arg2 );
    double Getdirection (
        int nVectorIndex );
    void Putdirection (
        int nVectorIndex,
        double _arg2 );
    double Getvarvalue (
        int nVectorIndex );
    void Putvarvalue (
        int nVectorIndex,
        double _arg2 );
    int GetaddlID (
        int nVectorIndex );
    void PutaddlID (
        int nVectorIndex,
        int _arg2 );
    int Getdof (
        int nVectorIndex );
    void Putdof (
        int nVectorIndex,
        int _arg2 );
    VARIANT_BOOL Getflag (
        int nVectorIndex );
    void Putflag (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double Getload (
        int nVectorIndex );
    void Putload (
        int nVectorIndex,
        double _arg2 );
    double Getfluxdir (
        int nVectorIndex );
    void Putfluxdir (
        int nVectorIndex,
        double _arg2 );
    int GetFunction (
        int nVectorIndex );
    void PutFunction (
        int nVectorIndex,
        int _arg2 );
    double Getvarlocate (
        int nRowIndex,
        int nColIndex );
    void Putvarlocate (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    int GetDataSurface (
        int nVectorIndex );
    void PutDataSurface (
        int nVectorIndex,
        int _arg2 );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode GetSearch (
        enum zLoadType loadType,
        int geomID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    enum zLoadDirection Getdirmode ( );
    void Putdirmode ( enum zLoadDirection _val );
    int GetdirID ( );
    void PutdirID ( int _val );
    enum zLoadVariation Getvariation ( );
    void Putvariation ( enum zLoadVariation _val );
    _bstr_t Getvarname ( );
    void Putvarname ( _bstr_t _val );
    _bstr_t Getvareqn ( );
    void Putvareqn ( _bstr_t _val );
    int Getvarfunction ( );
    void Putvarfunction ( int _val );
    VARIANT_BOOL Getmidside ( );
    void Putmidside ( VARIANT_BOOL _val );
    int GetgeomID ( );
    void PutgeomID ( int _val );
    int GetCSys ( );
    void PutCSys ( int _val );
    enum zLoadType Gettype ( );
    void Puttype ( enum zLoadType _val );
    int Getsubtype ( );
    void Putsubtype ( int _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    int GetLoadDefinitionID ( );
    void PutLoadDefinitionID ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    VARIANT_BOOL Getexpanded ( );
    void Putexpanded ( VARIANT_BOOL _val );
    int GetFaceNumber ( );
    void PutFaceNumber ( int _val );
    VARIANT_BOOL GetXOn ( );
    void PutXOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetYOn ( );
    void PutYOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetZOn ( );
    void PutZOn ( VARIANT_BOOL _val );
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getz ( );
    void Putz ( double _val );
    double Gettemp ( );
    void Puttemp ( double _val );
    double Getphase ( );
    void Putphase ( double _val );
    int GetLoadFunction ( );
    void PutLoadFunction ( int _val );
    int GetTempVsTime ( );
    void PutTempVsTime ( int _val );
    int GetPhaseVsFreq ( );
    void PutPhaseVsFreq ( int _val );
    double GetLoadValue ( );
    void PutLoadValue ( double _val );
    VARIANT_BOOL GetCornerPressure ( );
    void PutCornerPressure ( VARIANT_BOOL _val );
    double GetPressure ( );
    void PutPressure ( double _val );
    double GetHeatGen ( );
    void PutHeatGen ( double _val );
    double GetHeatFlux ( );
    void PutHeatFlux ( double _val );
    double GetAbsorptivity ( );
    void PutAbsorptivity ( double _val );
    int GetAbsorptivityVsTemp ( );
    void PutAbsorptivityVsTemp ( int _val );
    VARIANT_BOOL GetVectorFlux ( );
    void PutVectorFlux ( VARIANT_BOOL _val );
    double GetFluidValue ( );
    void PutFluidValue ( double _val );
    VARIANT_BOOL GetPeriodicMaster ( );
    void PutPeriodicMaster ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPeriodicDirection ( );
    void PutPeriodicDirection ( VARIANT_BOOL _val );
    double GetConvectionCoeff ( );
    void PutConvectionCoeff ( double _val );
    VARIANT_BOOL GetForcedConvection ( );
    void PutForcedConvection ( VARIANT_BOOL _val );
    VARIANT_BOOL GetFCDisableAdvection ( );
    void PutFCDisableAdvection ( VARIANT_BOOL _val );
    VARIANT_BOOL GetFCDisableConvection ( );
    void PutFCDisableConvection ( VARIANT_BOOL _val );
    double GetFlowRate ( );
    void PutFlowRate ( double _val );
    double GetFlowDiameter ( );
    void PutFlowDiameter ( double _val );
    double GetFlowAreaFactor ( );
    void PutFlowAreaFactor ( double _val );
    double GetEmissivity ( );
    void PutEmissivity ( double _val );
    int GetEmissivityFunc ( );
    void PutEmissivityFunc ( int _val );
    double GetViewFactor ( );
    void PutViewFactor ( double _val );
    int GetViewFactorVsTime ( );
    void PutViewFactorVsTime ( int _val );
    VARIANT_BOOL GetEnclosureRadiation ( );
    void PutEnclosureRadiation ( VARIANT_BOOL _val );
    VARIANT_BOOL GetCanShade ( );
    void PutCanShade ( VARIANT_BOOL _val );
    VARIANT_BOOL GetCanBeShaded ( );
    void PutCanBeShaded ( VARIANT_BOOL _val );
    int GetCavityNumber ( );
    void PutCavityNumber ( int _val );
    _variant_t Getvdirbase ( );
    void Putvdirbase ( const _variant_t & _val );
    _variant_t Getvdirection ( );
    void Putvdirection ( const _variant_t & _val );
    _variant_t Getvvarvalue ( );
    void Putvvarvalue ( const _variant_t & _val );
    _variant_t GetvaddlID ( );
    void PutvaddlID ( const _variant_t & _val );
    _variant_t Getvdof ( );
    void Putvdof ( const _variant_t & _val );
    _variant_t Getvflag ( );
    void Putvflag ( const _variant_t & _val );
    _variant_t Getvload ( );
    void Putvload ( const _variant_t & _val );
    _variant_t Getvfluxdir ( );
    void Putvfluxdir ( const _variant_t & _val );
    _variant_t Getvfunction ( );
    void Putvfunction ( const _variant_t & _val );
    _variant_t Getvvarlocate ( );
    void Putvvarlocate ( const _variant_t & _val );
    enum zDataType GetgeomTYPE ( );
    void PutgeomTYPE ( enum zDataType _val );
    _variant_t GetvDataSurface ( );
    void PutvDataSurface ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zLoadDirection
{
    FLD_NONE = 0,
    FLD_VECTOR = 1,
    FLD_ALONGCURVE = 2,
    FLD_NORMALTOPLANE = 3,
    FLD_NORMALTOSURFACE = 4
};

enum zLoadVariation
{
    FLV_NONE = 0,
    FLV_EQUATION = 1,
    FLV_FUNCTION = 2,
    FLV_INTERPOLATION = 3,
    FLV_DATASURFACE = 4
};

struct __declspec(uuid("78456268-f7a9-11d4-9457-001083fff11c"))
LoadGeom;
    // [ default ] dispinterface ILoadGeom

struct __declspec(uuid("ffdf9e7c-f6dd-11d4-9456-001083fff11c"))
ILoadMesh : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetaddlID,put=PutaddlID))
    int addlID[];
    __declspec(property(get=Getdof,put=Putdof))
    int dof[];
    __declspec(property(get=Getflag,put=Putflag))
    VARIANT_BOOL flag[];
    __declspec(property(get=Getload,put=Putload))
    double load[];
    __declspec(property(get=Getfluxdir,put=Putfluxdir))
    double fluxdir[];
    __declspec(property(get=GetFunction,put=PutFunction))
    int Function[];
    __declspec(property(get=GetmeshID,put=PutmeshID))
    int meshID;
    __declspec(property(get=GetCSys,put=PutCSys))
    int CSys;
    __declspec(property(get=Gettype,put=Puttype))
    enum zLoadType type;
    __declspec(property(get=Getsubtype,put=Putsubtype))
    int subtype;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=GetLoadDefinitionID,put=PutLoadDefinitionID))
    int LoadDefinitionID;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getexpanded,put=Putexpanded))
    VARIANT_BOOL expanded;
    __declspec(property(get=GetFaceNumber,put=PutFaceNumber))
    int FaceNumber;
    __declspec(property(get=GetXOn,put=PutXOn))
    VARIANT_BOOL XOn;
    __declspec(property(get=GetYOn,put=PutYOn))
    VARIANT_BOOL YOn;
    __declspec(property(get=GetZOn,put=PutZOn))
    VARIANT_BOOL ZOn;
    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getz,put=Putz))
    double z;
    __declspec(property(get=Gettemp,put=Puttemp))
    double temp;
    __declspec(property(get=Getphase,put=Putphase))
    double phase;
    __declspec(property(get=GetLoadFunction,put=PutLoadFunction))
    int LoadFunction;
    __declspec(property(get=GetTempVsTime,put=PutTempVsTime))
    int TempVsTime;
    __declspec(property(get=GetPhaseVsFreq,put=PutPhaseVsFreq))
    int PhaseVsFreq;
    __declspec(property(get=GetLoadValue,put=PutLoadValue))
    double LoadValue;
    __declspec(property(get=GetCornerPressure,put=PutCornerPressure))
    VARIANT_BOOL CornerPressure;
    __declspec(property(get=GetPressure,put=PutPressure))
    double Pressure;
    __declspec(property(get=GetHeatGen,put=PutHeatGen))
    double HeatGen;
    __declspec(property(get=GetHeatFlux,put=PutHeatFlux))
    double HeatFlux;
    __declspec(property(get=GetAbsorptivity,put=PutAbsorptivity))
    double Absorptivity;
    __declspec(property(get=GetAbsorptivityVsTemp,put=PutAbsorptivityVsTemp))
    int AbsorptivityVsTemp;
    __declspec(property(get=GetVectorFlux,put=PutVectorFlux))
    VARIANT_BOOL VectorFlux;
    __declspec(property(get=GetFluidValue,put=PutFluidValue))
    double FluidValue;
    __declspec(property(get=GetPeriodicMaster,put=PutPeriodicMaster))
    VARIANT_BOOL PeriodicMaster;
    __declspec(property(get=GetPeriodicDirection,put=PutPeriodicDirection))
    VARIANT_BOOL PeriodicDirection;
    __declspec(property(get=GetConvectionCoeff,put=PutConvectionCoeff))
    double ConvectionCoeff;
    __declspec(property(get=GetForcedConvection,put=PutForcedConvection))
    VARIANT_BOOL ForcedConvection;
    __declspec(property(get=GetFCDisableAdvection,put=PutFCDisableAdvection))
    VARIANT_BOOL FCDisableAdvection;
    __declspec(property(get=GetFCDisableConvection,put=PutFCDisableConvection))
    VARIANT_BOOL FCDisableConvection;
    __declspec(property(get=GetFlowRate,put=PutFlowRate))
    double FlowRate;
    __declspec(property(get=GetFlowDiameter,put=PutFlowDiameter))
    double FlowDiameter;
    __declspec(property(get=GetFlowAreaFactor,put=PutFlowAreaFactor))
    double FlowAreaFactor;
    __declspec(property(get=GetEmissivity,put=PutEmissivity))
    double Emissivity;
    __declspec(property(get=GetEmissivityFunc,put=PutEmissivityFunc))
    int EmissivityFunc;
    __declspec(property(get=GetViewFactor,put=PutViewFactor))
    double ViewFactor;
    __declspec(property(get=GetViewFactorVsTime,put=PutViewFactorVsTime))
    int ViewFactorVsTime;
    __declspec(property(get=GetEnclosureRadiation,put=PutEnclosureRadiation))
    VARIANT_BOOL EnclosureRadiation;
    __declspec(property(get=GetCanShade,put=PutCanShade))
    VARIANT_BOOL CanShade;
    __declspec(property(get=GetCanBeShaded,put=PutCanBeShaded))
    VARIANT_BOOL CanBeShaded;
    __declspec(property(get=GetCavityNumber,put=PutCavityNumber))
    int CavityNumber;
    __declspec(property(get=GetvaddlID,put=PutvaddlID))
    _variant_t vaddlID;
    __declspec(property(get=Getvdof,put=Putvdof))
    _variant_t vdof;
    __declspec(property(get=Getvflag,put=Putvflag))
    _variant_t vflag;
    __declspec(property(get=Getvload,put=Putvload))
    _variant_t vload;
    __declspec(property(get=Getvfluxdir,put=Putvfluxdir))
    _variant_t vfluxdir;
    __declspec(property(get=Getvfunction,put=Putvfunction))
    _variant_t vfunction;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int GetaddlID (
        int nVectorIndex );
    void PutaddlID (
        int nVectorIndex,
        int _arg2 );
    int Getdof (
        int nVectorIndex );
    void Putdof (
        int nVectorIndex,
        int _arg2 );
    VARIANT_BOOL Getflag (
        int nVectorIndex );
    void Putflag (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double Getload (
        int nVectorIndex );
    void Putload (
        int nVectorIndex,
        double _arg2 );
    double Getfluxdir (
        int nVectorIndex );
    void Putfluxdir (
        int nVectorIndex,
        double _arg2 );
    int GetFunction (
        int nVectorIndex );
    void PutFunction (
        int nVectorIndex,
        int _arg2 );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode GetSearch (
        enum zLoadType loadType,
        int meshID,
        int faceID );
    enum zReturnCode AddArray (
        int Count,
        VARIANT_BOOL doDOF,
        VARIANT_BOOL doValues,
        VARIANT_BOOL doFunctions,
        const _variant_t & NodeElemID,
        const _variant_t & dof,
        const _variant_t & values,
        const _variant_t & FunctionID );
    enum zReturnCode Add (
        int setID,
        enum zLoadType loadType,
        int nCSys,
        const _variant_t & dof,
        const _variant_t & values,
        const _variant_t & FunctionID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    int GetmeshID ( );
    void PutmeshID ( int _val );
    int GetCSys ( );
    void PutCSys ( int _val );
    enum zLoadType Gettype ( );
    void Puttype ( enum zLoadType _val );
    int Getsubtype ( );
    void Putsubtype ( int _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    int GetLoadDefinitionID ( );
    void PutLoadDefinitionID ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    VARIANT_BOOL Getexpanded ( );
    void Putexpanded ( VARIANT_BOOL _val );
    int GetFaceNumber ( );
    void PutFaceNumber ( int _val );
    VARIANT_BOOL GetXOn ( );
    void PutXOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetYOn ( );
    void PutYOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetZOn ( );
    void PutZOn ( VARIANT_BOOL _val );
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getz ( );
    void Putz ( double _val );
    double Gettemp ( );
    void Puttemp ( double _val );
    double Getphase ( );
    void Putphase ( double _val );
    int GetLoadFunction ( );
    void PutLoadFunction ( int _val );
    int GetTempVsTime ( );
    void PutTempVsTime ( int _val );
    int GetPhaseVsFreq ( );
    void PutPhaseVsFreq ( int _val );
    double GetLoadValue ( );
    void PutLoadValue ( double _val );
    VARIANT_BOOL GetCornerPressure ( );
    void PutCornerPressure ( VARIANT_BOOL _val );
    double GetPressure ( );
    void PutPressure ( double _val );
    double GetHeatGen ( );
    void PutHeatGen ( double _val );
    double GetHeatFlux ( );
    void PutHeatFlux ( double _val );
    double GetAbsorptivity ( );
    void PutAbsorptivity ( double _val );
    int GetAbsorptivityVsTemp ( );
    void PutAbsorptivityVsTemp ( int _val );
    VARIANT_BOOL GetVectorFlux ( );
    void PutVectorFlux ( VARIANT_BOOL _val );
    double GetFluidValue ( );
    void PutFluidValue ( double _val );
    VARIANT_BOOL GetPeriodicMaster ( );
    void PutPeriodicMaster ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPeriodicDirection ( );
    void PutPeriodicDirection ( VARIANT_BOOL _val );
    double GetConvectionCoeff ( );
    void PutConvectionCoeff ( double _val );
    VARIANT_BOOL GetForcedConvection ( );
    void PutForcedConvection ( VARIANT_BOOL _val );
    VARIANT_BOOL GetFCDisableAdvection ( );
    void PutFCDisableAdvection ( VARIANT_BOOL _val );
    VARIANT_BOOL GetFCDisableConvection ( );
    void PutFCDisableConvection ( VARIANT_BOOL _val );
    double GetFlowRate ( );
    void PutFlowRate ( double _val );
    double GetFlowDiameter ( );
    void PutFlowDiameter ( double _val );
    double GetFlowAreaFactor ( );
    void PutFlowAreaFactor ( double _val );
    double GetEmissivity ( );
    void PutEmissivity ( double _val );
    int GetEmissivityFunc ( );
    void PutEmissivityFunc ( int _val );
    double GetViewFactor ( );
    void PutViewFactor ( double _val );
    int GetViewFactorVsTime ( );
    void PutViewFactorVsTime ( int _val );
    VARIANT_BOOL GetEnclosureRadiation ( );
    void PutEnclosureRadiation ( VARIANT_BOOL _val );
    VARIANT_BOOL GetCanShade ( );
    void PutCanShade ( VARIANT_BOOL _val );
    VARIANT_BOOL GetCanBeShaded ( );
    void PutCanBeShaded ( VARIANT_BOOL _val );
    int GetCavityNumber ( );
    void PutCavityNumber ( int _val );
    _variant_t GetvaddlID ( );
    void PutvaddlID ( const _variant_t & _val );
    _variant_t Getvdof ( );
    void Putvdof ( const _variant_t & _val );
    _variant_t Getvflag ( );
    void Putvflag ( const _variant_t & _val );
    _variant_t Getvload ( );
    void Putvload ( const _variant_t & _val );
    _variant_t Getvfluxdir ( );
    void Putvfluxdir ( const _variant_t & _val );
    _variant_t Getvfunction ( );
    void Putvfunction ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("ffdf9e7e-f6dd-11d4-9456-001083fff11c"))
LoadMesh;
    // [ default ] dispinterface ILoadMesh

struct __declspec(uuid("33a4c0d4-f6c5-11d4-9456-001083fff11c"))
ILoadNTemp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettemp,put=Puttemp))
    double temp;
    __declspec(property(get=Getphase,put=Putphase))
    double phase;
    __declspec(property(get=GetFunction,put=PutFunction))
    int Function;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getexpanded,put=Putexpanded))
    VARIANT_BOOL expanded;
    __declspec(property(get=GetLoadDefinitionID,put=PutLoadDefinitionID))
    int LoadDefinitionID;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode Put (
        int entID );
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode AddArray (
        int Count,
        VARIANT_BOOL doValues,
        VARIANT_BOOL doFunctions,
        const _variant_t & NodeID,
        const _variant_t & values,
        const _variant_t & FunctionID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    double Gettemp ( );
    void Puttemp ( double _val );
    double Getphase ( );
    void Putphase ( double _val );
    int GetFunction ( );
    void PutFunction ( int _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    VARIANT_BOOL Getexpanded ( );
    void Putexpanded ( VARIANT_BOOL _val );
    int GetLoadDefinitionID ( );
    void PutLoadDefinitionID ( int _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("33a4c0d6-f6c5-11d4-9456-001083fff11c"))
LoadNTemp;
    // [ default ] dispinterface ILoadNTemp

struct __declspec(uuid("39a8f662-f3cf-11d4-9453-001083fff11c"))
ILoadSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNLConvergenceFlag,put=PutNLConvergenceFlag))
    VARIANT_BOOL NLConvergenceFlag[];
    __declspec(property(get=GetNLConvergenceVal,put=PutNLConvergenceVal))
    double NLConvergenceVal[];
    __declspec(property(get=GetBodyAccel,put=PutBodyAccel))
    double BodyAccel[];
    __declspec(property(get=GetBodyVelocity,put=PutBodyVelocity))
    double BodyVelocity[];
    __declspec(property(get=GetBodyOrigin,put=PutBodyOrigin))
    double BodyOrigin[];
    __declspec(property(get=GetBodyAccelFunction,put=PutBodyAccelFunction))
    int BodyAccelFunction[];
    __declspec(property(get=GetBodyVelocityFunction,put=PutBodyVelocityFunction))
    int BodyVelocityFunction[];
    __declspec(property(get=GetBodyVaryingAccel,put=PutBodyVaryingAccel))
    double BodyVaryingAccel[];
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=GetBodyDefTemp,put=PutBodyDefTemp))
    double BodyDefTemp;
    __declspec(property(get=GetBodyRefTemp,put=PutBodyRefTemp))
    double BodyRefTemp;
    __declspec(property(get=GetBodyDefTempOn,put=PutBodyDefTempOn))
    VARIANT_BOOL BodyDefTempOn;
    __declspec(property(get=GetBodyRefTempOn,put=PutBodyRefTempOn))
    VARIANT_BOOL BodyRefTempOn;
    __declspec(property(get=GetBodyAccelOn,put=PutBodyAccelOn))
    VARIANT_BOOL BodyAccelOn;
    __declspec(property(get=GetBodyVelocityOn,put=PutBodyVelocityOn))
    VARIANT_BOOL BodyVelocityOn;
    __declspec(property(get=GetStefanBoltzmann,put=PutStefanBoltzmann))
    double StefanBoltzmann;
    __declspec(property(get=GetRadiationAmbientElem,put=PutRadiationAmbientElem))
    int RadiationAmbientElem;
    __declspec(property(get=GetTempOffset,put=PutTempOffset))
    double TempOffset;
    __declspec(property(get=GetFreeConvExponent,put=PutFreeConvExponent))
    double FreeConvExponent;
    __declspec(property(get=GetFreeConvAlternateForm,put=PutFreeConvAlternateForm))
    VARIANT_BOOL FreeConvAlternateForm;
    __declspec(property(get=GetFCFluidConductivity,put=PutFCFluidConductivity))
    double FCFluidConductivity;
    __declspec(property(get=GetFCFluidHeatCapacity,put=PutFCFluidHeatCapacity))
    double FCFluidHeatCapacity;
    __declspec(property(get=GetFCFluidViscosity,put=PutFCFluidViscosity))
    double FCFluidViscosity;
    __declspec(property(get=GetFCFluidDensity,put=PutFCFluidDensity))
    double FCFluidDensity;
    __declspec(property(get=GetFCFluidConductivityFunc,put=PutFCFluidConductivityFunc))
    int FCFluidConductivityFunc;
    __declspec(property(get=GetFCFluidHeatCapacityFunc,put=PutFCFluidHeatCapacityFunc))
    int FCFluidHeatCapacityFunc;
    __declspec(property(get=GetFCFluidViscosityFunc,put=PutFCFluidViscosityFunc))
    int FCFluidViscosityFunc;
    __declspec(property(get=GetFCFluidDensityFunc,put=PutFCFluidDensityFunc))
    int FCFluidDensityFunc;
    __declspec(property(get=GetFCConstantCoeff,put=PutFCConstantCoeff))
    double FCConstantCoeff;
    __declspec(property(get=GetFCReynoldsExp,put=PutFCReynoldsExp))
    double FCReynoldsExp;
    __declspec(property(get=GetFCPrandtlIn,put=PutFCPrandtlIn))
    double FCPrandtlIn;
    __declspec(property(get=GetFCPrandtlOut,put=PutFCPrandtlOut))
    double FCPrandtlOut;
    __declspec(property(get=GetFCAlternateForm,put=PutFCAlternateForm))
    VARIANT_BOOL FCAlternateForm;
    __declspec(property(get=GetFCExcludeConvective,put=PutFCExcludeConvective))
    VARIANT_BOOL FCExcludeConvective;
    __declspec(property(get=GetNLOn,put=PutNLOn))
    int NLOn;
    __declspec(property(get=GetNLIncrements,put=PutNLIncrements))
    int NLIncrements;
    __declspec(property(get=GetNLTimeIncrement,put=PutNLTimeIncrement))
    double NLTimeIncrement;
    __declspec(property(get=GetNLMaxIterPerStep,put=PutNLMaxIterPerStep))
    int NLMaxIterPerStep;
    __declspec(property(get=GetNLStiffnessMethod,put=PutNLStiffnessMethod))
    int NLStiffnessMethod;
    __declspec(property(get=GetNLStiffnessIter,put=PutNLStiffnessIter))
    int NLStiffnessIter;
    __declspec(property(get=GetNLIntermediateOutput,put=PutNLIntermediateOutput))
    int NLIntermediateOutput;
    __declspec(property(get=GetNLOutputInterval,put=PutNLOutputInterval))
    int NLOutputInterval;
    __declspec(property(get=GetNLArcLengthMethod,put=PutNLArcLengthMethod))
    int NLArcLengthMethod;
    __declspec(property(get=GetNLSolutionOverride,put=PutNLSolutionOverride))
    int NLSolutionOverride;
    __declspec(property(get=GetNLNewtRaphLineSearch,put=PutNLNewtRaphLineSearch))
    VARIANT_BOOL NLNewtRaphLineSearch;
    __declspec(property(get=GetNLNewtRaphQuasiNewton,put=PutNLNewtRaphQuasiNewton))
    VARIANT_BOOL NLNewtRaphQuasiNewton;
    __declspec(property(get=GetNLNewtRaphBisection,put=PutNLNewtRaphBisection))
    VARIANT_BOOL NLNewtRaphBisection;
    __declspec(property(get=GetNLArcScaleConstLoad,put=PutNLArcScaleConstLoad))
    double NLArcScaleConstLoad;
    __declspec(property(get=GetNLArcMinAdjust,put=PutNLArcMinAdjust))
    double NLArcMinAdjust;
    __declspec(property(get=GetNLArcMaxAdjust,put=PutNLArcMaxAdjust))
    double NLArcMaxAdjust;
    __declspec(property(get=GetNLArcConstraintType,put=PutNLArcConstraintType))
    int NLArcConstraintType;
    __declspec(property(get=GetNLArcDesiredIter,put=PutNLArcDesiredIter))
    int NLArcDesiredIter;
    __declspec(property(get=GetNLArcMaxIncrement,put=PutNLArcMaxIncrement))
    int NLArcMaxIncrement;
    __declspec(property(get=GetNLMaxDivergeCond,put=PutNLMaxDivergeCond))
    int NLMaxDivergeCond;
    __declspec(property(get=GetNLQuasiNewtonVec,put=PutNLQuasiNewtonVec))
    int NLQuasiNewtonVec;
    __declspec(property(get=GetNLMaxLineSearch,put=PutNLMaxLineSearch))
    int NLMaxLineSearch;
    __declspec(property(get=GetNLLineSearchTolerance,put=PutNLLineSearchTolerance))
    double NLLineSearchTolerance;
    __declspec(property(get=GetNLMaxBisection,put=PutNLMaxBisection))
    int NLMaxBisection;
    __declspec(property(get=GetNLMaxRotation,put=PutNLMaxRotation))
    double NLMaxRotation;
    __declspec(property(get=GetNLStressFraction,put=PutNLStressFraction))
    double NLStressFraction;
    __declspec(property(get=GetNLMaxAdjusted,put=PutNLMaxAdjusted))
    double NLMaxAdjusted;
    __declspec(property(get=GetNLTransStepSkipFactor,put=PutNLTransStepSkipFactor))
    int NLTransStepSkipFactor;
    __declspec(property(get=GetNLTransDominantSteps,put=PutNLTransDominantSteps))
    int NLTransDominantSteps;
    __declspec(property(get=GetNLTransBoundsMaintain,put=PutNLTransBoundsMaintain))
    double NLTransBoundsMaintain;
    __declspec(property(get=GetNLTransStabilityTol,put=PutNLTransStabilityTol))
    double NLTransStabilityTol;
    __declspec(property(get=GetDYNStructDamp,put=PutDYNStructDamp))
    double DYNStructDamp;
    __declspec(property(get=GetDYNSystemFreqDamp,put=PutDYNSystemFreqDamp))
    double DYNSystemFreqDamp;
    __declspec(property(get=GetDYNElemFreqDamp,put=PutDYNElemFreqDamp))
    double DYNElemFreqDamp;
    __declspec(property(get=GetDYNOn,put=PutDYNOn))
    int DYNOn;
    __declspec(property(get=GetDYNType,put=PutDYNType))
    int DYNType;
    __declspec(property(get=GetDYNModalMethod,put=PutDYNModalMethod))
    int DYNModalMethod;
    __declspec(property(get=GetDYNMassFormulation,put=PutDYNMassFormulation))
    int DYNMassFormulation;
    __declspec(property(get=GetDYNDataRecovery,put=PutDYNDataRecovery))
    int DYNDataRecovery;
    __declspec(property(get=GetDYNSolFreqType,put=PutDYNSolFreqType))
    int DYNSolFreqType;
    __declspec(property(get=GetDYNPSDType,put=PutDYNPSDType))
    int DYNPSDType;
    __declspec(property(get=GetDYNPSDInterp,put=PutDYNPSDInterp))
    int DYNPSDInterp;
    __declspec(property(get=GetDYNSolFreqSpread,put=PutDYNSolFreqSpread))
    double DYNSolFreqSpread;
    __declspec(property(get=GetDYNSolFreqNumFreq,put=PutDYNSolFreqNumFreq))
    int DYNSolFreqNumFreq;
    __declspec(property(get=GetDYNSolFreqMin,put=PutDYNSolFreqMin))
    double DYNSolFreqMin;
    __declspec(property(get=GetDYNSolFreqMax,put=PutDYNSolFreqMax))
    double DYNSolFreqMax;
    __declspec(property(get=GetDYNSolFreqLogInterp,put=PutDYNSolFreqLogInterp))
    VARIANT_BOOL DYNSolFreqLogInterp;
    __declspec(property(get=GetDYNTransTimeSteps,put=PutDYNTransTimeSteps))
    int DYNTransTimeSteps;
    __declspec(property(get=GetDYNTransTimePerStep,put=PutDYNTransTimePerStep))
    double DYNTransTimePerStep;
    __declspec(property(get=GetDYNTransOutputInterval,put=PutDYNTransOutputInterval))
    int DYNTransOutputInterval;
    __declspec(property(get=GetDYNFrequencyTable,put=PutDYNFrequencyTable))
    int DYNFrequencyTable;
    __declspec(property(get=GetDYNDampingTable,put=PutDYNDampingTable))
    int DYNDampingTable;
    __declspec(property(get=GetDYNRandomPSD,put=PutDYNRandomPSD))
    int DYNRandomPSD;
    __declspec(property(get=GetDYNResponseModes,put=PutDYNResponseModes))
    int DYNResponseModes;
    __declspec(property(get=GetDYNResponseMinFreq,put=PutDYNResponseMinFreq))
    double DYNResponseMinFreq;
    __declspec(property(get=GetDYNResponseMaxFreq,put=PutDYNResponseMaxFreq))
    double DYNResponseMaxFreq;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetDYNAddlFreqType,put=PutDYNAddlFreqType))
    int DYNAddlFreqType;
    __declspec(property(get=GetDYNAddlFreqNumFreq,put=PutDYNAddlFreqNumFreq))
    int DYNAddlFreqNumFreq;
    __declspec(property(get=GetDYNAddlFreqMin,put=PutDYNAddlFreqMin))
    double DYNAddlFreqMin;
    __declspec(property(get=GetDYNAddlFreqMax,put=PutDYNAddlFreqMax))
    double DYNAddlFreqMax;
    __declspec(property(get=GetDYNAddlFreqLogInterp,put=PutDYNAddlFreqLogInterp))
    VARIANT_BOOL DYNAddlFreqLogInterp;
    __declspec(property(get=GetDYNAddlFreqSpread,put=PutDYNAddlFreqSpread))
    double DYNAddlFreqSpread;
    __declspec(property(get=GetvNLConvergenceFlag,put=PutvNLConvergenceFlag))
    _variant_t vNLConvergenceFlag;
    __declspec(property(get=GetvNLConvergenceVal,put=PutvNLConvergenceVal))
    _variant_t vNLConvergenceVal;
    __declspec(property(get=GetvBodyAccel,put=PutvBodyAccel))
    _variant_t vBodyAccel;
    __declspec(property(get=GetvBodyVelocity,put=PutvBodyVelocity))
    _variant_t vBodyVelocity;
    __declspec(property(get=GetvBodyOrigin,put=PutvBodyOrigin))
    _variant_t vBodyOrigin;
    __declspec(property(get=GetvBodyAccelFunction,put=PutvBodyAccelFunction))
    _variant_t vBodyAccelFunction;
    __declspec(property(get=GetvBodyVelocityFunction,put=PutvBodyVelocityFunction))
    _variant_t vBodyVelocityFunction;
    __declspec(property(get=GetIsCombination,put=PutIsCombination))
    VARIANT_BOOL IsCombination;
    __declspec(property(get=GetCombinedScaleFactor,put=PutCombinedScaleFactor))
    double CombinedScaleFactor;
    __declspec(property(get=GetBodyLoadCSys,put=PutBodyLoadCSys))
    int BodyLoadCSys;
    __declspec(property(get=GetBodyVaryingAccelOn,put=PutBodyVaryingAccelOn))
    VARIANT_BOOL BodyVaryingAccelOn;
    __declspec(property(get=GetBodyVaryingAccelAxis,put=PutBodyVaryingAccelAxis))
    int BodyVaryingAccelAxis;
    __declspec(property(get=GetBodyVaryingAccelFunction,put=PutBodyVaryingAccelFunction))
    int BodyVaryingAccelFunction;
    __declspec(property(get=GetvBodyVaryingAccel,put=PutvBodyVaryingAccel))
    _variant_t vBodyVaryingAccel;
    __declspec(property(get=GetRadViewFactorZTOL,put=PutRadViewFactorZTOL))
    double RadViewFactorZTOL;
    __declspec(property(get=GetbRadViewFactorZTOL,put=PutbRadViewFactorZTOL))
    VARIANT_BOOL bRadViewFactorZTOL;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetNLConvergenceFlag (
        int nVectorIndex );
    void PutNLConvergenceFlag (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double GetNLConvergenceVal (
        int nVectorIndex );
    void PutNLConvergenceVal (
        int nVectorIndex,
        double _arg2 );
    double GetBodyAccel (
        int nVectorIndex );
    void PutBodyAccel (
        int nVectorIndex,
        double _arg2 );
    double GetBodyVelocity (
        int nVectorIndex );
    void PutBodyVelocity (
        int nVectorIndex,
        double _arg2 );
    double GetBodyOrigin (
        int nVectorIndex );
    void PutBodyOrigin (
        int nVectorIndex,
        double _arg2 );
    int GetBodyAccelFunction (
        int nVectorIndex );
    void PutBodyAccelFunction (
        int nVectorIndex,
        int _arg2 );
    int GetBodyVelocityFunction (
        int nVectorIndex );
    void PutBodyVelocityFunction (
        int nVectorIndex,
        int _arg2 );
    double GetBodyVaryingAccel (
        int nVectorIndex );
    void PutBodyVaryingAccel (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode Expand ( );
    enum zReturnCode Compress ( );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode ResetNextLoad (
        enum zDataType enDataType,
        VARIANT_BOOL bAllLoadTypes,
        enum zLoadType enLoadType,
        VARIANT_BOOL bOtherLoadsOnly,
        VARIANT_BOOL bIncludeExpanded );
    enum zReturnCode NextLoad (
        IDispatch * * pDispatch );
    enum zReturnCode ResetNextLoadDef (
        VARIANT_BOOL bAllDataTypes,
        enum zDataType enDataType,
        VARIANT_BOOL bAllLoadTypes,
        enum zLoadType enLoadType );
    enum zReturnCode NextLoadDef (
        IDispatch * * pDispatch );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode GetCombination (
        double * dOverallScale,
        int * nCombo,
        VARIANT * dScale,
        VARIANT * nSetID );
    enum zReturnCode PutCombination (
        double dOverallScale,
        int nCombo,
        const _variant_t & dScale,
        const _variant_t & nSetID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    int Getlayer ( );
    void Putlayer ( int _val );
    double GetBodyDefTemp ( );
    void PutBodyDefTemp ( double _val );
    double GetBodyRefTemp ( );
    void PutBodyRefTemp ( double _val );
    VARIANT_BOOL GetBodyDefTempOn ( );
    void PutBodyDefTempOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetBodyRefTempOn ( );
    void PutBodyRefTempOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetBodyAccelOn ( );
    void PutBodyAccelOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetBodyVelocityOn ( );
    void PutBodyVelocityOn ( VARIANT_BOOL _val );
    double GetStefanBoltzmann ( );
    void PutStefanBoltzmann ( double _val );
    int GetRadiationAmbientElem ( );
    void PutRadiationAmbientElem ( int _val );
    double GetTempOffset ( );
    void PutTempOffset ( double _val );
    double GetFreeConvExponent ( );
    void PutFreeConvExponent ( double _val );
    VARIANT_BOOL GetFreeConvAlternateForm ( );
    void PutFreeConvAlternateForm ( VARIANT_BOOL _val );
    double GetFCFluidConductivity ( );
    void PutFCFluidConductivity ( double _val );
    double GetFCFluidHeatCapacity ( );
    void PutFCFluidHeatCapacity ( double _val );
    double GetFCFluidViscosity ( );
    void PutFCFluidViscosity ( double _val );
    double GetFCFluidDensity ( );
    void PutFCFluidDensity ( double _val );
    int GetFCFluidConductivityFunc ( );
    void PutFCFluidConductivityFunc ( int _val );
    int GetFCFluidHeatCapacityFunc ( );
    void PutFCFluidHeatCapacityFunc ( int _val );
    int GetFCFluidViscosityFunc ( );
    void PutFCFluidViscosityFunc ( int _val );
    int GetFCFluidDensityFunc ( );
    void PutFCFluidDensityFunc ( int _val );
    double GetFCConstantCoeff ( );
    void PutFCConstantCoeff ( double _val );
    double GetFCReynoldsExp ( );
    void PutFCReynoldsExp ( double _val );
    double GetFCPrandtlIn ( );
    void PutFCPrandtlIn ( double _val );
    double GetFCPrandtlOut ( );
    void PutFCPrandtlOut ( double _val );
    VARIANT_BOOL GetFCAlternateForm ( );
    void PutFCAlternateForm ( VARIANT_BOOL _val );
    VARIANT_BOOL GetFCExcludeConvective ( );
    void PutFCExcludeConvective ( VARIANT_BOOL _val );
    int GetNLOn ( );
    void PutNLOn ( int _val );
    int GetNLIncrements ( );
    void PutNLIncrements ( int _val );
    double GetNLTimeIncrement ( );
    void PutNLTimeIncrement ( double _val );
    int GetNLMaxIterPerStep ( );
    void PutNLMaxIterPerStep ( int _val );
    int GetNLStiffnessMethod ( );
    void PutNLStiffnessMethod ( int _val );
    int GetNLStiffnessIter ( );
    void PutNLStiffnessIter ( int _val );
    int GetNLIntermediateOutput ( );
    void PutNLIntermediateOutput ( int _val );
    int GetNLOutputInterval ( );
    void PutNLOutputInterval ( int _val );
    int GetNLArcLengthMethod ( );
    void PutNLArcLengthMethod ( int _val );
    int GetNLSolutionOverride ( );
    void PutNLSolutionOverride ( int _val );
    VARIANT_BOOL GetNLNewtRaphLineSearch ( );
    void PutNLNewtRaphLineSearch ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNLNewtRaphQuasiNewton ( );
    void PutNLNewtRaphQuasiNewton ( VARIANT_BOOL _val );
    VARIANT_BOOL GetNLNewtRaphBisection ( );
    void PutNLNewtRaphBisection ( VARIANT_BOOL _val );
    double GetNLArcScaleConstLoad ( );
    void PutNLArcScaleConstLoad ( double _val );
    double GetNLArcMinAdjust ( );
    void PutNLArcMinAdjust ( double _val );
    double GetNLArcMaxAdjust ( );
    void PutNLArcMaxAdjust ( double _val );
    int GetNLArcConstraintType ( );
    void PutNLArcConstraintType ( int _val );
    int GetNLArcDesiredIter ( );
    void PutNLArcDesiredIter ( int _val );
    int GetNLArcMaxIncrement ( );
    void PutNLArcMaxIncrement ( int _val );
    int GetNLMaxDivergeCond ( );
    void PutNLMaxDivergeCond ( int _val );
    int GetNLQuasiNewtonVec ( );
    void PutNLQuasiNewtonVec ( int _val );
    int GetNLMaxLineSearch ( );
    void PutNLMaxLineSearch ( int _val );
    double GetNLLineSearchTolerance ( );
    void PutNLLineSearchTolerance ( double _val );
    int GetNLMaxBisection ( );
    void PutNLMaxBisection ( int _val );
    double GetNLMaxRotation ( );
    void PutNLMaxRotation ( double _val );
    double GetNLStressFraction ( );
    void PutNLStressFraction ( double _val );
    double GetNLMaxAdjusted ( );
    void PutNLMaxAdjusted ( double _val );
    int GetNLTransStepSkipFactor ( );
    void PutNLTransStepSkipFactor ( int _val );
    int GetNLTransDominantSteps ( );
    void PutNLTransDominantSteps ( int _val );
    double GetNLTransBoundsMaintain ( );
    void PutNLTransBoundsMaintain ( double _val );
    double GetNLTransStabilityTol ( );
    void PutNLTransStabilityTol ( double _val );
    double GetDYNStructDamp ( );
    void PutDYNStructDamp ( double _val );
    double GetDYNSystemFreqDamp ( );
    void PutDYNSystemFreqDamp ( double _val );
    double GetDYNElemFreqDamp ( );
    void PutDYNElemFreqDamp ( double _val );
    int GetDYNOn ( );
    void PutDYNOn ( int _val );
    int GetDYNType ( );
    void PutDYNType ( int _val );
    int GetDYNModalMethod ( );
    void PutDYNModalMethod ( int _val );
    int GetDYNMassFormulation ( );
    void PutDYNMassFormulation ( int _val );
    int GetDYNDataRecovery ( );
    void PutDYNDataRecovery ( int _val );
    int GetDYNSolFreqType ( );
    void PutDYNSolFreqType ( int _val );
    int GetDYNPSDType ( );
    void PutDYNPSDType ( int _val );
    int GetDYNPSDInterp ( );
    void PutDYNPSDInterp ( int _val );
    double GetDYNSolFreqSpread ( );
    void PutDYNSolFreqSpread ( double _val );
    int GetDYNSolFreqNumFreq ( );
    void PutDYNSolFreqNumFreq ( int _val );
    double GetDYNSolFreqMin ( );
    void PutDYNSolFreqMin ( double _val );
    double GetDYNSolFreqMax ( );
    void PutDYNSolFreqMax ( double _val );
    VARIANT_BOOL GetDYNSolFreqLogInterp ( );
    void PutDYNSolFreqLogInterp ( VARIANT_BOOL _val );
    int GetDYNTransTimeSteps ( );
    void PutDYNTransTimeSteps ( int _val );
    double GetDYNTransTimePerStep ( );
    void PutDYNTransTimePerStep ( double _val );
    int GetDYNTransOutputInterval ( );
    void PutDYNTransOutputInterval ( int _val );
    int GetDYNFrequencyTable ( );
    void PutDYNFrequencyTable ( int _val );
    int GetDYNDampingTable ( );
    void PutDYNDampingTable ( int _val );
    int GetDYNRandomPSD ( );
    void PutDYNRandomPSD ( int _val );
    int GetDYNResponseModes ( );
    void PutDYNResponseModes ( int _val );
    double GetDYNResponseMinFreq ( );
    void PutDYNResponseMinFreq ( double _val );
    double GetDYNResponseMaxFreq ( );
    void PutDYNResponseMaxFreq ( double _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    int GetDYNAddlFreqType ( );
    void PutDYNAddlFreqType ( int _val );
    int GetDYNAddlFreqNumFreq ( );
    void PutDYNAddlFreqNumFreq ( int _val );
    double GetDYNAddlFreqMin ( );
    void PutDYNAddlFreqMin ( double _val );
    double GetDYNAddlFreqMax ( );
    void PutDYNAddlFreqMax ( double _val );
    VARIANT_BOOL GetDYNAddlFreqLogInterp ( );
    void PutDYNAddlFreqLogInterp ( VARIANT_BOOL _val );
    double GetDYNAddlFreqSpread ( );
    void PutDYNAddlFreqSpread ( double _val );
    _variant_t GetvNLConvergenceFlag ( );
    void PutvNLConvergenceFlag ( const _variant_t & _val );
    _variant_t GetvNLConvergenceVal ( );
    void PutvNLConvergenceVal ( const _variant_t & _val );
    _variant_t GetvBodyAccel ( );
    void PutvBodyAccel ( const _variant_t & _val );
    _variant_t GetvBodyVelocity ( );
    void PutvBodyVelocity ( const _variant_t & _val );
    _variant_t GetvBodyOrigin ( );
    void PutvBodyOrigin ( const _variant_t & _val );
    _variant_t GetvBodyAccelFunction ( );
    void PutvBodyAccelFunction ( const _variant_t & _val );
    _variant_t GetvBodyVelocityFunction ( );
    void PutvBodyVelocityFunction ( const _variant_t & _val );
    VARIANT_BOOL GetIsCombination ( );
    void PutIsCombination ( VARIANT_BOOL _val );
    double GetCombinedScaleFactor ( );
    void PutCombinedScaleFactor ( double _val );
    int GetBodyLoadCSys ( );
    void PutBodyLoadCSys ( int _val );
    VARIANT_BOOL GetBodyVaryingAccelOn ( );
    void PutBodyVaryingAccelOn ( VARIANT_BOOL _val );
    int GetBodyVaryingAccelAxis ( );
    void PutBodyVaryingAccelAxis ( int _val );
    int GetBodyVaryingAccelFunction ( );
    void PutBodyVaryingAccelFunction ( int _val );
    _variant_t GetvBodyVaryingAccel ( );
    void PutvBodyVaryingAccel ( const _variant_t & _val );
    double GetRadViewFactorZTOL ( );
    void PutRadViewFactorZTOL ( double _val );
    VARIANT_BOOL GetbRadViewFactorZTOL ( );
    void PutbRadViewFactorZTOL ( VARIANT_BOOL _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("39a8f664-f3cf-11d4-9453-001083fff11c"))
LoadSet;
    // [ default ] dispinterface ILoadSet

struct __declspec(uuid("d3a5591a-080c-11d5-9468-001083fff11c"))
IOptim : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettype,put=Puttype))
    enum zOptType type;
    __declspec(property(get=Getgoal,put=Putgoal))
    enum zOptGoal goal;
    __declspec(property(get=Getvary,put=Putvary))
    enum zOptVary vary;
    __declspec(property(get=Getlimit,put=Putlimit))
    enum zOptLimit limit;
    __declspec(property(get=Getcycles,put=Putcycles))
    int cycles;
    __declspec(property(get=GetvaryType,put=PutvaryType))
    enum zDataType varyType;
    __declspec(property(get=GetvaryID,put=PutvaryID))
    int varyID;
    __declspec(property(get=GetvaryExtraID,put=PutvaryExtraID))
    int varyExtraID;
    __declspec(property(get=GetvaryPct,put=PutvaryPct))
    VARIANT_BOOL varyPct;
    __declspec(property(get=GetvaryMin,put=PutvaryMin))
    double varyMin;
    __declspec(property(get=GetvaryMax,put=PutvaryMax))
    double varyMax;
    __declspec(property(get=GetvaryDelta,put=PutvaryDelta))
    double varyDelta;
    __declspec(property(get=GetrespType,put=PutrespType))
    enum zDataType respType;
    __declspec(property(get=GetrespID,put=PutrespID))
    int respID;
    __declspec(property(get=GetrespMin,put=PutrespMin))
    double respMin;
    __declspec(property(get=GetrespMax,put=PutrespMax))
    double respMax;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    enum zOptType Gettype ( );
    void Puttype ( enum zOptType _val );
    enum zOptGoal Getgoal ( );
    void Putgoal ( enum zOptGoal _val );
    enum zOptVary Getvary ( );
    void Putvary ( enum zOptVary _val );
    enum zOptLimit Getlimit ( );
    void Putlimit ( enum zOptLimit _val );
    int Getcycles ( );
    void Putcycles ( int _val );
    enum zDataType GetvaryType ( );
    void PutvaryType ( enum zDataType _val );
    int GetvaryID ( );
    void PutvaryID ( int _val );
    int GetvaryExtraID ( );
    void PutvaryExtraID ( int _val );
    VARIANT_BOOL GetvaryPct ( );
    void PutvaryPct ( VARIANT_BOOL _val );
    double GetvaryMin ( );
    void PutvaryMin ( double _val );
    double GetvaryMax ( );
    void PutvaryMax ( double _val );
    double GetvaryDelta ( );
    void PutvaryDelta ( double _val );
    enum zDataType GetrespType ( );
    void PutrespType ( enum zDataType _val );
    int GetrespID ( );
    void PutrespID ( int _val );
    double GetrespMin ( );
    void PutrespMin ( double _val );
    double GetrespMax ( );
    void PutrespMax ( double _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zOptType
{
    FOP_NONE = 0,
    FOP_GOAL = 1,
    FOP_VARY = 2,
    FOP_LIMIT = 3
};

enum zOptGoal
{
    FOG_NONE = 0,
    FOG_MINWEIGHT = 1
};

enum zOptVary
{
    FOV_NONE = 0,
    FOV_RODAREA = 1,
    FOV_RODTORSION = 2,
    FOV_BARAREA = 3,
    FOV_BARI1 = 4,
    FOV_BARI2 = 5,
    FOV_BARTORSION = 6,
    FOV_PLATETHICKNESS = 7
};

enum zOptLimit
{
    FOL_NONE = 0,
    FOL_NODXDISP = 1,
    FOL_NODYDISP = 2,
    FOL_NODZDISP = 3,
    FOL_NODXRDISP = 4,
    FOL_NODYRDISP = 5,
    FOL_NODZRDISP = 6,
    FOL_RODAXIALSTRESS = 7,
    FOL_RODTORSIONSTRESS = 8,
    FOL_RODAXIALSTRAIN = 9,
    FOL_RODTORSIONSTRAIN = 10,
    FOL_BARAXIALSTRESS = 11,
    FOL_BARMAXSTRESS = 12,
    FOL_BARMINSTRESS = 13,
    FOL_BARAXIALSTRAIN = 14,
    FOL_BARMAXSTRAIN = 15,
    FOL_BARMINSTRAIN = 16,
    FOL_PLTXNORMALSTRESS = 17,
    FOL_PLTYNORMALSTRESS = 18,
    FOL_PLTXYSHEARSTRESS = 19,
    FOL_PLTMAXPRINSTRESS = 20,
    FOL_PLTMINPRINSTRESS = 21,
    FOL_PLTVONMISESSTRESS = 22,
    FOL_PLTXNORMALSTRAIN = 23,
    FOL_PLTYNORMALSTRAIN = 24,
    FOL_PLTXYSHEARSTRAIN = 25,
    FOL_PLTMAXPRINSTRAIN = 26,
    FOL_PLTMINPRINSTRAIN = 27,
    FOL_PLTVONMISESSTRAIN = 28,
    FOL_FREQUENCY = 29,
    FOL_EIGENVALUE = 30
};

struct __declspec(uuid("d3a5591b-080c-11d5-9468-001083fff11c"))
Optim;
    // [ default ] dispinterface IOptim

struct __declspec(uuid("f7e2a8a0-0820-11d5-9468-001083fff11c"))
IOutput : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcomponent,put=Putcomponent))
    int component[];
    __declspec(property(get=Getvalue,put=Putvalue))
    double value[];
    __declspec(property(get=Getcategory,put=Putcategory))
    enum zOutputType category;
    __declspec(property(get=Getlocation,put=Putlocation))
    enum zDataType location;
    __declspec(property(get=Getnonlinear,put=Putnonlinear))
    VARIANT_BOOL nonlinear;
    __declspec(property(get=Gethascomponent,put=Puthascomponent))
    int hascomponent;
    __declspec(property(get=Getcentroidtotal,put=Putcentroidtotal))
    VARIANT_BOOL centroidtotal;
    __declspec(property(get=Getmaxval,put=Putmaxval))
    double maxval;
    __declspec(property(get=Getminval,put=Putminval))
    double minval;
    __declspec(property(get=Getabsmaxval,put=Putabsmaxval))
    double absmaxval;
    __declspec(property(get=GetmaxvalID,put=PutmaxvalID))
    int maxvalID;
    __declspec(property(get=GetminvalID,put=PutminvalID))
    int minvalID;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getvcomponent,put=Putvcomponent))
    _variant_t vcomponent;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;
    __declspec(property(get=GetInitAsInteger,put=PutInitAsInteger))
    VARIANT_BOOL InitAsInteger;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int Getcomponent (
        int nVectorIndex );
    void Putcomponent (
        int nVectorIndex,
        int _arg2 );
    double Getvalue (
        int nVectorIndex );
    void Putvalue (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode GetOutputList (
        int * listcount,
        VARIANT * ID,
        VARIANT * value );
    enum zReturnCode GetScalarAtNode (
        int * listcount,
        VARIANT * ID,
        VARIANT * value );
    enum zReturnCode GetScalarAtElem (
        int * listcount,
        VARIANT * ID,
        VARIANT * value );
    enum zReturnCode PutOutputList (
        int listcount,
        const _variant_t & ID,
        const _variant_t & value );
    enum zReturnCode PutScalarAtNode (
        int listcount,
        const _variant_t & ID,
        const _variant_t & value );
    enum zReturnCode PutScalarAtElem (
        int listcount,
        const _variant_t & ID,
        const _variant_t & value );
    enum zReturnCode InitScalarAtNode (
        int OutputSet,
        int Vec,
        _bstr_t title,
        enum zOutputType category,
        VARIANT_BOOL nonlinear );
    enum zReturnCode InitVectorAtNode (
        int OutputSet,
        int Vec,
        int VecX,
        int VecY,
        int VecZ,
        _bstr_t title,
        enum zOutputType category,
        VARIANT_BOOL nonlinear );
    enum zReturnCode InitScalarAtElem (
        int OutputSet,
        int Vec,
        _bstr_t title,
        enum zOutputType category,
        VARIANT_BOOL nonlinear );
    enum zReturnCode InitElemWithCorner (
        int OutputSet,
        int Vec,
        int Vec1,
        int Vec2,
        int Vec3,
        int Vec4,
        int Vec5,
        int Vec6,
        int Vec7,
        int Vec8,
        _bstr_t title,
        enum zOutputType category,
        VARIANT_BOOL nonlinear );
    enum zReturnCode GetVectorAtNode (
        int * listcount,
        VARIANT * ID,
        VARIANT * x,
        VARIANT * y,
        VARIANT * z );
    enum zReturnCode PutVectorAtNode (
        int listcount,
        const _variant_t & ID,
        const _variant_t & x,
        const _variant_t & y,
        const _variant_t & z );
    enum zReturnCode GetElemWithCorner (
        int * listcount,
        int * maxcorner,
        VARIANT * ID,
        VARIANT * centroid,
        VARIANT * c1,
        VARIANT * c2,
        VARIANT * c3,
        VARIANT * c4,
        VARIANT * c5,
        VARIANT * c6,
        VARIANT * c7,
        VARIANT * c8 );
    enum zReturnCode PutElemWithCorner (
        int listcount,
        int maxcorner,
        const _variant_t & ID,
        const _variant_t & centroid,
        const _variant_t & c1,
        const _variant_t & c2,
        const _variant_t & c3,
        const _variant_t & c4,
        const _variant_t & c5,
        const _variant_t & c6,
        const _variant_t & c7,
        const _variant_t & c8 );
    enum zReturnCode GetOutputListAtID (
        const _variant_t & ID,
        const _variant_t & defaultVal,
        VARIANT * value );
    enum zReturnCode GetOutputListAtSet (
        int idSET,
        const _variant_t & defaultVal,
        VARIANT * value );
    enum zReturnCode GetScalarAtNodeSet (
        int idSET,
        VARIANT * value );
    enum zReturnCode GetVectorAtNodeSet (
        int idSET,
        VARIANT * x,
        VARIANT * y,
        VARIANT * z );
    enum zReturnCode GetScalarAtElemSet (
        int idSET,
        VARIANT * value );
    enum zReturnCode GetElemWithCornerSet (
        int idSET,
        int * maxcorner,
        VARIANT * centroid,
        VARIANT * c1,
        VARIANT * c2,
        VARIANT * c3,
        VARIANT * c4,
        VARIANT * c5,
        VARIANT * c6,
        VARIANT * c7,
        VARIANT * c8 );
    enum zReturnCode GetFromSet (
        int setID,
        int entID );
    enum zReturnCode FindMaxMin (
        int idSET,
        VARIANT_BOOL bUseCornersOrComponents,
        int * minID,
        double * minVALUE,
        int * maxID,
        double * maxVALUE );
    enum zReturnCode InitScalarAtBeam (
        int OutputSet,
        int VecA,
        int VecB,
        _bstr_t title,
        int vecstyle,
        enum zOutputType category,
        VARIANT_BOOL nonlinear,
        VARIANT_BOOL add_endAB_titles );
    enum zReturnCode PutScalarAtBeam (
        int listcount,
        const _variant_t & ID,
        const _variant_t & ValA,
        const _variant_t & ValB );
    enum zReturnCode GetVectorAtSingleNode (
        int nNodeID,
        double * x,
        double * y,
        double * z );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    int CountSet ( );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode GetModel (
        __int64 * nModelID );
    enum zReturnCode SetModel (
        __int64 nModelID );
    enum zReturnCode clear ( );
    enum zReturnCode SetComplexOptions (
        VARIANT_BOOL bExpandComplex,
        double dComplexPhase );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode FirstInSet (
        int nSetID );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    enum zOutputType Getcategory ( );
    void Putcategory ( enum zOutputType _val );
    enum zDataType Getlocation ( );
    void Putlocation ( enum zDataType _val );
    VARIANT_BOOL Getnonlinear ( );
    void Putnonlinear ( VARIANT_BOOL _val );
    int Gethascomponent ( );
    void Puthascomponent ( int _val );
    VARIANT_BOOL Getcentroidtotal ( );
    void Putcentroidtotal ( VARIANT_BOOL _val );
    double Getmaxval ( );
    void Putmaxval ( double _val );
    double Getminval ( );
    void Putminval ( double _val );
    double Getabsmaxval ( );
    void Putabsmaxval ( double _val );
    int GetmaxvalID ( );
    void PutmaxvalID ( int _val );
    int GetminvalID ( );
    void PutminvalID ( int _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    _variant_t Getvcomponent ( );
    void Putvcomponent ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
    VARIANT_BOOL GetInitAsInteger ( );
    void PutInitAsInteger ( VARIANT_BOOL _val );
};

struct __declspec(uuid("f7e2a8a2-0820-11d5-9468-001083fff11c"))
Output;
    // [ default ] dispinterface IOutput

struct __declspec(uuid("423c4774-0814-11d5-9468-001083fff11c"))
IOutputSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getvalue,put=Putvalue))
    double value;
    __declspec(property(get=Getprogram,put=Putprogram))
    enum zAnalysisProgram program;
    __declspec(property(get=Getanalysis,put=Putanalysis))
    enum zAnalysisType analysis;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getnotes,put=Putnotes))
    _bstr_t notes;
    __declspec(property(get=Getstudy,put=Putstudy))
    int study;
    __declspec(property(get=Getcombination_type,put=Putcombination_type))
    enum zResultsProcessType combination_type;
    __declspec(property(get=Getnas_case,put=Putnas_case))
    int nas_case;
    __declspec(property(get=Getnas_revision,put=Putnas_revision))
    int nas_revision;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IOutputPtr Vector (
        int entID );
    int OutputVectors (
        int nVectorSetID );
    int SetCombination (
        enum zResultsProcessType enProcessType,
        int nNumFactors,
        const _variant_t & vnSetIDArray,
        const _variant_t & vdFactorArray );
    int SetStudyCombination (
        enum zResultsProcessType enProcessType,
        int nStudyID );
    int ExpandCombination (
        VARIANT_BOOL bSetTitles );
    enum zReturnCode SetComplexOptions (
        VARIANT_BOOL bExpandComplex,
        double dComplexPhase );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );

    // Properties:
    double Getvalue ( );
    void Putvalue ( double _val );
    enum zAnalysisProgram Getprogram ( );
    void Putprogram ( enum zAnalysisProgram _val );
    enum zAnalysisType Getanalysis ( );
    void Putanalysis ( enum zAnalysisType _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    _bstr_t Getnotes ( );
    void Putnotes ( _bstr_t _val );
    int Getstudy ( );
    void Putstudy ( int _val );
    enum zResultsProcessType Getcombination_type ( );
    void Putcombination_type ( enum zResultsProcessType _val );
    int Getnas_case ( );
    void Putnas_case ( int _val );
    int Getnas_revision ( );
    void Putnas_revision ( int _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zResultsProcessType
{
    FRPROC_NONE = 0,
    FRPROC_LINEAR = 1,
    FRPROC_RSS = 2,
    FRPROC_ENV_MAX = 3,
    FRPROC_ENV_MIN = 4,
    FRPROC_ENV_ABSMAX = 5,
    FRPROC_ENV_MAX_SETID = 6,
    FRPROC_ENV_MIN_SETID = 7,
    FRPROC_ENV_ABSMAX_SETID = 8
};

struct __declspec(uuid("423c4776-0814-11d5-9468-001083fff11c"))
OutputSet;
    // [ default ] dispinterface IOutputSet

struct __declspec(uuid("a97fa4fa-09ca-11d5-946c-001083fff11c"))
IPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getz,put=Putz))
    double z;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Gettype,put=Puttype))
    enum zPointType type;
    __declspec(property(get=GetdefCSys,put=PutdefCSys))
    int defCSys;
    __declspec(property(get=GetattrPID,put=PutattrPID))
    int attrPID;
    __declspec(property(get=GetEngine,put=PutEngine))
    int Engine;
    __declspec(property(get=GetAddress,put=PutAddress))
    int Address;
    __declspec(property(get=GetMeshSize,put=PutMeshSize))
    double MeshSize;
    __declspec(property(get=Getxyz,put=Putxyz))
    _variant_t xyz;
    __declspec(property(get=GetInCombinedCurve,put=PutInCombinedCurve))
    int InCombinedCurve;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode Put (
        int entID );
    enum zReturnCode Nodes (
        int * numNodes,
        VARIANT * NodeID );
    enum zReturnCode NodesAsSet (
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode Curves (
        enum zCombinedMode nCombinedMode,
        int * numCurves,
        VARIANT * curveID );
    enum zReturnCode CurvesAsSet (
        enum zCombinedMode nCombinedMode,
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode SurfacesAsSet (
        enum zCombinedMode nCombinedMode,
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode GetClosest (
        const _variant_t & vXYZ );
    enum zReturnCode Solid (
        int * pnSolidID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getz ( );
    void Putz ( double _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    enum zPointType Gettype ( );
    void Puttype ( enum zPointType _val );
    int GetdefCSys ( );
    void PutdefCSys ( int _val );
    int GetattrPID ( );
    void PutattrPID ( int _val );
    int GetEngine ( );
    void PutEngine ( int _val );
    int GetAddress ( );
    void PutAddress ( int _val );
    double GetMeshSize ( );
    void PutMeshSize ( double _val );
    _variant_t Getxyz ( );
    void Putxyz ( const _variant_t & _val );
    int GetInCombinedCurve ( );
    void PutInCombinedCurve ( int _val );
    double GetScaleFactor ( );
    void PutScaleFactor ( double _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zPointType
{
    FPT_DEFAULT = 0,
    FPT_SOLID = 1
};

struct __declspec(uuid("a97fa4fc-09ca-11d5-946c-001083fff11c"))
Point;
    // [ default ] dispinterface IPoint

struct __declspec(uuid("0d85757c-0374-11d5-9465-001083fff11c"))
IReport : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetdataType,put=PutdataType))
    enum zDataType dataType;
    __declspec(property(get=GetCenterHeader1,put=PutCenterHeader1))
    VARIANT_BOOL CenterHeader1;
    __declspec(property(get=GetCenterHeader2,put=PutCenterHeader2))
    VARIANT_BOOL CenterHeader2;
    __declspec(property(get=GetDbSpHeader1,put=PutDbSpHeader1))
    VARIANT_BOOL DbSpHeader1;
    __declspec(property(get=GetDbSpHeader2,put=PutDbSpHeader2))
    VARIANT_BOOL DbSpHeader2;
    __declspec(property(get=GetHeader1,put=PutHeader1))
    _bstr_t Header1;
    __declspec(property(get=GetHeader2,put=PutHeader2))
    _bstr_t Header2;
    __declspec(property(get=GetColumnHeader,put=PutColumnHeader))
    _bstr_t ColumnHeader;
    __declspec(property(get=GetData1,put=PutData1))
    _bstr_t Data1;
    __declspec(property(get=GetData2,put=PutData2))
    _bstr_t Data2;
    __declspec(property(get=GetData3,put=PutData3))
    _bstr_t Data3;
    __declspec(property(get=GetData4,put=PutData4))
    _bstr_t Data4;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    enum zDataType GetdataType ( );
    void PutdataType ( enum zDataType _val );
    VARIANT_BOOL GetCenterHeader1 ( );
    void PutCenterHeader1 ( VARIANT_BOOL _val );
    VARIANT_BOOL GetCenterHeader2 ( );
    void PutCenterHeader2 ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDbSpHeader1 ( );
    void PutDbSpHeader1 ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDbSpHeader2 ( );
    void PutDbSpHeader2 ( VARIANT_BOOL _val );
    _bstr_t GetHeader1 ( );
    void PutHeader1 ( _bstr_t _val );
    _bstr_t GetHeader2 ( );
    void PutHeader2 ( _bstr_t _val );
    _bstr_t GetColumnHeader ( );
    void PutColumnHeader ( _bstr_t _val );
    _bstr_t GetData1 ( );
    void PutData1 ( _bstr_t _val );
    _bstr_t GetData2 ( );
    void PutData2 ( _bstr_t _val );
    _bstr_t GetData3 ( );
    void PutData3 ( _bstr_t _val );
    _bstr_t GetData4 ( );
    void PutData4 ( _bstr_t _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("0d85757e-0374-11d5-9465-001083fff11c"))
Report;
    // [ default ] dispinterface IReport

struct __declspec(uuid("28bcba84-0d7f-11d5-9470-001083fff11c"))
ISolid : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVolSurface,put=PutVolSurface))
    int VolSurface[];
    __declspec(property(get=GetVolReverse,put=PutVolReverse))
    VARIANT_BOOL VolReverse[][];
    __declspec(property(get=Gettype,put=Puttype))
    enum zDataType type;
    __declspec(property(get=GetattrPID,put=PutattrPID))
    int attrPID;
    __declspec(property(get=GetVolColor,put=PutVolColor))
    enum zColor VolColor;
    __declspec(property(get=GetVolLayer,put=PutVolLayer))
    int VolLayer;
    __declspec(property(get=GetVolType,put=PutVolType))
    enum zVolumeType VolType;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=GetAddress,put=PutAddress))
    int Address;
    __declspec(property(get=GetEngine,put=PutEngine))
    int Engine;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetvVolSurface,put=PutvVolSurface))
    _variant_t vVolSurface;
    __declspec(property(get=GetvVolReverse,put=PutvVolReverse))
    _variant_t vVolReverse;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int GetVolSurface (
        int nVectorIndex );
    void PutVolSurface (
        int nVectorIndex,
        int _arg2 );
    VARIANT_BOOL GetVolReverse (
        int nRowIndex,
        int nColIndex );
    void PutVolReverse (
        int nRowIndex,
        int nColIndex,
        VARIANT_BOOL _arg3 );
    enum zReturnCode Curves (
        enum zCombinedMode nCombinedMode,
        int * numCurves,
        VARIANT * curveID );
    enum zReturnCode Surfaces (
        enum zCombinedMode nCombinedMode,
        int * numSurfs,
        VARIANT * surfaceID );
    enum zReturnCode MassProp (
        double * Area,
        double * volume,
        VARIANT * cg,
        VARIANT * Inertia );
    enum zReturnCode Export (
        _bstr_t fName );
    enum zReturnCode IsSolid ( );
    enum zReturnCode IsSheet ( );
    enum zReturnCode IsWire ( );
    enum zReturnCode Facets (
        int * numFacets,
        VARIANT * xyzFacet );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode Nodes (
        VARIANT_BOOL getBoundary,
        VARIANT_BOOL getInterior,
        int * numNodes,
        VARIANT * NodeID );
    enum zReturnCode Elements (
        int * numElems,
        VARIANT * elemID );
    enum zReturnCode BoundingBox (
        VARIANT * box );
    enum zReturnCode CurvesAsSet (
        enum zCombinedMode nCombinedMode,
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode SurfacesAsSet (
        enum zCombinedMode nCombinedMode,
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode ElementsAsSet (
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode NodesAsSet (
        VARIANT_BOOL getBoundary,
        VARIANT_BOOL getInterior,
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode IsGeneral ( );
    enum zReturnCode FreeCurvesAsSet (
        enum zCombinedMode nCombinedMode,
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode Points (
        int * numPoints,
        VARIANT * pointID );
    enum zReturnCode PointsAsSet (
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode ElementsAsSet2 (
        VARIANT_BOOL bInSolid,
        VARIANT_BOOL bOnSurfaces,
        VARIANT_BOOL bOnCurves,
        VARIANT_BOOL bOnPoints,
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode SheetFacesAsSet (
        int nSetID,
        int nInsideSolidSetID );
    enum zReturnCode WireCurvesAsSet (
        int nSetID,
        int nInsideSolidSetID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Inside (
        const _variant_t & vXYZ,
        int * nInsideCode );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    enum zDataType Gettype ( );
    void Puttype ( enum zDataType _val );
    int GetattrPID ( );
    void PutattrPID ( int _val );
    enum zColor GetVolColor ( );
    void PutVolColor ( enum zColor _val );
    int GetVolLayer ( );
    void PutVolLayer ( int _val );
    enum zVolumeType GetVolType ( );
    void PutVolType ( enum zVolumeType _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    int GetAddress ( );
    void PutAddress ( int _val );
    int GetEngine ( );
    void PutEngine ( int _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    _variant_t GetvVolSurface ( );
    void PutvVolSurface ( const _variant_t & _val );
    _variant_t GetvVolReverse ( );
    void PutvVolReverse ( const _variant_t & _val );
    double GetScaleFactor ( );
    void PutScaleFactor ( double _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zVolumeType
{
    FVO_BRICK = 0,
    FVO_WEDGE = 1,
    FVO_PYRAMID = 2,
    FVO_TETRA = 3
};

struct __declspec(uuid("28bcba86-0d7f-11d5-9470-001083fff11c"))
Solid;
    // [ default ] dispinterface ISolid

struct __declspec(uuid("aa0fcdbc-0cb0-11d5-946f-001083fff11c"))
ISurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStdCurve,put=PutStdCurve))
    int StdCurve[];
    __declspec(property(get=GetStdCurveReverse,put=PutStdCurveReverse))
    VARIANT_BOOL StdCurveReverse[];
    __declspec(property(get=GetapproachData,put=PutapproachData))
    int approachData[];
    __declspec(property(get=GetDivisions,put=PutDivisions))
    int Divisions[];
    __declspec(property(get=GetMeshPoint,put=PutMeshPoint))
    int MeshPoint[];
    __declspec(property(get=GetBoundaryCurve,put=PutBoundaryCurve))
    int BoundaryCurve[];
    __declspec(property(get=GetBoundaryFlag,put=PutBoundaryFlag))
    int BoundaryFlag[];
    __declspec(property(get=Gettype,put=Puttype))
    enum zSurfaceType type;
    __declspec(property(get=GetattrPID,put=PutattrPID))
    int attrPID;
    __declspec(property(get=GetattrOffset,put=PutattrOffset))
    double attrOffset;
    __declspec(property(get=Getapproach,put=Putapproach))
    enum zMeshApproach approach;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=GetAddress,put=PutAddress))
    int Address;
    __declspec(property(get=GetEngine,put=PutEngine))
    int Engine;
    __declspec(property(get=GetSuppressed,put=PutSuppressed))
    VARIANT_BOOL Suppressed;
    __declspec(property(get=GetMeshSizeInterior,put=PutMeshSizeInterior))
    double MeshSizeInterior;
    __declspec(property(get=GetMeshSizeChord,put=PutMeshSizeChord))
    double MeshSizeChord;
    __declspec(property(get=GetBoundaryMode,put=PutBoundaryMode))
    int BoundaryMode;
    __declspec(property(get=GetBoundaryOnSurface,put=PutBoundaryOnSurface))
    int BoundaryOnSurface;
    __declspec(property(get=GetvStdCurve,put=PutvStdCurve))
    _variant_t vStdCurve;
    __declspec(property(get=GetvStdCurveReverse,put=PutvStdCurveReverse))
    _variant_t vStdCurveReverse;
    __declspec(property(get=GetvapproachData,put=PutvapproachData))
    _variant_t vapproachData;
    __declspec(property(get=GetvDivisions,put=PutvDivisions))
    _variant_t vDivisions;
    __declspec(property(get=GetvMeshPoint,put=PutvMeshPoint))
    _variant_t vMeshPoint;
    __declspec(property(get=GetvBoundaryCurve,put=PutvBoundaryCurve))
    _variant_t vBoundaryCurve;
    __declspec(property(get=GetvBoundaryFlag,put=PutvBoundaryFlag))
    _variant_t vBoundaryFlag;
    __declspec(property(get=GetQuadMeshLayers,put=PutQuadMeshLayers))
    int QuadMeshLayers;
    __declspec(property(get=GetInternalToBoundary,put=PutInternalToBoundary))
    int InternalToBoundary;
    __declspec(property(get=GetattrTopology,put=PutattrTopology))
    enum zTopologyType attrTopology;
    __declspec(property(get=GetattrMesher,put=PutattrMesher))
    enum zMesherType attrMesher;
    __declspec(property(get=GetattrMappedLevel,put=PutattrMappedLevel))
    int attrMappedLevel;
    __declspec(property(get=GetattrMapSubdivisions,put=PutattrMapSubdivisions))
    VARIANT_BOOL attrMapSubdivisions;
    __declspec(property(get=GetattrMapEqualOnly,put=PutattrMapEqualOnly))
    VARIANT_BOOL attrMapEqualOnly;
    __declspec(property(get=GetattrMapAltTri,put=PutattrMapAltTri))
    VARIANT_BOOL attrMapAltTri;
    __declspec(property(get=GetattrMapRightBias,put=PutattrMapRightBias))
    VARIANT_BOOL attrMapRightBias;
    __declspec(property(get=GetattrMapAngleDeviation,put=PutattrMapAngleDeviation))
    double attrMapAngleDeviation;
    __declspec(property(get=GetattrMapMinCornerAngle,put=PutattrMapMinCornerAngle))
    double attrMapMinCornerAngle;
    __declspec(property(get=GetattrMidsideGeom,put=PutattrMidsideGeom))
    VARIANT_BOOL attrMidsideGeom;
    __declspec(property(get=GetattrMidsideAngle,put=PutattrMidsideAngle))
    double attrMidsideAngle;
    __declspec(property(get=GetattrMinBetween,put=PutattrMinBetween))
    int attrMinBetween;
    __declspec(property(get=GetattrMaxAspect,put=PutattrMaxAspect))
    double attrMaxAspect;
    __declspec(property(get=GetattrQuickCutNodes,put=PutattrQuickCutNodes))
    int attrQuickCutNodes;
    __declspec(property(get=GetattrQuadCutAngle,put=PutattrQuadCutAngle))
    double attrQuadCutAngle;
    __declspec(property(get=GetattrSmoothLaplacian,put=PutattrSmoothLaplacian))
    VARIANT_BOOL attrSmoothLaplacian;
    __declspec(property(get=GetattrSmoothIter,put=PutattrSmoothIter))
    int attrSmoothIter;
    __declspec(property(get=GetattrSmoothTolerance,put=PutattrSmoothTolerance))
    double attrSmoothTolerance;
    __declspec(property(get=GetattrConnectEdgeNodes,put=PutattrConnectEdgeNodes))
    VARIANT_BOOL attrConnectEdgeNodes;
    __declspec(property(get=GetattrConnectEdgeNodeTol,put=PutattrConnectEdgeNodeTol))
    double attrConnectEdgeNodeTol;
    __declspec(property(get=GetattrOffsetFrom,put=PutattrOffsetFrom))
    enum zMeshOffsetFrom attrOffsetFrom;
    __declspec(property(get=GetattrInitialized,put=PutattrInitialized))
    VARIANT_BOOL attrInitialized;
    __declspec(property(get=GetattrPostMeshCleanup,put=PutattrPostMeshCleanup))
    VARIANT_BOOL attrPostMeshCleanup;
    __declspec(property(get=GetattrMapSplitQuads,put=PutattrMapSplitQuads))
    VARIANT_BOOL attrMapSplitQuads;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetattrVertexLoopsAsHardPoints,put=PutattrVertexLoopsAsHardPoints))
    VARIANT_BOOL attrVertexLoopsAsHardPoints;
    __declspec(property(get=GetattrMaxQuads,put=PutattrMaxQuads))
    VARIANT_BOOL attrMaxQuads;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int GetStdCurve (
        int nVectorIndex );
    void PutStdCurve (
        int nVectorIndex,
        int _arg2 );
    VARIANT_BOOL GetStdCurveReverse (
        int nVectorIndex );
    void PutStdCurveReverse (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    int GetapproachData (
        int nVectorIndex );
    void PutapproachData (
        int nVectorIndex,
        int _arg2 );
    int GetDivisions (
        int nVectorIndex );
    void PutDivisions (
        int nVectorIndex,
        int _arg2 );
    int GetMeshPoint (
        int nVectorIndex );
    void PutMeshPoint (
        int nVectorIndex,
        int _arg2 );
    int GetBoundaryCurve (
        int nVectorIndex );
    void PutBoundaryCurve (
        int nVectorIndex,
        int _arg2 );
    int GetBoundaryFlag (
        int nVectorIndex );
    void PutBoundaryFlag (
        int nVectorIndex,
        int _arg2 );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode Inside (
        double u,
        double v );
    enum zReturnCode ParamToXYZ (
        double u,
        double v,
        VARIANT * xyz );
    enum zReturnCode XYZToParam (
        const _variant_t & xyz,
        double * u,
        double * v );
    enum zReturnCode cg (
        VARIANT * xyz );
    enum zReturnCode Tangents (
        double u,
        double v,
        VARIANT * stan,
        VARIANT * ttan );
    enum zReturnCode normal (
        double u,
        double v,
        VARIANT * normal );
    enum zReturnCode ProjectOnto (
        const _variant_t & initial,
        double tolerance,
        VARIANT * projection );
    enum zReturnCode Curves (
        enum zCombinedMode nCombinedMode,
        int * numCurves,
        VARIANT * curveID );
    enum zReturnCode Points (
        enum zCombinedMode nCombinedMode,
        int * numPoints,
        VARIANT * pointID );
    enum zReturnCode EndPoints (
        int * numPoints,
        VARIANT * pointID );
    enum zReturnCode Planar (
        VARIANT * base,
        VARIANT * normal );
    enum zReturnCode Cylindrical (
        double * radius,
        VARIANT * base,
        VARIANT * Axis );
    enum zReturnCode Area (
        double * Area );
    enum zReturnCode Facets (
        int * numFacets,
        VARIANT * xyzFacet );
    enum zReturnCode Nodes (
        VARIANT_BOOL getBoundary,
        VARIANT_BOOL getInterior,
        int * numNodes,
        VARIANT * NodeID );
    enum zReturnCode Elements (
        int * numElems,
        VARIANT * elemID );
    enum zReturnCode ElementFaces (
        VARIANT_BOOL getPlaneElem,
        VARIANT_BOOL getSolidElem,
        VARIANT_BOOL requireElemAttach,
        int * numFaces,
        VARIANT * elemID,
        VARIANT * faceID );
    enum zReturnCode ElementsWithFaces (
        int * numElems,
        VARIANT * elemID );
    enum zReturnCode IsPlane ( );
    enum zReturnCode IsCylinder ( );
    enum zReturnCode IsSphere ( );
    enum zReturnCode IsCone ( );
    enum zReturnCode IsTorus ( );
    enum zReturnCode Spherical (
        double * radius,
        VARIANT * center );
    enum zReturnCode Conical (
        double * radius,
        double * angle,
        VARIANT * base,
        VARIANT * Axis );
    enum zReturnCode Toroidal (
        double * radius1,
        double * radius2,
        VARIANT * base,
        VARIANT * Axis );
    enum zReturnCode HasPole ( );
    enum zReturnCode RationalParamToXYZ (
        double u,
        double v,
        VARIANT * xyz );
    enum zReturnCode BoundingBox (
        VARIANT * box );
    enum zReturnCode MaxNormalDeviation (
        double dLimit,
        double * dAngle );
    enum zReturnCode NormalAtXYZ (
        int nLocations,
        const _variant_t & xyz,
        VARIANT * normal );
    enum zReturnCode NormalBox (
        VARIANT * box );
    enum zReturnCode BoundarySurfaces (
        int * numSurf,
        VARIANT * surfID );
    enum zReturnCode AdjacentSurfaces (
        enum zCombinedMode nCombinedMode,
        int * numSurfaces,
        VARIANT * surfaceID );
    enum zReturnCode BoundarySurfacesAsSet (
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode AdjacentSurfacesAsSet (
        enum zCombinedMode nCombinedMode,
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode CurvesAsSet (
        enum zCombinedMode nCombinedMode,
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode PointsAsSet (
        enum zCombinedMode nCombinedMode,
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode EndPointsAsSet (
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode ElementsAsSet (
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode NodesAsSet (
        VARIANT_BOOL getBoundary,
        VARIANT_BOOL getInterior,
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode Solid (
        int * pnSolidID );
    enum zReturnCode InsideXYZ (
        const _variant_t & xyz );
    enum zReturnCode IsBoundingSolidRegion ( );
    enum zReturnCode ResetMeshAttr ( );
    enum zReturnCode Mesh (
        int propID,
        enum zTopologyType elemShape,
        VARIANT_BOOL bAllowMapped );
    enum zReturnCode AngleAtPoint (
        int nPtID,
        double * dAngle,
        VARIANT * vBisector,
        VARIANT * vNormal );
    enum zReturnCode BoundingSize (
        VARIANT * pvDim,
        VARIANT * pvLongDir,
        VARIANT * pvNormalDir );
    enum zReturnCode ApproximateArea (
        double * Area );
    enum zReturnCode MinRadiiOfCurvature (
        double * pdConcaveRadius,
        double * pdConvexRadius,
        VARIANT_BOOL * pbIsPlanar );
    enum zReturnCode CurveLoops (
        enum zCombinedMode nCombinedMode,
        int * numLoops,
        int * numCurves,
        VARIANT * curveID );
    enum zReturnCode CurvesAtPoint (
        int nPtID,
        int * PrevCurveID,
        int * NextCurveID );
    enum zReturnCode CommonCurvesAsSet (
        enum zCombinedMode nCombinedMode,
        int nOtherSurfaceID,
        int nSetID,
        VARIANT_BOOL bClear );
    enum zReturnCode FindMappedMeshingCorners (
        int nNumDesired,
        int * pnNumFound,
        VARIANT * pnCornerList );
    enum zReturnCode IsSuppressed ( );
    enum zReturnCode Curvature (
        const _variant_t & vXYZ,
        double * pdRadius1,
        VARIANT * vCurveDir1,
        double * pdRadius2,
        VARIANT * vCurveDir2,
        VARIANT * vNormDir );
    enum zReturnCode IsMappedApproach ( );
    enum zReturnCode IsMappable (
        VARIANT_BOOL bForceBlends,
        double dMaxBlendRadius,
        double dMergeAngle,
        int * pnNumEdges,
        VARIANT * pnCornerPoints,
        VARIANT * pdEdgeLength,
        int * pnNumEdgeCurves,
        VARIANT * pnEdgeCurves );
    enum zReturnCode AddMeshPoint (
        int nPointID );
    int CountMeshPoint ( );
    enum zReturnCode IsMultiLoop ( );
    enum zReturnCode PointLoops (
        enum zCombinedMode nCombinedMode,
        int * numLoops,
        int * numPoints,
        VARIANT * pointID );
    enum zReturnCode ProjectToClosest (
        const _variant_t & vOrig,
        VARIANT * vProj );
    enum zReturnCode ProjectAlongVector (
        VARIANT_BOOL bBothDirections,
        const _variant_t & vAlong,
        const _variant_t & vOrig,
        VARIANT * vProj );
    enum zReturnCode IsBlend (
        int * blendtype,
        double * dRadius );
    enum zReturnCode BoundingBoxInCSys (
        int nCSysID,
        VARIANT * box );
    enum zReturnCode RemoveMeshPoint (
        int nPointID );
    enum zReturnCode RemoveAllMeshPoints ( );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    enum zSurfaceType Gettype ( );
    void Puttype ( enum zSurfaceType _val );
    int GetattrPID ( );
    void PutattrPID ( int _val );
    double GetattrOffset ( );
    void PutattrOffset ( double _val );
    enum zMeshApproach Getapproach ( );
    void Putapproach ( enum zMeshApproach _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    int GetAddress ( );
    void PutAddress ( int _val );
    int GetEngine ( );
    void PutEngine ( int _val );
    VARIANT_BOOL GetSuppressed ( );
    void PutSuppressed ( VARIANT_BOOL _val );
    double GetMeshSizeInterior ( );
    void PutMeshSizeInterior ( double _val );
    double GetMeshSizeChord ( );
    void PutMeshSizeChord ( double _val );
    int GetBoundaryMode ( );
    void PutBoundaryMode ( int _val );
    int GetBoundaryOnSurface ( );
    void PutBoundaryOnSurface ( int _val );
    _variant_t GetvStdCurve ( );
    void PutvStdCurve ( const _variant_t & _val );
    _variant_t GetvStdCurveReverse ( );
    void PutvStdCurveReverse ( const _variant_t & _val );
    _variant_t GetvapproachData ( );
    void PutvapproachData ( const _variant_t & _val );
    _variant_t GetvDivisions ( );
    void PutvDivisions ( const _variant_t & _val );
    _variant_t GetvMeshPoint ( );
    void PutvMeshPoint ( const _variant_t & _val );
    _variant_t GetvBoundaryCurve ( );
    void PutvBoundaryCurve ( const _variant_t & _val );
    _variant_t GetvBoundaryFlag ( );
    void PutvBoundaryFlag ( const _variant_t & _val );
    int GetQuadMeshLayers ( );
    void PutQuadMeshLayers ( int _val );
    int GetInternalToBoundary ( );
    void PutInternalToBoundary ( int _val );
    enum zTopologyType GetattrTopology ( );
    void PutattrTopology ( enum zTopologyType _val );
    enum zMesherType GetattrMesher ( );
    void PutattrMesher ( enum zMesherType _val );
    int GetattrMappedLevel ( );
    void PutattrMappedLevel ( int _val );
    VARIANT_BOOL GetattrMapSubdivisions ( );
    void PutattrMapSubdivisions ( VARIANT_BOOL _val );
    VARIANT_BOOL GetattrMapEqualOnly ( );
    void PutattrMapEqualOnly ( VARIANT_BOOL _val );
    VARIANT_BOOL GetattrMapAltTri ( );
    void PutattrMapAltTri ( VARIANT_BOOL _val );
    VARIANT_BOOL GetattrMapRightBias ( );
    void PutattrMapRightBias ( VARIANT_BOOL _val );
    double GetattrMapAngleDeviation ( );
    void PutattrMapAngleDeviation ( double _val );
    double GetattrMapMinCornerAngle ( );
    void PutattrMapMinCornerAngle ( double _val );
    VARIANT_BOOL GetattrMidsideGeom ( );
    void PutattrMidsideGeom ( VARIANT_BOOL _val );
    double GetattrMidsideAngle ( );
    void PutattrMidsideAngle ( double _val );
    int GetattrMinBetween ( );
    void PutattrMinBetween ( int _val );
    double GetattrMaxAspect ( );
    void PutattrMaxAspect ( double _val );
    int GetattrQuickCutNodes ( );
    void PutattrQuickCutNodes ( int _val );
    double GetattrQuadCutAngle ( );
    void PutattrQuadCutAngle ( double _val );
    VARIANT_BOOL GetattrSmoothLaplacian ( );
    void PutattrSmoothLaplacian ( VARIANT_BOOL _val );
    int GetattrSmoothIter ( );
    void PutattrSmoothIter ( int _val );
    double GetattrSmoothTolerance ( );
    void PutattrSmoothTolerance ( double _val );
    VARIANT_BOOL GetattrConnectEdgeNodes ( );
    void PutattrConnectEdgeNodes ( VARIANT_BOOL _val );
    double GetattrConnectEdgeNodeTol ( );
    void PutattrConnectEdgeNodeTol ( double _val );
    enum zMeshOffsetFrom GetattrOffsetFrom ( );
    void PutattrOffsetFrom ( enum zMeshOffsetFrom _val );
    VARIANT_BOOL GetattrInitialized ( );
    void PutattrInitialized ( VARIANT_BOOL _val );
    VARIANT_BOOL GetattrPostMeshCleanup ( );
    void PutattrPostMeshCleanup ( VARIANT_BOOL _val );
    VARIANT_BOOL GetattrMapSplitQuads ( );
    void PutattrMapSplitQuads ( VARIANT_BOOL _val );
    double GetScaleFactor ( );
    void PutScaleFactor ( double _val );
    VARIANT_BOOL GetattrVertexLoopsAsHardPoints ( );
    void PutattrVertexLoopsAsHardPoints ( VARIANT_BOOL _val );
    VARIANT_BOOL GetattrMaxQuads ( );
    void PutattrMaxQuads ( VARIANT_BOOL _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zSurfaceType
{
    FSU_BILINEAR = 0,
    FSU_RULED = 1,
    FSU_REVOLUTION = 2,
    FSU_COONS = 3,
    FSU_BEZIER = 4,
    FSU_SOLID = 5,
    FSU_BSPLINE = 6,
    FSU_BOUNDARY = 7
};

enum zMeshApproach
{
    FMAP_NONE = 0,
    FMAP_FREE_PARAMETRIC = 1,
    FMAP_FREE_PLANAR = 2,
    FMAP_TRI_PARAMETRIC = 7,
    FMAP_TRI_PLANAR = 8,
    FMAP_MAP_4CORNER = 3,
    FMAP_MAP_3CORNER = 4,
    FMAP_MAP_3CORNERFAN = 5,
    FMAP_MAP_LINKED = 6
};

struct __declspec(uuid("aa0fcdbe-0cb0-11d5-946f-001083fff11c"))
Surface;
    // [ default ] dispinterface ISurface

struct __declspec(uuid("f809a642-09bc-11d5-946c-001083fff11c"))
ITmgBC : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Geti,put=Puti))
    int i[];
    __declspec(property(get=Getr,put=Putr))
    double r[];
    __declspec(property(get=Getc,put=Putc))
    int c[];
    __declspec(property(get=Getb,put=Putb))
    VARIANT_BOOL b[];
    __declspec(property(get=Getvi,put=Putvi))
    _variant_t vi;
    __declspec(property(get=Getvr,put=Putvr))
    _variant_t vr;
    __declspec(property(get=Getvc,put=Putvc))
    _variant_t vc;
    __declspec(property(get=Getvb,put=Putvb))
    _variant_t vb;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int Geti (
        int nVectorIndex );
    void Puti (
        int nVectorIndex,
        int _arg2 );
    double Getr (
        int nVectorIndex );
    void Putr (
        int nVectorIndex,
        double _arg2 );
    int Getc (
        int nVectorIndex );
    void Putc (
        int nVectorIndex,
        int _arg2 );
    VARIANT_BOOL Getb (
        int nVectorIndex );
    void Putb (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    enum zReturnCode GetAll (
        int entID,
        VARIANT * i,
        VARIANT * r,
        VARIANT * c );
    enum zReturnCode PutAll (
        int entID,
        const _variant_t & i,
        const _variant_t & r,
        const _variant_t & c );
    enum zReturnCode GetAll2 (
        int entID,
        VARIANT * i,
        VARIANT * r,
        VARIANT * b,
        VARIANT * c );
    enum zReturnCode PutAll2 (
        int entID,
        const _variant_t & i,
        const _variant_t & r,
        const _variant_t & b,
        const _variant_t & c );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _variant_t Getvi ( );
    void Putvi ( const _variant_t & _val );
    _variant_t Getvr ( );
    void Putvr ( const _variant_t & _val );
    _variant_t Getvc ( );
    void Putvc ( const _variant_t & _val );
    _variant_t Getvb ( );
    void Putvb ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("f809a644-09bc-11d5-946c-001083fff11c"))
TmgBC;
    // [ default ] dispinterface ITmgBC

struct __declspec(uuid("c1dd56f8-09bd-11d5-946c-001083fff11c"))
ITmgCtl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Geti,put=Puti))
    int i[];
    __declspec(property(get=Getr,put=Putr))
    double r[];
    __declspec(property(get=Getb,put=Putb))
    VARIANT_BOOL b[];
    __declspec(property(get=Getc,put=Putc))
    int c[];
    __declspec(property(get=Getvi,put=Putvi))
    _variant_t vi;
    __declspec(property(get=Getvr,put=Putvr))
    _variant_t vr;
    __declspec(property(get=Getvb,put=Putvb))
    _variant_t vb;
    __declspec(property(get=Getvc,put=Putvc))
    _variant_t vc;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int Geti (
        int nVectorIndex );
    void Puti (
        int nVectorIndex,
        int _arg2 );
    double Getr (
        int nVectorIndex );
    void Putr (
        int nVectorIndex,
        double _arg2 );
    VARIANT_BOOL Getb (
        int nVectorIndex );
    void Putb (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    int Getc (
        int nVectorIndex );
    void Putc (
        int nVectorIndex,
        int _arg2 );
    enum zReturnCode GetAll (
        int entID,
        VARIANT * i,
        VARIANT * r,
        VARIANT * b,
        VARIANT * c );
    enum zReturnCode PutAll (
        int entID,
        const _variant_t & i,
        const _variant_t & r,
        const _variant_t & b,
        const _variant_t & c );
    enum zReturnCode GetAll2 (
        int entID,
        VARIANT * i,
        VARIANT * r,
        VARIANT * b,
        VARIANT * c );
    enum zReturnCode PutAll2 (
        int entID,
        const _variant_t & i,
        const _variant_t & r,
        const _variant_t & b,
        const _variant_t & c );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _variant_t Getvi ( );
    void Putvi ( const _variant_t & _val );
    _variant_t Getvr ( );
    void Putvr ( const _variant_t & _val );
    _variant_t Getvb ( );
    void Putvb ( const _variant_t & _val );
    _variant_t Getvc ( );
    void Putvc ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("c1dd56fa-09bd-11d5-946c-001083fff11c"))
TmgCtl;
    // [ default ] dispinterface ITmgCtl

struct __declspec(uuid("5a0aef80-09be-11d5-946c-001083fff11c"))
ITmgInt : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Geti,put=Puti))
    int i[];
    __declspec(property(get=Getvi,put=Putvi))
    _variant_t vi;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int Geti (
        int nVectorIndex );
    void Puti (
        int nVectorIndex,
        int _arg2 );
    enum zReturnCode GetAll (
        int entID,
        VARIANT * i );
    enum zReturnCode PutAll (
        int entID,
        const _variant_t & i );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _variant_t Getvi ( );
    void Putvi ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("5a0aef82-09be-11d5-946c-001083fff11c"))
TmgInt;
    // [ default ] dispinterface ITmgInt

struct __declspec(uuid("ec1095a6-09be-11d5-946c-001083fff11c"))
ITmgOpt : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Geti,put=Puti))
    int i[];
    __declspec(property(get=Getr,put=Putr))
    double r[];
    __declspec(property(get=Getc,put=Putc))
    int c[];
    __declspec(property(get=Getvi,put=Putvi))
    _variant_t vi;
    __declspec(property(get=Getvr,put=Putvr))
    _variant_t vr;
    __declspec(property(get=Getvc,put=Putvc))
    _variant_t vc;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int Geti (
        int nVectorIndex );
    void Puti (
        int nVectorIndex,
        int _arg2 );
    double Getr (
        int nVectorIndex );
    void Putr (
        int nVectorIndex,
        double _arg2 );
    int Getc (
        int nVectorIndex );
    void Putc (
        int nVectorIndex,
        int _arg2 );
    enum zReturnCode GetAll (
        int entID,
        VARIANT * i,
        VARIANT * r,
        VARIANT * c );
    enum zReturnCode PutAll (
        int entID,
        const _variant_t & i,
        const _variant_t & r,
        const _variant_t & c );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _variant_t Getvi ( );
    void Putvi ( const _variant_t & _val );
    _variant_t Getvr ( );
    void Putvr ( const _variant_t & _val );
    _variant_t Getvc ( );
    void Putvc ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("ec1095a8-09be-11d5-946c-001083fff11c"))
TmgOpt;
    // [ default ] dispinterface ITmgOpt

struct __declspec(uuid("9d6a22b4-09be-11d5-946c-001083fff11c"))
ITmgReal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Geti,put=Puti))
    int i[];
    __declspec(property(get=Getr,put=Putr))
    double r[];
    __declspec(property(get=Getvi,put=Putvi))
    _variant_t vi;
    __declspec(property(get=Getvr,put=Putvr))
    _variant_t vr;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int Geti (
        int nVectorIndex );
    void Puti (
        int nVectorIndex,
        int _arg2 );
    double Getr (
        int nVectorIndex );
    void Putr (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode GetAll (
        int entID,
        VARIANT * i,
        VARIANT * r );
    enum zReturnCode PutAll (
        int entID,
        const _variant_t & i,
        const _variant_t & r );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _variant_t Getvi ( );
    void Putvi ( const _variant_t & _val );
    _variant_t Getvr ( );
    void Putvr ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("9d6a22b6-09be-11d5-946c-001083fff11c"))
TmgReal;
    // [ default ] dispinterface ITmgReal

struct __declspec(uuid("72473e7e-0369-11d5-9465-001083fff11c"))
IVar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getvalue,put=Putvalue))
    double value;
    __declspec(property(get=Getvarname,put=Putvarname))
    _bstr_t varname;
    __declspec(property(get=GetEquation,put=PutEquation))
    _bstr_t Equation;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int GetVarID (
        _bstr_t varname );
    double Evaluate ( );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode Define (
        _bstr_t varname,
        _bstr_t Equation );
    enum zReturnCode DefineReal (
        _bstr_t varname,
        double value );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    double Getvalue ( );
    void Putvalue ( double _val );
    _bstr_t Getvarname ( );
    void Putvarname ( _bstr_t _val );
    _bstr_t GetEquation ( );
    void PutEquation ( _bstr_t _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("72473e7f-0369-11d5-9465-001083fff11c"))
Var;
    // [ default ] dispinterface IVar

struct __declspec(uuid("037bfa00-f86c-11d4-9458-001083fff11c"))
IView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getrotation,put=Putrotation))
    double rotation[];
    __declspec(property(get=Getcenter,put=Putcenter))
    double center[];
    __declspec(property(get=GetXYOutputSet,put=PutXYOutputSet))
    int XYOutputSet[];
    __declspec(property(get=GetXYOutputData,put=PutXYOutputData))
    int XYOutputData[];
    __declspec(property(get=GetXYOutputEntity,put=PutXYOutputEntity))
    int XYOutputEntity[];
    __declspec(property(get=GetLight,put=PutLight))
    double Light[];
    __declspec(property(get=GetAxisLocation,put=PutAxisLocation))
    double AxisLocation[];
    __declspec(property(get=GetUserContourLevel,put=PutUserContourLevel))
    int UserContourLevel[];
    __declspec(property(get=GetUserContourValue,put=PutUserContourValue))
    double UserContourValue[];
    __declspec(property(get=GetContourColor,put=PutContourColor))
    enum zColor ContourColor[];
    __declspec(property(get=GetXYScale,put=PutXYScale))
    double XYScale[];
    __declspec(property(get=GetColorMode,put=PutColorMode))
    int ColorMode[];
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color[];
    __declspec(property(get=GetDraw,put=PutDraw))
    VARIANT_BOOL Draw[];
    __declspec(property(get=GetLabel,put=PutLabel))
    int Label[];
    __declspec(property(get=GetPrevCenter,put=PutPrevCenter))
    double PrevCenter[];
    __declspec(property(get=GetSectionBase,put=PutSectionBase))
    double SectionBase[];
    __declspec(property(get=GetSectionNormal,put=PutSectionNormal))
    double SectionNormal[];
    __declspec(property(get=GetSection2Base,put=PutSection2Base))
    double Section2Base[];
    __declspec(property(get=GetSection2Normal,put=PutSection2Normal))
    double Section2Normal[];
    __declspec(property(get=GetSection3Base,put=PutSection3Base))
    double Section3Base[];
    __declspec(property(get=GetSection3Normal,put=PutSection3Normal))
    double Section3Normal[];
    __declspec(property(get=GetFunction,put=PutFunction))
    int Function[];
    __declspec(property(get=GetXYSetRange,put=PutXYSetRange))
    int XYSetRange[];
    __declspec(property(get=GetContourVecID1,put=PutContourVecID1))
    int ContourVecID1[];
    __declspec(property(get=GetContourVecID2,put=PutContourVecID2))
    int ContourVecID2[];
    __declspec(property(get=GetContourVecID3,put=PutContourVecID3))
    int ContourVecID3[];
    __declspec(property(get=GetContourVecDir,put=PutContourVecDir))
    double ContourVecDir[];
    __declspec(property(get=GetSpotlightDir,put=PutSpotlightDir))
    double SpotlightDir[];
    __declspec(property(get=GetRotationCenter,put=PutRotationCenter))
    double RotationCenter[];
    __declspec(property(get=GetRotationVector,put=PutRotationVector))
    double RotationVector[];
    __declspec(property(get=GetLogoLocation,put=PutLogoLocation))
    double LogoLocation[];
    __declspec(property(get=GetStreamLineLocation,put=PutStreamLineLocation))
    double StreamLineLocation[];
    __declspec(property(get=GetUserContourPalette,put=PutUserContourPalette))
    enum zColor UserContourPalette[];
    __declspec(property(get=GetPrevRotation,put=PutPrevRotation))
    double PrevRotation[];
    __declspec(property(get=GetTransformPlateVector,put=PutTransformPlateVector))
    double TransformPlateVector[];
    __declspec(property(get=GetClipPlaneOrigin,put=PutClipPlaneOrigin))
    double ClipPlaneOrigin[];
    __declspec(property(get=GetClipPlaneNormal,put=PutClipPlaneNormal))
    double ClipPlaneNormal[];
    __declspec(property(get=GetContourVecOn,put=PutContourVecOn))
    VARIANT_BOOL ContourVecOn[];
    __declspec(property(get=GetMode,put=PutMode))
    enum zViewMode Mode;
    __declspec(property(get=GetDeformed,put=PutDeformed))
    enum zDeformedFormat Deformed;
    __declspec(property(get=GetContour,put=PutContour))
    enum zContourFormat Contour;
    __declspec(property(get=GetMagnification,put=PutMagnification))
    double Magnification;
    __declspec(property(get=GetAspect,put=PutAspect))
    double Aspect;
    __declspec(property(get=GetWindowTitleBar,put=PutWindowTitleBar))
    VARIANT_BOOL WindowTitleBar;
    __declspec(property(get=GetWindowBorder,put=PutWindowBorder))
    int WindowBorder;
    __declspec(property(get=GetWindowEraseBack,put=PutWindowEraseBack))
    VARIANT_BOOL WindowEraseBack;
    __declspec(property(get=GetWindowBackColor,put=PutWindowBackColor))
    enum zColor WindowBackColor;
    __declspec(property(get=GetPrevWindowLeft,put=PutPrevWindowLeft))
    double PrevWindowLeft;
    __declspec(property(get=GetPrevWindowTop,put=PutPrevWindowTop))
    double PrevWindowTop;
    __declspec(property(get=GetPrevWindowRight,put=PutPrevWindowRight))
    double PrevWindowRight;
    __declspec(property(get=GetPrevWindowBottom,put=PutPrevWindowBottom))
    double PrevWindowBottom;
    __declspec(property(get=GetPrevWindowXmin,put=PutPrevWindowXmin))
    double PrevWindowXmin;
    __declspec(property(get=GetPrevWindowXmax,put=PutPrevWindowXmax))
    double PrevWindowXmax;
    __declspec(property(get=GetPrevWindowYmin,put=PutPrevWindowYmin))
    double PrevWindowYmin;
    __declspec(property(get=GetPrevWindowYmax,put=PutPrevWindowYmax))
    double PrevWindowYmax;
    __declspec(property(get=GetBC,put=PutBC))
    int BC;
    __declspec(property(get=Getload,put=Putload))
    int load;
    __declspec(property(get=GetGroup,put=PutGroup))
    int Group;
    __declspec(property(get=GetOutputSet,put=PutOutputSet))
    int OutputSet;
    __declspec(property(get=GetFinalOutputSet,put=PutFinalOutputSet))
    int FinalOutputSet;
    __declspec(property(get=GetOutputSetInc,put=PutOutputSetInc))
    int OutputSetInc;
    __declspec(property(get=GetDeformData,put=PutDeformData))
    int DeformData;
    __declspec(property(get=GetContourData,put=PutContourData))
    int ContourData;
    __declspec(property(get=GetPerspectiveDist,put=PutPerspectiveDist))
    double PerspectiveDist;
    __declspec(property(get=GetInterOccularDist,put=PutInterOccularDist))
    double InterOccularDist;
    __declspec(property(get=GetShrinkFactor,put=PutShrinkFactor))
    double ShrinkFactor;
    __declspec(property(get=GetPerspectiveAngle,put=PutPerspectiveAngle))
    double PerspectiveAngle;
    __declspec(property(get=GetAmbientLight,put=PutAmbientLight))
    double AmbientLight;
    __declspec(property(get=GetArrowsToLabel,put=PutArrowsToLabel))
    double ArrowsToLabel;
    __declspec(property(get=GetDeformedRelScale,put=PutDeformedRelScale))
    double DeformedRelScale;
    __declspec(property(get=GetDeformedAbsScale,put=PutDeformedAbsScale))
    double DeformedAbsScale;
    __declspec(property(get=GetAnimationFrames,put=PutAnimationFrames))
    int AnimationFrames;
    __declspec(property(get=GetAnimationDelay,put=PutAnimationDelay))
    int AnimationDelay;
    __declspec(property(get=GetUserContourCount,put=PutUserContourCount))
    int UserContourCount;
    __declspec(property(get=GetContourLabelFreq,put=PutContourLabelFreq))
    int ContourLabelFreq;
    __declspec(property(get=GetContourLegendFreq,put=PutContourLegendFreq))
    int ContourLegendFreq;
    __declspec(property(get=GetCriteriaMax,put=PutCriteriaMax))
    double CriteriaMax;
    __declspec(property(get=GetCriteriaMin,put=PutCriteriaMin))
    double CriteriaMin;
    __declspec(property(get=GetXYXmin,put=PutXYXmin))
    double XYXmin;
    __declspec(property(get=GetXYXmax,put=PutXYXmax))
    double XYXmax;
    __declspec(property(get=GetXYymin,put=PutXYymin))
    double XYymin;
    __declspec(property(get=GetXYymax,put=PutXYymax))
    double XYymax;
    __declspec(property(get=GetXYTitle,put=PutXYTitle))
    _bstr_t XYTitle;
    __declspec(property(get=GetXYSubtitle,put=PutXYSubtitle))
    _bstr_t XYSubtitle;
    __declspec(property(get=GetXYCSys,put=PutXYCSys))
    int XYCSys;
    __declspec(property(get=GetXYDirection,put=PutXYDirection))
    int XYDirection;
    __declspec(property(get=GetXYXTics,put=PutXYXTics))
    int XYXTics;
    __declspec(property(get=GetXYYTics,put=PutXYYTics))
    int XYYTics;
    __declspec(property(get=GetLoadVecLength,put=PutLoadVecLength))
    double LoadVecLength;
    __declspec(property(get=GetOtherVecLength,put=PutOtherVecLength))
    double OtherVecLength;
    __declspec(property(get=GetPrevMagnification,put=PutPrevMagnification))
    double PrevMagnification;
    __declspec(property(get=GetShowAllLayers,put=PutShowAllLayers))
    VARIANT_BOOL ShowAllLayers;
    __declspec(property(get=GetSectionPlaneMode,put=PutSectionPlaneMode))
    VARIANT_BOOL SectionPlaneMode;
    __declspec(property(get=GetSection1On,put=PutSection1On))
    VARIANT_BOOL Section1On;
    __declspec(property(get=GetSection2On,put=PutSection2On))
    VARIANT_BOOL Section2On;
    __declspec(property(get=GetSection3On,put=PutSection3On))
    VARIANT_BOOL Section3On;
    __declspec(property(get=GetBeamDiagramScale,put=PutBeamDiagramScale))
    double BeamDiagramScale;
    __declspec(property(get=GetSectionSpacing,put=PutSectionSpacing))
    double SectionSpacing;
    __declspec(property(get=GetSectionCount,put=PutSectionCount))
    int SectionCount;
    __declspec(property(get=GetSectionMode,put=PutSectionMode))
    VARIANT_BOOL SectionMode;
    __declspec(property(get=GetUndefAnimation,put=PutUndefAnimation))
    VARIANT_BOOL UndefAnimation;
    __declspec(property(get=GetTraceOpt,put=PutTraceOpt))
    int TraceOpt;
    __declspec(property(get=GetTraceID,put=PutTraceID))
    int TraceID;
    __declspec(property(get=GetContourVecHide,put=PutContourVecHide))
    VARIANT_BOOL ContourVecHide;
    __declspec(property(get=GetContourVecMode,put=PutContourVecMode))
    int ContourVecMode;
    __declspec(property(get=GetContourVecCSys,put=PutContourVecCSys))
    int ContourVecCSys;
    __declspec(property(get=GetSpotlightDist,put=PutSpotlightDist))
    double SpotlightDist;
    __declspec(property(get=GetContourLabelDigits,put=PutContourLabelDigits))
    int ContourLabelDigits;
    __declspec(property(get=GetContourLegendDigits,put=PutContourLegendDigits))
    int ContourLegendDigits;
    __declspec(property(get=GetIsosurfaceValue,put=PutIsosurfaceValue))
    double IsosurfaceValue;
    __declspec(property(get=GetLoadVectorMinScale,put=PutLoadVectorMinScale))
    double LoadVectorMinScale;
    __declspec(property(get=GetRenderPushForward,put=PutRenderPushForward))
    double RenderPushForward;
    __declspec(property(get=GetContourVecColor2,put=PutContourVecColor2))
    enum zColor ContourVecColor2;
    __declspec(property(get=GetContourVecColor3,put=PutContourVecColor3))
    enum zColor ContourVecColor3;
    __declspec(property(get=GetFreebodyShowSum,put=PutFreebodyShowSum))
    VARIANT_BOOL FreebodyShowSum;
    __declspec(property(get=GetFreebodyMinVecFlag,put=PutFreebodyMinVecFlag))
    VARIANT_BOOL FreebodyMinVecFlag;
    __declspec(property(get=GetFreebodyShowMag,put=PutFreebodyShowMag))
    double FreebodyShowMag;
    __declspec(property(get=GetContourVecAddl,put=PutContourVecAddl))
    int ContourVecAddl;
    __declspec(property(get=GetContourElemUnaveraged,put=PutContourElemUnaveraged))
    VARIANT_BOOL ContourElemUnaveraged;
    __declspec(property(get=GetContourElemBreakProp,put=PutContourElemBreakProp))
    VARIANT_BOOL ContourElemBreakProp;
    __declspec(property(get=GetContourElemBreakMatl,put=PutContourElemBreakMatl))
    VARIANT_BOOL ContourElemBreakMatl;
    __declspec(property(get=GetContourElemBreakLayer,put=PutContourElemBreakLayer))
    VARIANT_BOOL ContourElemBreakLayer;
    __declspec(property(get=GetContourElemBreakColor,put=PutContourElemBreakColor))
    VARIANT_BOOL ContourElemBreakColor;
    __declspec(property(get=GetContourElemBreakGeom,put=PutContourElemBreakGeom))
    VARIANT_BOOL ContourElemBreakGeom;
    __declspec(property(get=GetContourElemBreakAngle,put=PutContourElemBreakAngle))
    double ContourElemBreakAngle;
    __declspec(property(get=GetRotationCenterOn,put=PutRotationCenterOn))
    VARIANT_BOOL RotationCenterOn;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetWindowBackColor2,put=PutWindowBackColor2))
    enum zColor WindowBackColor2;
    __declspec(property(get=GetWindowShadeBack,put=PutWindowShadeBack))
    VARIANT_BOOL WindowShadeBack;
    __declspec(property(get=GetvRotation,put=PutvRotation))
    _variant_t vRotation;
    __declspec(property(get=GetvCenter,put=PutvCenter))
    _variant_t vCenter;
    __declspec(property(get=GetvXYOutputSet,put=PutvXYOutputSet))
    _variant_t vXYOutputSet;
    __declspec(property(get=GetvXYOutputData,put=PutvXYOutputData))
    _variant_t vXYOutputData;
    __declspec(property(get=GetvXYOutputEntity,put=PutvXYOutputEntity))
    _variant_t vXYOutputEntity;
    __declspec(property(get=GetvLight,put=PutvLight))
    _variant_t vLight;
    __declspec(property(get=GetvAxisLocation,put=PutvAxisLocation))
    _variant_t vAxisLocation;
    __declspec(property(get=GetvUserContourLevel,put=PutvUserContourLevel))
    _variant_t vUserContourLevel;
    __declspec(property(get=GetvUserContourValue,put=PutvUserContourValue))
    _variant_t vUserContourValue;
    __declspec(property(get=GetvContourColor,put=PutvContourColor))
    _variant_t vContourColor;
    __declspec(property(get=GetvXYScale,put=PutvXYScale))
    _variant_t vXYScale;
    __declspec(property(get=GetvColorMode,put=PutvColorMode))
    _variant_t vColorMode;
    __declspec(property(get=GetvColor,put=PutvColor))
    _variant_t vColor;
    __declspec(property(get=GetvDraw,put=PutvDraw))
    _variant_t vDraw;
    __declspec(property(get=GetvLabel,put=PutvLabel))
    _variant_t vLabel;
    __declspec(property(get=GetvPrevCenter,put=PutvPrevCenter))
    _variant_t vPrevCenter;
    __declspec(property(get=GetvSectionBase,put=PutvSectionBase))
    _variant_t vSectionBase;
    __declspec(property(get=GetvSectionNormal,put=PutvSectionNormal))
    _variant_t vSectionNormal;
    __declspec(property(get=GetvSection2Base,put=PutvSection2Base))
    _variant_t vSection2Base;
    __declspec(property(get=GetvSection2Normal,put=PutvSection2Normal))
    _variant_t vSection2Normal;
    __declspec(property(get=GetvSection3Base,put=PutvSection3Base))
    _variant_t vSection3Base;
    __declspec(property(get=GetvSection3Normal,put=PutvSection3Normal))
    _variant_t vSection3Normal;
    __declspec(property(get=Getvfunction,put=Putvfunction))
    _variant_t vfunction;
    __declspec(property(get=GetvXYSetRange,put=PutvXYSetRange))
    _variant_t vXYSetRange;
    __declspec(property(get=GetvContourVecID1,put=PutvContourVecID1))
    _variant_t vContourVecID1;
    __declspec(property(get=GetvContourVecID2,put=PutvContourVecID2))
    _variant_t vContourVecID2;
    __declspec(property(get=GetvContourVecID3,put=PutvContourVecID3))
    _variant_t vContourVecID3;
    __declspec(property(get=GetvContourVecDir,put=PutvContourVecDir))
    _variant_t vContourVecDir;
    __declspec(property(get=GetvSpotlightDir,put=PutvSpotlightDir))
    _variant_t vSpotlightDir;
    __declspec(property(get=GetvRotationCenter,put=PutvRotationCenter))
    _variant_t vRotationCenter;
    __declspec(property(get=GetvRotationVector,put=PutvRotationVector))
    _variant_t vRotationVector;
    __declspec(property(get=GetWindowBackColor3,put=PutWindowBackColor3))
    enum zColor WindowBackColor3;
    __declspec(property(get=GetWindowShadeBackOpt,put=PutWindowShadeBackOpt))
    int WindowShadeBackOpt;
    __declspec(property(get=GetWindowShadeHorizon,put=PutWindowShadeHorizon))
    int WindowShadeHorizon;
    __declspec(property(get=GetWindowLogo,put=PutWindowLogo))
    VARIANT_BOOL WindowLogo;
    __declspec(property(get=GetvLogoLocation,put=PutvLogoLocation))
    _variant_t vLogoLocation;
    __declspec(property(get=GetRenderPushUnit,put=PutRenderPushUnit))
    double RenderPushUnit;
    __declspec(property(get=GetRenderPushUndeformed,put=PutRenderPushUndeformed))
    double RenderPushUndeformed;
    __declspec(property(get=GetRenderPushLabel,put=PutRenderPushLabel))
    int RenderPushLabel;
    __declspec(property(get=GetStreamLineOpt,put=PutStreamLineOpt))
    int StreamLineOpt;
    __declspec(property(get=GetStreamLineID,put=PutStreamLineID))
    int StreamLineID;
    __declspec(property(get=GetStreamLineRungeKuttaOrder,put=PutStreamLineRungeKuttaOrder))
    int StreamLineRungeKuttaOrder;
    __declspec(property(get=GetStreamLineTolerance,put=PutStreamLineTolerance))
    double StreamLineTolerance;
    __declspec(property(get=GetStreamLineMaxLenFactor,put=PutStreamLineMaxLenFactor))
    double StreamLineMaxLenFactor;
    __declspec(property(get=GetStreamLineMinSpeedPct,put=PutStreamLineMinSpeedPct))
    double StreamLineMinSpeedPct;
    __declspec(property(get=GetStreamLineMaxTime,put=PutStreamLineMaxTime))
    double StreamLineMaxTime;
    __declspec(property(get=GetvStreamLineLocation,put=PutvStreamLineLocation))
    _variant_t vStreamLineLocation;
    __declspec(property(get=GetContourLegendShrinkPct,put=PutContourLegendShrinkPct))
    double ContourLegendShrinkPct;
    __declspec(property(get=GetTransparencyPercent,put=PutTransparencyPercent))
    int TransparencyPercent;
    __declspec(property(get=GetRotateAroundModelAxes,put=PutRotateAroundModelAxes))
    VARIANT_BOOL RotateAroundModelAxes;
    __declspec(property(get=GetRotateSingleAxis,put=PutRotateSingleAxis))
    VARIANT_BOOL RotateSingleAxis;
    __declspec(property(get=GetRotateUseAxis,put=PutRotateUseAxis))
    VARIANT_BOOL RotateUseAxis;
    __declspec(property(get=GetContourGroup,put=PutContourGroup))
    int ContourGroup;
    __declspec(property(get=GetvUserContourPalette,put=PutvUserContourPalette))
    _variant_t vUserContourPalette;
    __declspec(property(get=GetMaxUserContourPalette,put=PutMaxUserContourPalette))
    int MaxUserContourPalette;
    __declspec(property(get=GetvPrevRotation,put=PutvPrevRotation))
    _variant_t vPrevRotation;
    __declspec(property(get=GetRotateCSys,put=PutRotateCSys))
    int RotateCSys;
    __declspec(property(get=GetTransformDeformMode,put=PutTransformDeformMode))
    enum zOutputDestination TransformDeformMode;
    __declspec(property(get=GetTransformDeformCSys,put=PutTransformDeformCSys))
    int TransformDeformCSys;
    __declspec(property(get=GetTransformDeformX,put=PutTransformDeformX))
    VARIANT_BOOL TransformDeformX;
    __declspec(property(get=GetTransformDeformY,put=PutTransformDeformY))
    VARIANT_BOOL TransformDeformY;
    __declspec(property(get=GetTransformDeformZ,put=PutTransformDeformZ))
    VARIANT_BOOL TransformDeformZ;
    __declspec(property(get=GetTransformNodalMode,put=PutTransformNodalMode))
    enum zOutputDestination TransformNodalMode;
    __declspec(property(get=GetTransformNodalCSys,put=PutTransformNodalCSys))
    int TransformNodalCSys;
    __declspec(property(get=GetTransformPlateMode,put=PutTransformPlateMode))
    enum zOutputDestination TransformPlateMode;
    __declspec(property(get=GetTransformPlateCSys,put=PutTransformPlateCSys))
    int TransformPlateCSys;
    __declspec(property(get=GetTransformPlateDOF,put=PutTransformPlateDOF))
    int TransformPlateDOF;
    __declspec(property(get=GetvTransformPlateVector,put=PutvTransformPlateVector))
    _variant_t vTransformPlateVector;
    __declspec(property(get=GetTransformSolidMode,put=PutTransformSolidMode))
    enum zOutputDestination TransformSolidMode;
    __declspec(property(get=GetTransformSolidCSys,put=PutTransformSolidCSys))
    int TransformSolidCSys;
    __declspec(property(get=GetGlobalPlyLocation,put=PutGlobalPlyLocation))
    int GlobalPlyLocation;
    __declspec(property(get=GetContourVecDigits,put=PutContourVecDigits))
    int ContourVecDigits;
    __declspec(property(get=GetContourVecLength,put=PutContourVecLength))
    double ContourVecLength;
    __declspec(property(get=GetDeformRelativeToNode,put=PutDeformRelativeToNode))
    int DeformRelativeToNode;
    __declspec(property(get=GetvClipPlaneOrigin,put=PutvClipPlaneOrigin))
    _variant_t vClipPlaneOrigin;
    __declspec(property(get=GetvClipPlaneNormal,put=PutvClipPlaneNormal))
    _variant_t vClipPlaneNormal;
    __declspec(property(get=GetFreebodyDigits,put=PutFreebodyDigits))
    int FreebodyDigits;
    __declspec(property(get=GetFreebodyLength,put=PutFreebodyLength))
    double FreebodyLength;
    __declspec(property(get=GetFreebodyTotalForceFactor,put=PutFreebodyTotalForceFactor))
    double FreebodyTotalForceFactor;
    __declspec(property(get=GetFreebodyTotalMomentFactor,put=PutFreebodyTotalMomentFactor))
    double FreebodyTotalMomentFactor;
    __declspec(property(get=GetFreebodyNodalForceFactor,put=PutFreebodyNodalForceFactor))
    double FreebodyNodalForceFactor;
    __declspec(property(get=GetFreebodyNodalMomentFactor,put=PutFreebodyNodalMomentFactor))
    double FreebodyNodalMomentFactor;
    __declspec(property(get=GetFreebodyUnitsPerLength,put=PutFreebodyUnitsPerLength))
    double FreebodyUnitsPerLength;
    __declspec(property(get=GetBlankNodesOff,put=PutBlankNodesOff))
    VARIANT_BOOL BlankNodesOff;
    __declspec(property(get=GetContourDataSelection,put=PutContourDataSelection))
    int ContourDataSelection;
    __declspec(property(get=GetContourVector1,put=PutContourVector1))
    int ContourVector1;
    __declspec(property(get=GetContourVector2,put=PutContourVector2))
    int ContourVector2;
    __declspec(property(get=GetContourVector3,put=PutContourVector3))
    int ContourVector3;
    __declspec(property(get=GetContourCornerData,put=PutContourCornerData))
    VARIANT_BOOL ContourCornerData;
    __declspec(property(get=GetContourDataConversion,put=PutContourDataConversion))
    int ContourDataConversion;
    __declspec(property(get=GetComplexSyncMethod,put=PutComplexSyncMethod))
    int ComplexSyncMethod;
    __declspec(property(get=GetComplexSyncPhase,put=PutComplexSyncPhase))
    double ComplexSyncPhase;
    __declspec(property(get=GetComplexSyncIncrement,put=PutComplexSyncIncrement))
    double ComplexSyncIncrement;
    __declspec(property(get=GetvContourVecOn,put=PutvContourVecOn))
    _variant_t vContourVecOn;
    __declspec(property(get=GetContourVecAutoVec,put=PutContourVecAutoVec))
    VARIANT_BOOL ContourVecAutoVec;
    __declspec(property(get=GetContourVecAutoOrient,put=PutContourVecAutoOrient))
    VARIANT_BOOL ContourVecAutoOrient;
    __declspec(property(get=GetTransformDeformXInput,put=PutTransformDeformXInput))
    VARIANT_BOOL TransformDeformXInput;
    __declspec(property(get=GetTransformDeformYInput,put=PutTransformDeformYInput))
    VARIANT_BOOL TransformDeformYInput;
    __declspec(property(get=GetTransformDeformZInput,put=PutTransformDeformZInput))
    VARIANT_BOOL TransformDeformZInput;
    __declspec(property(get=GetTransformPlateTolerance,put=PutTransformPlateTolerance))
    double TransformPlateTolerance;
    __declspec(property(get=GetContourVecMinVecOn,put=PutContourVecMinVecOn))
    VARIANT_BOOL ContourVecMinVecOn;
    __declspec(property(get=GetContourVecMinVec,put=PutContourVecMinVec))
    double ContourVecMinVec;
    __declspec(property(get=GetContourVecMinLen,put=PutContourVecMinLen))
    double ContourVecMinLen;
    __declspec(property(get=GetContourVecColor1,put=PutContourVecColor1))
    enum zColor ContourVecColor1;
    __declspec(property(get=GetLabelGroup,put=PutLabelGroup))
    int LabelGroup;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getrotation (
        int nVectorIndex );
    void Putrotation (
        int nVectorIndex,
        double _arg2 );
    double Getcenter (
        int nVectorIndex );
    void Putcenter (
        int nVectorIndex,
        double _arg2 );
    int GetXYOutputSet (
        int nVectorIndex );
    void PutXYOutputSet (
        int nVectorIndex,
        int _arg2 );
    int GetXYOutputData (
        int nVectorIndex );
    void PutXYOutputData (
        int nVectorIndex,
        int _arg2 );
    int GetXYOutputEntity (
        int nVectorIndex );
    void PutXYOutputEntity (
        int nVectorIndex,
        int _arg2 );
    double GetLight (
        int nVectorIndex );
    void PutLight (
        int nVectorIndex,
        double _arg2 );
    double GetAxisLocation (
        int nVectorIndex );
    void PutAxisLocation (
        int nVectorIndex,
        double _arg2 );
    int GetUserContourLevel (
        int nVectorIndex );
    void PutUserContourLevel (
        int nVectorIndex,
        int _arg2 );
    double GetUserContourValue (
        int nVectorIndex );
    void PutUserContourValue (
        int nVectorIndex,
        double _arg2 );
    enum zColor GetContourColor (
        int nVectorIndex );
    void PutContourColor (
        int nVectorIndex,
        enum zColor _arg2 );
    double GetXYScale (
        int nVectorIndex );
    void PutXYScale (
        int nVectorIndex,
        double _arg2 );
    int GetColorMode (
        enum zViewOptions nVectorIndex );
    void PutColorMode (
        enum zViewOptions nVectorIndex,
        int _arg2 );
    enum zColor Getcolor (
        enum zViewOptions nVectorIndex );
    void Putcolor (
        enum zViewOptions nVectorIndex,
        enum zColor _arg2 );
    VARIANT_BOOL GetDraw (
        enum zViewOptions nVectorIndex );
    void PutDraw (
        enum zViewOptions nVectorIndex,
        VARIANT_BOOL _arg2 );
    int GetLabel (
        enum zViewOptions nVectorIndex );
    void PutLabel (
        enum zViewOptions nVectorIndex,
        int _arg2 );
    double GetPrevCenter (
        int nVectorIndex );
    void PutPrevCenter (
        int nVectorIndex,
        double _arg2 );
    double GetSectionBase (
        int nVectorIndex );
    void PutSectionBase (
        int nVectorIndex,
        double _arg2 );
    double GetSectionNormal (
        int nVectorIndex );
    void PutSectionNormal (
        int nVectorIndex,
        double _arg2 );
    double GetSection2Base (
        int nVectorIndex );
    void PutSection2Base (
        int nVectorIndex,
        double _arg2 );
    double GetSection2Normal (
        int nVectorIndex );
    void PutSection2Normal (
        int nVectorIndex,
        double _arg2 );
    double GetSection3Base (
        int nVectorIndex );
    void PutSection3Base (
        int nVectorIndex,
        double _arg2 );
    double GetSection3Normal (
        int nVectorIndex );
    void PutSection3Normal (
        int nVectorIndex,
        double _arg2 );
    int GetFunction (
        int nVectorIndex );
    void PutFunction (
        int nVectorIndex,
        int _arg2 );
    int GetXYSetRange (
        int nVectorIndex );
    void PutXYSetRange (
        int nVectorIndex,
        int _arg2 );
    int GetContourVecID1 (
        int nVectorIndex );
    void PutContourVecID1 (
        int nVectorIndex,
        int _arg2 );
    int GetContourVecID2 (
        int nVectorIndex );
    void PutContourVecID2 (
        int nVectorIndex,
        int _arg2 );
    int GetContourVecID3 (
        int nVectorIndex );
    void PutContourVecID3 (
        int nVectorIndex,
        int _arg2 );
    double GetContourVecDir (
        int nVectorIndex );
    void PutContourVecDir (
        int nVectorIndex,
        double _arg2 );
    double GetSpotlightDir (
        int nVectorIndex );
    void PutSpotlightDir (
        int nVectorIndex,
        double _arg2 );
    double GetRotationCenter (
        int nVectorIndex );
    void PutRotationCenter (
        int nVectorIndex,
        double _arg2 );
    double GetRotationVector (
        int nVectorIndex );
    void PutRotationVector (
        int nVectorIndex,
        double _arg2 );
    double GetLogoLocation (
        int nVectorIndex );
    void PutLogoLocation (
        int nVectorIndex,
        double _arg2 );
    double GetStreamLineLocation (
        int nVectorIndex );
    void PutStreamLineLocation (
        int nVectorIndex,
        double _arg2 );
    enum zColor GetUserContourPalette (
        int nVectorIndex );
    void PutUserContourPalette (
        int nVectorIndex,
        enum zColor _arg2 );
    double GetPrevRotation (
        int nVectorIndex );
    void PutPrevRotation (
        int nVectorIndex,
        double _arg2 );
    double GetTransformPlateVector (
        int nVectorIndex );
    void PutTransformPlateVector (
        int nVectorIndex,
        double _arg2 );
    double GetClipPlaneOrigin (
        int nVectorIndex );
    void PutClipPlaneOrigin (
        int nVectorIndex,
        double _arg2 );
    double GetClipPlaneNormal (
        int nVectorIndex );
    void PutClipPlaneNormal (
        int nVectorIndex,
        double _arg2 );
    VARIANT_BOOL GetContourVecOn (
        int nVectorIndex );
    void PutContourVecOn (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    enum zReturnCode Visible (
        VARIANT_BOOL Visible );
    enum zReturnCode Redraw ( );
    enum zReturnCode Regenerate ( );
    enum zReturnCode IsLayerVisible (
        int layerID );
    enum zReturnCode SetLayerVisible (
        int layerID,
        VARIANT_BOOL Visible );
    enum zReturnCode Rotate (
        double oX,
        double oY,
        double oZ,
        double dX,
        double dY,
        double dZ,
        double angle );
    enum zReturnCode AlignCSys (
        int csysID );
    enum zReturnCode AlignVector (
        double oX,
        double oY,
        double oZ,
        double dX,
        double dY,
        double dZ );
    enum zReturnCode AlignWorkplane ( );
    enum zReturnCode AutoscaleAll (
        VARIANT_BOOL redoBox );
    enum zReturnCode AutoscaleVisible (
        VARIANT_BOOL redoBox );
    enum zReturnCode Initialize ( );
    enum zReturnCode Align2Vector (
        double vZx,
        double vZy,
        double vZz,
        double vXYx,
        double vXYy,
        double vXYZ,
        VARIANT_BOOL bAutoXY );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode GetMultiGroupList (
        int * nGroup,
        VARIANT * nGroupID );
    enum zReturnCode SetMultiGroupList (
        VARIANT_BOOL bClear,
        int nGroups,
        const _variant_t & nGroupID );
    enum zReturnCode ClearMultiGroupList ( );
    enum zReturnCode SetMultiGroupListFromSets (
        VARIANT_BOOL bClear,
        int nShowSetID,
        int nHideSetID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    enum zViewMode GetMode ( );
    void PutMode ( enum zViewMode _val );
    enum zDeformedFormat GetDeformed ( );
    void PutDeformed ( enum zDeformedFormat _val );
    enum zContourFormat GetContour ( );
    void PutContour ( enum zContourFormat _val );
    double GetMagnification ( );
    void PutMagnification ( double _val );
    double GetAspect ( );
    void PutAspect ( double _val );
    VARIANT_BOOL GetWindowTitleBar ( );
    void PutWindowTitleBar ( VARIANT_BOOL _val );
    int GetWindowBorder ( );
    void PutWindowBorder ( int _val );
    VARIANT_BOOL GetWindowEraseBack ( );
    void PutWindowEraseBack ( VARIANT_BOOL _val );
    enum zColor GetWindowBackColor ( );
    void PutWindowBackColor ( enum zColor _val );
    double GetPrevWindowLeft ( );
    void PutPrevWindowLeft ( double _val );
    double GetPrevWindowTop ( );
    void PutPrevWindowTop ( double _val );
    double GetPrevWindowRight ( );
    void PutPrevWindowRight ( double _val );
    double GetPrevWindowBottom ( );
    void PutPrevWindowBottom ( double _val );
    double GetPrevWindowXmin ( );
    void PutPrevWindowXmin ( double _val );
    double GetPrevWindowXmax ( );
    void PutPrevWindowXmax ( double _val );
    double GetPrevWindowYmin ( );
    void PutPrevWindowYmin ( double _val );
    double GetPrevWindowYmax ( );
    void PutPrevWindowYmax ( double _val );
    int GetBC ( );
    void PutBC ( int _val );
    int Getload ( );
    void Putload ( int _val );
    int GetGroup ( );
    void PutGroup ( int _val );
    int GetOutputSet ( );
    void PutOutputSet ( int _val );
    int GetFinalOutputSet ( );
    void PutFinalOutputSet ( int _val );
    int GetOutputSetInc ( );
    void PutOutputSetInc ( int _val );
    int GetDeformData ( );
    void PutDeformData ( int _val );
    int GetContourData ( );
    void PutContourData ( int _val );
    double GetPerspectiveDist ( );
    void PutPerspectiveDist ( double _val );
    double GetInterOccularDist ( );
    void PutInterOccularDist ( double _val );
    double GetShrinkFactor ( );
    void PutShrinkFactor ( double _val );
    double GetPerspectiveAngle ( );
    void PutPerspectiveAngle ( double _val );
    double GetAmbientLight ( );
    void PutAmbientLight ( double _val );
    double GetArrowsToLabel ( );
    void PutArrowsToLabel ( double _val );
    double GetDeformedRelScale ( );
    void PutDeformedRelScale ( double _val );
    double GetDeformedAbsScale ( );
    void PutDeformedAbsScale ( double _val );
    int GetAnimationFrames ( );
    void PutAnimationFrames ( int _val );
    int GetAnimationDelay ( );
    void PutAnimationDelay ( int _val );
    int GetUserContourCount ( );
    void PutUserContourCount ( int _val );
    int GetContourLabelFreq ( );
    void PutContourLabelFreq ( int _val );
    int GetContourLegendFreq ( );
    void PutContourLegendFreq ( int _val );
    double GetCriteriaMax ( );
    void PutCriteriaMax ( double _val );
    double GetCriteriaMin ( );
    void PutCriteriaMin ( double _val );
    double GetXYXmin ( );
    void PutXYXmin ( double _val );
    double GetXYXmax ( );
    void PutXYXmax ( double _val );
    double GetXYymin ( );
    void PutXYymin ( double _val );
    double GetXYymax ( );
    void PutXYymax ( double _val );
    _bstr_t GetXYTitle ( );
    void PutXYTitle ( _bstr_t _val );
    _bstr_t GetXYSubtitle ( );
    void PutXYSubtitle ( _bstr_t _val );
    int GetXYCSys ( );
    void PutXYCSys ( int _val );
    int GetXYDirection ( );
    void PutXYDirection ( int _val );
    int GetXYXTics ( );
    void PutXYXTics ( int _val );
    int GetXYYTics ( );
    void PutXYYTics ( int _val );
    double GetLoadVecLength ( );
    void PutLoadVecLength ( double _val );
    double GetOtherVecLength ( );
    void PutOtherVecLength ( double _val );
    double GetPrevMagnification ( );
    void PutPrevMagnification ( double _val );
    VARIANT_BOOL GetShowAllLayers ( );
    void PutShowAllLayers ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSectionPlaneMode ( );
    void PutSectionPlaneMode ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSection1On ( );
    void PutSection1On ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSection2On ( );
    void PutSection2On ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSection3On ( );
    void PutSection3On ( VARIANT_BOOL _val );
    double GetBeamDiagramScale ( );
    void PutBeamDiagramScale ( double _val );
    double GetSectionSpacing ( );
    void PutSectionSpacing ( double _val );
    int GetSectionCount ( );
    void PutSectionCount ( int _val );
    VARIANT_BOOL GetSectionMode ( );
    void PutSectionMode ( VARIANT_BOOL _val );
    VARIANT_BOOL GetUndefAnimation ( );
    void PutUndefAnimation ( VARIANT_BOOL _val );
    int GetTraceOpt ( );
    void PutTraceOpt ( int _val );
    int GetTraceID ( );
    void PutTraceID ( int _val );
    VARIANT_BOOL GetContourVecHide ( );
    void PutContourVecHide ( VARIANT_BOOL _val );
    int GetContourVecMode ( );
    void PutContourVecMode ( int _val );
    int GetContourVecCSys ( );
    void PutContourVecCSys ( int _val );
    double GetSpotlightDist ( );
    void PutSpotlightDist ( double _val );
    int GetContourLabelDigits ( );
    void PutContourLabelDigits ( int _val );
    int GetContourLegendDigits ( );
    void PutContourLegendDigits ( int _val );
    double GetIsosurfaceValue ( );
    void PutIsosurfaceValue ( double _val );
    double GetLoadVectorMinScale ( );
    void PutLoadVectorMinScale ( double _val );
    double GetRenderPushForward ( );
    void PutRenderPushForward ( double _val );
    enum zColor GetContourVecColor2 ( );
    void PutContourVecColor2 ( enum zColor _val );
    enum zColor GetContourVecColor3 ( );
    void PutContourVecColor3 ( enum zColor _val );
    VARIANT_BOOL GetFreebodyShowSum ( );
    void PutFreebodyShowSum ( VARIANT_BOOL _val );
    VARIANT_BOOL GetFreebodyMinVecFlag ( );
    void PutFreebodyMinVecFlag ( VARIANT_BOOL _val );
    double GetFreebodyShowMag ( );
    void PutFreebodyShowMag ( double _val );
    int GetContourVecAddl ( );
    void PutContourVecAddl ( int _val );
    VARIANT_BOOL GetContourElemUnaveraged ( );
    void PutContourElemUnaveraged ( VARIANT_BOOL _val );
    VARIANT_BOOL GetContourElemBreakProp ( );
    void PutContourElemBreakProp ( VARIANT_BOOL _val );
    VARIANT_BOOL GetContourElemBreakMatl ( );
    void PutContourElemBreakMatl ( VARIANT_BOOL _val );
    VARIANT_BOOL GetContourElemBreakLayer ( );
    void PutContourElemBreakLayer ( VARIANT_BOOL _val );
    VARIANT_BOOL GetContourElemBreakColor ( );
    void PutContourElemBreakColor ( VARIANT_BOOL _val );
    VARIANT_BOOL GetContourElemBreakGeom ( );
    void PutContourElemBreakGeom ( VARIANT_BOOL _val );
    double GetContourElemBreakAngle ( );
    void PutContourElemBreakAngle ( double _val );
    VARIANT_BOOL GetRotationCenterOn ( );
    void PutRotationCenterOn ( VARIANT_BOOL _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    enum zColor GetWindowBackColor2 ( );
    void PutWindowBackColor2 ( enum zColor _val );
    VARIANT_BOOL GetWindowShadeBack ( );
    void PutWindowShadeBack ( VARIANT_BOOL _val );
    _variant_t GetvRotation ( );
    void PutvRotation ( const _variant_t & _val );
    _variant_t GetvCenter ( );
    void PutvCenter ( const _variant_t & _val );
    _variant_t GetvXYOutputSet ( );
    void PutvXYOutputSet ( const _variant_t & _val );
    _variant_t GetvXYOutputData ( );
    void PutvXYOutputData ( const _variant_t & _val );
    _variant_t GetvXYOutputEntity ( );
    void PutvXYOutputEntity ( const _variant_t & _val );
    _variant_t GetvLight ( );
    void PutvLight ( const _variant_t & _val );
    _variant_t GetvAxisLocation ( );
    void PutvAxisLocation ( const _variant_t & _val );
    _variant_t GetvUserContourLevel ( );
    void PutvUserContourLevel ( const _variant_t & _val );
    _variant_t GetvUserContourValue ( );
    void PutvUserContourValue ( const _variant_t & _val );
    _variant_t GetvContourColor ( );
    void PutvContourColor ( const _variant_t & _val );
    _variant_t GetvXYScale ( );
    void PutvXYScale ( const _variant_t & _val );
    _variant_t GetvColorMode ( );
    void PutvColorMode ( const _variant_t & _val );
    _variant_t GetvColor ( );
    void PutvColor ( const _variant_t & _val );
    _variant_t GetvDraw ( );
    void PutvDraw ( const _variant_t & _val );
    _variant_t GetvLabel ( );
    void PutvLabel ( const _variant_t & _val );
    _variant_t GetvPrevCenter ( );
    void PutvPrevCenter ( const _variant_t & _val );
    _variant_t GetvSectionBase ( );
    void PutvSectionBase ( const _variant_t & _val );
    _variant_t GetvSectionNormal ( );
    void PutvSectionNormal ( const _variant_t & _val );
    _variant_t GetvSection2Base ( );
    void PutvSection2Base ( const _variant_t & _val );
    _variant_t GetvSection2Normal ( );
    void PutvSection2Normal ( const _variant_t & _val );
    _variant_t GetvSection3Base ( );
    void PutvSection3Base ( const _variant_t & _val );
    _variant_t GetvSection3Normal ( );
    void PutvSection3Normal ( const _variant_t & _val );
    _variant_t Getvfunction ( );
    void Putvfunction ( const _variant_t & _val );
    _variant_t GetvXYSetRange ( );
    void PutvXYSetRange ( const _variant_t & _val );
    _variant_t GetvContourVecID1 ( );
    void PutvContourVecID1 ( const _variant_t & _val );
    _variant_t GetvContourVecID2 ( );
    void PutvContourVecID2 ( const _variant_t & _val );
    _variant_t GetvContourVecID3 ( );
    void PutvContourVecID3 ( const _variant_t & _val );
    _variant_t GetvContourVecDir ( );
    void PutvContourVecDir ( const _variant_t & _val );
    _variant_t GetvSpotlightDir ( );
    void PutvSpotlightDir ( const _variant_t & _val );
    _variant_t GetvRotationCenter ( );
    void PutvRotationCenter ( const _variant_t & _val );
    _variant_t GetvRotationVector ( );
    void PutvRotationVector ( const _variant_t & _val );
    enum zColor GetWindowBackColor3 ( );
    void PutWindowBackColor3 ( enum zColor _val );
    int GetWindowShadeBackOpt ( );
    void PutWindowShadeBackOpt ( int _val );
    int GetWindowShadeHorizon ( );
    void PutWindowShadeHorizon ( int _val );
    VARIANT_BOOL GetWindowLogo ( );
    void PutWindowLogo ( VARIANT_BOOL _val );
    _variant_t GetvLogoLocation ( );
    void PutvLogoLocation ( const _variant_t & _val );
    double GetRenderPushUnit ( );
    void PutRenderPushUnit ( double _val );
    double GetRenderPushUndeformed ( );
    void PutRenderPushUndeformed ( double _val );
    int GetRenderPushLabel ( );
    void PutRenderPushLabel ( int _val );
    int GetStreamLineOpt ( );
    void PutStreamLineOpt ( int _val );
    int GetStreamLineID ( );
    void PutStreamLineID ( int _val );
    int GetStreamLineRungeKuttaOrder ( );
    void PutStreamLineRungeKuttaOrder ( int _val );
    double GetStreamLineTolerance ( );
    void PutStreamLineTolerance ( double _val );
    double GetStreamLineMaxLenFactor ( );
    void PutStreamLineMaxLenFactor ( double _val );
    double GetStreamLineMinSpeedPct ( );
    void PutStreamLineMinSpeedPct ( double _val );
    double GetStreamLineMaxTime ( );
    void PutStreamLineMaxTime ( double _val );
    _variant_t GetvStreamLineLocation ( );
    void PutvStreamLineLocation ( const _variant_t & _val );
    double GetContourLegendShrinkPct ( );
    void PutContourLegendShrinkPct ( double _val );
    int GetTransparencyPercent ( );
    void PutTransparencyPercent ( int _val );
    VARIANT_BOOL GetRotateAroundModelAxes ( );
    void PutRotateAroundModelAxes ( VARIANT_BOOL _val );
    VARIANT_BOOL GetRotateSingleAxis ( );
    void PutRotateSingleAxis ( VARIANT_BOOL _val );
    VARIANT_BOOL GetRotateUseAxis ( );
    void PutRotateUseAxis ( VARIANT_BOOL _val );
    int GetContourGroup ( );
    void PutContourGroup ( int _val );
    _variant_t GetvUserContourPalette ( );
    void PutvUserContourPalette ( const _variant_t & _val );
    int GetMaxUserContourPalette ( );
    void PutMaxUserContourPalette ( int _val );
    _variant_t GetvPrevRotation ( );
    void PutvPrevRotation ( const _variant_t & _val );
    int GetRotateCSys ( );
    void PutRotateCSys ( int _val );
    enum zOutputDestination GetTransformDeformMode ( );
    void PutTransformDeformMode ( enum zOutputDestination _val );
    int GetTransformDeformCSys ( );
    void PutTransformDeformCSys ( int _val );
    VARIANT_BOOL GetTransformDeformX ( );
    void PutTransformDeformX ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTransformDeformY ( );
    void PutTransformDeformY ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTransformDeformZ ( );
    void PutTransformDeformZ ( VARIANT_BOOL _val );
    enum zOutputDestination GetTransformNodalMode ( );
    void PutTransformNodalMode ( enum zOutputDestination _val );
    int GetTransformNodalCSys ( );
    void PutTransformNodalCSys ( int _val );
    enum zOutputDestination GetTransformPlateMode ( );
    void PutTransformPlateMode ( enum zOutputDestination _val );
    int GetTransformPlateCSys ( );
    void PutTransformPlateCSys ( int _val );
    int GetTransformPlateDOF ( );
    void PutTransformPlateDOF ( int _val );
    _variant_t GetvTransformPlateVector ( );
    void PutvTransformPlateVector ( const _variant_t & _val );
    enum zOutputDestination GetTransformSolidMode ( );
    void PutTransformSolidMode ( enum zOutputDestination _val );
    int GetTransformSolidCSys ( );
    void PutTransformSolidCSys ( int _val );
    int GetGlobalPlyLocation ( );
    void PutGlobalPlyLocation ( int _val );
    int GetContourVecDigits ( );
    void PutContourVecDigits ( int _val );
    double GetContourVecLength ( );
    void PutContourVecLength ( double _val );
    int GetDeformRelativeToNode ( );
    void PutDeformRelativeToNode ( int _val );
    _variant_t GetvClipPlaneOrigin ( );
    void PutvClipPlaneOrigin ( const _variant_t & _val );
    _variant_t GetvClipPlaneNormal ( );
    void PutvClipPlaneNormal ( const _variant_t & _val );
    int GetFreebodyDigits ( );
    void PutFreebodyDigits ( int _val );
    double GetFreebodyLength ( );
    void PutFreebodyLength ( double _val );
    double GetFreebodyTotalForceFactor ( );
    void PutFreebodyTotalForceFactor ( double _val );
    double GetFreebodyTotalMomentFactor ( );
    void PutFreebodyTotalMomentFactor ( double _val );
    double GetFreebodyNodalForceFactor ( );
    void PutFreebodyNodalForceFactor ( double _val );
    double GetFreebodyNodalMomentFactor ( );
    void PutFreebodyNodalMomentFactor ( double _val );
    double GetFreebodyUnitsPerLength ( );
    void PutFreebodyUnitsPerLength ( double _val );
    VARIANT_BOOL GetBlankNodesOff ( );
    void PutBlankNodesOff ( VARIANT_BOOL _val );
    int GetContourDataSelection ( );
    void PutContourDataSelection ( int _val );
    int GetContourVector1 ( );
    void PutContourVector1 ( int _val );
    int GetContourVector2 ( );
    void PutContourVector2 ( int _val );
    int GetContourVector3 ( );
    void PutContourVector3 ( int _val );
    VARIANT_BOOL GetContourCornerData ( );
    void PutContourCornerData ( VARIANT_BOOL _val );
    int GetContourDataConversion ( );
    void PutContourDataConversion ( int _val );
    int GetComplexSyncMethod ( );
    void PutComplexSyncMethod ( int _val );
    double GetComplexSyncPhase ( );
    void PutComplexSyncPhase ( double _val );
    double GetComplexSyncIncrement ( );
    void PutComplexSyncIncrement ( double _val );
    _variant_t GetvContourVecOn ( );
    void PutvContourVecOn ( const _variant_t & _val );
    VARIANT_BOOL GetContourVecAutoVec ( );
    void PutContourVecAutoVec ( VARIANT_BOOL _val );
    VARIANT_BOOL GetContourVecAutoOrient ( );
    void PutContourVecAutoOrient ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTransformDeformXInput ( );
    void PutTransformDeformXInput ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTransformDeformYInput ( );
    void PutTransformDeformYInput ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTransformDeformZInput ( );
    void PutTransformDeformZInput ( VARIANT_BOOL _val );
    double GetTransformPlateTolerance ( );
    void PutTransformPlateTolerance ( double _val );
    VARIANT_BOOL GetContourVecMinVecOn ( );
    void PutContourVecMinVecOn ( VARIANT_BOOL _val );
    double GetContourVecMinVec ( );
    void PutContourVecMinVec ( double _val );
    double GetContourVecMinLen ( );
    void PutContourVecMinLen ( double _val );
    enum zColor GetContourVecColor1 ( );
    void PutContourVecColor1 ( enum zColor _val );
    int GetLabelGroup ( );
    void PutLabelGroup ( int _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zViewMode
{
    FVM_DRAW = 0,
    FVM_FEATURE = 1,
    FVM_SORT = 2,
    FVM_HIDE = 3,
    FVM_FREE = 4,
    FVM_FREE_FACE = 5,
    FVM_XY_VS_ID = 6,
    FVM_XY_VS_CASE = 7,
    FVM_XY_VS_VALUE = 8,
    FVM_XY_VS_POSITION = 9,
    FVM_XY_OF_FUNCTION = 10
};

enum zDeformedFormat
{
    FDF_NONE = 0,
    FDF_MODEL_UNDEF = 0,
    FDF_DEFORMED = 1,
    FDF_ANIMATE = 2,
    FDF_ANIMATE_MULTICASE = 3,
    FDF_ARROW = 4,
    FDF_TRACE = 5,
    FDF_STREAMLINE = 6
};

enum zContourFormat
{
    FCF_NONE = 0,
    FCF_MODEL_COLOR = 0,
    FCF_CONTOUR = 1,
    FCF_CRITERIA = 2,
    FCF_BEAM_DIAGRAM = 3,
    FCF_ISOSURFACE = 4,
    FCF_SECTION_CUT = 5,
    FCF_CONTOUR_VECTOR = 6
};

enum zViewOptions
{
    FVI_LABEL = 0,
    FVI_CSYS = 1,
    FVI_POINT = 2,
    FVI_CURVE = 3,
    FVI_CURVE_MESHSIZE = 24,
    FVI_SURFACE = 4,
    FVI_VOLUME = 5,
    FVI_TEXT = 6,
    FVI_BOUNDARY = 27,
    FVI_NODE = 7,
    FVI_NODE_PERMCONSTRAINT = 8,
    FVI_ELEMENT = 9,
    FVI_ELEMENT_DIRECTION = 10,
    FVI_ELEMENT_OFFSET = 11,
    FVI_ELEMENT_MATL_DIR = 115,
    FVI_BEAM_ORIENT = 12,
    FVI_ELEMENT_ORIENT = 12,
    FVI_BEAM_YAXIS = 13,
    FVI_ELEMENT_WELD = 90,
    FVI_RIGID = 94,
    FVI_LOAD_VECTORS = 78,
    FVI_LOAD_FORCE = 14,
    FVI_LOAD_MOMENT = 15,
    FVI_LOAD_THERMAL = 16,
    FVI_LOAD_DISTRIBUTEDLOAD = 71,
    FVI_LOAD_PRESSURE = 17,
    FVI_LOAD_ACCELERATION = 18,
    FVI_LOAD_ENFORCEDDISP = 19,
    FVI_LOAD_VELOCITY = 72,
    FVI_LOAD_NONLINEARFORCE = 73,
    FVI_LOAD_HEATGEN = 66,
    FVI_LOAD_HEATFLUX = 67,
    FVI_LOAD_CONVECTION = 68,
    FVI_LOAD_RADIATION = 69,
    FVI_BOLT_PRELOAD = 93,
    FVI_LOAD_FLUIDTRACKING = 81,
    FVI_LOAD_UNKNOWN = 82,
    FVI_LOAD_SLIPWALL = 83,
    FVI_LOAD_FANCURVE = 84,
    FVI_LOAD_PERIODIC = 85,
    FVI_CONSTRAINT = 20,
    FVI_CONSTRAINT_EQUATION = 21,
    FVI_CONNECTOR = 79,
    FVI_CONNECTION_REGION = 91,
    FVI_FREE_EDGE = 22,
    FVI_SHRINK_ELEM = 23,
    FVI_FILL_ELEM = 25,
    FVI_FILLED_EDGES = 26,
    FVI_RENDER_OPTIONS = 77,
    FVI_TRANSPARENCY = 92,
    FVI_SHADING = 28,
    FVI_PERSPECTIVE = 29,
    FVI_STEREO = 30,
    FVI_VIEW_LEGEND = 31,
    FVI_VIEW_AXES = 32,
    FVI_AXISYM_AXIS = 87,
    FVI_ORIGIN = 33,
    FVI_WORKPLANE = 34,
    FVI_WORKPLANE_GRID = 35,
    FVI_CLIPPING_PLANE = 36,
    FVI_SYMBOL = 37,
    FVI_ASPECT_RATIO = 38,
    FVI_CURVE_ACCURACY = 39,
    FVI_POST_TITLES = 40,
    FVI_DEFORMED_STYLE = 41,
    FVI_VECTOR_STYLE = 42,
    FVI_ANIMATED_STYLE = 43,
    FVI_DEFORMED = 44,
    FVI_UNDEFORMED = 45,
    FVI_TRACE_STYLE = 74,
    FVI_CONTOUR_TYPE = 80,
    FVI_CONTOUR_STYLE = 46,
    FVI_CONTOUR_LEVELS = 47,
    FVI_CONTOUR_LEGEND = 48,
    FVI_CRITERIA_LIMITS = 49,
    FVI_CRITERIA_PASS = 50,
    FVI_CRITERIA_FAIL = 51,
    FVI_BEAM_DIAGRAM = 86,
    FVI_ISOSURFACE = 76,
    FVI_ISOLINE = 88,
    FVI_STREAMLINE = 89,
    FVI_CONTOUR_VECTOR = 75,
    FVI_XY_TITLES = 52,
    FVI_XY_LEGEND = 53,
    FVI_XY_AXES_STYLE = 54,
    FVI_XY_XAXIS = 55,
    FVI_XY_YAXIS = 56,
    FVI_XY_CURVE1 = 57,
    FVI_XY_CURVE2 = 58,
    FVI_XY_CURVE3 = 59,
    FVI_XY_CURVE4 = 60,
    FVI_XY_CURVE5 = 61,
    FVI_XY_CURVE6 = 62,
    FVI_XY_CURVE7 = 63,
    FVI_XY_CURVE8 = 64,
    FVI_XY_CURVE9 = 65,
    FVI_COMPOSITE_CURVE = 95,
    FVI_ELEM_CSYS = 96,
    FVI_INTERIOR_CURVE = 97,
    FVI_INTERIOR_SURFACE = 98,
    FVI_INTERIOR_POINT = 99,
    FVI_LOAD_BODY = 100,
    FVI_FREEBODY_NODEMARKER = 106,
    FVI_FREEBODY_TOTAL_F = 107,
    FVI_FREEBODY_TOTAL_M = 110,
    FVI_FREEBODY_NODAL_F = 111,
    FVI_FREEBODY_NODAL_M = 112,
    FVI_AERO_PANEL = 102,
    FVI_AERO_MESH = 103,
    FVI_AERO_SPLINE = 104,
    FVI_AERO_SURFACE = 105,
    FVI_AERO_INTERFERENCE = 108,
    FVI_PREVIEW = 109,
    FVI_CLIP_PLANE = 101,
    FVI_FREEBODY = 114,
    FVI_FREEBODY_VECTOR = 113,
    FVI_CONTOUR_ARROW_OPT = 117,
    FVI_PERF_GRAPHICS = 116
};

struct __declspec(uuid("037bfa02-f86c-11d4-9458-001083fff11c"))
View;
    // [ default ] dispinterface IView

struct __declspec(uuid("3042ddd0-bb63-41cb-85f7-52fde63b0624"))
IViewOrient : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcenter,put=Putcenter))
    double center[];
    __declspec(property(get=GetRotationCenter,put=PutRotationCenter))
    double RotationCenter[];
    __declspec(property(get=GetRotationVector,put=PutRotationVector))
    double RotationVector[];
    __declspec(property(get=GetvCenter,put=PutvCenter))
    _variant_t vCenter;
    __declspec(property(get=GetMagnification,put=PutMagnification))
    double Magnification;
    __declspec(property(get=GetModelAlwaysInFront,put=PutModelAlwaysInFront))
    VARIANT_BOOL ModelAlwaysInFront;
    __declspec(property(get=GetAutoAspectRatio,put=PutAutoAspectRatio))
    VARIANT_BOOL AutoAspectRatio;
    __declspec(property(get=GetAspectRatio,put=PutAspectRatio))
    double AspectRatio;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    VARIANT_BOOL Perspective;
    __declspec(property(get=GetPerspectiveAngle,put=PutPerspectiveAngle))
    double PerspectiveAngle;
    __declspec(property(get=GetRotationAxesOption,put=PutRotationAxesOption))
    int RotationAxesOption;
    __declspec(property(get=GetRotationCenterOption,put=PutRotationCenterOption))
    int RotationCenterOption;
    __declspec(property(get=GetRotationCoordSys,put=PutRotationCoordSys))
    int RotationCoordSys;
    __declspec(property(get=GetSingleAxis,put=PutSingleAxis))
    VARIANT_BOOL SingleAxis;
    __declspec(property(get=GetvRotationCenter,put=PutvRotationCenter))
    _variant_t vRotationCenter;
    __declspec(property(get=GetvRotationVector,put=PutvRotationVector))
    _variant_t vRotationVector;
    __declspec(property(get=GetSecondaryRotationAxesOption,put=PutSecondaryRotationAxesOption))
    int SecondaryRotationAxesOption;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getcenter (
        int nVectorIndex );
    void Putcenter (
        int nVectorIndex,
        double _arg2 );
    double GetRotationCenter (
        int nVectorIndex );
    void PutRotationCenter (
        int nVectorIndex,
        double _arg2 );
    double GetRotationVector (
        int nVectorIndex );
    void PutRotationVector (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode SetEyeDirection (
        double dEyeX,
        double dEyeY,
        double dEyeZ,
        double dRightX,
        double dRightY,
        double dRightZ );
    enum zReturnCode GetEyeDirection (
        double * pdEyeX,
        double * pdEyeY,
        double * pdEyeZ,
        double * pdRightX,
        double * pdRightY,
        double * pdRightZ );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode ViewRotation (
        VARIANT_BOOL qUseCenter,
        double dX,
        double dY,
        double dZ );
    enum zReturnCode ModelRotation (
        VARIANT_BOOL qUseCenter,
        double dX,
        double dY,
        double dZ );
    enum zReturnCode CoordSysRotation (
        int iCoordSys,
        VARIANT_BOOL qUseCenter,
        double dX,
        double dY,
        double dZ );
    enum zReturnCode VectorRotation (
        double dX,
        double dY,
        double dZ,
        double dVX,
        double dVY,
        double dVZ );
    enum zReturnCode RollThru ( );
    enum zReturnCode RecordStart (
        int nMaxFrames,
        int iViewID,
        int iPathID );
    enum zReturnCode RecordEnd ( );
    enum zReturnCode PlaybackStart (
        int iViewID,
        int iPathID );
    enum zReturnCode PlaybackNext ( );
    enum zReturnCode PlaybackDelete (
        int iPathID );
    enum zReturnCode SnapToAxes ( );
    enum zReturnCode SetRotationAngles (
        double dX,
        double dY,
        double dZ );
    enum zReturnCode GetRotationAngles (
        double * pdX,
        double * pdY,
        double * pdZ );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _variant_t GetvCenter ( );
    void PutvCenter ( const _variant_t & _val );
    double GetMagnification ( );
    void PutMagnification ( double _val );
    VARIANT_BOOL GetModelAlwaysInFront ( );
    void PutModelAlwaysInFront ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAutoAspectRatio ( );
    void PutAutoAspectRatio ( VARIANT_BOOL _val );
    double GetAspectRatio ( );
    void PutAspectRatio ( double _val );
    VARIANT_BOOL GetPerspective ( );
    void PutPerspective ( VARIANT_BOOL _val );
    double GetPerspectiveAngle ( );
    void PutPerspectiveAngle ( double _val );
    int GetRotationAxesOption ( );
    void PutRotationAxesOption ( int _val );
    int GetRotationCenterOption ( );
    void PutRotationCenterOption ( int _val );
    int GetRotationCoordSys ( );
    void PutRotationCoordSys ( int _val );
    VARIANT_BOOL GetSingleAxis ( );
    void PutSingleAxis ( VARIANT_BOOL _val );
    _variant_t GetvRotationCenter ( );
    void PutvRotationCenter ( const _variant_t & _val );
    _variant_t GetvRotationVector ( );
    void PutvRotationVector ( const _variant_t & _val );
    int GetSecondaryRotationAxesOption ( );
    void PutSecondaryRotationAxesOption ( int _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("3042ddd2-bb63-41cb-85f7-52fde63b0624"))
ViewOrient;
    // [ default ] dispinterface IViewOrient

struct __declspec(uuid("fdea6c66-77f3-4f6c-bdb9-ea976919b421"))
IText : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTextPosition,put=PutTextPosition))
    double TextPosition[];
    __declspec(property(get=GetPointerPosition,put=PutPointerPosition))
    double PointerPosition[];
    __declspec(property(get=GetModelPosition,put=PutModelPosition))
    VARIANT_BOOL ModelPosition;
    __declspec(property(get=GetAllViews,put=PutAllViews))
    VARIANT_BOOL AllViews;
    __declspec(property(get=GetDrawPointer,put=PutDrawPointer))
    VARIANT_BOOL DrawPointer;
    __declspec(property(get=GetDrawBorder,put=PutDrawBorder))
    VARIANT_BOOL DrawBorder;
    __declspec(property(get=GetVisibleView,put=PutVisibleView))
    int VisibleView;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    enum zColor BorderColor;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    enum zColor BackColor;
    __declspec(property(get=GetHorzJustify,put=PutHorzJustify))
    int HorzJustify;
    __declspec(property(get=GetVertJustify,put=PutVertJustify))
    int VertJustify;
    __declspec(property(get=GetFontNumber,put=PutFontNumber))
    int FontNumber;
    __declspec(property(get=Gettext,put=Puttext))
    _bstr_t text;
    __declspec(property(get=GetvTextPosition,put=PutvTextPosition))
    _variant_t vTextPosition;
    __declspec(property(get=GetvPointerPosition,put=PutvPointerPosition))
    _variant_t vPointerPosition;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetTextPosition (
        int nVectorIndex );
    void PutTextPosition (
        int nVectorIndex,
        double _arg2 );
    double GetPointerPosition (
        int nVectorIndex );
    void PutPointerPosition (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    VARIANT_BOOL GetModelPosition ( );
    void PutModelPosition ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAllViews ( );
    void PutAllViews ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDrawPointer ( );
    void PutDrawPointer ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDrawBorder ( );
    void PutDrawBorder ( VARIANT_BOOL _val );
    int GetVisibleView ( );
    void PutVisibleView ( int _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    enum zColor GetBorderColor ( );
    void PutBorderColor ( enum zColor _val );
    enum zColor GetBackColor ( );
    void PutBackColor ( enum zColor _val );
    int GetHorzJustify ( );
    void PutHorzJustify ( int _val );
    int GetVertJustify ( );
    void PutVertJustify ( int _val );
    int GetFontNumber ( );
    void PutFontNumber ( int _val );
    _bstr_t Gettext ( );
    void Puttext ( _bstr_t _val );
    _variant_t GetvTextPosition ( );
    void PutvTextPosition ( const _variant_t & _val );
    _variant_t GetvPointerPosition ( );
    void PutvPointerPosition ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("fdea6c67-77f3-4f6c-bdb9-ea976919b421"))
text;
    // [ default ] dispinterface IText

struct __declspec(uuid("fa64fd83-5c92-425f-87b4-fc849d84898b"))
IConnectionProp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getflag,put=Putflag))
    VARIANT_BOOL flag[];
    __declspec(property(get=GetflagI,put=PutflagI))
    int flagI[];
    __declspec(property(get=Getpval,put=Putpval))
    double pval[];
    __declspec(property(get=Getplyval,put=Putplyval))
    int plyval[];
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Gettype,put=Puttype))
    enum zConnectionPropType type;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getplymat,put=Putplymat))
    _variant_t plymat;
    __declspec(property(get=Getpmat,put=Putpmat))
    _variant_t pmat;
    __declspec(property(get=Getvflag,put=Putvflag))
    _variant_t vflag;
    __declspec(property(get=GetvflagI,put=PutvflagI))
    _variant_t vflagI;
    __declspec(property(get=Getvpval,put=Putvpval))
    _variant_t vpval;
    __declspec(property(get=Getvplyval,put=Putvplyval))
    _variant_t vplyval;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Getflag (
        int nVectorIndex );
    void Putflag (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    int GetflagI (
        int nVectorIndex );
    void PutflagI (
        int nVectorIndex,
        int _arg2 );
    double Getpval (
        int nVectorIndex );
    void Putpval (
        int nVectorIndex,
        double _arg2 );
    int Getplyval (
        int nVectorIndex );
    void Putplyval (
        int nVectorIndex,
        int _arg2 );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode SetDefaults (
        double dContactTolerance );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    enum zConnectionPropType Gettype ( );
    void Puttype ( enum zConnectionPropType _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    _variant_t Getplymat ( );
    void Putplymat ( const _variant_t & _val );
    _variant_t Getpmat ( );
    void Putpmat ( const _variant_t & _val );
    _variant_t Getvflag ( );
    void Putvflag ( const _variant_t & _val );
    _variant_t GetvflagI ( );
    void PutvflagI ( const _variant_t & _val );
    _variant_t Getvpval ( );
    void Putvpval ( const _variant_t & _val );
    _variant_t Getvplyval ( );
    void Putvplyval ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zConnectionPropType
{
    FCPT_CONTACT = 0,
    FCPT_GLUED = 1
};

struct __declspec(uuid("fa64fd81-5c92-425f-87b4-fc849d84898b"))
ConnectionProp;
    // [ default ] dispinterface IConnectionProp

struct __declspec(uuid("1a8c9c57-6711-4498-bdd9-8bd54586842e"))
IConnection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetContact,put=PutContact))
    int Contact[];
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=GetpropID,put=PutpropID))
    int propID;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getvcontact,put=Putvcontact))
    _variant_t vcontact;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int GetContact (
        int nVectorIndex );
    void PutContact (
        int nVectorIndex,
        int _arg2 );
    enum zReturnCode Put (
        int entID );
    IConnectionPropPtr Prop ( );
    enum zReturnCode Enable (
        VARIANT_BOOL bEnable );
    enum zReturnCode IsEnabled ( );
    enum zReturnCode BoundingBox (
        VARIANT * box );
    enum zReturnCode BoundingBoxInCSys (
        int nCSysID,
        VARIANT * box );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    int GetpropID ( );
    void PutpropID ( int _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    _variant_t Getvcontact ( );
    void Putvcontact ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("1a8c9c55-6711-4498-bdd9-8bd54586842e"))
Connection;
    // [ default ] dispinterface IConnection

struct __declspec(uuid("98d6bd3c-3ddd-4457-b6ad-15d6a1f3ce51"))
IScratch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetbData,put=PutbData))
    VARIANT_BOOL bData[];
    __declspec(property(get=GetnData,put=PutnData))
    int nData[];
    __declspec(property(get=GetrData,put=PutrData))
    double rData[];
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetbData (
        int nVectorIndex );
    void PutbData (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    int GetnData (
        int nVectorIndex );
    void PutnData (
        int nVectorIndex,
        int _arg2 );
    double GetrData (
        int nVectorIndex );
    void PutrData (
        int nVectorIndex,
        double _arg2 );
    // Method 'GetpData' not emitted because of invalid return type: void *
    // Method 'PutpData' not emitted because argument '_arg2' has invalid type: void *
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode Exist (
        int entID );
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    enum zReturnCode Reset ( );
    enum zReturnCode clear ( );
    enum zReturnCode Debug ( );

    // Properties:
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("98d6bd3e-3ddd-4457-b6ad-15d6a1f3ce51"))
Scratch;
    // [ default ] dispinterface IScratch

struct __declspec(uuid("8a3498f7-a383-419e-8117-86a0305175ff"))
ISelector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMultipleMode,put=PutMultipleMode))
    VARIANT_BOOL MultipleMode;
    __declspec(property(get=GetAddMode,put=PutAddMode))
    VARIANT_BOOL AddMode;
    __declspec(property(get=GetDrillMode,put=PutDrillMode))
    enum zSelectorDrill DrillMode;
    __declspec(property(get=GetRelatedMode,put=PutRelatedMode))
    VARIANT_BOOL RelatedMode;
    __declspec(property(get=GetSelectEntity,put=PutSelectEntity))
    enum zSelectorType SelectEntity;
    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode ClearAll ( );
    enum zReturnCode clear (
        enum zSelectorType entityTYPE );
    enum zReturnCode Count (
        enum zSelectorType entityTYPE,
        int * nSelected );
    enum zReturnCode SelectBox ( );
    enum zReturnCode SelectCircle ( );
    enum zReturnCode SelectPolygon ( );
    enum zReturnCode SelectFreehand ( );
    enum zReturnCode Grow ( );
    enum zReturnCode Shrink ( );
    enum zReturnCode Show (
        VARIANT_BOOL bShowAll );
    enum zReturnCode SaveGroup (
        int groupID );
    enum zReturnCode LoadGroup (
        int groupID );
    enum zReturnCode UpdateDataTable ( );
    enum zReturnCode Add (
        enum zSelectorType entityTYPE,
        int nID );
    enum zReturnCode AddSet (
        enum zSelectorType entityTYPE,
        int nSetD,
        VARIANT_BOOL bUpdateDataTable );
    ISetPtr GetSelected (
        enum zSelectorType entityTYPE );
    enum zReturnCode Copy ( );
    enum zReturnCode Paste (
        VARIANT_BOOL bShowDlg );
    enum zReturnCode GetSelectedID (
        enum zSelectorType entityTYPE,
        int * nNumSelected,
        VARIANT * pnSelectedID );
    enum zReturnCode Tooltips (
        VARIANT_BOOL bOn,
        VARIANT_BOOL bIncludeLayersAndGroups );

    // Properties:
    VARIANT_BOOL GetMultipleMode ( );
    void PutMultipleMode ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAddMode ( );
    void PutAddMode ( VARIANT_BOOL _val );
    enum zSelectorDrill GetDrillMode ( );
    void PutDrillMode ( enum zSelectorDrill _val );
    VARIANT_BOOL GetRelatedMode ( );
    void PutRelatedMode ( VARIANT_BOOL _val );
    enum zSelectorType GetSelectEntity ( );
    void PutSelectEntity ( enum zSelectorType _val );
    VARIANT_BOOL GetActive ( );
    void PutActive ( VARIANT_BOOL _val );
};

enum zSelectorDrill
{
    FSD_OFF = 0,
    FSD_QUERY = 1,
    FSD_FRONT = 2
};

enum zSelectorType
{
    FS_NONE = 0,
    FS_POINT = 3,
    FS_CURVE = 4,
    FS_SURFACE = 5,
    FS_SOLID = 39,
    FS_CONNECTION_PROP = 72,
    FS_CONNECTION_REGION = 58,
    FS_CONNECTION = 71,
    FS_CSYS = 9,
    FS_NODE = 7,
    FS_ELEM = 8,
    FS_MATL = 10,
    FS_PROP = 11,
    FS_LOAD_NODAL = 118,
    FS_LOAD_ELEMENTAL = 133,
    FS_LOAD_ON_POINT = 134,
    FS_LOAD_ON_CURVE = 135,
    FS_LOAD_ON_SURFACE = 136,
    FS_BC_NODAL = 139,
    FS_BC_EQUATION = 140,
    FS_BC_ON_POINT = 141,
    FS_BC_ON_CURVE = 142,
    FS_BC_ON_SURFACE = 143,
    FS_TEXT = 21
};

struct __declspec(uuid("8a3498f9-a383-419e-8117-86a0305175ff"))
Selector;
    // [ default ] dispinterface ISelector

struct __declspec(uuid("a9bf3a1f-e8f6-4d5c-bc48-a191c61c57d2"))
ILoadDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetloadType,put=PutloadType))
    enum zLoadType loadType;
    __declspec(property(get=GetdataType,put=PutdataType))
    enum zDataType dataType;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode PutAll (
        int entID,
        enum zDataType enDataType,
        enum zLoadType enLoadType,
        _bstr_t sTitle );
    enum zReturnCode ResetNextLoad ( );
    enum zReturnCode NextLoad (
        IDispatch * * pDispatch );
    int CountLoads ( );
    enum zReturnCode IsTotalLoad ( );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    enum zLoadType GetloadType ( );
    void PutloadType ( enum zLoadType _val );
    enum zDataType GetdataType ( );
    void PutdataType ( enum zDataType _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("a9bf3a21-e8f6-4d5c-bc48-a191c61c57d2"))
LoadDefinition;
    // [ default ] dispinterface ILoadDefinition

struct __declspec(uuid("f1704416-2455-4c38-8c0c-ae23e062d421"))
IBCDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetOnType,put=PutOnType))
    enum zDataType OnType;
    __declspec(property(get=GetdataType,put=PutdataType))
    enum zDataType dataType;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode PutAll (
        int entID,
        enum zDataType enDataType,
        enum zDataType enOnType,
        _bstr_t sTitle );
    enum zReturnCode ResetNextBC ( );
    enum zReturnCode NextBC (
        IDispatch * * pDispatch );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    enum zDataType GetOnType ( );
    void PutOnType ( enum zDataType _val );
    enum zDataType GetdataType ( );
    void PutdataType ( enum zDataType _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("f1704418-2455-4c38-8c0c-ae23e062d421"))
BCDefinition;
    // [ default ] dispinterface IBCDefinition

struct __declspec(uuid("90c90b34-d880-497a-9cd6-aac2cadb7b7c"))
IGFXPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getxyz,put=Putxyz))
    double xyz[];
    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getz,put=Putz))
    double z;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getsymbol,put=Putsymbol))
    enum zGFXPointSymbol symbol;
    __declspec(property(get=GetvXYZ,put=PutvXYZ))
    _variant_t vXYZ;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getxyz (
        int nVectorIndex );
    void Putxyz (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode PutAll (
        int entID,
        double x,
        double y,
        double z,
        int layer,
        enum zColor color,
        enum zGFXPointSymbol symbol );
    enum zReturnCode PutAllArray (
        int numPoint,
        const _variant_t & entID,
        const _variant_t & xyz,
        const _variant_t & layer,
        const _variant_t & color,
        const _variant_t & symbol );
    enum zReturnCode PutCoordArray (
        int numPoint,
        const _variant_t & xyz,
        int layer,
        enum zColor color,
        enum zGFXPointSymbol symbol );
    enum zReturnCode DeleteAll (
        VARIANT_BOOL bAllSets,
        int nSetID );
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getz ( );
    void Putz ( double _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    enum zGFXPointSymbol Getsymbol ( );
    void Putsymbol ( enum zGFXPointSymbol _val );
    _variant_t GetvXYZ ( );
    void PutvXYZ ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zGFXPointSymbol
{
    GPS_POINT = 0,
    GPS_SQUARE = 1,
    GPS_SQUARE_FILLED = 2,
    GPS_DIAMOND = 3,
    GPS_X = 4,
    GPS_TRIANGLE = 5,
    GPS_SMALL_TRIANGLE = 6,
    GPS_CROSS = 7,
    GPS_CIRCLE = 8,
    GPS_CIRCLE_FILLED = 9,
    GPS_BLANK = 10
};

struct __declspec(uuid("90c90b36-d880-497a-9cd6-aac2cadb7b7c"))
GFXPoint;
    // [ default ] dispinterface IGFXPoint

struct __declspec(uuid("72fa0dcd-21f2-4e55-9edc-5d4f64ed7ec6"))
IGFXLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getxyz,put=Putxyz))
    double xyz[][];
    __declspec(property(get=Getx1,put=Putx1))
    double x1;
    __declspec(property(get=Gety1,put=Puty1))
    double y1;
    __declspec(property(get=Getz1,put=Putz1))
    double z1;
    __declspec(property(get=Getx2,put=Putx2))
    double x2;
    __declspec(property(get=Gety2,put=Puty2))
    double y2;
    __declspec(property(get=Getz2,put=Putz2))
    double z2;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=GetvXYZ,put=PutvXYZ))
    _variant_t vXYZ;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getxyz (
        int nRowIndex,
        int nColIndex );
    void Putxyz (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    enum zReturnCode PutAll (
        int entID,
        double x1,
        double y1,
        double z1,
        double x2,
        double y2,
        double z2,
        int layer,
        enum zColor color );
    enum zReturnCode PutAllArray (
        int numLine,
        const _variant_t & entID,
        const _variant_t & xyz,
        const _variant_t & layer,
        const _variant_t & color );
    enum zReturnCode PutCoordArray (
        int numLine,
        const _variant_t & xyz,
        int layer,
        enum zColor color );
    enum zReturnCode DeleteAll (
        VARIANT_BOOL bAllSets,
        int nSetID );
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    double Getx1 ( );
    void Putx1 ( double _val );
    double Gety1 ( );
    void Puty1 ( double _val );
    double Getz1 ( );
    void Putz1 ( double _val );
    double Getx2 ( );
    void Putx2 ( double _val );
    double Gety2 ( );
    void Puty2 ( double _val );
    double Getz2 ( );
    void Putz2 ( double _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    _variant_t GetvXYZ ( );
    void PutvXYZ ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("72fa0dcf-21f2-4e55-9edc-5d4f64ed7ec6"))
GFXLine;
    // [ default ] dispinterface IGFXLine

struct __declspec(uuid("1694667a-a6bd-4ea1-b1f0-6485588cdaeb"))
IGFXArrow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getxyz,put=Putxyz))
    double xyz[];
    __declspec(property(get=Getdxyz,put=Putdxyz))
    double dxyz[];
    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getz,put=Putz))
    double z;
    __declspec(property(get=GetdX,put=PutdX))
    double dX;
    __declspec(property(get=GetdY,put=PutdY))
    double dY;
    __declspec(property(get=GetdZ,put=PutdZ))
    double dZ;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=Getlengthmode,put=Putlengthmode))
    enum zGFXArrowMode lengthmode;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getstyle,put=Putstyle))
    enum zGFXArrowStyle style;
    __declspec(property(get=GetvXYZ,put=PutvXYZ))
    _variant_t vXYZ;
    __declspec(property(get=Getvdxyz,put=Putvdxyz))
    _variant_t vdxyz;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getxyz (
        int nVectorIndex );
    void Putxyz (
        int nVectorIndex,
        double _arg2 );
    double Getdxyz (
        int nVectorIndex );
    void Putdxyz (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode PutAll (
        int entID,
        double x,
        double y,
        double z,
        double dX,
        double dY,
        double dZ,
        double Length,
        enum zGFXArrowMode lengthmode,
        int layer,
        enum zColor color,
        enum zGFXArrowStyle style );
    enum zReturnCode PutAllArray (
        int numArrow,
        const _variant_t & entID,
        const _variant_t & xyz,
        const _variant_t & dxyz,
        const _variant_t & Length,
        const _variant_t & lengthmode,
        const _variant_t & layer,
        const _variant_t & color,
        const _variant_t & style );
    enum zReturnCode PutCoordArray (
        int numArrow,
        const _variant_t & xyz,
        const _variant_t & dxyz,
        const _variant_t & Length,
        enum zGFXArrowMode lengthmode,
        int layer,
        enum zColor color,
        enum zGFXArrowStyle style );
    enum zReturnCode DeleteAll (
        VARIANT_BOOL bAllSets,
        int nSetID );
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getz ( );
    void Putz ( double _val );
    double GetdX ( );
    void PutdX ( double _val );
    double GetdY ( );
    void PutdY ( double _val );
    double GetdZ ( );
    void PutdZ ( double _val );
    double GetLength ( );
    void PutLength ( double _val );
    enum zGFXArrowMode Getlengthmode ( );
    void Putlengthmode ( enum zGFXArrowMode _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    enum zGFXArrowStyle Getstyle ( );
    void Putstyle ( enum zGFXArrowStyle _val );
    _variant_t GetvXYZ ( );
    void PutvXYZ ( const _variant_t & _val );
    _variant_t Getvdxyz ( );
    void Putvdxyz ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zGFXArrowMode
{
    GAM_ABSOLUTE = 0,
    GAM_SCALED = 1
};

enum zGFXArrowStyle
{
    GAS_LINE = 0,
    GAS_SOLID = 1,
    GAS_DOUBLE_LINE = 2,
    GAS_DOUBLE_SOLID = 3,
    GAS_REV_DOUBLE_LINE = 4,
    GAS_REV_DOUBLE_SOLID = 5
};

struct __declspec(uuid("1694667c-a6bd-4ea1-b1f0-6485588cdaeb"))
GFXArrow;
    // [ default ] dispinterface IGFXArrow

struct __declspec(uuid("cac6d4f9-4d32-42c5-910c-d73fbb9aeb62"))
IGFXTria3 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getxyz,put=Putxyz))
    double xyz[][];
    __declspec(property(get=Getnormal,put=Putnormal))
    double normal[][];
    __declspec(property(get=GetvXYZ,put=PutvXYZ))
    _variant_t vXYZ;
    __declspec(property(get=GetvNormal,put=PutvNormal))
    _variant_t vNormal;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getfillcolor,put=Putfillcolor))
    enum zColor fillcolor;
    __declspec(property(get=Getedgecolor,put=Putedgecolor))
    enum zColor edgecolor;
    __declspec(property(get=Getedgeflags,put=Putedgeflags))
    enum zGFXEdgeFlags edgeflags;
    __declspec(property(get=Getautonormal,put=Putautonormal))
    VARIANT_BOOL autonormal;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getxyz (
        int nRowIndex,
        int nColIndex );
    void Putxyz (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    double Getnormal (
        int nRowIndex,
        int nColIndex );
    void Putnormal (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    enum zReturnCode PutAll (
        int entID,
        const _variant_t & xyz,
        enum zGFXEdgeFlags edgeflags,
        const _variant_t & normal,
        VARIANT_BOOL autonormal,
        int layer,
        enum zColor fillcolor,
        enum zColor edgecolor );
    enum zReturnCode PutAllArray (
        int numTria,
        const _variant_t & entID,
        const _variant_t & xyz,
        const _variant_t & edgeflags,
        const _variant_t & normal,
        const _variant_t & autonormal,
        const _variant_t & layer,
        const _variant_t & fillcolor,
        const _variant_t & edgecolor );
    enum zReturnCode PutCoordNormalArray (
        int numTria,
        const _variant_t & xyz,
        const _variant_t & edgeflags,
        const _variant_t & normal,
        VARIANT_BOOL autonormal,
        int layer,
        enum zColor fillcolor,
        enum zColor edgecolor );
    enum zReturnCode PutCoordArray (
        int numTria,
        const _variant_t & xyz,
        int layer,
        enum zColor fillcolor,
        enum zColor edgecolor );
    enum zReturnCode DeleteAll (
        VARIANT_BOOL bAllSets,
        int nSetID );
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _variant_t GetvXYZ ( );
    void PutvXYZ ( const _variant_t & _val );
    _variant_t GetvNormal ( );
    void PutvNormal ( const _variant_t & _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getfillcolor ( );
    void Putfillcolor ( enum zColor _val );
    enum zColor Getedgecolor ( );
    void Putedgecolor ( enum zColor _val );
    enum zGFXEdgeFlags Getedgeflags ( );
    void Putedgeflags ( enum zGFXEdgeFlags _val );
    VARIANT_BOOL Getautonormal ( );
    void Putautonormal ( VARIANT_BOOL _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zGFXEdgeFlags
{
    GEF_NONE = 0,
    GEF_EDGE1 = 1,
    GEF_EDGE2 = 2,
    GEF_EDGE3 = 4,
    GEF_EDGE4 = 8,
    GEF_ALL = 15
};

struct __declspec(uuid("cac6d4fb-4d32-42c5-910c-d73fbb9aeb62"))
GFXTria3;
    // [ default ] dispinterface IGFXTria3

struct __declspec(uuid("5070769b-079c-46e2-bb16-57d7260f9c2b"))
IGFXQuad4 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getxyz,put=Putxyz))
    double xyz[][];
    __declspec(property(get=Getnormal,put=Putnormal))
    double normal[][];
    __declspec(property(get=GetvXYZ,put=PutvXYZ))
    _variant_t vXYZ;
    __declspec(property(get=GetvNormal,put=PutvNormal))
    _variant_t vNormal;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getfillcolor,put=Putfillcolor))
    enum zColor fillcolor;
    __declspec(property(get=Getedgecolor,put=Putedgecolor))
    enum zColor edgecolor;
    __declspec(property(get=Getedgeflags,put=Putedgeflags))
    enum zGFXEdgeFlags edgeflags;
    __declspec(property(get=Getautonormal,put=Putautonormal))
    VARIANT_BOOL autonormal;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getxyz (
        int nRowIndex,
        int nColIndex );
    void Putxyz (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    double Getnormal (
        int nRowIndex,
        int nColIndex );
    void Putnormal (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    enum zReturnCode PutAll (
        int entID,
        const _variant_t & xyz,
        enum zGFXEdgeFlags edgeflags,
        const _variant_t & normal,
        VARIANT_BOOL autonormal,
        int layer,
        enum zColor fillcolor,
        enum zColor edgecolor );
    enum zReturnCode PutAllArray (
        int numQuad,
        const _variant_t & entID,
        const _variant_t & xyz,
        const _variant_t & edgeflags,
        const _variant_t & normal,
        const _variant_t & autonormal,
        const _variant_t & layer,
        const _variant_t & fillcolor,
        const _variant_t & edgecolor );
    enum zReturnCode PutCoordNormalArray (
        int numQuad,
        const _variant_t & xyz,
        const _variant_t & edgeflags,
        const _variant_t & normal,
        VARIANT_BOOL autonormal,
        int layer,
        enum zColor fillcolor,
        enum zColor edgecolor );
    enum zReturnCode PutCoordArray (
        int numQuad,
        const _variant_t & xyz,
        int layer,
        enum zColor fillcolor,
        enum zColor edgecolor );
    enum zReturnCode DeleteAll (
        VARIANT_BOOL bAllSets,
        int nSetID );
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _variant_t GetvXYZ ( );
    void PutvXYZ ( const _variant_t & _val );
    _variant_t GetvNormal ( );
    void PutvNormal ( const _variant_t & _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getfillcolor ( );
    void Putfillcolor ( enum zColor _val );
    enum zColor Getedgecolor ( );
    void Putedgecolor ( enum zColor _val );
    enum zGFXEdgeFlags Getedgeflags ( );
    void Putedgeflags ( enum zGFXEdgeFlags _val );
    VARIANT_BOOL Getautonormal ( );
    void Putautonormal ( VARIANT_BOOL _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("5070769d-079c-46e2-bb16-57d7260f9c2b"))
GFXQuad4;
    // [ default ] dispinterface IGFXQuad4

struct __declspec(uuid("a09ece66-9245-409b-9321-a2476ae7d4e7"))
IGlobalPly : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getthickness,put=Putthickness))
    double thickness;
    __declspec(property(get=GetmatlID,put=PutmatlID))
    int matlID;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    double Getthickness ( );
    void Putthickness ( double _val );
    int GetmatlID ( );
    void PutmatlID ( int _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("a09ece68-9245-409b-9321-a2476ae7d4e7"))
globalply;
    // [ default ] dispinterface IGlobalPly

struct __declspec(uuid("0dc9d655-721a-4ae7-b468-0c4b0fdc97aa"))
ILoadBolt : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getpreload,put=Putpreload))
    double preload;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=GetLoadDefinitionID,put=PutLoadDefinitionID))
    int LoadDefinitionID;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode Put (
        int entID );
    enum zReturnCode Delete (
        int entID );
    enum zReturnCode AddArray (
        int Count,
        const _variant_t & RegionID,
        const _variant_t & values );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    double Getpreload ( );
    void Putpreload ( double _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    int GetLoadDefinitionID ( );
    void PutLoadDefinitionID ( int _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("0dc9d657-721a-4ae7-b468-0c4b0fdc97aa"))
LoadBolt;
    // [ default ] dispinterface ILoadBolt

struct __declspec(uuid("fb7c8189-2114-43d6-86de-78138cdf8c0b"))
IMapOutput : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMapOption,put=PutMapOption))
    enum zMapOption MapOption;
    __declspec(property(get=GetDefaultMapValue1,put=PutDefaultMapValue1))
    double DefaultMapValue1;
    __declspec(property(get=GetDefaultMapValue2,put=PutDefaultMapValue2))
    double DefaultMapValue2;
    __declspec(property(get=GetDefaultMapValue3,put=PutDefaultMapValue3))
    double DefaultMapValue3;
    __declspec(property(get=GetTargetSet,put=PutTargetSet))
    int TargetSet;
    __declspec(property(get=GetloadType,put=PutloadType))
    enum zMapLoadType loadType;
    __declspec(property(get=GetMapToType,put=PutMapToType))
    enum zMapType MapToType;
    __declspec(property(get=GetMapOffsetTolerance,put=PutMapOffsetTolerance))
    double MapOffsetTolerance;
    __declspec(property(get=GetDataConversion,put=PutDataConversion))
    enum zDataConvert DataConversion;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode MapFromModelToSet (
        __int64 outModelID,
        int nGroup,
        int nOutSet,
        int nOutVect );
    enum zReturnCode MapFromModelToSet2 (
        __int64 outModelID,
        int nGroup,
        int nOutSet,
        int nOutVect,
        const _variant_t & ID,
        const _variant_t & elFace );
    enum zReturnCode MapFromModelToLocation (
        __int64 outModelID,
        int nGroup,
        int nOutSet,
        int nOutVect,
        const _variant_t & vLocationX,
        const _variant_t & vLocationY,
        const _variant_t & vLocationZ,
        VARIANT * vLocationP,
        VARIANT * vLoadX,
        VARIANT * vLoadY,
        VARIANT * vLoadZ );
    enum zReturnCode GetOutputDataSurface (
        int dataSurfID );
    enum zReturnCode MapOutputDataToLocation (
        int Count,
        const _variant_t & vXYx,
        VARIANT * vValXYZ,
        VARIANT * qValid );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode FirstInSet (
        int nSetID );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    enum zMapOption GetMapOption ( );
    void PutMapOption ( enum zMapOption _val );
    double GetDefaultMapValue1 ( );
    void PutDefaultMapValue1 ( double _val );
    double GetDefaultMapValue2 ( );
    void PutDefaultMapValue2 ( double _val );
    double GetDefaultMapValue3 ( );
    void PutDefaultMapValue3 ( double _val );
    int GetTargetSet ( );
    void PutTargetSet ( int _val );
    enum zMapLoadType GetloadType ( );
    void PutloadType ( enum zMapLoadType _val );
    enum zMapType GetMapToType ( );
    void PutMapToType ( enum zMapType _val );
    double GetMapOffsetTolerance ( );
    void PutMapOffsetTolerance ( double _val );
    enum zDataConvert GetDataConversion ( );
    void PutDataConversion ( enum zDataConvert _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zMapOption
{
    FMO_ZERO = 0,
    FMO_VALUE = 1,
    FMO_EXTEND = 2,
    FMO_INTERP = 3,
    FMO_NONE = 4
};

enum zMapLoadType
{
    FMLT_NTEMPERATURE = 9,
    FMLT_NFORCE = 1,
    FMLT_NMOMENT = 2,
    FMLT_NDISPLACEMENT = 3,
    FMLT_NROTDISPLACEMENT = 4,
    FMLT_NVELOCITY = 5,
    FMLT_NROTVELOCITY = 6,
    FMLT_NACCELERATION = 7,
    FMLT_NROTACCELERATION = 8,
    FMLT_ETEMPERATURE = 43,
    FMLT_EHEATFLUX = 44,
    FMLT_EHEATGEN = 47,
    FMLT_EPRESSURE = 42,
    FMLT_NPRESSURE = 13
};

enum zMapType
{
    FMP_STANDARD = 0,
    FMP_NODE = 1,
    FMP_ELEMENT = 2
};

enum zDataConvert
{
    FMDC_VU = 0,
    FMDC_AVG = 1,
    FMDC_MAX = 2,
    FMDC_MIN = 3,
    FMDC_AVG_SKIP_CORNER = 4,
    FMDC_MAX_SKIP_CORNER = 5,
    FMDC_MIN_SKIP_CORNER = 6
};

struct __declspec(uuid("fb7c8191-2114-43d6-86de-78138cdf8c0b"))
MapOutput;
    // [ default ] dispinterface IMapOutput

struct __declspec(uuid("8f814530-166a-4092-bbd8-c37483772f1e"))
IDataSurf : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetVector,put=PutVector))
    VARIANT_BOOL Vector;
    __declspec(property(get=GetAlongCoordProjectID,put=PutAlongCoordProjectID))
    int AlongCoordProjectID;
    __declspec(property(get=GetOutMapOption,put=PutOutMapOption))
    enum zMapOption OutMapOption;
    __declspec(property(get=GetTabularUdefVal,put=PutTabularUdefVal))
    double TabularUdefVal;
    __declspec(property(get=GetCSys,put=PutCSys))
    int CSys;
    __declspec(property(get=GetDefOutMapValue1,put=PutDefOutMapValue1))
    double DefOutMapValue1;
    __declspec(property(get=GetDefOutMapValue2,put=PutDefOutMapValue2))
    double DefOutMapValue2;
    __declspec(property(get=GetDefOutMapValue3,put=PutDefOutMapValue3))
    double DefOutMapValue3;
    __declspec(property(get=GetParamCurveSurfID,put=PutParamCurveSurfID))
    int ParamCurveSurfID;
    __declspec(property(get=GetInterpMin,put=PutInterpMin))
    int InterpMin;
    __declspec(property(get=GetInterpPercent,put=PutInterpPercent))
    double InterpPercent;
    __declspec(property(get=GetTabularUdefOption,put=PutTabularUdefOption))
    int TabularUdefOption;
    __declspec(property(get=GetMapOffsetTolerance,put=PutMapOffsetTolerance))
    double MapOffsetTolerance;
    __declspec(property(get=GetExtendEdgeValues,put=PutExtendEdgeValues))
    VARIANT_BOOL ExtendEdgeValues;
    __declspec(property(get=GetDataConversion,put=PutDataConversion))
    enum zDataConvert DataConversion;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode GetDataSurf (
        int entID );
    enum zReturnCode PutDataSurf (
        int entID );
    enum zReturnCode VarBetween2Pts (
        const _variant_t & xyz,
        const _variant_t & val_xyz );
    enum zReturnCode VarAlongCoord (
        int projID,
        const _variant_t & xyz,
        const _variant_t & val_xyz );
    enum zReturnCode VarBetween4Pts (
        const _variant_t & xyz,
        const _variant_t & val_xyz );
    enum zReturnCode VarBetween8Pts (
        const _variant_t & xyz,
        const _variant_t & val_xyz );
    enum zReturnCode VarArbitrary3DCoord (
        int projID,
        const _variant_t & xyz,
        const _variant_t & val_xyz );
    enum zReturnCode VarEquation (
        _bstr_t Equation );
    enum zReturnCode VarOutputMap (
        __int64 ModelID,
        int groupID,
        int outSetID,
        int outVecID );
    enum zReturnCode VarMeshSurface (
        int setID,
        enum zDataType enOnType,
        _bstr_t sX,
        _bstr_t sY,
        _bstr_t sZ );
    enum zReturnCode VarSpatialUVtable (
        int uDiv,
        int vDiv );
    enum zReturnCode VarSpatialXYZTable (
        int xDiv,
        int yDiv,
        int zDiv );
    enum zReturnCode VarParametric2Pt (
        const _variant_t & xyz,
        const _variant_t & val_xyz );
    enum zReturnCode GetCellValue (
        int nPage,
        int nRow,
        int nCol,
        int nComponent,
        double * dValue );
    enum zReturnCode SetCellValue (
        int nPage,
        int nRow,
        int nCol,
        int nComponent,
        double dValue );
    enum zReturnCode SetCellEquation (
        int nPage,
        int nRow,
        int nCol,
        int nComponent,
        _bstr_t sEquation );
    enum zReturnCode GetColumnTitle (
        int nPage,
        int nCol,
        BSTR * sTitle );
    enum zReturnCode GetColumnValue (
        int nPage,
        int nCol,
        double * dValue );
    enum zReturnCode GetRowTitle (
        int nPage,
        int nCol,
        BSTR * sTitle );
    enum zReturnCode GetRowValue (
        int nPage,
        int nCol,
        double * dValue );
    enum zReturnCode GetPageTitle (
        int nPage,
        BSTR * sTitle );
    enum zReturnCode GetPageValue (
        int nPage,
        double * dValue );
    enum zReturnCode SetColumnTitle (
        int nPage,
        int nCol,
        _bstr_t sTitle );
    enum zReturnCode SetColumnValue (
        int nPage,
        int nCol,
        double rVal );
    enum zReturnCode SetRowTitle (
        int nPage,
        int nRow,
        _bstr_t sTitle );
    enum zReturnCode SetRowValue (
        int nPage,
        int nRow,
        double rVal );
    enum zReturnCode SetPageTitle (
        int nPage,
        _bstr_t sTitle );
    enum zReturnCode SetPageValue (
        int nPage,
        double rVal );
    enum zReturnCode SetCellBlank (
        int nPage,
        int nRow,
        int nCol,
        int nComponent );
    enum zReturnCode GetDataSurfInfo (
        int * nPages,
        int * nComponent,
        BSTR * sTitle );
    enum zReturnCode GetPageInfo (
        int nPage,
        int * nRow,
        int * nCol );
    enum zReturnCode Resize (
        int nPage,
        int nRow,
        int nCol,
        VARIANT_BOOL bVector );
    enum zReturnCode VarParametric4Pt (
        const _variant_t & xyz,
        const _variant_t & val_xyz );
    enum zReturnCode Evaluate (
        int geomID,
        enum zDataType enOnType,
        int mapSetID,
        VARIANT_BOOL isElemental );
    enum zReturnCode GetData (
        int geomID,
        int feaID,
        const _variant_t & Coord,
        double * sVal,
        VARIANT * cgXYZ );
    enum zReturnCode GetDataSurfType ( );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    VARIANT_BOOL GetVector ( );
    void PutVector ( VARIANT_BOOL _val );
    int GetAlongCoordProjectID ( );
    void PutAlongCoordProjectID ( int _val );
    enum zMapOption GetOutMapOption ( );
    void PutOutMapOption ( enum zMapOption _val );
    double GetTabularUdefVal ( );
    void PutTabularUdefVal ( double _val );
    int GetCSys ( );
    void PutCSys ( int _val );
    double GetDefOutMapValue1 ( );
    void PutDefOutMapValue1 ( double _val );
    double GetDefOutMapValue2 ( );
    void PutDefOutMapValue2 ( double _val );
    double GetDefOutMapValue3 ( );
    void PutDefOutMapValue3 ( double _val );
    int GetParamCurveSurfID ( );
    void PutParamCurveSurfID ( int _val );
    int GetInterpMin ( );
    void PutInterpMin ( int _val );
    double GetInterpPercent ( );
    void PutInterpPercent ( double _val );
    int GetTabularUdefOption ( );
    void PutTabularUdefOption ( int _val );
    double GetMapOffsetTolerance ( );
    void PutMapOffsetTolerance ( double _val );
    VARIANT_BOOL GetExtendEdgeValues ( );
    void PutExtendEdgeValues ( VARIANT_BOOL _val );
    enum zDataConvert GetDataConversion ( );
    void PutDataConversion ( enum zDataConvert _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("8f814532-166a-4092-bbd8-c37483772f1e"))
DataSurf;
    // [ default ] dispinterface IDataSurf

struct __declspec(uuid("473e5696-513b-4a26-bd0f-fdb36820e7b1"))
IDataTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfRows,put=PutNumberOfRows))
    int NumberOfRows;
    __declspec(property(get=GetNumberOfColumns,put=PutNumberOfColumns))
    int NumberOfColumns;
    __declspec(property(get=Gettype,put=Puttype))
    enum zDataType type;
    __declspec(property(get=GetVisibleRowsOnly,put=PutVisibleRowsOnly))
    VARIANT_BOOL VisibleRowsOnly;
    __declspec(property(get=GetVisibleColsOnly,put=PutVisibleColsOnly))
    VARIANT_BOOL VisibleColsOnly;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int FindRow (
        int ModelID,
        int setID,
        int ID );
    enum zReturnCode GetRowInfo (
        int * numRows,
        VARIANT * ModelID,
        VARIANT * setID,
        VARIANT * ID );
    enum zReturnCode GetRowVisible (
        int nRow,
        VARIANT_BOOL * bVisible );
    enum zReturnCode SetRowVisible (
        int nRowOrAll,
        VARIANT_BOOL bVisible );
    int FindColumn (
        _bstr_t colTitle );
    enum zReturnCode GetColumnInfo (
        int * numColumns,
        VARIANT * ColType,
        VARIANT * colTitle );
    enum zReturnCode GetColumnVisible (
        int nColumn,
        VARIANT_BOOL * bVisible );
    enum zReturnCode SetColumnVisible (
        int nColumnOrAll,
        VARIANT_BOOL bVisible );
    enum zReturnCode GetColumnWidth (
        int nColumn,
        int * nWidth );
    enum zReturnCode SetColumnWidth (
        int nColumnOrAll,
        int nWidth );
    enum zReturnCode GetColumnTitle (
        int nColumn,
        BSTR * colTitle );
    enum zReturnCode SetColumnTitle (
        int nColumn,
        _bstr_t colTitle );
    enum zReturnCode SetColumnPosition (
        int nColumn,
        int nNewIndex,
        VARIANT_BOOL bAfter );
    enum zReturnCode SetColumnAlignment (
        int nColumnOrAll,
        enum zAlignment nAlign );
    enum zReturnCode AddSelection (
        int numRows,
        const _variant_t & Rows,
        VARIANT_BOOL bSelect );
    enum zReturnCode ClearSelection ( );
    enum zReturnCode GetSelection (
        int * numRows,
        VARIANT * Rows );
    enum zReturnCode GetRowValues (
        int numRowsOrAll,
        const _variant_t & Rows,
        int * numData,
        VARIANT * RowData );
    enum zReturnCode UpdateColumn (
        int nColumn,
        enum zDataTableColumnType ColType,
        int nRows,
        const _variant_t & Rows,
        const _variant_t & value );
    enum zReturnCode GetColumnValue (
        int nColumn,
        int numRowsOrAll,
        const _variant_t & Rows,
        int * numData,
        VARIANT * ColumnData );
    enum zReturnCode GetColumnText (
        int nColumn,
        int numRowsOrAll,
        const _variant_t & Rows,
        int * numData,
        VARIANT * ColumnText );
    enum zReturnCode AddColumn (
        VARIANT_BOOL bClear,
        VARIANT_BOOL bHidden,
        enum zDataType entityTYPE,
        int entitySetID,
        _bstr_t colTitle,
        enum zDataTableColumnType ColType,
        int nRows,
        const _variant_t & ID,
        const _variant_t & value,
        int * nNewColumnID );
    enum zReturnCode UpdateColumnByID (
        int nColumn,
        int entitySetID,
        enum zDataTableColumnType ColType,
        int nRows,
        const _variant_t & ID,
        const _variant_t & value );
    enum zReturnCode AddEntityData (
        VARIANT_BOOL bClear,
        enum zDataType entityTYPE,
        int entitySetID,
        int entityIDSet );
    enum zReturnCode AddMassProperties ( );
    enum zReturnCode AddElementChecks ( );
    enum zReturnCode AddMeshAssociativity ( );
    enum zReturnCode SetTextColor (
        int nColumn,
        int numRows,
        const _variant_t & Rows,
        int nRed,
        int nGreen,
        int nBlue );
    enum zReturnCode SetBackgroundColor (
        int nColumn,
        int numRows,
        const _variant_t & Rows,
        int nRed,
        int nGreen,
        int nBlue );
    enum zReturnCode AddGroup (
        int nColumn,
        VARIANT_BOOL bShowInGroupOnly,
        VARIANT_BOOL bSortAscending );
    enum zReturnCode ClearGroup ( );
    enum zReturnCode GetGroup (
        int * numColumns,
        VARIANT * Columns );
    enum zReturnCode ShowGroup (
        VARIANT_BOOL bVisible );
    enum zReturnCode AddSort (
        int nColumn,
        VARIANT_BOOL bSortAscending );
    enum zReturnCode ClearSort ( );
    enum zReturnCode GetSort (
        int * numColumns,
        VARIANT * Columns );
    enum zReturnCode Lock (
        VARIANT_BOOL bLock );
    enum zReturnCode Copy (
        VARIANT_BOOL bCopyAll );
    enum zReturnCode clear ( );
    enum zReturnCode DeleteRows (
        int numRows,
        const _variant_t & Rows );
    enum zReturnCode Show (
        VARIANT_BOOL bShowAll );
    enum zReturnCode Print ( );
    enum zReturnCode AddOutput (
        int nOutputSet,
        int nOutputVector,
        int * nNewColumnID );
    enum zReturnCode Save (
        VARIANT_BOOL bCopyAll,
        _bstr_t fName,
        enum zDataTableSaveFormat nFormat );
    enum zReturnCode AddNastranElementChecks ( );

    // Properties:
    int GetNumberOfRows ( );
    void PutNumberOfRows ( int _val );
    int GetNumberOfColumns ( );
    void PutNumberOfColumns ( int _val );
    enum zDataType Gettype ( );
    void Puttype ( enum zDataType _val );
    VARIANT_BOOL GetVisibleRowsOnly ( );
    void PutVisibleRowsOnly ( VARIANT_BOOL _val );
    VARIANT_BOOL GetVisibleColsOnly ( );
    void PutVisibleColsOnly ( VARIANT_BOOL _val );
    VARIANT_BOOL GetVisible ( );
    void PutVisible ( VARIANT_BOOL _val );
    VARIANT_BOOL GetLocked ( );
    void PutLocked ( VARIANT_BOOL _val );
};

enum zAlignment
{
    FAL_LEFT = 0,
    FAL_CENTER = 1,
    FAL_RIGHT = 2
};

enum zDataTableColumnType
{
    FCT_BOOL = 0,
    FCT_INT = 1,
    FCT_DOUBLE = 2,
    FCT_STRING = 3
};

enum zDataTableSaveFormat
{
    FSF_TEXT = 0,
    FSF_CSV = 1,
    FSF_RTF = 2
};

struct __declspec(uuid("473e5698-513b-4a26-bd0f-fdb36820e7b1"))
DataTable;
    // [ default ] dispinterface IDataTable

struct __declspec(uuid("e6f57aaf-e85e-455b-aa4d-4ff48824bb31"))
IReference : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getfilename,put=Putfilename))
    _bstr_t filename;
    __declspec(property(get=GetParentFileName,put=PutParentFileName))
    _bstr_t ParentFileName;
    __declspec(property(get=GetReadFrom,put=PutReadFrom))
    int ReadFrom;
    __declspec(property(get=GetReadTime,put=PutReadTime))
    int ReadTime;
    __declspec(property(get=GetReadFileTime,put=PutReadFileTime))
    int ReadFileTime;
    __declspec(property(get=GetReadType,put=PutReadType))
    int ReadType;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode DeleteAll ( );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Getfilename ( );
    void Putfilename ( _bstr_t _val );
    _bstr_t GetParentFileName ( );
    void PutParentFileName ( _bstr_t _val );
    int GetReadFrom ( );
    void PutReadFrom ( int _val );
    int GetReadTime ( );
    void PutReadTime ( int _val );
    int GetReadFileTime ( );
    void PutReadFileTime ( int _val );
    int GetReadType ( );
    void PutReadType ( int _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("e6f57ab1-e85e-455b-aa4d-4ff48824bb31"))
Reference;
    // [ default ] dispinterface IReference

struct __declspec(uuid("923d4ff7-4c93-4daa-8223-f275cc54c69f"))
IAeroPanel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPt1,put=PutPt1))
    double Pt1[];
    __declspec(property(get=GetPt4,put=PutPt4))
    double Pt4[];
    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getpid,put=Putpid))
    int pid;
    __declspec(property(get=Geticp,put=Puticp))
    int icp;
    __declspec(property(get=GetnSpan,put=PutnSpan))
    int nSpan;
    __declspec(property(get=GetnChord,put=PutnChord))
    int nChord;
    __declspec(property(get=GetnIgid,put=PutnIgid))
    int nIgid;
    __declspec(property(get=GetvPt1,put=PutvPt1))
    _variant_t vPt1;
    __declspec(property(get=GetvPt4,put=PutvPt4))
    _variant_t vPt4;
    __declspec(property(get=GetdChord12,put=PutdChord12))
    double dChord12;
    __declspec(property(get=GetdChord34,put=PutdChord34))
    double dChord34;
    __declspec(property(get=GetnLspanID,put=PutnLspanID))
    int nLspanID;
    __declspec(property(get=GetnLchordID,put=PutnLchordID))
    int nLchordID;
    __declspec(property(get=Gettype,put=Puttype))
    enum zAeroPanelType type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetPt1 (
        int nVectorIndex );
    void PutPt1 (
        int nVectorIndex,
        double _arg2 );
    double GetPt4 (
        int nVectorIndex );
    void PutPt4 (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode GetDivisionList (
        int * nChord,
        VARIANT * cval,
        int * nSpan,
        VARIANT * sVal );
    enum zReturnCode PutDivisionList (
        int nChord,
        const _variant_t & cval,
        int nSpan,
        const _variant_t & sVal );
    int SlenderBodyCount ( );
    int InterferenceBodyCount ( );
    int PanelSpanCount ( );
    int PanelChordCount ( );
    ISetPtr GetBoxSet (
        int iBox1,
        int iBox2 );
    int AeroChordXYZ (
        int * nNumChord,
        VARIANT * dChordLoc );
    int AeroSpanXYZ (
        int * nNumSpan,
        VARIANT * dSpanLoc );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    int Getpid ( );
    void Putpid ( int _val );
    int Geticp ( );
    void Puticp ( int _val );
    int GetnSpan ( );
    void PutnSpan ( int _val );
    int GetnChord ( );
    void PutnChord ( int _val );
    int GetnIgid ( );
    void PutnIgid ( int _val );
    _variant_t GetvPt1 ( );
    void PutvPt1 ( const _variant_t & _val );
    _variant_t GetvPt4 ( );
    void PutvPt4 ( const _variant_t & _val );
    double GetdChord12 ( );
    void PutdChord12 ( double _val );
    double GetdChord34 ( );
    void PutdChord34 ( double _val );
    int GetnLspanID ( );
    void PutnLspanID ( int _val );
    int GetnLchordID ( );
    void PutnLchordID ( int _val );
    enum zAeroPanelType Gettype ( );
    void Puttype ( enum zAeroPanelType _val );
};

enum zAeroPanelType
{
    AERO_PNL_SURF = 0,
    AERO_PNL_BODY = 1
};

struct __declspec(uuid("923d4ff9-4c93-4daa-8223-f275cc54c69f"))
AeroPanel;
    // [ default ] dispinterface IAeroPanel

struct __declspec(uuid("6c3881eb-8c68-4807-b69a-4430737f37b1"))
IAeroProp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getvpdval,put=Putvpdval))
    _variant_t vpdval;
    __declspec(property(get=Getvpnval,put=Putvpnval))
    _variant_t vpnval;
    __declspec(property(get=Getap_d_width,put=Putap_d_width))
    double ap_d_width;
    __declspec(property(get=Getap_d_ar,put=Putap_d_ar))
    double ap_d_ar;
    __declspec(property(get=Getap_i_orient,put=Putap_i_orient))
    int ap_i_orient;
    __declspec(property(get=Getap_i_lrsb,put=Putap_i_lrsb))
    int ap_i_lrsb;
    __declspec(property(get=Getap_i_lrib,put=Putap_i_lrib))
    int ap_i_lrib;
    __declspec(property(get=Getap_i_lth1,put=Putap_i_lth1))
    int ap_i_lth1;
    __declspec(property(get=Getap_i_lth2,put=Putap_i_lth2))
    int ap_i_lth2;
    __declspec(property(get=Getap_i_thi1,put=Putap_i_thi1))
    int ap_i_thi1;
    __declspec(property(get=Getap_i_thi2,put=Putap_i_thi2))
    int ap_i_thi2;
    __declspec(property(get=Getap_i_thi3,put=Putap_i_thi3))
    int ap_i_thi3;
    __declspec(property(get=Getap_i_thn1,put=Putap_i_thn1))
    int ap_i_thn1;
    __declspec(property(get=Getap_i_thn2,put=Putap_i_thn2))
    int ap_i_thn2;
    __declspec(property(get=Getap_i_thn3,put=Putap_i_thn3))
    int ap_i_thn3;
    __declspec(property(get=Gettype,put=Puttype))
    enum zAeroPanelType type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode GetThetaList (
        int nListID,
        int * nCount,
        VARIANT * nVal );
    enum zReturnCode PutThetaList (
        int nListID,
        int nCount,
        const _variant_t & nVal );
    enum zReturnCode GetRadiList (
        int nListID,
        int * nCount,
        VARIANT * nVal );
    enum zReturnCode PutRadiList (
        int nListID,
        int nCount,
        const _variant_t & nVal );
    enum zReturnCode ClearSbList ( );
    enum zReturnCode ClearIbList ( );
    enum zReturnCode ClearTheta1List ( );
    enum zReturnCode ClearTheta2List ( );
    int SlenderBodyDivisionByProp ( );
    int InterferenceBodyDivisionByProp ( );
    int GetSBRadiCount ( );
    int GetIBRadiCount ( );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    _variant_t Getvpdval ( );
    void Putvpdval ( const _variant_t & _val );
    _variant_t Getvpnval ( );
    void Putvpnval ( const _variant_t & _val );
    double Getap_d_width ( );
    void Putap_d_width ( double _val );
    double Getap_d_ar ( );
    void Putap_d_ar ( double _val );
    int Getap_i_orient ( );
    void Putap_i_orient ( int _val );
    int Getap_i_lrsb ( );
    void Putap_i_lrsb ( int _val );
    int Getap_i_lrib ( );
    void Putap_i_lrib ( int _val );
    int Getap_i_lth1 ( );
    void Putap_i_lth1 ( int _val );
    int Getap_i_lth2 ( );
    void Putap_i_lth2 ( int _val );
    int Getap_i_thi1 ( );
    void Putap_i_thi1 ( int _val );
    int Getap_i_thi2 ( );
    void Putap_i_thi2 ( int _val );
    int Getap_i_thi3 ( );
    void Putap_i_thi3 ( int _val );
    int Getap_i_thn1 ( );
    void Putap_i_thn1 ( int _val );
    int Getap_i_thn2 ( );
    void Putap_i_thn2 ( int _val );
    int Getap_i_thn3 ( );
    void Putap_i_thn3 ( int _val );
    enum zAeroPanelType Gettype ( );
    void Puttype ( enum zAeroPanelType _val );
};

struct __declspec(uuid("6c3881ed-8c68-4807-b69a-4430737f37b1"))
AeroProp;
    // [ default ] dispinterface IAeroProp

struct __declspec(uuid("39b680b2-1ad7-44bb-8c89-a699f3b191ae"))
IAeroSpline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Gettype,put=Puttype))
    int type;
    __declspec(property(get=Geticaero,put=Puticaero))
    int icaero;
    __declspec(property(get=GetiBox1,put=PutiBox1))
    int iBox1;
    __declspec(property(get=GetiBox2,put=PutiBox2))
    int iBox2;
    __declspec(property(get=Getisetg,put=Putisetg))
    int isetg;
    __declspec(property(get=GetdZ,put=PutdZ))
    double dZ;
    __declspec(property(get=Getmeth,put=Putmeth))
    int meth;
    __declspec(property(get=Getnelem,put=Putnelem))
    int nelem;
    __declspec(property(get=Getmelem,put=Putmelem))
    int melem;
    __declspec(property(get=Getusage,put=Putusage))
    int usage;
    __declspec(property(get=Getdtor,put=Putdtor))
    double dtor;
    __declspec(property(get=Getcid,put=Putcid))
    int cid;
    __declspec(property(get=Getdthx,put=Putdthx))
    double dthx;
    __declspec(property(get=Getdthy,put=Putdthy))
    double dthy;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    ISetPtr GetNodeSet ( );
    ISetPtr GetBoxSet ( );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    int Gettype ( );
    void Puttype ( int _val );
    int Geticaero ( );
    void Puticaero ( int _val );
    int GetiBox1 ( );
    void PutiBox1 ( int _val );
    int GetiBox2 ( );
    void PutiBox2 ( int _val );
    int Getisetg ( );
    void Putisetg ( int _val );
    double GetdZ ( );
    void PutdZ ( double _val );
    int Getmeth ( );
    void Putmeth ( int _val );
    int Getnelem ( );
    void Putnelem ( int _val );
    int Getmelem ( );
    void Putmelem ( int _val );
    int Getusage ( );
    void Putusage ( int _val );
    double Getdtor ( );
    void Putdtor ( double _val );
    int Getcid ( );
    void Putcid ( int _val );
    double Getdthx ( );
    void Putdthx ( double _val );
    double Getdthy ( );
    void Putdthy ( double _val );
};

struct __declspec(uuid("39b680b4-1ad7-44bb-8c89-a699f3b191ae"))
AeroSpline;
    // [ default ] dispinterface IAeroSpline

struct __declspec(uuid("61cff16f-cc7e-40bb-a20f-b1f065c36b29"))
IAeroSurf : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcolor,put=Putcolor))
    enum zColor color;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetCSys,put=PutCSys))
    int CSys;
    __declspec(property(get=Getcsys1,put=Putcsys1))
    int csys1;
    __declspec(property(get=Getaeid,put=Putaeid))
    int aeid;
    __declspec(property(get=Getaeid1,put=Putaeid1))
    int aeid1;
    __declspec(property(get=Geteff,put=Puteff))
    double eff;
    __declspec(property(get=Getldw,put=Putldw))
    VARIANT_BOOL ldw;
    __declspec(property(get=Getcrefc,put=Putcrefc))
    double crefc;
    __declspec(property(get=Getcrefs,put=Putcrefs))
    double crefs;
    __declspec(property(get=Getpllim,put=Putpllim))
    double pllim;
    __declspec(property(get=Getpulim,put=Putpulim))
    double pulim;
    __declspec(property(get=Gethmllim,put=Puthmllim))
    double hmllim;
    __declspec(property(get=Gethmulim,put=Puthmulim))
    double hmulim;
    __declspec(property(get=Gettqllim,put=Puttqllim))
    int tqllim;
    __declspec(property(get=Gettqulim,put=Puttqulim))
    int tqulim;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode PutSurfaceSet1 (
        int nSetID );
    enum zReturnCode PutSurfaceSet2 (
        int nSetID );
    ISetPtr GetSurfaceSet1 ( );
    ISetPtr GetSurfaceSet2 ( );
    enum zReturnCode ClearSurfaceSet1 ( );
    enum zReturnCode ClearSurfaceSet2 ( );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    enum zColor Getcolor ( );
    void Putcolor ( enum zColor _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    int GetCSys ( );
    void PutCSys ( int _val );
    int Getcsys1 ( );
    void Putcsys1 ( int _val );
    int Getaeid ( );
    void Putaeid ( int _val );
    int Getaeid1 ( );
    void Putaeid1 ( int _val );
    double Geteff ( );
    void Puteff ( double _val );
    VARIANT_BOOL Getldw ( );
    void Putldw ( VARIANT_BOOL _val );
    double Getcrefc ( );
    void Putcrefc ( double _val );
    double Getcrefs ( );
    void Putcrefs ( double _val );
    double Getpllim ( );
    void Putpllim ( double _val );
    double Getpulim ( );
    void Putpulim ( double _val );
    double Gethmllim ( );
    void Puthmllim ( double _val );
    double Gethmulim ( );
    void Puthmulim ( double _val );
    int Gettqllim ( );
    void Puttqllim ( int _val );
    int Gettqulim ( );
    void Puttqulim ( int _val );
    _bstr_t GetLabel ( );
    void PutLabel ( _bstr_t _val );
};

struct __declspec(uuid("61cff171-cc7e-40bb-a20f-b1f065c36b29"))
AeroSurf;
    // [ default ] dispinterface IAeroSurf

struct __declspec(uuid("f39a93f2-dfd9-42d5-b663-8f09a959dafe"))
IFreebody : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSumComponents,put=PutSumComponents))
    VARIANT_BOOL SumComponents[];
    __declspec(property(get=GetSumContributions,put=PutSumContributions))
    VARIANT_BOOL SumContributions[];
    __declspec(property(get=GetShowTotalVec,put=PutShowTotalVec))
    VARIANT_BOOL ShowTotalVec[];
    __declspec(property(get=GetTotalVecColor,put=PutTotalVecColor))
    enum zColor TotalVecColor[];
    __declspec(property(get=GetShowNodalVec,put=PutShowNodalVec))
    VARIANT_BOOL ShowNodalVec[];
    __declspec(property(get=GetNodalVecColor,put=PutNodalVecColor))
    enum zColor NodalVecColor[];
    __declspec(property(get=GetTotalVectorMode,put=PutTotalVectorMode))
    enum zFbdVecMode TotalVectorMode[];
    __declspec(property(get=GetNodalVectorMode,put=PutNodalVectorMode))
    enum zFbdVecMode NodalVectorMode[];
    __declspec(property(get=GetSectionPlaneBase,put=PutSectionPlaneBase))
    double SectionPlaneBase[];
    __declspec(property(get=GetSectionPlaneNormal,put=PutSectionPlaneNormal))
    double SectionPlaneNormal[];
    __declspec(property(get=GetSectionVectorBase,put=PutSectionVectorBase))
    double SectionVectorBase[];
    __declspec(property(get=GetSectionVectorTip,put=PutSectionVectorTip))
    double SectionVectorTip[];
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getz,put=Putz))
    double z;
    __declspec(property(get=GetvSumComponents,put=PutvSumComponents))
    _variant_t vSumComponents;
    __declspec(property(get=GetvSumContributions,put=PutvSumContributions))
    _variant_t vSumContributions;
    __declspec(property(get=GetvShowTotalVec,put=PutvShowTotalVec))
    _variant_t vShowTotalVec;
    __declspec(property(get=GetvTotalVecColor,put=PutvTotalVecColor))
    _variant_t vTotalVecColor;
    __declspec(property(get=GetvShowNodalVec,put=PutvShowNodalVec))
    _variant_t vShowNodalVec;
    __declspec(property(get=GetvNodalVecColor,put=PutvNodalVecColor))
    _variant_t vNodalVecColor;
    __declspec(property(get=GetNodeMarkerColor,put=PutNodeMarkerColor))
    enum zColor NodeMarkerColor;
    __declspec(property(get=GetvTotalVectorMode,put=PutvTotalVectorMode))
    _variant_t vTotalVectorMode;
    __declspec(property(get=GetvNodalVectorMode,put=PutvNodalVectorMode))
    _variant_t vNodalVectorMode;
    __declspec(property(get=GetCSys,put=PutCSys))
    int CSys;
    __declspec(property(get=GetGroup,put=PutGroup))
    int Group;
    __declspec(property(get=GetDisplayMode,put=PutDisplayMode))
    enum zFbdDisplayMode DisplayMode;
    __declspec(property(get=Getlayer,put=Putlayer))
    int layer;
    __declspec(property(get=GetAlternateApplied,put=PutAlternateApplied))
    VARIANT_BOOL AlternateApplied;
    __declspec(property(get=GetAlternateSPC,put=PutAlternateSPC))
    VARIANT_BOOL AlternateSPC;
    __declspec(property(get=GetAlternateMPC,put=PutAlternateMPC))
    VARIANT_BOOL AlternateMPC;
    __declspec(property(get=GetUseNodalOuputCS,put=PutUseNodalOuputCS))
    VARIANT_BOOL UseNodalOuputCS;
    __declspec(property(get=GetvSectionPlaneBase,put=PutvSectionPlaneBase))
    _variant_t vSectionPlaneBase;
    __declspec(property(get=GetvSectionPlaneNormal,put=PutvSectionPlaneNormal))
    _variant_t vSectionPlaneNormal;
    __declspec(property(get=GetSectionCurve,put=PutSectionCurve))
    int SectionCurve;
    __declspec(property(get=GetvSectionVectorBase,put=PutvSectionVectorBase))
    _variant_t vSectionVectorBase;
    __declspec(property(get=GetvSectionVectorTip,put=PutvSectionVectorTip))
    _variant_t vSectionVectorTip;
    __declspec(property(get=GetSectionRotateSums,put=PutSectionRotateSums))
    VARIANT_BOOL SectionRotateSums;
    __declspec(property(get=GetSectionIncludeClippedElem,put=PutSectionIncludeClippedElem))
    VARIANT_BOOL SectionIncludeClippedElem;
    __declspec(property(get=GetSectionTolerance,put=PutSectionTolerance))
    double SectionTolerance;
    __declspec(property(get=GetSectionSumLocation,put=PutSectionSumLocation))
    enum zFbdSectionSumLoc SectionSumLocation;
    __declspec(property(get=GetSectionLimitToGroup,put=PutSectionLimitToGroup))
    VARIANT_BOOL SectionLimitToGroup;
    __declspec(property(get=GetSectionGroup,put=PutSectionGroup))
    int SectionGroup;
    __declspec(property(get=GetReverseTotalValues,put=PutReverseTotalValues))
    VARIANT_BOOL ReverseTotalValues;
    __declspec(property(get=GetSectionMode,put=PutSectionMode))
    enum zFbdSectionMode SectionMode;
    __declspec(property(get=GetSectionRadius,put=PutSectionRadius))
    double SectionRadius;
    __declspec(property(get=GetSectionReverse,put=PutSectionReverse))
    VARIANT_BOOL SectionReverse;
    __declspec(property(get=GetSectionLocation,put=PutSectionLocation))
    double SectionLocation;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetSumComponents (
        enum zFbdComponent nVectorIndex );
    void PutSumComponents (
        enum zFbdComponent nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetSumContributions (
        enum zFbdContribution nVectorIndex );
    void PutSumContributions (
        enum zFbdContribution nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetShowTotalVec (
        enum zFbdComponent nVectorIndex );
    void PutShowTotalVec (
        enum zFbdComponent nVectorIndex,
        VARIANT_BOOL _arg2 );
    enum zColor GetTotalVecColor (
        enum zColor nVectorIndex );
    void PutTotalVecColor (
        enum zColor nVectorIndex,
        enum zColor _arg2 );
    VARIANT_BOOL GetShowNodalVec (
        enum zFbdComponent nVectorIndex );
    void PutShowNodalVec (
        enum zFbdComponent nVectorIndex,
        VARIANT_BOOL _arg2 );
    enum zColor GetNodalVecColor (
        enum zColor nVectorIndex );
    void PutNodalVecColor (
        enum zColor nVectorIndex,
        enum zColor _arg2 );
    enum zFbdVecMode GetTotalVectorMode (
        enum zFbdVecMode nVectorIndex );
    void PutTotalVectorMode (
        enum zFbdVecMode nVectorIndex,
        enum zFbdVecMode _arg2 );
    enum zFbdVecMode GetNodalVectorMode (
        enum zFbdVecMode nVectorIndex );
    void PutNodalVectorMode (
        enum zFbdVecMode nVectorIndex,
        enum zFbdVecMode _arg2 );
    double GetSectionPlaneBase (
        int nVectorIndex );
    void PutSectionPlaneBase (
        int nVectorIndex,
        double _arg2 );
    double GetSectionPlaneNormal (
        int nVectorIndex );
    void PutSectionPlaneNormal (
        int nVectorIndex,
        double _arg2 );
    double GetSectionVectorBase (
        int nVectorIndex );
    void PutSectionVectorBase (
        int nVectorIndex,
        double _arg2 );
    double GetSectionVectorTip (
        int nVectorIndex );
    void PutSectionVectorTip (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode GetElements (
        int * NumElem,
        VARIANT * elemID );
    enum zReturnCode SetElements (
        VARIANT_BOOL bClear,
        int setID );
    enum zReturnCode GetNodes (
        int * numNode,
        VARIANT * NodeID );
    enum zReturnCode SetNodes (
        VARIANT_BOOL bClear,
        int setID );
    enum zReturnCode ClearElements ( );
    enum zReturnCode ClearNodes ( );
    enum zReturnCode CalculateNodalCenter (
        VARIANT_BOOL bUpdate,
        VARIANT * xyz );
    enum zReturnCode CalculateSummation (
        int outSetID,
        VARIANT * calculations );
    enum zReturnCode CalculateSummation2 (
        int nSetID,
        VARIANT_BOOL bUseFBCSys,
        int * nNumSets,
        VARIANT * outsetIDs,
        VARIANT * calculations );
    enum zReturnCode GetNodalSums (
        int nSetID,
        int * nNumNodes,
        VARIANT * nNodeIDs,
        VARIANT * dVals );
    enum zReturnCode GetSumAtNode (
        int nNodeID,
        int nSetID,
        VARIANT * dVals );
    enum zReturnCode GetSectionCutSums (
        int nOutSetSetID,
        int nCuts,
        int * pnNumCuts,
        VARIANT * pCutLocs,
        VARIANT * pSumLocs,
        VARIANT * pSums );
    enum zReturnCode SetLocationFromCoord (
        double x,
        double y,
        double z,
        double * pLoc );
    enum zReturnCode Show ( );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getz ( );
    void Putz ( double _val );
    _variant_t GetvSumComponents ( );
    void PutvSumComponents ( const _variant_t & _val );
    _variant_t GetvSumContributions ( );
    void PutvSumContributions ( const _variant_t & _val );
    _variant_t GetvShowTotalVec ( );
    void PutvShowTotalVec ( const _variant_t & _val );
    _variant_t GetvTotalVecColor ( );
    void PutvTotalVecColor ( const _variant_t & _val );
    _variant_t GetvShowNodalVec ( );
    void PutvShowNodalVec ( const _variant_t & _val );
    _variant_t GetvNodalVecColor ( );
    void PutvNodalVecColor ( const _variant_t & _val );
    enum zColor GetNodeMarkerColor ( );
    void PutNodeMarkerColor ( enum zColor _val );
    _variant_t GetvTotalVectorMode ( );
    void PutvTotalVectorMode ( const _variant_t & _val );
    _variant_t GetvNodalVectorMode ( );
    void PutvNodalVectorMode ( const _variant_t & _val );
    int GetCSys ( );
    void PutCSys ( int _val );
    int GetGroup ( );
    void PutGroup ( int _val );
    enum zFbdDisplayMode GetDisplayMode ( );
    void PutDisplayMode ( enum zFbdDisplayMode _val );
    int Getlayer ( );
    void Putlayer ( int _val );
    VARIANT_BOOL GetAlternateApplied ( );
    void PutAlternateApplied ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAlternateSPC ( );
    void PutAlternateSPC ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAlternateMPC ( );
    void PutAlternateMPC ( VARIANT_BOOL _val );
    VARIANT_BOOL GetUseNodalOuputCS ( );
    void PutUseNodalOuputCS ( VARIANT_BOOL _val );
    _variant_t GetvSectionPlaneBase ( );
    void PutvSectionPlaneBase ( const _variant_t & _val );
    _variant_t GetvSectionPlaneNormal ( );
    void PutvSectionPlaneNormal ( const _variant_t & _val );
    int GetSectionCurve ( );
    void PutSectionCurve ( int _val );
    _variant_t GetvSectionVectorBase ( );
    void PutvSectionVectorBase ( const _variant_t & _val );
    _variant_t GetvSectionVectorTip ( );
    void PutvSectionVectorTip ( const _variant_t & _val );
    VARIANT_BOOL GetSectionRotateSums ( );
    void PutSectionRotateSums ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSectionIncludeClippedElem ( );
    void PutSectionIncludeClippedElem ( VARIANT_BOOL _val );
    double GetSectionTolerance ( );
    void PutSectionTolerance ( double _val );
    enum zFbdSectionSumLoc GetSectionSumLocation ( );
    void PutSectionSumLocation ( enum zFbdSectionSumLoc _val );
    VARIANT_BOOL GetSectionLimitToGroup ( );
    void PutSectionLimitToGroup ( VARIANT_BOOL _val );
    int GetSectionGroup ( );
    void PutSectionGroup ( int _val );
    VARIANT_BOOL GetReverseTotalValues ( );
    void PutReverseTotalValues ( VARIANT_BOOL _val );
    enum zFbdSectionMode GetSectionMode ( );
    void PutSectionMode ( enum zFbdSectionMode _val );
    double GetSectionRadius ( );
    void PutSectionRadius ( double _val );
    VARIANT_BOOL GetSectionReverse ( );
    void PutSectionReverse ( VARIANT_BOOL _val );
    double GetSectionLocation ( );
    void PutSectionLocation ( double _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zFbdDisplayMode
{
    FBD_DISPLAYMODE_FREEBODY = 0,
    FBD_DISPLAYMODE_INTERFACE = 1,
    FBD_DISPLAYMODE_SECTION = 2
};

enum zFbdSectionSumLoc
{
    FBD_SECTION_SUMLOC_BASE = 0,
    FBD_SECTION_SUMLOC_CENTROID = 1,
    FBD_SECTION_SUMLOC_LOCATION = 2
};

enum zFbdSectionMode
{
    FBD_SECTMODE_PLANENORMAL = 0,
    FBD_SECTMODE_PLANEVECTOR = 1,
    FBD_SECTMODE_VECTOR = 2,
    FBD_SECTMODE_CURVE = 3
};

enum zFbdComponent
{
    FBC_FX = 0,
    FBC_FY = 1,
    FBC_FZ = 2,
    FBC_MX = 3,
    FBC_MY = 4,
    FBC_MZ = 5
};

enum zFbdContribution
{
    FBL_APPLIED = 0,
    FBL_SPC = 1,
    FBL_MPC = 2,
    FBL_EL_FB = 3,
    FBL_EL_PER = 4,
    FBL_TOTAL = 5,
    FBL_CONTACT = 6,
    FBL_GLUE = 7
};

enum zFbdVecMode
{
    FBD_VEC_MODE_OFF = 0,
    FBD_VEC_MODE_COMPONENT = 1,
    FBD_VEC_MODE_RESULTANT = 2
};

struct __declspec(uuid("f39a93f4-dfd9-42d5-b663-8f09a959dafe"))
Freebody;
    // [ default ] dispinterface IFreebody

struct __declspec(uuid("bcf73006-faaa-4648-9abe-a4df900d45bf"))
ISEReference : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceFile,put=PutReferenceFile))
    _bstr_t ReferenceFile;
    __declspec(property(get=GetReferenceType,put=PutReferenceType))
    enum zAnalysisExtSERef ReferenceType;
    __declspec(property(get=GetReferenceID,put=PutReferenceID))
    int ReferenceID;
    __declspec(property(get=GetASMFile,put=PutASMFile))
    _bstr_t ASMFile;
    __declspec(property(get=GetStiffness,put=PutStiffness))
    VARIANT_BOOL Stiffness;
    __declspec(property(get=GetMass,put=PutMass))
    VARIANT_BOOL Mass;
    __declspec(property(get=GetViscousDamping,put=PutViscousDamping))
    VARIANT_BOOL ViscousDamping;
    __declspec(property(get=GetStructuralDaming,put=PutStructuralDaming))
    VARIANT_BOOL StructuralDaming;
    __declspec(property(get=GetLoadsMatrix,put=PutLoadsMatrix))
    VARIANT_BOOL LoadsMatrix;
    __declspec(property(get=GetAssignForm,put=PutAssignForm))
    enum zAnalysisAssignForm AssignForm;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode Put (
        int entID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t GetReferenceFile ( );
    void PutReferenceFile ( _bstr_t _val );
    enum zAnalysisExtSERef GetReferenceType ( );
    void PutReferenceType ( enum zAnalysisExtSERef _val );
    int GetReferenceID ( );
    void PutReferenceID ( int _val );
    _bstr_t GetASMFile ( );
    void PutASMFile ( _bstr_t _val );
    VARIANT_BOOL GetStiffness ( );
    void PutStiffness ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMass ( );
    void PutMass ( VARIANT_BOOL _val );
    VARIANT_BOOL GetViscousDamping ( );
    void PutViscousDamping ( VARIANT_BOOL _val );
    VARIANT_BOOL GetStructuralDaming ( );
    void PutStructuralDaming ( VARIANT_BOOL _val );
    VARIANT_BOOL GetLoadsMatrix ( );
    void PutLoadsMatrix ( VARIANT_BOOL _val );
    enum zAnalysisAssignForm GetAssignForm ( );
    void PutAssignForm ( enum zAnalysisAssignForm _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zAnalysisExtSERef
{
    EXTSEREF_TYPE_OP2 = 0,
    EXTSEREF_TYPE_OP4 = 1,
    EXTSEREF_TYPE_PCH = 2
};

struct __declspec(uuid("bcf73008-faaa-4648-9abe-a4df900d45bf"))
SEReference;
    // [ default ] dispinterface ISEReference

struct __declspec(uuid("7aadc5ef-400b-4984-9d12-314296952f1f"))
IChart : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxisRange,put=PutAxisRange))
    double AxisRange[][];
    __declspec(property(get=GetAxisVisible,put=PutAxisVisible))
    VARIANT_BOOL AxisVisible[];
    __declspec(property(get=GetAxisZoom,put=PutAxisZoom))
    VARIANT_BOOL AxisZoom[];
    __declspec(property(get=GetAxisMajorInterval,put=PutAxisMajorInterval))
    double AxisMajorInterval[];
    __declspec(property(get=GetAxisMinorCount,put=PutAxisMinorCount))
    int AxisMinorCount[];
    __declspec(property(get=GetAxisMajorGridlineVisible,put=PutAxisMajorGridlineVisible))
    VARIANT_BOOL AxisMajorGridlineVisible[];
    __declspec(property(get=GetAxisMinorGridlineVisible,put=PutAxisMinorGridlineVisible))
    VARIANT_BOOL AxisMinorGridlineVisible[];
    __declspec(property(get=GetAxisAutoscale,put=PutAxisAutoscale))
    VARIANT_BOOL AxisAutoscale[];
    __declspec(property(get=GetAxisStyle,put=PutAxisStyle))
    enum zChartAxisStyle AxisStyle[];
    __declspec(property(get=GetAxisMajorTickmarkVisible,put=PutAxisMajorTickmarkVisible))
    VARIANT_BOOL AxisMajorTickmarkVisible[];
    __declspec(property(get=GetAxisMinorTickmarkVisible,put=PutAxisMinorTickmarkVisible))
    VARIANT_BOOL AxisMinorTickmarkVisible[];
    __declspec(property(get=GetAxisTitleVisible,put=PutAxisTitleVisible))
    VARIANT_BOOL AxisTitleVisible[];
    __declspec(property(get=GetAxisTitleJustification,put=PutAxisTitleJustification))
    enum zChartTextJustification AxisTitleJustification[];
    __declspec(property(get=GetAxisTitleFontSize,put=PutAxisTitleFontSize))
    double AxisTitleFontSize[];
    __declspec(property(get=GetAxisTitleBold,put=PutAxisTitleBold))
    VARIANT_BOOL AxisTitleBold[];
    __declspec(property(get=GetAxisTitleItalic,put=PutAxisTitleItalic))
    VARIANT_BOOL AxisTitleItalic[];
    __declspec(property(get=GetAxisTitleUnderline,put=PutAxisTitleUnderline))
    VARIANT_BOOL AxisTitleUnderline[];
    __declspec(property(get=GetAxisTitleColor,put=PutAxisTitleColor))
    enum zColor AxisTitleColor[];
    __declspec(property(get=GetAxisLabelDecimal,put=PutAxisLabelDecimal))
    int AxisLabelDecimal[];
    __declspec(property(get=GetAxisLabelFormat,put=PutAxisLabelFormat))
    enum zChartNumberFormat AxisLabelFormat[];
    __declspec(property(get=GetLegendLocation,put=PutLegendLocation))
    enum zChartLegendLocation LegendLocation[];
    __declspec(property(get=GetAxisMinorCountLog,put=PutAxisMinorCountLog))
    int AxisMinorCountLog[];
    __declspec(property(get=GetAxisRangePad,put=PutAxisRangePad))
    VARIANT_BOOL AxisRangePad[];
    __declspec(property(get=GetAxisAutoscale2,put=PutAxisAutoscale2))
    VARIANT_BOOL AxisAutoscale2[];
    __declspec(property(get=GetAxisRange2,put=PutAxisRange2))
    double AxisRange2[][];
    __declspec(property(get=GetAxisRangePad2,put=PutAxisRangePad2))
    VARIANT_BOOL AxisRangePad2[];
    __declspec(property(get=GetAxisStyle2,put=PutAxisStyle2))
    enum zChartAxisStyle AxisStyle2[];
    __declspec(property(get=GetAxisLabelFormat2,put=PutAxisLabelFormat2))
    enum zChartNumberFormat AxisLabelFormat2[];
    __declspec(property(get=GetAxisLabelDecimal2,put=PutAxisLabelDecimal2))
    int AxisLabelDecimal2[];
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getstyle,put=Putstyle))
    enum zChartStyle style;
    __declspec(property(get=GetAxisTitleX,put=PutAxisTitleX))
    _bstr_t AxisTitleX;
    __declspec(property(get=GetAxisTitleY,put=PutAxisTitleY))
    _bstr_t AxisTitleY;
    __declspec(property(get=GetvAxisAutoscale,put=PutvAxisAutoscale))
    _variant_t vAxisAutoscale;
    __declspec(property(get=GetvAxisStyle,put=PutvAxisStyle))
    _variant_t vAxisStyle;
    __declspec(property(get=GetvAxisRange,put=PutvAxisRange))
    _variant_t vAxisRange;
    __declspec(property(get=GetvAxisVisible,put=PutvAxisVisible))
    _variant_t vAxisVisible;
    __declspec(property(get=GetvAxisMajorTickmarkVisible,put=PutvAxisMajorTickmarkVisible))
    _variant_t vAxisMajorTickmarkVisible;
    __declspec(property(get=GetvAxisMinorTickmarkVisible,put=PutvAxisMinorTickmarkVisible))
    _variant_t vAxisMinorTickmarkVisible;
    __declspec(property(get=GetOutputSetInherit,put=PutOutputSetInherit))
    VARIANT_BOOL OutputSetInherit;
    __declspec(property(get=GetOutputSet,put=PutOutputSet))
    int OutputSet;
    __declspec(property(get=GetOutputSetEnd,put=PutOutputSetEnd))
    int OutputSetEnd;
    __declspec(property(get=GetOutputSetAll,put=PutOutputSetAll))
    VARIANT_BOOL OutputSetAll;
    __declspec(property(get=GetMarkerFromChart,put=PutMarkerFromChart))
    VARIANT_BOOL MarkerFromChart;
    __declspec(property(get=GetMarkerVisible,put=PutMarkerVisible))
    VARIANT_BOOL MarkerVisible;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    int MarkerSize;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum zChartMarkerStyle MarkerStyle;
    __declspec(property(get=GetLabelFromChart,put=PutLabelFromChart))
    VARIANT_BOOL LabelFromChart;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetShowLabelX,put=PutShowLabelX))
    VARIANT_BOOL ShowLabelX;
    __declspec(property(get=GetShowLabelY,put=PutShowLabelY))
    VARIANT_BOOL ShowLabelY;
    __declspec(property(get=GetShowLabelMaxMin,put=PutShowLabelMaxMin))
    VARIANT_BOOL ShowLabelMaxMin;
    __declspec(property(get=GetPaletteFromChart,put=PutPaletteFromChart))
    VARIANT_BOOL PaletteFromChart;
    __declspec(property(get=GetPalette,put=PutPalette))
    enum zChartPalette Palette;
    __declspec(property(get=GetDarkBackground,put=PutDarkBackground))
    VARIANT_BOOL DarkBackground;
    __declspec(property(get=GetLegendVisible,put=PutLegendVisible))
    VARIANT_BOOL LegendVisible;
    __declspec(property(get=GetvLegendLocation,put=PutvLegendLocation))
    _variant_t vLegendLocation;
    __declspec(property(get=GetLegendDirection,put=PutLegendDirection))
    enum zChartLegendDirection LegendDirection;
    __declspec(property(get=GetTitleVisible,put=PutTitleVisible))
    VARIANT_BOOL TitleVisible;
    __declspec(property(get=GetTitleLocation,put=PutTitleLocation))
    enum zChartTitleLocation TitleLocation;
    __declspec(property(get=GetTitleJustification,put=PutTitleJustification))
    enum zChartTextJustification TitleJustification;
    __declspec(property(get=GetTitleFontSize,put=PutTitleFontSize))
    double TitleFontSize;
    __declspec(property(get=GetTitleFontBold,put=PutTitleFontBold))
    VARIANT_BOOL TitleFontBold;
    __declspec(property(get=GetTitleFontItalic,put=PutTitleFontItalic))
    VARIANT_BOOL TitleFontItalic;
    __declspec(property(get=GetTitleFontUnderline,put=PutTitleFontUnderline))
    VARIANT_BOOL TitleFontUnderline;
    __declspec(property(get=GetTitleFontColor,put=PutTitleFontColor))
    enum zColor TitleFontColor;
    __declspec(property(get=GetvAxisMajorInterval,put=PutvAxisMajorInterval))
    _variant_t vAxisMajorInterval;
    __declspec(property(get=GetvAxisMinorCount,put=PutvAxisMinorCount))
    _variant_t vAxisMinorCount;
    __declspec(property(get=GetvAxisMajorGridlineVisible,put=PutvAxisMajorGridlineVisible))
    _variant_t vAxisMajorGridlineVisible;
    __declspec(property(get=GetvAxisMinorGridlineVisible,put=PutvAxisMinorGridlineVisible))
    _variant_t vAxisMinorGridlineVisible;
    __declspec(property(get=GetvAxisZoom,put=PutvAxisZoom))
    _variant_t vAxisZoom;
    __declspec(property(get=GetvAxisTitleVisible,put=PutvAxisTitleVisible))
    _variant_t vAxisTitleVisible;
    __declspec(property(get=GetvAxisTitleJustification,put=PutvAxisTitleJustification))
    _variant_t vAxisTitleJustification;
    __declspec(property(get=GetvAxisTitleFontSize,put=PutvAxisTitleFontSize))
    _variant_t vAxisTitleFontSize;
    __declspec(property(get=GetvAxisTitleBold,put=PutvAxisTitleBold))
    _variant_t vAxisTitleBold;
    __declspec(property(get=GetvAxisTitleItalic,put=PutvAxisTitleItalic))
    _variant_t vAxisTitleItalic;
    __declspec(property(get=GetvAxisTitleUnderline,put=PutvAxisTitleUnderline))
    _variant_t vAxisTitleUnderline;
    __declspec(property(get=GetvAxisTitleFontColor,put=PutvAxisTitleFontColor))
    _variant_t vAxisTitleFontColor;
    __declspec(property(get=GetvAxisLabelDecimal,put=PutvAxisLabelDecimal))
    _variant_t vAxisLabelDecimal;
    __declspec(property(get=GetvAxisLabelFormat,put=PutvAxisLabelFormat))
    _variant_t vAxisLabelFormat;
    __declspec(property(get=GetFont,put=PutFont))
    _bstr_t Font;
    __declspec(property(get=GetLabelFontSize,put=PutLabelFontSize))
    double LabelFontSize;
    __declspec(property(get=GetAxisValueFontSize,put=PutAxisValueFontSize))
    double AxisValueFontSize;
    __declspec(property(get=GetLegendFontSize,put=PutLegendFontSize))
    double LegendFontSize;
    __declspec(property(get=GetvAxisMinorCountLog,put=PutvAxisMinorCountLog))
    _variant_t vAxisMinorCountLog;
    __declspec(property(get=GetvAxisRangePad,put=PutvAxisRangePad))
    _variant_t vAxisRangePad;
    __declspec(property(get=GetAxisMajorColor,put=PutAxisMajorColor))
    enum zColor AxisMajorColor;
    __declspec(property(get=GetAxisMajorColorAutoDim,put=PutAxisMajorColorAutoDim))
    VARIANT_BOOL AxisMajorColorAutoDim;
    __declspec(property(get=GetScaleInherit,put=PutScaleInherit))
    VARIANT_BOOL ScaleInherit;
    __declspec(property(get=GetMasterScale,put=PutMasterScale))
    double MasterScale;
    __declspec(property(get=GetComplexPlotLocation,put=PutComplexPlotLocation))
    enum zChartComplexLocation ComplexPlotLocation;
    __declspec(property(get=GetvAxisAutoscale2,put=PutvAxisAutoscale2))
    _variant_t vAxisAutoscale2;
    __declspec(property(get=GetvAxisRange2,put=PutvAxisRange2))
    _variant_t vAxisRange2;
    __declspec(property(get=GetvAxisRangePad2,put=PutvAxisRangePad2))
    _variant_t vAxisRangePad2;
    __declspec(property(get=GetvAxisStyle2,put=PutvAxisStyle2))
    _variant_t vAxisStyle2;
    __declspec(property(get=GetvAxisLabelFormat2,put=PutvAxisLabelFormat2))
    _variant_t vAxisLabelFormat2;
    __declspec(property(get=GetvAxisLabelDecimal2,put=PutvAxisLabelDecimal2))
    _variant_t vAxisLabelDecimal2;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetAxisRange (
        int nRowIndex,
        int nColIndex );
    void PutAxisRange (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    VARIANT_BOOL GetAxisVisible (
        int nVectorIndex );
    void PutAxisVisible (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetAxisZoom (
        int nVectorIndex );
    void PutAxisZoom (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double GetAxisMajorInterval (
        int nVectorIndex );
    void PutAxisMajorInterval (
        int nVectorIndex,
        double _arg2 );
    int GetAxisMinorCount (
        int nVectorIndex );
    void PutAxisMinorCount (
        int nVectorIndex,
        int _arg2 );
    VARIANT_BOOL GetAxisMajorGridlineVisible (
        int nVectorIndex );
    void PutAxisMajorGridlineVisible (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetAxisMinorGridlineVisible (
        int nVectorIndex );
    void PutAxisMinorGridlineVisible (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetAxisAutoscale (
        int nVectorIndex );
    void PutAxisAutoscale (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    enum zChartAxisStyle GetAxisStyle (
        int nVectorIndex );
    void PutAxisStyle (
        int nVectorIndex,
        enum zChartAxisStyle _arg2 );
    VARIANT_BOOL GetAxisMajorTickmarkVisible (
        int nVectorIndex );
    void PutAxisMajorTickmarkVisible (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetAxisMinorTickmarkVisible (
        int nVectorIndex );
    void PutAxisMinorTickmarkVisible (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetAxisTitleVisible (
        int nVectorIndex );
    void PutAxisTitleVisible (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    enum zChartTextJustification GetAxisTitleJustification (
        int nVectorIndex );
    void PutAxisTitleJustification (
        int nVectorIndex,
        enum zChartTextJustification _arg2 );
    double GetAxisTitleFontSize (
        int nVectorIndex );
    void PutAxisTitleFontSize (
        int nVectorIndex,
        double _arg2 );
    VARIANT_BOOL GetAxisTitleBold (
        int nVectorIndex );
    void PutAxisTitleBold (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetAxisTitleItalic (
        int nVectorIndex );
    void PutAxisTitleItalic (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetAxisTitleUnderline (
        int nVectorIndex );
    void PutAxisTitleUnderline (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    enum zColor GetAxisTitleColor (
        int nVectorIndex );
    void PutAxisTitleColor (
        int nVectorIndex,
        enum zColor _arg2 );
    int GetAxisLabelDecimal (
        int nVectorIndex );
    void PutAxisLabelDecimal (
        int nVectorIndex,
        int _arg2 );
    enum zChartNumberFormat GetAxisLabelFormat (
        int nVectorIndex );
    void PutAxisLabelFormat (
        int nVectorIndex,
        enum zChartNumberFormat _arg2 );
    enum zChartLegendLocation GetLegendLocation (
        int nVectorIndex );
    void PutLegendLocation (
        int nVectorIndex,
        enum zChartLegendLocation _arg2 );
    int GetAxisMinorCountLog (
        int nVectorIndex );
    void PutAxisMinorCountLog (
        int nVectorIndex,
        int _arg2 );
    VARIANT_BOOL GetAxisRangePad (
        int nVectorIndex );
    void PutAxisRangePad (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetAxisAutoscale2 (
        int nVectorIndex );
    void PutAxisAutoscale2 (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    double GetAxisRange2 (
        int nRowIndex,
        int nColIndex );
    void PutAxisRange2 (
        int nRowIndex,
        int nColIndex,
        double _arg3 );
    VARIANT_BOOL GetAxisRangePad2 (
        int nVectorIndex );
    void PutAxisRangePad2 (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    enum zChartAxisStyle GetAxisStyle2 (
        int nVectorIndex );
    void PutAxisStyle2 (
        int nVectorIndex,
        enum zChartAxisStyle _arg2 );
    enum zChartNumberFormat GetAxisLabelFormat2 (
        int nVectorIndex );
    void PutAxisLabelFormat2 (
        int nVectorIndex,
        enum zChartNumberFormat _arg2 );
    int GetAxisLabelDecimal2 (
        int nVectorIndex );
    void PutAxisLabelDecimal2 (
        int nVectorIndex,
        int _arg2 );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode AddDataSeries (
        int setID );
    enum zReturnCode RemoveDataSeries (
        int setID );
    enum zReturnCode GetDataSeries (
        int * numDS,
        VARIANT * dsID );
    enum zReturnCode ShowPane ( );
    enum zReturnCode RemoveAllDataSeries ( );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    enum zChartStyle Getstyle ( );
    void Putstyle ( enum zChartStyle _val );
    _bstr_t GetAxisTitleX ( );
    void PutAxisTitleX ( _bstr_t _val );
    _bstr_t GetAxisTitleY ( );
    void PutAxisTitleY ( _bstr_t _val );
    _variant_t GetvAxisAutoscale ( );
    void PutvAxisAutoscale ( const _variant_t & _val );
    _variant_t GetvAxisStyle ( );
    void PutvAxisStyle ( const _variant_t & _val );
    _variant_t GetvAxisRange ( );
    void PutvAxisRange ( const _variant_t & _val );
    _variant_t GetvAxisVisible ( );
    void PutvAxisVisible ( const _variant_t & _val );
    _variant_t GetvAxisMajorTickmarkVisible ( );
    void PutvAxisMajorTickmarkVisible ( const _variant_t & _val );
    _variant_t GetvAxisMinorTickmarkVisible ( );
    void PutvAxisMinorTickmarkVisible ( const _variant_t & _val );
    VARIANT_BOOL GetOutputSetInherit ( );
    void PutOutputSetInherit ( VARIANT_BOOL _val );
    int GetOutputSet ( );
    void PutOutputSet ( int _val );
    int GetOutputSetEnd ( );
    void PutOutputSetEnd ( int _val );
    VARIANT_BOOL GetOutputSetAll ( );
    void PutOutputSetAll ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarkerFromChart ( );
    void PutMarkerFromChart ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarkerVisible ( );
    void PutMarkerVisible ( VARIANT_BOOL _val );
    int GetMarkerSize ( );
    void PutMarkerSize ( int _val );
    enum zChartMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle ( enum zChartMarkerStyle _val );
    VARIANT_BOOL GetLabelFromChart ( );
    void PutLabelFromChart ( VARIANT_BOOL _val );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible ( VARIANT_BOOL _val );
    VARIANT_BOOL GetShowLabelX ( );
    void PutShowLabelX ( VARIANT_BOOL _val );
    VARIANT_BOOL GetShowLabelY ( );
    void PutShowLabelY ( VARIANT_BOOL _val );
    VARIANT_BOOL GetShowLabelMaxMin ( );
    void PutShowLabelMaxMin ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPaletteFromChart ( );
    void PutPaletteFromChart ( VARIANT_BOOL _val );
    enum zChartPalette GetPalette ( );
    void PutPalette ( enum zChartPalette _val );
    VARIANT_BOOL GetDarkBackground ( );
    void PutDarkBackground ( VARIANT_BOOL _val );
    VARIANT_BOOL GetLegendVisible ( );
    void PutLegendVisible ( VARIANT_BOOL _val );
    _variant_t GetvLegendLocation ( );
    void PutvLegendLocation ( const _variant_t & _val );
    enum zChartLegendDirection GetLegendDirection ( );
    void PutLegendDirection ( enum zChartLegendDirection _val );
    VARIANT_BOOL GetTitleVisible ( );
    void PutTitleVisible ( VARIANT_BOOL _val );
    enum zChartTitleLocation GetTitleLocation ( );
    void PutTitleLocation ( enum zChartTitleLocation _val );
    enum zChartTextJustification GetTitleJustification ( );
    void PutTitleJustification ( enum zChartTextJustification _val );
    double GetTitleFontSize ( );
    void PutTitleFontSize ( double _val );
    VARIANT_BOOL GetTitleFontBold ( );
    void PutTitleFontBold ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTitleFontItalic ( );
    void PutTitleFontItalic ( VARIANT_BOOL _val );
    VARIANT_BOOL GetTitleFontUnderline ( );
    void PutTitleFontUnderline ( VARIANT_BOOL _val );
    enum zColor GetTitleFontColor ( );
    void PutTitleFontColor ( enum zColor _val );
    _variant_t GetvAxisMajorInterval ( );
    void PutvAxisMajorInterval ( const _variant_t & _val );
    _variant_t GetvAxisMinorCount ( );
    void PutvAxisMinorCount ( const _variant_t & _val );
    _variant_t GetvAxisMajorGridlineVisible ( );
    void PutvAxisMajorGridlineVisible ( const _variant_t & _val );
    _variant_t GetvAxisMinorGridlineVisible ( );
    void PutvAxisMinorGridlineVisible ( const _variant_t & _val );
    _variant_t GetvAxisZoom ( );
    void PutvAxisZoom ( const _variant_t & _val );
    _variant_t GetvAxisTitleVisible ( );
    void PutvAxisTitleVisible ( const _variant_t & _val );
    _variant_t GetvAxisTitleJustification ( );
    void PutvAxisTitleJustification ( const _variant_t & _val );
    _variant_t GetvAxisTitleFontSize ( );
    void PutvAxisTitleFontSize ( const _variant_t & _val );
    _variant_t GetvAxisTitleBold ( );
    void PutvAxisTitleBold ( const _variant_t & _val );
    _variant_t GetvAxisTitleItalic ( );
    void PutvAxisTitleItalic ( const _variant_t & _val );
    _variant_t GetvAxisTitleUnderline ( );
    void PutvAxisTitleUnderline ( const _variant_t & _val );
    _variant_t GetvAxisTitleFontColor ( );
    void PutvAxisTitleFontColor ( const _variant_t & _val );
    _variant_t GetvAxisLabelDecimal ( );
    void PutvAxisLabelDecimal ( const _variant_t & _val );
    _variant_t GetvAxisLabelFormat ( );
    void PutvAxisLabelFormat ( const _variant_t & _val );
    _bstr_t GetFont ( );
    void PutFont ( _bstr_t _val );
    double GetLabelFontSize ( );
    void PutLabelFontSize ( double _val );
    double GetAxisValueFontSize ( );
    void PutAxisValueFontSize ( double _val );
    double GetLegendFontSize ( );
    void PutLegendFontSize ( double _val );
    _variant_t GetvAxisMinorCountLog ( );
    void PutvAxisMinorCountLog ( const _variant_t & _val );
    _variant_t GetvAxisRangePad ( );
    void PutvAxisRangePad ( const _variant_t & _val );
    enum zColor GetAxisMajorColor ( );
    void PutAxisMajorColor ( enum zColor _val );
    VARIANT_BOOL GetAxisMajorColorAutoDim ( );
    void PutAxisMajorColorAutoDim ( VARIANT_BOOL _val );
    VARIANT_BOOL GetScaleInherit ( );
    void PutScaleInherit ( VARIANT_BOOL _val );
    double GetMasterScale ( );
    void PutMasterScale ( double _val );
    enum zChartComplexLocation GetComplexPlotLocation ( );
    void PutComplexPlotLocation ( enum zChartComplexLocation _val );
    _variant_t GetvAxisAutoscale2 ( );
    void PutvAxisAutoscale2 ( const _variant_t & _val );
    _variant_t GetvAxisRange2 ( );
    void PutvAxisRange2 ( const _variant_t & _val );
    _variant_t GetvAxisRangePad2 ( );
    void PutvAxisRangePad2 ( const _variant_t & _val );
    _variant_t GetvAxisStyle2 ( );
    void PutvAxisStyle2 ( const _variant_t & _val );
    _variant_t GetvAxisLabelFormat2 ( );
    void PutvAxisLabelFormat2 ( const _variant_t & _val );
    _variant_t GetvAxisLabelDecimal2 ( );
    void PutvAxisLabelDecimal2 ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zChartStyle
{
    FCH_STYLE_POINT = 0,
    FCH_STYLE_LINE = 1,
    FCH_STYLE_LINEFAST = 2,
    FCH_STYLE_LINESTEP = 3,
    FCH_STYLE_AREA = 4,
    FCH_STYLE_AREASTEP = 5
};

enum zChartMarkerStyle
{
    FCH_MARKERSTYLE_CIRCLE = 0,
    FCH_MARKERSTYLE_SQUARE = 1,
    FCH_MARKERSTYLE_DIAMOND = 2,
    FCH_MARKERSTYLE_TRIANGLE = 3,
    FCH_MARKERSTYLE_PENTAGON = 4,
    FCH_MARKERSTYLE_HEXAGON = 5,
    FCH_MARKERSTYLE_STAR = 6
};

enum zChartPalette
{
    FCH_PALETTE_CUSTOM = 0,
    FCH_PALETTE_FEMAP = 1,
    FCH_PALETTE_GRAY = 2,
    FCH_PALETTE_OFFICE = 3,
    FCH_PALETTE_VIBRANT = 4,
    FCH_PALETTE_BLUE = 5,
    FCH_PALETTE_BROWN = 6,
    FCH_PALETTE_GREEN = 7,
    FCH_PALETTE_RED = 8
};

enum zChartLegendDirection
{
    FCH_LEGEND_DIRECTION_TOPTOBOTTOM = 0,
    FCH_LEGEND_DIRECTION_LEFTTORIGHT = 1
};

enum zChartTitleLocation
{
    FCH_TITLE_LOCATION_TOP = 0,
    FCH_TITLE_LOCATION_LEFT = 1,
    FCH_TITLE_LOCATION_RIGHT = 2,
    FCH_TITLE_LOCATION_BOTTOM = 3
};

enum zChartTextJustification
{
    FCH_TEXT_JUSTIFICATION_LEFT = 0,
    FCH_TEXT_JUSTIFICATION_CENTER = 1,
    FCH_TEXT_JUSTIFICATION_RIGHT = 2
};

enum zChartComplexLocation
{
    FCCL_OFF = 0,
    FCCL_TOP = 1,
    FCCL_BOTTOM = 2
};

enum zChartAxisStyle
{
    FCH_AXISSTYLE_LINEAR = 0,
    FCH_AXISSTYLE_LOG = 1
};

enum zChartNumberFormat
{
    FCH_FORMAT_STANDARD = 0,
    FCH_FORMAT_SCIENTIFIC = 1,
    FCH_FORMAT_PERCENTAGE = 2
};

enum zChartLegendLocation
{
    FCH_LEGEND_LOCATION_NEAROUTSIDE = 0,
    FCH_LEGEND_LOCATION_NEAR = 1,
    FCH_LEGEND_LOCATION_CENTER = 2,
    FCH_LEGEND_LOCATION_FAR = 3,
    FCH_LEGEND_LOCATION_FAROUTSIDE = 4
};

struct __declspec(uuid("7aadc5f1-400b-4984-9d12-314296952f1f"))
Chart;
    // [ default ] dispinterface IChart

struct __declspec(uuid("19988e81-f344-4944-82de-aebe26689f33"))
IChartSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTransformPlateVector,put=PutTransformPlateVector))
    double TransformPlateVector[];
    __declspec(property(get=GetTransformPlateVector2,put=PutTransformPlateVector2))
    double TransformPlateVector2[];
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetSeriesType,put=PutSeriesType))
    enum zChartSeriesType SeriesType;
    __declspec(property(get=GetOutputSet,put=PutOutputSet))
    int OutputSet;
    __declspec(property(get=GetOutputVector,put=PutOutputVector))
    int OutputVector;
    __declspec(property(get=GetPosition,put=PutPosition))
    int Position;
    __declspec(property(get=GetPositionCoordSys,put=PutPositionCoordSys))
    int PositionCoordSys;
    __declspec(property(get=Getlocation,put=Putlocation))
    int location;
    __declspec(property(get=GetMarkerInherit,put=PutMarkerInherit))
    VARIANT_BOOL MarkerInherit;
    __declspec(property(get=GetMarkerVisible,put=PutMarkerVisible))
    VARIANT_BOOL MarkerVisible;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum zChartMarkerStyle MarkerStyle;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    int MarkerSize;
    __declspec(property(get=GetColorInherit,put=PutColorInherit))
    VARIANT_BOOL ColorInherit;
    __declspec(property(get=Getcolor,put=Putcolor))
    int color;
    __declspec(property(get=GetInterval,put=PutInterval))
    int Interval;
    __declspec(property(get=GetFunctionID,put=PutFunctionID))
    int FunctionID;
    __declspec(property(get=GetOutputSetEnd,put=PutOutputSetEnd))
    int OutputSetEnd;
    __declspec(property(get=GetOutputSetAll,put=PutOutputSetAll))
    VARIANT_BOOL OutputSetAll;
    __declspec(property(get=GetLabelInherit,put=PutLabelInherit))
    VARIANT_BOOL LabelInherit;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetShowLabelX,put=PutShowLabelX))
    VARIANT_BOOL ShowLabelX;
    __declspec(property(get=GetShowLabelY,put=PutShowLabelY))
    VARIANT_BOOL ShowLabelY;
    __declspec(property(get=GetShowLabelMaxMin,put=PutShowLabelMaxMin))
    VARIANT_BOOL ShowLabelMaxMin;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetGroup,put=PutGroup))
    int Group;
    __declspec(property(get=GetOutputVector2,put=PutOutputVector2))
    int OutputVector2;
    __declspec(property(get=GetLocation2,put=PutLocation2))
    int Location2;
    __declspec(property(get=GetSortData,put=PutSortData))
    VARIANT_BOOL SortData;
    __declspec(property(get=GetPositionIsRelative,put=PutPositionIsRelative))
    VARIANT_BOOL PositionIsRelative;
    __declspec(property(get=GetStudyID,put=PutStudyID))
    int StudyID;
    __declspec(property(get=GetConvertMethod,put=PutConvertMethod))
    enum zResultsConvert ConvertMethod;
    __declspec(property(get=GetConvertMethod2,put=PutConvertMethod2))
    enum zResultsConvert ConvertMethod2;
    __declspec(property(get=GetTransformNodalMode,put=PutTransformNodalMode))
    enum zOutputDestination TransformNodalMode;
    __declspec(property(get=GetTransformNodalCSys,put=PutTransformNodalCSys))
    int TransformNodalCSys;
    __declspec(property(get=GetTransformPlateMode,put=PutTransformPlateMode))
    enum zOutputDestination TransformPlateMode;
    __declspec(property(get=GetTransformPlateCSys,put=PutTransformPlateCSys))
    int TransformPlateCSys;
    __declspec(property(get=GetTransformPlateDOF,put=PutTransformPlateDOF))
    int TransformPlateDOF;
    __declspec(property(get=GetvTransformPlateVector,put=PutvTransformPlateVector))
    _variant_t vTransformPlateVector;
    __declspec(property(get=GetTransformSolidMode,put=PutTransformSolidMode))
    enum zOutputDestination TransformSolidMode;
    __declspec(property(get=GetTransformSolidCSys,put=PutTransformSolidCSys))
    int TransformSolidCSys;
    __declspec(property(get=GetTransformNodalMode2,put=PutTransformNodalMode2))
    enum zOutputDestination TransformNodalMode2;
    __declspec(property(get=GetTransformNodalCSys2,put=PutTransformNodalCSys2))
    int TransformNodalCSys2;
    __declspec(property(get=GetTransformPlateMode2,put=PutTransformPlateMode2))
    enum zOutputDestination TransformPlateMode2;
    __declspec(property(get=GetTransformPlateCSys2,put=PutTransformPlateCSys2))
    int TransformPlateCSys2;
    __declspec(property(get=GetTransformPlateDOF2,put=PutTransformPlateDOF2))
    int TransformPlateDOF2;
    __declspec(property(get=GetvTransformPlateVector2,put=PutvTransformPlateVector2))
    _variant_t vTransformPlateVector2;
    __declspec(property(get=GetTransformSolidMode2,put=PutTransformSolidMode2))
    enum zOutputDestination TransformSolidMode2;
    __declspec(property(get=GetTransformSolidCSys2,put=PutTransformSolidCSys2))
    int TransformSolidCSys2;
    __declspec(property(get=GetComplexMethod,put=PutComplexMethod))
    enum zChartSeriesComplexMethod ComplexMethod;
    __declspec(property(get=GetComplexPhase,put=PutComplexPhase))
    double ComplexPhase;
    __declspec(property(get=GetComplexStart,put=PutComplexStart))
    double ComplexStart;
    __declspec(property(get=GetComplexEnd,put=PutComplexEnd))
    double ComplexEnd;
    __declspec(property(get=GetTransformPlateTolerance,put=PutTransformPlateTolerance))
    double TransformPlateTolerance;
    __declspec(property(get=GetTransformPlateTolerance2,put=PutTransformPlateTolerance2))
    double TransformPlateTolerance2;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetTransformPlateVector (
        int nVectorIndex );
    void PutTransformPlateVector (
        int nVectorIndex,
        double _arg2 );
    double GetTransformPlateVector2 (
        int nVectorIndex );
    void PutTransformPlateVector2 (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode GetXY (
        int * numPoints,
        VARIANT * xyValues,
        VARIANT * xRange,
        VARIANT * yRange );
    enum zReturnCode CopyToClipboard ( );
    enum zReturnCode GetEntityType (
        int chartID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    enum zChartSeriesType GetSeriesType ( );
    void PutSeriesType ( enum zChartSeriesType _val );
    int GetOutputSet ( );
    void PutOutputSet ( int _val );
    int GetOutputVector ( );
    void PutOutputVector ( int _val );
    int GetPosition ( );
    void PutPosition ( int _val );
    int GetPositionCoordSys ( );
    void PutPositionCoordSys ( int _val );
    int Getlocation ( );
    void Putlocation ( int _val );
    VARIANT_BOOL GetMarkerInherit ( );
    void PutMarkerInherit ( VARIANT_BOOL _val );
    VARIANT_BOOL GetMarkerVisible ( );
    void PutMarkerVisible ( VARIANT_BOOL _val );
    enum zChartMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle ( enum zChartMarkerStyle _val );
    int GetMarkerSize ( );
    void PutMarkerSize ( int _val );
    VARIANT_BOOL GetColorInherit ( );
    void PutColorInherit ( VARIANT_BOOL _val );
    int Getcolor ( );
    void Putcolor ( int _val );
    int GetInterval ( );
    void PutInterval ( int _val );
    int GetFunctionID ( );
    void PutFunctionID ( int _val );
    int GetOutputSetEnd ( );
    void PutOutputSetEnd ( int _val );
    VARIANT_BOOL GetOutputSetAll ( );
    void PutOutputSetAll ( VARIANT_BOOL _val );
    VARIANT_BOOL GetLabelInherit ( );
    void PutLabelInherit ( VARIANT_BOOL _val );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible ( VARIANT_BOOL _val );
    VARIANT_BOOL GetShowLabelX ( );
    void PutShowLabelX ( VARIANT_BOOL _val );
    VARIANT_BOOL GetShowLabelY ( );
    void PutShowLabelY ( VARIANT_BOOL _val );
    VARIANT_BOOL GetShowLabelMaxMin ( );
    void PutShowLabelMaxMin ( VARIANT_BOOL _val );
    double GetScale ( );
    void PutScale ( double _val );
    int GetGroup ( );
    void PutGroup ( int _val );
    int GetOutputVector2 ( );
    void PutOutputVector2 ( int _val );
    int GetLocation2 ( );
    void PutLocation2 ( int _val );
    VARIANT_BOOL GetSortData ( );
    void PutSortData ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPositionIsRelative ( );
    void PutPositionIsRelative ( VARIANT_BOOL _val );
    int GetStudyID ( );
    void PutStudyID ( int _val );
    enum zResultsConvert GetConvertMethod ( );
    void PutConvertMethod ( enum zResultsConvert _val );
    enum zResultsConvert GetConvertMethod2 ( );
    void PutConvertMethod2 ( enum zResultsConvert _val );
    enum zOutputDestination GetTransformNodalMode ( );
    void PutTransformNodalMode ( enum zOutputDestination _val );
    int GetTransformNodalCSys ( );
    void PutTransformNodalCSys ( int _val );
    enum zOutputDestination GetTransformPlateMode ( );
    void PutTransformPlateMode ( enum zOutputDestination _val );
    int GetTransformPlateCSys ( );
    void PutTransformPlateCSys ( int _val );
    int GetTransformPlateDOF ( );
    void PutTransformPlateDOF ( int _val );
    _variant_t GetvTransformPlateVector ( );
    void PutvTransformPlateVector ( const _variant_t & _val );
    enum zOutputDestination GetTransformSolidMode ( );
    void PutTransformSolidMode ( enum zOutputDestination _val );
    int GetTransformSolidCSys ( );
    void PutTransformSolidCSys ( int _val );
    enum zOutputDestination GetTransformNodalMode2 ( );
    void PutTransformNodalMode2 ( enum zOutputDestination _val );
    int GetTransformNodalCSys2 ( );
    void PutTransformNodalCSys2 ( int _val );
    enum zOutputDestination GetTransformPlateMode2 ( );
    void PutTransformPlateMode2 ( enum zOutputDestination _val );
    int GetTransformPlateCSys2 ( );
    void PutTransformPlateCSys2 ( int _val );
    int GetTransformPlateDOF2 ( );
    void PutTransformPlateDOF2 ( int _val );
    _variant_t GetvTransformPlateVector2 ( );
    void PutvTransformPlateVector2 ( const _variant_t & _val );
    enum zOutputDestination GetTransformSolidMode2 ( );
    void PutTransformSolidMode2 ( enum zOutputDestination _val );
    int GetTransformSolidCSys2 ( );
    void PutTransformSolidCSys2 ( int _val );
    enum zChartSeriesComplexMethod GetComplexMethod ( );
    void PutComplexMethod ( enum zChartSeriesComplexMethod _val );
    double GetComplexPhase ( );
    void PutComplexPhase ( double _val );
    double GetComplexStart ( );
    void PutComplexStart ( double _val );
    double GetComplexEnd ( );
    void PutComplexEnd ( double _val );
    double GetTransformPlateTolerance ( );
    void PutTransformPlateTolerance ( double _val );
    double GetTransformPlateTolerance2 ( );
    void PutTransformPlateTolerance2 ( double _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zChartSeriesType
{
    FCHD_TYPE_ID = 0,
    FCHD_TYPE_SET = 1,
    FCHD_TYPE_SETVAL = 2,
    FCHD_TYPE_POSITION = 3,
    FCHD_TYPE_FUNCTION = 4,
    FCHD_TYPE_VECVEC = 7,
    FCHD_TYPE_CPLXEXP = 10
};

enum zChartSeriesComplexMethod
{
    FCSCM_NONE = 0,
    FCSCM_MATCHMODEL = 1,
    FCSCM_MATCHVIEW = 2,
    FCSCM_SYNC = 3
};

struct __declspec(uuid("19988e83-f344-4944-82de-aebe26689f33"))
ChartSeries;
    // [ default ] dispinterface IChartSeries

struct __declspec(uuid("17387165-149c-43e5-a91d-eac4d1e4eaad"))
ITableData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Gettype,put=Puttype))
    enum zTableType type;
    __declspec(property(get=Getsubtype,put=Putsubtype))
    int subtype;
    __declspec(property(get=GetFunctionType,put=PutFunctionType))
    enum zFunctionType FunctionType;
    __declspec(property(get=GetVectorFunctionType,put=PutVectorFunctionType))
    enum zVectorFunctionType VectorFunctionType;
    __declspec(property(get=GetRows,put=PutRows))
    int Rows;
    __declspec(property(get=GetColumns,put=PutColumns))
    int Columns;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode Get (
        int entID );
    enum zReturnCode Put (
        int entID );
    enum zReturnCode GetFunction (
        int entID );
    enum zReturnCode PutFunction (
        int entID );
    enum zReturnCode CellRange (
        int * nMinRow,
        int * nMaxRow,
        int * nMinCol,
        int * nMaxCol );
    enum zReturnCode SaveToFile (
        _bstr_t sFilename,
        VARIANT_BOOL bAppend );
    enum zReturnCode Initialize (
        int nNumRow,
        int nNumCol );
    enum zReturnCode Resize (
        int nNumRow,
        int nNumCol );
    enum zReturnCode clear ( );
    enum zReturnCode SetCellDouble (
        int nRow,
        int nCol,
        double dValue );
    enum zReturnCode SetCellInteger (
        int nRow,
        int nCol,
        int nValue );
    enum zReturnCode SetCellText (
        int nRow,
        int nCol,
        _bstr_t sText );
    enum zReturnCode SetCellEquation (
        int nRow,
        int nCol,
        _bstr_t sEqn );
    enum zReturnCode SetCellEntity (
        int nRow,
        int nCol,
        enum zDataType ntype,
        int nID );
    enum zReturnCode GetCellDouble (
        int nRow,
        int nCol,
        double * dValue );
    enum zReturnCode GetCellInteger (
        int nRow,
        int nCol,
        int * nValue );
    enum zReturnCode GetCellText (
        int nRow,
        int nCol,
        BSTR * sText );
    enum zReturnCode GetCellEntity (
        int nRow,
        int nCol,
        enum zDataType * ntype,
        int * nID );
    enum zReturnCode SetMultiCellDouble (
        int nFirstRow,
        int nLastRow,
        int nFirstCol,
        int nLastCol,
        const _variant_t & dValues );
    enum zReturnCode SetMultiCellInteger (
        int nFirstRow,
        int nLastRow,
        int nFirstCol,
        int nLastCol,
        const _variant_t & nValues );
    enum zReturnCode SetMultiCellText (
        int nFirstRow,
        int nLastRow,
        int nFirstCol,
        int nLastCol,
        const _variant_t & sValues );
    enum zReturnCode GetMultiCellDouble (
        int nFirstRow,
        int nLastRow,
        int nFirstCol,
        int nLastCol,
        VARIANT * dValues );
    enum zReturnCode GetMultiCellInteger (
        int nFirstRow,
        int nLastRow,
        int nFirstCol,
        int nLastCol,
        VARIANT * nValues );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    enum zTableType Gettype ( );
    void Puttype ( enum zTableType _val );
    int Getsubtype ( );
    void Putsubtype ( int _val );
    enum zFunctionType GetFunctionType ( );
    void PutFunctionType ( enum zFunctionType _val );
    enum zVectorFunctionType GetVectorFunctionType ( );
    void PutVectorFunctionType ( enum zVectorFunctionType _val );
    int GetRows ( );
    void PutRows ( int _val );
    int GetColumns ( );
    void PutColumns ( int _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zTableType
{
    FTBL_NONE = 0,
    FTBL_FUNCTION = 1,
    FTBL_VECTORFUNCTION = 2,
    FTBL_LOADSETCOMBINATION = 3,
    FTBL_RESULTSETPROCESS = 4
};

enum zVectorFunctionType
{
    FTBV_NONE = 0,
    FTBV_ACCELERATION = 1,
    FTBV_SUNPLANET = 2,
    FTBV_SUNPLANETALTITUDE = 3,
    FTBV_SPHERICALVECTORSUNPLANET = 4,
    FTBV_SPHERICALVECTORSUNPLANETALTITUDE = 5
};

struct __declspec(uuid("17387167-149c-43e5-a91d-eac4d1e4eaad"))
TableData;
    // [ default ] dispinterface ITableData

struct __declspec(uuid("60266d03-af68-4b10-906c-4bdafade3746"))
IInterpolate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAmbientVector,put=PutAmbientVector))
    double AmbientVector[];
    __declspec(property(get=GetAmbientTensor,put=PutAmbientTensor))
    double AmbientTensor[];
    __declspec(property(get=GetCentroidAveraging,put=PutCentroidAveraging))
    VARIANT_BOOL CentroidAveraging;
    __declspec(property(get=GetUseSolidFreeFacesOnly,put=PutUseSolidFreeFacesOnly))
    VARIANT_BOOL UseSolidFreeFacesOnly;
    __declspec(property(get=GetEngineeringShearStrain,put=PutEngineeringShearStrain))
    VARIANT_BOOL EngineeringShearStrain;
    __declspec(property(get=GetDistanceTolerance,put=PutDistanceTolerance))
    double DistanceTolerance;
    __declspec(property(get=GetAmbientScalar,put=PutAmbientScalar))
    double AmbientScalar;
    __declspec(property(get=GetvAmbientVector,put=PutvAmbientVector))
    _variant_t vAmbientVector;
    __declspec(property(get=GetvAmbientTensor,put=PutvAmbientTensor))
    _variant_t vAmbientTensor;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetAmbientVector (
        int nVectorIndex );
    void PutAmbientVector (
        int nVectorIndex,
        double _arg2 );
    double GetAmbientTensor (
        int nVectorIndex );
    void PutAmbientTensor (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode clear ( );
    enum zReturnCode ClearResults ( );
    enum zReturnCode AddElements (
        int nElemSetID );
    enum zReturnCode AddScalar (
        int nSetID,
        int nVecID );
    enum zReturnCode AddVector (
        int nSetID,
        int nVecX,
        int nVecY,
        int nVecZ );
    enum zReturnCode AddTensor2D (
        int nSetID,
        int nVecX,
        int nVecY,
        int nVecXY );
    enum zReturnCode AddTensor (
        int nSetID,
        int nVecX,
        int nVecY,
        int nVecZ,
        int nVecXY,
        int nVecYZ,
        int nVecZX );
    enum zReturnCode AddNodal (
        int nSetID,
        int nX,
        int nY,
        int nZ,
        int nRX,
        int nRY,
        int nRZ );
    enum zReturnCode FindElement (
        const _variant_t & vCoord,
        int * nElemID );
    enum zReturnCode FindScalar (
        const _variant_t & vCoord,
        int * nElemID,
        double * dValue );
    enum zReturnCode FindVector (
        const _variant_t & vCoord,
        int * nElemID,
        double * dX,
        double * dY,
        double * dZ );
    enum zReturnCode FindVectorTotal (
        const _variant_t & vCoord,
        int * nElemID,
        double * dTotal );
    enum zReturnCode FindTensor2D (
        const _variant_t & vCoord,
        int * nElemID,
        double * dX,
        double * dY,
        double * dXY );
    enum zReturnCode FindTensor (
        const _variant_t & vCoord,
        int * nElemID,
        double * dX,
        double * dY,
        double * dZ,
        double * dXY,
        double * dYZ,
        double * dZX );
    enum zReturnCode FindInvariant (
        const _variant_t & vCoord,
        enum zInvariantResultType nInvariantType,
        int * nElemID,
        double * dValue );
    enum zReturnCode FindNodal (
        const _variant_t & vCoord,
        int * nElemID,
        double * dX,
        double * dY,
        double * dZ,
        double * dRX,
        double * dRY,
        double * dRZ );
    enum zReturnCode MultiElement (
        int nNumCoord,
        const _variant_t & vCoord,
        VARIANT * nElemID );
    enum zReturnCode MultiScalar (
        int nNumCoord,
        const _variant_t & vCoord,
        VARIANT * nElemID,
        VARIANT * dValue );
    enum zReturnCode MultiVector (
        int nNumCoord,
        const _variant_t & vCoord,
        VARIANT * nElemID,
        VARIANT * dX,
        VARIANT * dY,
        VARIANT * dZ );
    enum zReturnCode MultiVectorTotal (
        int nNumCoord,
        const _variant_t & vCoord,
        VARIANT * nElemID,
        VARIANT * dTotal );
    enum zReturnCode MultiTensor2D (
        int nNumCoord,
        const _variant_t & vCoord,
        VARIANT * nElemID,
        VARIANT * dX,
        VARIANT * dY,
        VARIANT * dXY );
    enum zReturnCode MultiTensor (
        int nNumCoord,
        const _variant_t & vCoord,
        VARIANT * nElemID,
        VARIANT * dX,
        VARIANT * dY,
        VARIANT * dZ,
        VARIANT * dXY,
        VARIANT * dYZ,
        VARIANT * dZX );
    enum zReturnCode MultiInvariant (
        int nNumCoord,
        const _variant_t & vCoord,
        enum zInvariantResultType nInvariantType,
        VARIANT * nElemID,
        VARIANT * dValue );
    enum zReturnCode MultiNodal (
        int nNumCoord,
        const _variant_t & vCoord,
        VARIANT * nElemID,
        VARIANT * dX,
        VARIANT * dY,
        VARIANT * dZ,
        VARIANT * dRX,
        VARIANT * dRY,
        VARIANT * dRZ );
    enum zReturnCode SetNodalTransform (
        enum zOutputDestination nTransformMode,
        int nCSysID );
    enum zReturnCode SetPlateTransform (
        enum zOutputDestination nTransformMode,
        int nCSysID,
        int nDOF,
        const _variant_t & vAlongVector,
        double dToleranceAngle );
    enum zReturnCode SetSolidTransform (
        enum zOutputDestination nTransformMode,
        int nCSysID );
    enum zReturnCode SetOutputOrientTri3 (
        int nStress,
        int nStrain,
        int nForce );
    enum zReturnCode SetOutputOrientTri6 (
        int nStress,
        int nStrain,
        int nForce );
    enum zReturnCode SetOutputOrientQuad4 (
        int nStress,
        int nStrain,
        int nForce );
    enum zReturnCode SetOutputOrientQuad8 (
        int nStress,
        int nStrain,
        int nForce );
    enum zReturnCode SetOutputOrientSolid (
        int nIsotropic,
        int nAnisotropic,
        int nHyperelastic );
    enum zReturnCode SetOutputMode (
        enum zResultsConvert nConvertMode,
        VARIANT_BOOL bAverageCorners,
        VARIANT_BOOL bBreakProp,
        VARIANT_BOOL bBreakMatl,
        VARIANT_BOOL bBreakLayer,
        VARIANT_BOOL bBreakColor,
        VARIANT_BOOL bBreakGeom,
        double dBreakAngle );
    enum zReturnCode SetGlobalPly (
        int nGlobalPly );
    enum zReturnCode FindVector2 (
        const _variant_t & vCoord,
        int * nElemID,
        double * dX,
        double * dY,
        double * dZ );
    enum zReturnCode SetComplexOptions (
        VARIANT_BOOL bExpandComplex,
        double dComplexPhase );

    // Properties:
    VARIANT_BOOL GetCentroidAveraging ( );
    void PutCentroidAveraging ( VARIANT_BOOL _val );
    VARIANT_BOOL GetUseSolidFreeFacesOnly ( );
    void PutUseSolidFreeFacesOnly ( VARIANT_BOOL _val );
    VARIANT_BOOL GetEngineeringShearStrain ( );
    void PutEngineeringShearStrain ( VARIANT_BOOL _val );
    double GetDistanceTolerance ( );
    void PutDistanceTolerance ( double _val );
    double GetAmbientScalar ( );
    void PutAmbientScalar ( double _val );
    _variant_t GetvAmbientVector ( );
    void PutvAmbientVector ( const _variant_t & _val );
    _variant_t GetvAmbientTensor ( );
    void PutvAmbientTensor ( const _variant_t & _val );
};

enum zInvariantResultType
{
    FIVT_MAX_PRIN = 0,
    FIVT_MIN_PRIN = 1,
    FIVT_MID_PRIN = 2,
    FIVT_MEAN_PRIN = 3,
    FIVT_MAX_SHEAR = 4,
    FIVT_VON_MISES = 5
};

struct __declspec(uuid("60266d05-af68-4b10-906c-4bdafade3746"))
Interpolate;
    // [ default ] dispinterface IInterpolate

struct __declspec(uuid("3a62fe4c-d156-4f16-9c1b-f81c6bb4089a"))
IBeamCalculator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetElement,put=PutElement))
    int Element;
    __declspec(property(get=GetPosition,put=PutPosition))
    double Position;
    __declspec(property(get=GetMeshFactor,put=PutMeshFactor))
    int MeshFactor;
    __declspec(property(get=GetIncludeAxialForce,put=PutIncludeAxialForce))
    VARIANT_BOOL IncludeAxialForce;
    __declspec(property(get=GetIncludeShearForceY,put=PutIncludeShearForceY))
    VARIANT_BOOL IncludeShearForceY;
    __declspec(property(get=GetIncludeShearForceZ,put=PutIncludeShearForceZ))
    VARIANT_BOOL IncludeShearForceZ;
    __declspec(property(get=GetIncludeMomentY,put=PutIncludeMomentY))
    VARIANT_BOOL IncludeMomentY;
    __declspec(property(get=GetIncludeMomentZ,put=PutIncludeMomentZ))
    VARIANT_BOOL IncludeMomentZ;
    __declspec(property(get=GetIncludeTorque,put=PutIncludeTorque))
    VARIANT_BOOL IncludeTorque;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode GetElementProperties (
        double * dArea,
        double * dIzz,
        double * dIyy,
        double * dIyz,
        double * dfJ,
        double * dShearAreaY,
        double * dShearAreaZ,
        double * dWarp,
        double * dNeutralAxisOffsetY,
        double * dNeutralAxisOffsetZ );
    enum zReturnCode GetMeshInfo (
        int * nNumNode,
        VARIANT * dNodeYZ,
        int * nNumElem,
        VARIANT * nElemNodes );
    enum zReturnCode CalculateStress (
        int nOutputSetID,
        enum zBeamCalculatorStressComponent enStressComponent,
        int * pnNumNodes,
        VARIANT * pdCoordinates,
        VARIANT * pdStresses,
        VARIANT * pdMaxStress,
        VARIANT * pnMaxStressIndex,
        VARIANT * pdMinStress,
        VARIANT * pnMinIndexStress );
    enum zReturnCode CalculateStressFromForces (
        const _variant_t & dEndAForces,
        const _variant_t & dEndBForces,
        enum zBeamCalculatorStressComponent enStressComponent,
        int * pnNumNodes,
        VARIANT * pdCoordinates,
        VARIANT * pdStresses,
        VARIANT * pdMaxStress,
        VARIANT * pnMaxStressInfo,
        VARIANT * pdMinStress,
        VARIANT * pnMinStressInfo );
    enum zReturnCode FindMaxMinStress (
        int nOutputSetID,
        enum zBeamCalculatorStressComponent enStressComponent,
        int * nMaxSetID,
        enum zBeamCalculatorStressComponent * enMaxComponent,
        double * dMaxLocation,
        double * dMaxStress,
        int * nMinSetID,
        enum zBeamCalculatorStressComponent * enMinComponent,
        double * dMinLocation,
        double * dMinStress );

    // Properties:
    int GetElement ( );
    void PutElement ( int _val );
    double GetPosition ( );
    void PutPosition ( double _val );
    int GetMeshFactor ( );
    void PutMeshFactor ( int _val );
    VARIANT_BOOL GetIncludeAxialForce ( );
    void PutIncludeAxialForce ( VARIANT_BOOL _val );
    VARIANT_BOOL GetIncludeShearForceY ( );
    void PutIncludeShearForceY ( VARIANT_BOOL _val );
    VARIANT_BOOL GetIncludeShearForceZ ( );
    void PutIncludeShearForceZ ( VARIANT_BOOL _val );
    VARIANT_BOOL GetIncludeMomentY ( );
    void PutIncludeMomentY ( VARIANT_BOOL _val );
    VARIANT_BOOL GetIncludeMomentZ ( );
    void PutIncludeMomentZ ( VARIANT_BOOL _val );
    VARIANT_BOOL GetIncludeTorque ( );
    void PutIncludeTorque ( VARIANT_BOOL _val );
};

enum zBeamCalculatorStressComponent
{
    FBMC_SC_ALL = -1,
    FBMC_SC_VONMISES = 0,
    FBMC_SC_MAXSHEAR = 1,
    FBMC_SC_MAXPRIN = 2,
    FBMC_SC_MINPRIN = 3,
    FBMC_SC_AXIAL = 4,
    FBMC_SC_YSHEAR = 5,
    FBMC_SC_ZSHEAR = 6,
    FBMC_SC_COMBSHEAR = 7
};

struct __declspec(uuid("3a62fe4e-d156-4f16-9c1b-f81c6bb4089a"))
BeamCalculator;
    // [ default ] dispinterface IBeamCalculator

struct __declspec(uuid("589eafb8-b3d0-42fb-b902-fe0a88b7ec80"))
IAnalysisStudy : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFileTime,put=PutFileTime))
    int FileTime;
    __declspec(property(get=GetAnalysisProg,put=PutAnalysisProg))
    enum zAnalysisProgram AnalysisProg;
    __declspec(property(get=GetAnalysisType,put=PutAnalysisType))
    enum zAnalysisType AnalysisType;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getnotes,put=Putnotes))
    _bstr_t notes;
    __declspec(property(get=GetAnalysisSet,put=PutAnalysisSet))
    int AnalysisSet;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int CountOutputSets ( );
    enum zReturnCode OutputSets (
        int nOutputSetSetID );
    VARIANT_BOOL HasOutputSet (
        int nSetID );
    enum zReturnCode AddOutputSets (
        int nSetID );
    enum zReturnCode RemoveOutputSets (
        int nSetID );
    enum zReturnCode RemoveAllOutputSets ( );
    enum zReturnCode Delete (
        int nSetID,
        VARIANT_BOOL bDeleteOutput );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    int GetFileTime ( );
    void PutFileTime ( int _val );
    enum zAnalysisProgram GetAnalysisProg ( );
    void PutAnalysisProg ( enum zAnalysisProgram _val );
    enum zAnalysisType GetAnalysisType ( );
    void PutAnalysisType ( enum zAnalysisType _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    _bstr_t Getnotes ( );
    void Putnotes ( _bstr_t _val );
    int GetAnalysisSet ( );
    void PutAnalysisSet ( int _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("589eafba-b3d0-42fb-b902-fe0a88b7ec80"))
AnalysisStudy;
    // [ default ] dispinterface IAnalysisStudy

struct __declspec(uuid("0becb769-5f94-4718-942b-9a2a866a59d1"))
IDrawErase : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetEraseMode,put=PutEraseMode))
    VARIANT_BOOL EraseMode;
    __declspec(property(get=GetAutoSelectMesh,put=PutAutoSelectMesh))
    VARIANT_BOOL AutoSelectMesh;
    __declspec(property(get=GetExclusiveDrawMode,put=PutExclusiveDrawMode))
    VARIANT_BOOL ExclusiveDrawMode;
    __declspec(property(get=GetEraseGeometry,put=PutEraseGeometry))
    VARIANT_BOOL EraseGeometry;
    __declspec(property(get=GetEraseMesh,put=PutEraseMesh))
    VARIANT_BOOL EraseMesh;
    __declspec(property(get=GetDrawModeSelectFromAll,put=PutDrawModeSelectFromAll))
    VARIANT_BOOL DrawModeSelectFromAll;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode ClearAll ( );
    enum zReturnCode clear (
        enum zDataType entityTYPE );
    enum zReturnCode SaveGroup (
        int groupID,
        _bstr_t title );
    enum zReturnCode LoadGroup (
        int groupID );
    enum zReturnCode Grow ( );
    enum zReturnCode Shrink ( );
    enum zReturnCode HasErased ( );
    enum zReturnCode HasErasedType (
        enum zDataType entityTYPE );
    enum zReturnCode EraseSet (
        enum zDataType entityTYPE,
        int nSetD,
        VARIANT_BOOL bAddToEraseList,
        VARIANT_BOOL bClear,
        VARIANT_BOOL bRedraw );
    ISetPtr GetErased (
        enum zDataType entityTYPE );

    // Properties:
    VARIANT_BOOL GetEnable ( );
    void PutEnable ( VARIANT_BOOL _val );
    VARIANT_BOOL GetEraseMode ( );
    void PutEraseMode ( VARIANT_BOOL _val );
    VARIANT_BOOL GetAutoSelectMesh ( );
    void PutAutoSelectMesh ( VARIANT_BOOL _val );
    VARIANT_BOOL GetExclusiveDrawMode ( );
    void PutExclusiveDrawMode ( VARIANT_BOOL _val );
    VARIANT_BOOL GetEraseGeometry ( );
    void PutEraseGeometry ( VARIANT_BOOL _val );
    VARIANT_BOOL GetEraseMesh ( );
    void PutEraseMesh ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDrawModeSelectFromAll ( );
    void PutDrawModeSelectFromAll ( VARIANT_BOOL _val );
};

struct __declspec(uuid("0becb76b-5f94-4718-942b-9a2a866a59d1"))
DrawErase;
    // [ default ] dispinterface IDrawErase

struct __declspec(uuid("bc4680a4-7b1c-449b-b7f7-aaf21ec0abd3"))
IFreq : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetF1,put=PutF1))
    double F1;
    __declspec(property(get=GetF2,put=PutF2))
    double F2;
    __declspec(property(get=GetDF,put=PutDF))
    double DF;
    __declspec(property(get=GetFSPD,put=PutFSPD))
    double FSPD;
    __declspec(property(get=GetCLUSTER,put=PutCLUSTER))
    double CLUSTER;
    __declspec(property(get=GetNF,put=PutNF))
    int NF;
    __declspec(property(get=GetLOG,put=PutLOG))
    unsigned char LOG;
    __declspec(property(get=Gettype,put=Puttype))
    enum zFreqType type;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode AddFreq (
        int NF,
        const _variant_t & Fi,
        int asetID,
        VARIANT_BOOL on );
    enum zReturnCode AddFreq1 (
        double F1,
        double DF,
        int NDF,
        int asetID,
        VARIANT_BOOL on );
    enum zReturnCode AddFreq2 (
        double F1,
        double F2,
        int NF,
        int asetID,
        VARIANT_BOOL on );
    enum zReturnCode AddFreq3 (
        double F1,
        double F2,
        int NEF,
        VARIANT_BOOL LOG,
        double CLUSTER,
        int asetID,
        VARIANT_BOOL on );
    enum zReturnCode AddFreq4 (
        double F1,
        double F2,
        int NFM,
        double FPSD,
        int asetID,
        VARIANT_BOOL on );
    enum zReturnCode AddFreq5 (
        double F1,
        double F2,
        int NFR,
        const _variant_t & FRi,
        int asetID,
        VARIANT_BOOL on );
    enum zReturnCode UpdFreq (
        int NF,
        const _variant_t & Fi,
        int asetID,
        VARIANT_BOOL on );
    enum zReturnCode UpdFreq1 (
        double F1,
        double DF,
        int NDF,
        int asetID,
        VARIANT_BOOL on );
    enum zReturnCode UpdFreq2 (
        double F1,
        double F2,
        int NF,
        int asetID,
        VARIANT_BOOL on );
    enum zReturnCode UpdFreq3 (
        double F1,
        double F2,
        int NEF,
        VARIANT_BOOL LOG,
        double CLUSTER,
        int asetID,
        VARIANT_BOOL on );
    enum zReturnCode UpdFreq4 (
        double F1,
        double F2,
        int NFM,
        double FPSD,
        int asetID,
        VARIANT_BOOL on );
    enum zReturnCode UpdFreq5 (
        double F1,
        double F2,
        int NFR,
        const _variant_t & FRi,
        int asetID,
        VARIANT_BOOL on );
    enum zReturnCode AddFreqByFuncID (
        int funcID,
        int asetID,
        VARIANT_BOOL on );
    enum zReturnCode AddFreq5ByFuncID (
        double F1,
        double F2,
        int funcID,
        int asetID,
        VARIANT_BOOL on );
    enum zReturnCode UpdFreqByFuncID (
        int funcID,
        int asetID,
        VARIANT_BOOL on );
    enum zReturnCode UpdFreq5ByFuncID (
        double F1,
        double F2,
        int funcID,
        int asetID,
        VARIANT_BOOL on );
    enum zReturnCode AllOn (
        int asetID );
    enum zReturnCode AllOff (
        int asetID );
    enum zReturnCode TurnOn (
        int asetID,
        int freqID );
    enum zReturnCode TurnOff (
        int asetID,
        int freqID );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    double GetF1 ( );
    void PutF1 ( double _val );
    double GetF2 ( );
    void PutF2 ( double _val );
    double GetDF ( );
    void PutDF ( double _val );
    double GetFSPD ( );
    void PutFSPD ( double _val );
    double GetCLUSTER ( );
    void PutCLUSTER ( double _val );
    int GetNF ( );
    void PutNF ( int _val );
    unsigned char GetLOG ( );
    void PutLOG ( unsigned char _val );
    enum zFreqType Gettype ( );
    void Puttype ( enum zFreqType _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

enum zFreqType
{
    FREQ = 0,
    FREQ1 = 1,
    FREQ2 = 2,
    FREQ3 = 3,
    FREQ4 = 4,
    FREQ5 = 5
};

struct __declspec(uuid("bc4680a6-7b1c-449b-b7f7-aaf21ec0abd3"))
Frequency;
    // [ default ] dispinterface IFreq

struct __declspec(uuid("8d7600a5-c1b7-4740-8d63-50e476a84b2d"))
IMidFaceCentroidModel : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode KeepNodes (
        VARIANT_BOOL qKeepNodes );
    enum zReturnCode SetCentroidNodeColor (
        int iColor );
    enum zReturnCode SetFaceNodeColor (
        int iColor );
    enum zReturnCode SetNodeStartIDs (
        int iFirstFaceNodeID,
        int iFirstCentroidNodeID );
    enum zReturnCode SetLoadAndConstraintSet (
        int ILoadSet,
        int IBCSet );
    enum zReturnCode SetMappingTria6 (
        int iDefaultMapping,
        int iGroupTri6,
        int iGroupTri7 );
    enum zReturnCode SetMappingQuad8 (
        int iDefaultMapping,
        int iGroupQuad8,
        int iGroupQuad9 );
    enum zReturnCode SetMappingTetra10 (
        int iDefaultMapping,
        int iGroupTet10,
        int iGroupTet14,
        int iGroupTet15 );
    enum zReturnCode SetMappingWedge15 (
        int iDefaultMapping,
        int iGroupWedge15,
        int iGroupWedge20,
        int iGroupWedge21 );
    enum zReturnCode SetMappingBrick20 (
        int iDefaultMapping,
        int iGroupHex20,
        int iGroupHex26,
        int iGroupHex27 );
    enum zReturnCode SetMappingPyramid13 (
        int iDefaultMapping,
        int iGroupPyramid14,
        int iGroupPyramid18,
        int iGroupPyramid19 );
    enum zReturnCode ShowTri_3 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowTri_6 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowTri_7 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowQuad_4 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowQuad_8 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowQuad_9 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowTet_4 (
        VARIANT_BOOL qNodes );
    enum zReturnCode Show_Tet_10 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowTet_14 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowTet_15 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowWedge_6 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowWedge_15 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowWedge_20 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowWedge_21 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowPyramid_5 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowPyramid_14 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowPyramid_18 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowPyramid_19 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowHex_8 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowHex_20 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowHex_26 (
        VARIANT_BOOL qNodes );
    enum zReturnCode ShowHex_27 (
        VARIANT_BOOL qNodes );
    enum zReturnCode GenerateMidFaceCentroidNodes ( );
    enum zReturnCode WriteNeutralFile (
        _bstr_t fName );
    enum zReturnCode Rotate ( );
    enum zReturnCode SetTitle (
        _bstr_t fName );
    enum zReturnCode SetPointGroup (
        int IGroup );
};

struct __declspec(uuid("8d7600b6-c1b7-4740-8d63-50e476a84b2d"))
MidFaceCentroidModel;
    // [ default ] dispinterface IMidFaceCentroidModel

struct __declspec(uuid("9b5131e5-bfb8-4219-8f7d-764dbc32c323"))
IUserDefinedGraphics : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum zReturnCode SetView (
        int iViewID );
    enum zReturnCode GetView (
        int * piViewID );
    enum zReturnCode SetName (
        _bstr_t pName );
    enum zReturnCode Publish ( );
    enum zReturnCode Blank (
        VARIANT_BOOL qBlanked );
    enum zReturnCode CollectorPoints (
        _bstr_t pName,
        int nAppearances,
        double dDepthOffset,
        int * piCollectorID );
    enum zReturnCode CollectorBitmap (
        _bstr_t pName,
        int nAppearances,
        int iBitmapID,
        double dXOffset,
        double dYOffset,
        double dDepthOffset,
        int * piCollectorID );
    enum zReturnCode CollectorSymbol (
        _bstr_t pName,
        int nAppearances,
        int iSymbolID,
        VARIANT_BOOL qScreenScale,
        double dScreenScale,
        double dDepthOffset,
        int * piCollectorID );
    enum zReturnCode CollectorSymbolREAL8 (
        _bstr_t pName,
        int nAppearances,
        int iSymbolID,
        VARIANT_BOOL qScreenScale,
        double dMaxScale,
        double dMinScale,
        double dXOffset,
        double dYOffset,
        double dZOffset,
        double dDepthOffset,
        _bstr_t pFormat,
        int * piCollectorID );
    enum zReturnCode CollectorText (
        _bstr_t pName,
        int nAppearances,
        double dXOffset,
        double dYOffset,
        double dZOffset,
        int * piCollectorID );
    enum zReturnCode CollectorTextINT4 (
        _bstr_t pName,
        int nAppearances,
        double dXOffset,
        double dYOffset,
        double dZOffset,
        _bstr_t pFormat,
        int * piCollectorID );
    enum zReturnCode CollectorTextREAL8 (
        _bstr_t pName,
        int nAppearances,
        double dXOffset,
        double dYOffset,
        double dZOffset,
        _bstr_t pFormat,
        int * piCollectorID );
    enum zReturnCode CollectorLines (
        _bstr_t pName,
        int nAppearances,
        double dDepthOffset,
        int * piCollectorID );
    enum zReturnCode CollectorTriangles (
        _bstr_t pName,
        int nAppearances,
        double dDepthOffset,
        int * piCollectorID );
    enum zReturnCode CollectorBlank (
        int iCollectorID,
        VARIANT_BOOL qBlanked );
    enum zReturnCode CollectorSingleSymbol (
        int iCollectorID,
        VARIANT_BOOL qSingle );
    enum zReturnCode CollectorLabels (
        int iCollectorID,
        VARIANT_BOOL qLabels );
    enum zReturnCode CollectorMarkForDeletion (
        int iCollectorID );
    enum zReturnCode CollectorAppearance (
        int iCollectorID,
        int iAppearanceID,
        const _variant_t & dColor1,
        const _variant_t & dColor2,
        double dLineWidth,
        int iLineStyle,
        int iFillPattern,
        VARIANT_BOOL qLighting,
        int iCullMode,
        int iFont,
        double dPointSize );
    enum zReturnCode CollectorAddPointLocations (
        int iCollectorID,
        int iAppearanceID,
        int nPoints,
        const _variant_t & pdPoints );
    enum zReturnCode CollectorAddPointEntityLocations (
        int iCollectorID,
        int iAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs );
    enum zReturnCode CollectorAddPointEntityFaceLocations (
        int iCollectorID,
        int iAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & piFaceIDs );
    enum zReturnCode CollectorAddSymbolLocations (
        int iCollectorID,
        int iAppearanceID,
        int nSymbols,
        const _variant_t & pdPoints,
        const _variant_t & pfDirections,
        const _variant_t & pdOrthogonals );
    enum zReturnCode CollectorAddSymbolEntityLocations (
        int iCollectorID,
        int iAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & pdDirections,
        const _variant_t & pdOrthogonals );
    enum zReturnCode CollectorAddSymbolEntityFaceLocations (
        int iCollectorID,
        int iAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & piFaceIDs,
        const _variant_t & pdDirections,
        const _variant_t & pdOrthogonals );
    enum zReturnCode CollectorAddSymbolEntityFaceNormalLocations (
        int iCollectorID,
        int iAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & piFaceIDs,
        const _variant_t & pdOrthogonals );
    enum zReturnCode CollectorAddSymbolEntityFaceNormalAutoLocations (
        int iCollectorID,
        int iAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & piFaceIDs,
        const _variant_t & piOrientOptions,
        const _variant_t & pdOrientAngles );
    enum zReturnCode CollectorAddSymbolEntityEdgeLocations (
        int iCollectorID,
        int iAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & piEdgeIDs,
        const _variant_t & pdDirections,
        const _variant_t & pdOrthogonals );
    enum zReturnCode CollectorAddSymbolEntityEdgeAutoLocations (
        int iCollectorID,
        int iAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & piEdgeIDs,
        const _variant_t & piOrientOptions );
    enum zReturnCode CollectorAddSymbolREAL8Locations (
        int iCollectorID,
        int iSymbolAppearanceID,
        int iLabelAppearanceID,
        int nSymbols,
        const _variant_t & pdPoints,
        const _variant_t & pfDirections,
        const _variant_t & pdOrthogonals,
        const _variant_t & pdValues );
    enum zReturnCode CollectorAddSymbolREAL8EntityLocations (
        int iCollectorID,
        int iSymbolAppearanceID,
        int iLabelAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & pdDirections,
        const _variant_t & pdOrthogonals,
        const _variant_t & pdValues );
    enum zReturnCode CollectorAddSymbolREAL8EntityFaceLocations (
        int iCollectorID,
        int iSymbolAppearanceID,
        int iLabelAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & piFaceIDs,
        const _variant_t & pdDirections,
        const _variant_t & pdOrthogonals,
        const _variant_t & pdValues );
    enum zReturnCode CollectorAddSymbolREAL8EntityFaceNormalLocations (
        int iCollectorID,
        int iSymbolAppearanceID,
        int iLabelAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & piFaceIDs,
        const _variant_t & pdOrthogonals,
        const _variant_t & pdValues );
    enum zReturnCode CollectorAddSymbolREAL8EntityFaceNormalAutoLocations (
        int iCollectorID,
        int iSymbolAppearanceID,
        int iLabelAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & piFaceIDs,
        const _variant_t & piOrientOptions,
        const _variant_t & pdOrientAngles,
        const _variant_t & pdValues );
    enum zReturnCode CollectorAddSymbolREAL8EntityEdgeLocations (
        int iCollectorID,
        int iSymbolAppearanceID,
        int iLabelAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & piEdgeIDs,
        const _variant_t & pdDirections,
        const _variant_t & pdOrthogonals,
        const _variant_t & pdValues );
    enum zReturnCode CollectorAddSymbolREAL8EntityEdgeAutoLocations (
        int iCollectorID,
        int iSymbolAppearanceID,
        int iLabelAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & piEdgeIDs,
        const _variant_t & piOrientOptions,
        const _variant_t & pdValues );
    enum zReturnCode CollectorAddTextLocations (
        int iCollectorID,
        int iAppearanceID,
        int nPoints,
        const _variant_t & pdPoints,
        const _variant_t & ppText );
    enum zReturnCode CollectorAddTextEntityLocations (
        int iCollectorID,
        int iAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & ppText );
    enum zReturnCode CollectorAddTextEntityFaceLocations (
        int iCollectorID,
        int iAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & piFaceIDs,
        const _variant_t & ppText );
    enum zReturnCode CollectorAddTextINT4Locations (
        int iCollectorID,
        int iAppearanceID,
        int nPoints,
        const _variant_t & pdPoints,
        const _variant_t & piValues );
    enum zReturnCode CollectorAddTextINT4EntityLocations (
        int iCollectorID,
        int iAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & piValues );
    enum zReturnCode CollectorAddTextINT4EntityFaceLocations (
        int iCollectorID,
        int iAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & piFaceIDs,
        const _variant_t & piValues );
    enum zReturnCode CollectorAddTextREAL8Locations (
        int iCollectorID,
        int iAppearanceID,
        int nPoints,
        const _variant_t & pdPoints,
        const _variant_t & pdValues );
    enum zReturnCode CollectorAddTextREAL8EntityLocations (
        int iCollectorID,
        int iAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & pdValues );
    enum zReturnCode CollectorAddTextREAL8EntityFaceLocations (
        int iCollectorID,
        int iAppearanceID,
        enum zDataType eType,
        int nIDs,
        const _variant_t & piIDs,
        const _variant_t & piFaceIDs,
        const _variant_t & pdValues );
    enum zReturnCode CollectorAddLineLocations (
        int iCollectorID,
        int iAppearanceID,
        int nLines,
        const _variant_t & pdPoints );
    enum zReturnCode CollectorAddPolyLineLocations (
        int iCollectorID,
        int iAppearanceID,
        int nPoints,
        const _variant_t & pdPoints );
    enum zReturnCode CollectorAddMeshLineLocations (
        int iCollectorID,
        int iAppearanceID,
        int nPoints,
        const _variant_t & pdPoints,
        int nLines,
        const _variant_t & piLines );
    enum zReturnCode CollectorAddTriangleLocations (
        int iCollectorID,
        int iAppearanceID,
        int nTriangles,
        const _variant_t & pdPoints );
    enum zReturnCode CollectorAddMeshTriangleLocations (
        int iCollectorID,
        int iAppearanceID,
        int nPoints,
        const _variant_t & pdPoints,
        int nTriangles,
        const _variant_t & piTriangles );
    enum zReturnCode CollectorAddMeshTriangleNormalLocations (
        int iCollectorID,
        int iAppearanceID,
        int nPoints,
        const _variant_t & pdPoints,
        const _variant_t & pdNormals,
        int nTriangles,
        const _variant_t & piTriangles );
    enum zReturnCode BitmapCreate (
        int iWidth,
        int iHeight,
        const _variant_t & pqBits,
        int * piBitmapID );
    enum zReturnCode BitmapMarkForDeletion (
        int iBitmapID );
    enum zReturnCode SymbolCreate (
        int nAppearances,
        const _variant_t & dLabelLocation,
        VARIANT_BOOL qScreenOrient,
        int * piSymbolID );
    enum zReturnCode SymbolMarkForDeletion (
        int iSymbolID );
    enum zReturnCode SymbolSetAddInScreen (
        int iSymbolID,
        int iInScreenMode );
    enum zReturnCode SymbolAddPoints (
        int iSymbolID,
        int iAppearanceOffset,
        int nPoints,
        const _variant_t & pdPoints );
    enum zReturnCode SymbolAddLineStraight (
        int iSymbolID,
        int iAppearanceOffset,
        const _variant_t & dPoints );
    enum zReturnCode SymbolAddLinePoly (
        int iSymbolID,
        int iAppearanceOffset,
        int nPoints,
        const _variant_t & pdPoints );
    enum zReturnCode SymbolAddLineCircle (
        int iSymbolID,
        int iAppearanceOffset,
        const _variant_t & dCenter,
        const _variant_t & dPointOnCircle,
        const _variant_t & dNormal,
        int nDividers );
    enum zReturnCode SymbolAddLineBrick (
        int iSymbolID,
        int iAppearanceOffset,
        const _variant_t & dPoints );
    enum zReturnCode SymbolAddLineCylinder (
        int iSymbolID,
        int iAppearanceOffset,
        const _variant_t & dCenter,
        const _variant_t & dPointOnCircle,
        const _variant_t & dDirection,
        double dHeight,
        int nDividers,
        int nSubDividers );
    enum zReturnCode SymbolAddLineCone (
        int iSymbolID,
        int iAppearanceOffset,
        const _variant_t & dCenter,
        const _variant_t & dPointOnCircle,
        const _variant_t & dDirection,
        double dHeight,
        int nDividers,
        int nSubDividers );
    enum zReturnCode SymbolAddLineSphere (
        int iSymbolID,
        int iAppearanceOffset,
        const _variant_t & dCenter,
        const _variant_t & dPointOnEquator,
        const _variant_t & dDirection,
        double dAngle,
        int nLongDividers,
        int nLongSubDividers,
        int nLatDividers,
        int nLatSubDividers );
    enum zReturnCode SymbolAddFillTriangle (
        int iSymbolID,
        int iAppearanceOffset,
        const _variant_t & dPoints,
        const _variant_t & dNormals );
    enum zReturnCode SymbolAddFillCircle (
        int iSymbolID,
        int iAppearanceOffset,
        const _variant_t & dCenter,
        const _variant_t & dPointOnCircle,
        const _variant_t & dNormal,
        int nDividers );
    enum zReturnCode SymbolAddFillBrick (
        int iSymbolID,
        int iAppearanceOffset,
        const _variant_t & dPoints,
        VARIANT_BOOL qEndCap );
    enum zReturnCode SymbolAddFillCylinder (
        int iSymbolID,
        int iAppearanceOffset,
        const _variant_t & dCenter,
        const _variant_t & dPointOnCircle,
        const _variant_t & dDirection,
        double dHeight,
        int nDividers,
        int nSubDividers,
        VARIANT_BOOL qEndCap );
    enum zReturnCode SymbolAddFillCone (
        int iSymbolID,
        int iAppearanceOffset,
        const _variant_t & dCenter,
        const _variant_t & dPointOnCircle,
        const _variant_t & dDirection,
        double dHeight,
        int nDividers,
        int nSubDividers,
        VARIANT_BOOL qEndCap );
    enum zReturnCode SymbolAddFillTubeBrick (
        int iSymbolID,
        int iAppearanceOffset,
        const _variant_t & dOuterPoints,
        const _variant_t & dInnerPoints );
    enum zReturnCode SymbolAddFillTubeCylinder (
        int iSymbolID,
        int iAppearanceOffset,
        const _variant_t & dCenter,
        const _variant_t & dPointOnCircle,
        const _variant_t & dDirection,
        double dHeight,
        double dInnerProportion,
        int nDividers,
        int nSubDividers );
    enum zReturnCode SymbolAddFillSphere (
        int iSymbolID,
        int iAppearanceOffset,
        const _variant_t & dCenter,
        const _variant_t & dPointOnEquator,
        const _variant_t & dDirection,
        double dAngle,
        int nLongDividers,
        int nLongSubDividers,
        int nLatDividers,
        int nLatSubDividers );
    enum zReturnCode Detach (
        _bstr_t pDetachedName );
    enum zReturnCode Attach (
        _bstr_t pDetachedName );
};

struct __declspec(uuid("9b5131e7-bfb8-4219-8f7d-764dbc32c323"))
UserDefinedGraphics;
    // [ default ] dispinterface IUserDefinedGraphics

struct __declspec(uuid("f2e67c72-0e5b-477f-8377-bacd7317a2ff"))
IVector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getbase,put=Putbase))
    double base[];
    __declspec(property(get=Getdir,put=Putdir))
    double dir[];
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetvBase,put=PutvBase))
    _variant_t vBase;
    __declspec(property(get=GetvDir,put=PutvDir))
    _variant_t vDir;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getbase (
        int nVectorIndex );
    void Putbase (
        int nVectorIndex,
        double _arg2 );
    double Getdir (
        int nVectorIndex );
    void Putdir (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode PutAll (
        int ID,
        _bstr_t sTitle,
        const _variant_t & vBase,
        const _variant_t & vDir,
        double dLen );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    _variant_t GetvBase ( );
    void PutvBase ( const _variant_t & _val );
    _variant_t GetvDir ( );
    void PutvDir ( const _variant_t & _val );
    double GetLength ( );
    void PutLength ( double _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("f2e67c74-0e5b-477f-8377-bacd7317a2ff"))
Vector;
    // [ default ] dispinterface IVector

struct __declspec(uuid("891a6125-406e-4438-8a3f-af254f4508dd"))
IPlane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getbase,put=Putbase))
    double base[];
    __declspec(property(get=Getnorm,put=Putnorm))
    double norm[];
    __declspec(property(get=GetAxis,put=PutAxis))
    double Axis[];
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetvBase,put=PutvBase))
    _variant_t vBase;
    __declspec(property(get=GetvNorm,put=PutvNorm))
    _variant_t vNorm;
    __declspec(property(get=GetvAxis,put=PutvAxis))
    _variant_t vAxis;
    __declspec(property(get=GetID,put=PutID))
    int ID;
    __declspec(property(get=GetsetID,put=PutsetID))
    int setID;
    __declspec(property(get=GetActive,put=PutActive))
    int Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getbase (
        int nVectorIndex );
    void Putbase (
        int nVectorIndex,
        double _arg2 );
    double Getnorm (
        int nVectorIndex );
    void Putnorm (
        int nVectorIndex,
        double _arg2 );
    double GetAxis (
        int nVectorIndex );
    void PutAxis (
        int nVectorIndex,
        double _arg2 );
    enum zReturnCode PutAll (
        int ID,
        _bstr_t sTitle,
        const _variant_t & vBase,
        const _variant_t & vNorm,
        const _variant_t & vAxis );
    enum zReturnCode NextSet ( );
    enum zReturnCode PrevSet ( );
    enum zReturnCode NextEmptySet ( );
    enum zReturnCode PrevEmptySet ( );
    enum zReturnCode Get (
        int ID );
    enum zReturnCode Put (
        int ID );
    enum zReturnCode Exist (
        int ID );
    enum zReturnCode Deletable (
        int ID );
    enum zReturnCode Delete (
        int ID );
    enum zReturnCode Reset ( );
    enum zReturnCode Next ( );
    enum zReturnCode Prev ( );
    enum zReturnCode First ( );
    enum zReturnCode Last ( );
    int NextID ( );
    int PrevID ( );
    int NextEmptyID ( );
    int PrevEmptyID ( );
    enum zReturnCode GetLibrary (
        int ID );
    enum zReturnCode PutLibrary ( );
    enum zReturnCode DeleteLibrary (
        int ID );
    enum zReturnCode GetTitleList (
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    enum zReturnCode GetTitleIDList (
        VARIANT_BOOL bIncludeID,
        int minID,
        int maxID,
        int * Count,
        VARIANT * listID,
        VARIANT * listTITLE );
    int ParseTitleID (
        _bstr_t sTitleIDStr );
    enum zReturnCode SelectID (
        _bstr_t sTitle );
    enum zReturnCode NextInSet (
        int nSetID );
    enum zReturnCode FirstInSet (
        int nSetID );
    int CountSet ( );
    enum zReturnCode NextExistingInSet (
        int nSetID );
    enum zReturnCode SelectIDWithNew (
        _bstr_t sTitle );

    // Properties:
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    _variant_t GetvBase ( );
    void PutvBase ( const _variant_t & _val );
    _variant_t GetvNorm ( );
    void PutvNorm ( const _variant_t & _val );
    _variant_t GetvAxis ( );
    void PutvAxis ( const _variant_t & _val );
    int GetID ( );
    void PutID ( int _val );
    int GetsetID ( );
    void PutsetID ( int _val );
    int GetActive ( );
    void PutActive ( int _val );
};

struct __declspec(uuid("891a6127-406e-4438-8a3f-af254f4508dd"))
Plane;
    // [ default ] dispinterface IPlane

struct __declspec(uuid("08f336b2-e668-11d4-9441-001083fff11c"))
Imodel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPref_SpaceballFactors,put=PutPref_SpaceballFactors))
    double Pref_SpaceballFactors[];
    __declspec(property(get=GetPref_FBDefContributions,put=PutPref_FBDefContributions))
    unsigned char Pref_FBDefContributions[];
    __declspec(property(get=GetPref_FBDefNodalVectorMode,put=PutPref_FBDefNodalVectorMode))
    enum zFbdVecMode Pref_FBDefNodalVectorMode[];
    __declspec(property(get=GetPref_FBDefTotalVectorMode,put=PutPref_FBDefTotalVectorMode))
    enum zFbdVecMode Pref_FBDefTotalVectorMode[];
    __declspec(property(get=GetPref_FBDefComponents,put=PutPref_FBDefComponents))
    unsigned char Pref_FBDefComponents[];
    __declspec(property(get=GetPref_AngleDimetric,put=PutPref_AngleDimetric))
    double Pref_AngleDimetric[];
    __declspec(property(get=GetPref_AngleIsometric,put=PutPref_AngleIsometric))
    double Pref_AngleIsometric[];
    __declspec(property(get=GetPref_AngleTrimetric,put=PutPref_AngleTrimetric))
    double Pref_AngleTrimetric[];
    __declspec(property(get=GetPref_RenderRotate,put=PutPref_RenderRotate))
    VARIANT_BOOL Pref_RenderRotate[];
    __declspec(property(get=GetInfo_PermBC,put=PutInfo_PermBC))
    VARIANT_BOOL Info_PermBC[];
    __declspec(property(get=GetInfo_WorkplaneRuler,put=PutInfo_WorkplaneRuler))
    VARIANT_BOOL Info_WorkplaneRuler[];
    __declspec(property(get=GetInfo_MaxID,put=PutInfo_MaxID))
    int Info_MaxID[];
    __declspec(property(get=GetInfo_MinID,put=PutInfo_MinID))
    int Info_MinID[];
    __declspec(property(get=GetInfo_Count,put=PutInfo_Count))
    int Info_Count[];
    __declspec(property(get=GetInfo_ElemFormulation1,put=PutInfo_ElemFormulation1))
    int Info_ElemFormulation1[];
    __declspec(property(get=GetInfo_ElemFormulation2,put=PutInfo_ElemFormulation2))
    int Info_ElemFormulation2[];
    __declspec(property(get=GetInfo_WorkplaneOrigin,put=PutInfo_WorkplaneOrigin))
    double Info_WorkplaneOrigin[];
    __declspec(property(get=GetInfo_WorkplaneX,put=PutInfo_WorkplaneX))
    double Info_WorkplaneX[];
    __declspec(property(get=GetInfo_WorkplaneY,put=PutInfo_WorkplaneY))
    double Info_WorkplaneY[];
    __declspec(property(get=GetInfo_WorkplaneZ,put=PutInfo_WorkplaneZ))
    double Info_WorkplaneZ[];
    __declspec(property(get=GetInfo_WorkplanePrevOrigin,put=PutInfo_WorkplanePrevOrigin))
    double Info_WorkplanePrevOrigin[];
    __declspec(property(get=GetInfo_WorkplanePrevX,put=PutInfo_WorkplanePrevX))
    double Info_WorkplanePrevX[];
    __declspec(property(get=GetInfo_WorkplanePrevY,put=PutInfo_WorkplanePrevY))
    double Info_WorkplanePrevY[];
    __declspec(property(get=GetInfo_WorkplanePrevZ,put=PutInfo_WorkplanePrevZ))
    double Info_WorkplanePrevZ[];
    __declspec(property(get=GetInfo_SnapSpacing,put=PutInfo_SnapSpacing))
    double Info_SnapSpacing[];
    __declspec(property(get=GetInfo_WorkplaneSizeX,put=PutInfo_WorkplaneSizeX))
    double Info_WorkplaneSizeX[];
    __declspec(property(get=GetInfo_WorkplaneSizeY,put=PutInfo_WorkplaneSizeY))
    double Info_WorkplaneSizeY[];
    __declspec(property(get=GetInfo_MatlAngleVec,put=PutInfo_MatlAngleVec))
    double Info_MatlAngleVec[];
    __declspec(property(get=GetTool_CursorXYZ,put=PutTool_CursorXYZ))
    int Tool_CursorXYZ[];
    __declspec(property(get=GetInfo_ModelSizeX,put=PutInfo_ModelSizeX))
    double Info_ModelSizeX[];
    __declspec(property(get=GetInfo_ModelSizeY,put=PutInfo_ModelSizeY))
    double Info_ModelSizeY[];
    __declspec(property(get=GetInfo_ModelSizeZ,put=PutInfo_ModelSizeZ))
    double Info_ModelSizeZ[];
    __declspec(property(get=GetPref_EntityColor,put=PutPref_EntityColor))
    enum zColor Pref_EntityColor[];
    __declspec(property(get=GetInfo_Increment,put=PutInfo_Increment))
    int Info_Increment[];
    __declspec(property(get=GetInfo_NextID,put=PutInfo_NextID))
    int Info_NextID[];
    __declspec(property(get=GetInfo_ActiveID,put=PutInfo_ActiveID))
    int Info_ActiveID[];
    __declspec(property(get=GetInfo_ActiveType,put=PutInfo_ActiveType))
    int Info_ActiveType[];
    __declspec(property(get=GetInfo_Color,put=PutInfo_Color))
    enum zColor Info_Color[];
    __declspec(property(get=GetInfo_SurfDivisionsLinear,put=PutInfo_SurfDivisionsLinear))
    int Info_SurfDivisionsLinear[];
    __declspec(property(get=GetInfo_SurfDivisionsCurved,put=PutInfo_SurfDivisionsCurved))
    int Info_SurfDivisionsCurved[];
    __declspec(property(get=GetPref_NasQstOn,put=PutPref_NasQstOn))
    VARIANT_BOOL Pref_NasQstOn[];
    __declspec(property(get=GetPref_NasQstVal,put=PutPref_NasQstVal))
    int Pref_NasQstVal[];
    __declspec(property(get=GetfeSet,put=PutfeSet))
    ISetPtr feSet;
    __declspec(property(get=GetfeRead,put=PutfeRead))
    IReadPtr feRead;
    __declspec(property(get=GetfeMatl,put=PutfeMatl))
    IMatlPtr feMatl;
    __declspec(property(get=GetfeProp,put=PutfeProp))
    IPropPtr feProp;
    __declspec(property(get=GetfeNode,put=PutfeNode))
    INodePtr feNode;
    __declspec(property(get=GetfeElem,put=PutfeElem))
    IElemPtr feElem;
    __declspec(property(get=GetfeCSys,put=PutfeCSys))
    ICSysPtr feCSys;
    __declspec(property(get=GetfeBCSet,put=PutfeBCSet))
    IBCSetPtr feBCSet;
    __declspec(property(get=GetfeBCNode,put=PutfeBCNode))
    IBCNodePtr feBCNode;
    __declspec(property(get=GetfeBCGeom,put=PutfeBCGeom))
    IBCGeomPtr feBCGeom;
    __declspec(property(get=GetfeBCEqn,put=PutfeBCEqn))
    IBCEqnPtr feBCEqn;
    __declspec(property(get=GetfeLoadSet,put=PutfeLoadSet))
    ILoadSetPtr feLoadSet;
    __declspec(property(get=GetfeLoadNTemp,put=PutfeLoadNTemp))
    ILoadNTempPtr feLoadNTemp;
    __declspec(property(get=GetfeLoadETemp,put=PutfeLoadETemp))
    ILoadETempPtr feLoadETemp;
    __declspec(property(get=GetfeLoadMesh,put=PutfeLoadMesh))
    ILoadMeshPtr feLoadMesh;
    __declspec(property(get=GetfeLoadGeom,put=PutfeLoadGeom))
    ILoadGeomPtr feLoadGeom;
    __declspec(property(get=GetfeGroup,put=PutfeGroup))
    IGroupPtr feGroup;
    __declspec(property(get=GetfeView,put=PutfeView))
    IViewPtr feView;
    __declspec(property(get=GetfeViewOrient,put=PutfeViewOrient))
    IViewOrientPtr feViewOrient;
    __declspec(property(get=GetfeVar,put=PutfeVar))
    IVarPtr feVar;
    __declspec(property(get=GetfeReport,put=PutfeReport))
    IReportPtr feReport;
    __declspec(property(get=GetfeLayer,put=PutfeLayer))
    ILayerPtr feLayer;
    __declspec(property(get=GetfeContact,put=PutfeContact))
    IContactPtr feContact;
    __declspec(property(get=GetfeFunction,put=PutfeFunction))
    IFunctionPtr feFunction;
    __declspec(property(get=GetfeOptim,put=PutfeOptim))
    IOptimPtr feOptim;
    __declspec(property(get=GetfeOutputSet,put=PutfeOutputSet))
    IOutputSetPtr feOutputSet;
    __declspec(property(get=GetfeOutput,put=PutfeOutput))
    IOutputPtr feOutput;
    __declspec(property(get=GetfeTMGBC,put=PutfeTMGBC))
    ITmgBCPtr feTMGBC;
    __declspec(property(get=GetfeTMGCtrl,put=PutfeTMGCtrl))
    ITmgCtlPtr feTMGCtrl;
    __declspec(property(get=GetfeTMGInt,put=PutfeTMGInt))
    ITmgIntPtr feTMGInt;
    __declspec(property(get=GetfeTMGOpt,put=PutfeTMGOpt))
    ITmgOptPtr feTMGOpt;
    __declspec(property(get=GetfeTMGReal,put=PutfeTMGReal))
    ITmgRealPtr feTMGReal;
    __declspec(property(get=GetfePoint,put=PutfePoint))
    IPointPtr fePoint;
    __declspec(property(get=GetfeCurve,put=PutfeCurve))
    ICurvePtr feCurve;
    __declspec(property(get=GetfeSurface,put=PutfeSurface))
    ISurfacePtr feSurface;
    __declspec(property(get=GetfeSolid,put=PutfeSolid))
    ISolidPtr feSolid;
    __declspec(property(get=GetfeAnalysisSet,put=PutfeAnalysisSet))
    IAnalysisMgrPtr feAnalysisSet;
    __declspec(property(get=GetfeAnalysisCase,put=PutfeAnalysisCase))
    IAnalysisCasePtr feAnalysisCase;
    __declspec(property(get=GetfeUserData,put=PutfeUserData))
    IUserDataPtr feUserData;
    __declspec(property(get=GetfeText,put=PutfeText))
    ITextPtr feText;
    __declspec(property(get=GetfeAnalysisMgr,put=PutfeAnalysisMgr))
    IAnalysisMgrPtr feAnalysisMgr;
    __declspec(property(get=GetfeConnectionProp,put=PutfeConnectionProp))
    IConnectionPropPtr feConnectionProp;
    __declspec(property(get=GetfeConnection,put=PutfeConnection))
    IConnectionPtr feConnection;
    __declspec(property(get=GetfeSort,put=PutfeSort))
    ISortSetPtr feSort;
    __declspec(property(get=GetfeScratch,put=PutfeScratch))
    IScratchPtr feScratch;
    __declspec(property(get=GetfeSelector,put=PutfeSelector))
    ISelectorPtr feSelector;
    __declspec(property(get=GetfeLoadDefinition,put=PutfeLoadDefinition))
    ILoadDefinitionPtr feLoadDefinition;
    __declspec(property(get=GetfeGFXPoint,put=PutfeGFXPoint))
    IGFXPointPtr feGFXPoint;
    __declspec(property(get=GetfeGFXLine,put=PutfeGFXLine))
    IGFXLinePtr feGFXLine;
    __declspec(property(get=GetfeGFXArrow,put=PutfeGFXArrow))
    IGFXArrowPtr feGFXArrow;
    __declspec(property(get=GetfeGFXTria3,put=PutfeGFXTria3))
    IGFXTria3Ptr feGFXTria3;
    __declspec(property(get=GetfeGFXQuad4,put=PutfeGFXQuad4))
    IGFXQuad4Ptr feGFXQuad4;
    __declspec(property(get=GetfeBCDefinition,put=PutfeBCDefinition))
    IBCDefinitionPtr feBCDefinition;
    __declspec(property(get=GetfeLayup,put=PutfeLayup))
    ILayupPtr feLayup;
    __declspec(property(get=GetfeGlobalPly,put=PutfeGlobalPly))
    IGlobalPlyPtr feGlobalPly;
    __declspec(property(get=GetfeConnectionRegion,put=PutfeConnectionRegion))
    IContactPtr feConnectionRegion;
    __declspec(property(get=GetfeLoadBolt,put=PutfeLoadBolt))
    ILoadBoltPtr feLoadBolt;
    __declspec(property(get=GetfeMapOutput,put=PutfeMapOutput))
    IMapOutputPtr feMapOutput;
    __declspec(property(get=GetfeDataSurf,put=PutfeDataSurf))
    IDataSurfPtr feDataSurf;
    __declspec(property(get=GetfeDataTable,put=PutfeDataTable))
    IDataTablePtr feDataTable;
    __declspec(property(get=GetfeReference,put=PutfeReference))
    IReferencePtr feReference;
    __declspec(property(get=GetfeAeroPanel,put=PutfeAeroPanel))
    IAeroPanelPtr feAeroPanel;
    __declspec(property(get=GetfeAeroProp,put=PutfeAeroProp))
    IAeroPropPtr feAeroProp;
    __declspec(property(get=GetfeAeroSpline,put=PutfeAeroSpline))
    IAeroSplinePtr feAeroSpline;
    __declspec(property(get=GetfeFreebody,put=PutfeFreebody))
    IFreebodyPtr feFreebody;
    __declspec(property(get=GetfeMesher,put=PutfeMesher))
    IMesherPtr feMesher;
    __declspec(property(get=GetfeElementQuality,put=PutfeElementQuality))
    IElementQualityPtr feElementQuality;
    __declspec(property(get=GetfeAeroSurf,put=PutfeAeroSurf))
    IAeroSurfPtr feAeroSurf;
    __declspec(property(get=GetfeStressLinear,put=PutfeStressLinear))
    IStressLinearPtr feStressLinear;
    __declspec(property(get=GetfeSEReference,put=PutfeSEReference))
    ISEReferencePtr feSEReference;
    __declspec(property(get=GetfeChart,put=PutfeChart))
    IChartPtr feChart;
    __declspec(property(get=GetfeChartSeries,put=PutfeChartSeries))
    IChartSeriesPtr feChartSeries;
    __declspec(property(get=GetfeResults,put=PutfeResults))
    IResultsPtr feResults;
    __declspec(property(get=GetfeTableData,put=PutfeTableData))
    ITableDataPtr feTableData;
    __declspec(property(get=GetfeInterpolate,put=PutfeInterpolate))
    IInterpolatePtr feInterpolate;
    __declspec(property(get=GetfeMapData,put=PutfeMapData))
    IMapDataPtr feMapData;
    __declspec(property(get=GetfeTrackData,put=PutfeTrackData))
    ITrackDataPtr feTrackData;
    __declspec(property(get=GetfeBeamCalculator,put=PutfeBeamCalculator))
    IBeamCalculatorPtr feBeamCalculator;
    __declspec(property(get=GetfeAnalysisStudy,put=PutfeAnalysisStudy))
    IAnalysisStudyPtr feAnalysisStudy;
    __declspec(property(get=GetfeDrawErase,put=PutfeDrawErase))
    IDrawErasePtr feDrawErase;
    __declspec(property(get=GetfeFreq,put=PutfeFreq))
    IFreqPtr feFreq;
    __declspec(property(get=GetfeMidFaceCentroidModel,put=PutfeMidFaceCentroidModel))
    IMidFaceCentroidModelPtr feMidFaceCentroidModel;
    __declspec(property(get=GetfeUserDefinedGraphics,put=PutfeUserDefinedGraphics))
    IUserDefinedGraphicsPtr feUserDefinedGraphics;
    __declspec(property(get=GetfeVector,put=PutfeVector))
    IVectorPtr feVector;
    __declspec(property(get=GetfePlane,put=PutfePlane))
    IPlanePtr fePlane;
    __declspec(property(get=GetPgSetup_HdrFont,put=PutPgSetup_HdrFont))
    _bstr_t PgSetup_HdrFont;
    __declspec(property(get=GetPgSetup_TextFont,put=PutPgSetup_TextFont))
    _bstr_t PgSetup_TextFont;
    __declspec(property(get=GetPgSetup_Header,put=PutPgSetup_Header))
    _bstr_t PgSetup_Header;
    __declspec(property(get=GetPgSetup_Footer,put=PutPgSetup_Footer))
    _bstr_t PgSetup_Footer;
    __declspec(property(get=GetPgSetup_DefaultHdrFont,put=PutPgSetup_DefaultHdrFont))
    VARIANT_BOOL PgSetup_DefaultHdrFont;
    __declspec(property(get=GetPgSetup_DefaultTextFont,put=PutPgSetup_DefaultTextFont))
    VARIANT_BOOL PgSetup_DefaultTextFont;
    __declspec(property(get=GetPgSetup_FillMargins,put=PutPgSetup_FillMargins))
    VARIANT_BOOL PgSetup_FillMargins;
    __declspec(property(get=GetPgSetup_MaintainAspect,put=PutPgSetup_MaintainAspect))
    VARIANT_BOOL PgSetup_MaintainAspect;
    __declspec(property(get=GetPgSetup_IntegerScaling,put=PutPgSetup_IntegerScaling))
    VARIANT_BOOL PgSetup_IntegerScaling;
    __declspec(property(get=GetPgSetup_PrintBorder,put=PutPgSetup_PrintBorder))
    VARIANT_BOOL PgSetup_PrintBorder;
    __declspec(property(get=GetPgSetup_SwapBW,put=PutPgSetup_SwapBW))
    VARIANT_BOOL PgSetup_SwapBW;
    __declspec(property(get=GetPgSetup_TransparentBkgd,put=PutPgSetup_TransparentBkgd))
    VARIANT_BOOL PgSetup_TransparentBkgd;
    __declspec(property(get=GetPgSetup_Monochrome,put=PutPgSetup_Monochrome))
    VARIANT_BOOL PgSetup_Monochrome;
    __declspec(property(get=GetPgSetup_HdrFontSize,put=PutPgSetup_HdrFontSize))
    int PgSetup_HdrFontSize;
    __declspec(property(get=GetPgSetup_TextFontSize,put=PutPgSetup_TextFontSize))
    int PgSetup_TextFontSize;
    __declspec(property(get=GetPgSetup_PenScale,put=PutPgSetup_PenScale))
    int PgSetup_PenScale;
    __declspec(property(get=GetPgSetup_VertAlign,put=PutPgSetup_VertAlign))
    int PgSetup_VertAlign;
    __declspec(property(get=GetPgSetup_HorzAlign,put=PutPgSetup_HorzAlign))
    int PgSetup_HorzAlign;
    __declspec(property(get=GetPgSetup_CustomHeight,put=PutPgSetup_CustomHeight))
    double PgSetup_CustomHeight;
    __declspec(property(get=GetPgSetup_CustomWidth,put=PutPgSetup_CustomWidth))
    double PgSetup_CustomWidth;
    __declspec(property(get=GetPgSetup_LeftMargin,put=PutPgSetup_LeftMargin))
    double PgSetup_LeftMargin;
    __declspec(property(get=GetPgSetup_RightMargin,put=PutPgSetup_RightMargin))
    double PgSetup_RightMargin;
    __declspec(property(get=GetPgSetup_TopMargin,put=PutPgSetup_TopMargin))
    double PgSetup_TopMargin;
    __declspec(property(get=GetPgSetup_BottomMargin,put=PutPgSetup_BottomMargin))
    double PgSetup_BottomMargin;
    __declspec(property(get=GetPgSetup_RenderScale,put=PutPgSetup_RenderScale))
    double PgSetup_RenderScale;
    __declspec(property(get=GetPref_LibAnalysis,put=PutPref_LibAnalysis))
    _bstr_t Pref_LibAnalysis;
    __declspec(property(get=GetPref_LibProp,put=PutPref_LibProp))
    _bstr_t Pref_LibProp;
    __declspec(property(get=GetPref_LibReport,put=PutPref_LibReport))
    _bstr_t Pref_LibReport;
    __declspec(property(get=GetPref_LibContPal,put=PutPref_LibContPal))
    _bstr_t Pref_LibContPal;
    __declspec(property(get=GetPref_LibFunction,put=PutPref_LibFunction))
    _bstr_t Pref_LibFunction;
    __declspec(property(get=GetPref_LibMatl,put=PutPref_LibMatl))
    _bstr_t Pref_LibMatl;
    __declspec(property(get=GetPref_LibMatlDef,put=PutPref_LibMatlDef))
    _bstr_t Pref_LibMatlDef;
    __declspec(property(get=GetPref_LibView,put=PutPref_LibView))
    _bstr_t Pref_LibView;
    __declspec(property(get=GetPref_LibPalette,put=PutPref_LibPalette))
    _bstr_t Pref_LibPalette;
    __declspec(property(get=GetPref_ViewDimetric,put=PutPref_ViewDimetric))
    _bstr_t Pref_ViewDimetric;
    __declspec(property(get=GetPref_ViewIsometric,put=PutPref_ViewIsometric))
    _bstr_t Pref_ViewIsometric;
    __declspec(property(get=GetPref_ViewTrimetric,put=PutPref_ViewTrimetric))
    _bstr_t Pref_ViewTrimetric;
    __declspec(property(get=GetPref_StartupProg,put=PutPref_StartupProg))
    _bstr_t Pref_StartupProg;
    __declspec(property(get=GetPref_CustomToolsPath,put=PutPref_CustomToolsPath))
    _bstr_t Pref_CustomToolsPath;
    __declspec(property(get=GetPref_DBScratch,put=PutPref_DBScratch))
    _bstr_t Pref_DBScratch;
    __declspec(property(get=GetPref_LengthBasedMeshSize,put=PutPref_LengthBasedMeshSize))
    int Pref_LengthBasedMeshSize;
    __declspec(property(get=GetPref_MsgWndFont,put=PutPref_MsgWndFont))
    _bstr_t Pref_MsgWndFont;
    __declspec(property(get=GetPref_NetKeyDir,put=PutPref_NetKeyDir))
    _bstr_t Pref_NetKeyDir;
    __declspec(property(get=GetPref_PictureCopyTextForXY,put=PutPref_PictureCopyTextForXY))
    VARIANT_BOOL Pref_PictureCopyTextForXY;
    __declspec(property(get=GetPref_WorkplaneNotVisible,put=PutPref_WorkplaneNotVisible))
    VARIANT_BOOL Pref_WorkplaneNotVisible;
    __declspec(property(get=GetPref_DefContourPalette,put=PutPref_DefContourPalette))
    int Pref_DefContourPalette;
    __declspec(property(get=GetPref_MetafileToClip,put=PutPref_MetafileToClip))
    VARIANT_BOOL Pref_MetafileToClip;
    __declspec(property(get=GetPref_RenderHW,put=PutPref_RenderHW))
    VARIANT_BOOL Pref_RenderHW;
    __declspec(property(get=GetPref_RenderMidside,put=PutPref_RenderMidside))
    VARIANT_BOOL Pref_RenderMidside;
    __declspec(property(get=GetPref_RepeateCreate,put=PutPref_RepeateCreate))
    VARIANT_BOOL Pref_RepeateCreate;
    __declspec(property(get=GetPref_TooltipDelay,put=PutPref_TooltipDelay))
    int Pref_TooltipDelay;
    __declspec(property(get=GetPref_TooltipDuration,put=PutPref_TooltipDuration))
    int Pref_TooltipDuration;
    __declspec(property(get=GetPref_TrackMousePick,put=PutPref_TrackMousePick))
    VARIANT_BOOL Pref_TrackMousePick;
    __declspec(property(get=GetPref_PickAllInside,put=PutPref_PickAllInside))
    VARIANT_BOOL Pref_PickAllInside;
    __declspec(property(get=GetPref_NastranMemory,put=PutPref_NastranMemory))
    int Pref_NastranMemory;
    __declspec(property(get=GetPref_NastranOutputTo,put=PutPref_NastranOutputTo))
    int Pref_NastranOutputTo;
    __declspec(property(get=GetPref_NastranOutputPath,put=PutPref_NastranOutputPath))
    _bstr_t Pref_NastranOutputPath;
    __declspec(property(get=GetPref_BackupModel,put=PutPref_BackupModel))
    VARIANT_BOOL Pref_BackupModel;
    __declspec(property(get=GetPref_AutomaticTitles,put=PutPref_AutomaticTitles))
    VARIANT_BOOL Pref_AutomaticTitles;
    __declspec(property(get=GetPref_DeleteScratchFile,put=PutPref_DeleteScratchFile))
    VARIANT_BOOL Pref_DeleteScratchFile;
    __declspec(property(get=GetPref_RunProgNewModels,put=PutPref_RunProgNewModels))
    VARIANT_BOOL Pref_RunProgNewModels;
    __declspec(property(get=GetPref_MeshInMemory,put=PutPref_MeshInMemory))
    VARIANT_BOOL Pref_MeshInMemory;
    __declspec(property(get=GetPref_FastTriMesh,put=PutPref_FastTriMesh))
    VARIANT_BOOL Pref_FastTriMesh;
    __declspec(property(get=GetPref_TimedSaveNotify,put=PutPref_TimedSaveNotify))
    VARIANT_BOOL Pref_TimedSaveNotify;
    __declspec(property(get=GetPref_TimedSaveOn,put=PutPref_TimedSaveOn))
    VARIANT_BOOL Pref_TimedSaveOn;
    __declspec(property(get=GetPref_GeomLogFile,put=PutPref_GeomLogFile))
    VARIANT_BOOL Pref_GeomLogFile;
    __declspec(property(get=GetPref_AdjMidsideGeomLoad,put=PutPref_AdjMidsideGeomLoad))
    VARIANT_BOOL Pref_AdjMidsideGeomLoad;
    __declspec(property(get=GetPref_ReadComments,put=PutPref_ReadComments))
    VARIANT_BOOL Pref_ReadComments;
    __declspec(property(get=GetPref_WriteComments,put=PutPref_WriteComments))
    VARIANT_BOOL Pref_WriteComments;
    __declspec(property(get=GetPref_ComputePrincipal,put=PutPref_ComputePrincipal))
    VARIANT_BOOL Pref_ComputePrincipal;
    __declspec(property(get=GetPref_AssumeEngrStrain,put=PutPref_AssumeEngrStrain))
    VARIANT_BOOL Pref_AssumeEngrStrain;
    __declspec(property(get=GetPref_ReadDirCos,put=PutPref_ReadDirCos))
    VARIANT_BOOL Pref_ReadDirCos;
    __declspec(property(get=GetPref_UseVisQ,put=PutPref_UseVisQ))
    VARIANT_BOOL Pref_UseVisQ;
    __declspec(property(get=GetPref_KeepSolverWindow,put=PutPref_KeepSolverWindow))
    VARIANT_BOOL Pref_KeepSolverWindow;
    __declspec(property(get=GetPref_MinimizeDuringSolve,put=PutPref_MinimizeDuringSolve))
    VARIANT_BOOL Pref_MinimizeDuringSolve;
    __declspec(property(get=GetPref_DBCacheBlocksPerPage,put=PutPref_DBCacheBlocksPerPage))
    int Pref_DBCacheBlocksPerPage;
    __declspec(property(get=GetPref_DBCacheMaxMemoryPct,put=PutPref_DBCacheMaxMemoryPct))
    int Pref_DBCacheMaxMemoryPct;
    __declspec(property(get=GetPref_DBCacheMaxLabel,put=PutPref_DBCacheMaxLabel))
    int Pref_DBCacheMaxLabel;
    __declspec(property(get=GetPref_DBUndoLevels,put=PutPref_DBUndoLevels))
    int Pref_DBUndoLevels;
    __declspec(property(get=GetPref_DBLowDiskWarning,put=PutPref_DBLowDiskWarning))
    int Pref_DBLowDiskWarning;
    __declspec(property(get=GetPref_TimedSaveCommands,put=PutPref_TimedSaveCommands))
    int Pref_TimedSaveCommands;
    __declspec(property(get=GetPref_TimedSaveInterval,put=PutPref_TimedSaveInterval))
    int Pref_TimedSaveInterval;
    __declspec(property(get=GetPref_GeomEngine,put=PutPref_GeomEngine))
    int Pref_GeomEngine;
    __declspec(property(get=GetPref_AnalysisProg,put=PutPref_AnalysisProg))
    enum zAnalysisTranslator Pref_AnalysisProg;
    __declspec(property(get=GetPref_AnalysisType,put=PutPref_AnalysisType))
    enum zAnalysisType Pref_AnalysisType;
    __declspec(property(get=GetPref_InterfaceStyle,put=PutPref_InterfaceStyle))
    int Pref_InterfaceStyle;
    __declspec(property(get=GetPref_NeutralDigits,put=PutPref_NeutralDigits))
    int Pref_NeutralDigits;
    __declspec(property(get=GetPref_SolverMemory,put=PutPref_SolverMemory))
    int Pref_SolverMemory;
    __declspec(property(get=GetPref_LoadModifyRotate,put=PutPref_LoadModifyRotate))
    VARIANT_BOOL Pref_LoadModifyRotate;
    __declspec(property(get=GetPref_RecentlyUsedFiles,put=PutPref_RecentlyUsedFiles))
    int Pref_RecentlyUsedFiles;
    __declspec(property(get=GetPref_LibViewNumber,put=PutPref_LibViewNumber))
    int Pref_LibViewNumber;
    __declspec(property(get=GetPref_ViewDynamicMode,put=PutPref_ViewDynamicMode))
    int Pref_ViewDynamicMode;
    __declspec(property(get=GetPref_MsgWndFontSize,put=PutPref_MsgWndFontSize))
    int Pref_MsgWndFontSize;
    __declspec(property(get=GetPref_MsgWndBackColor,put=PutPref_MsgWndBackColor))
    enum zColor Pref_MsgWndBackColor;
    __declspec(property(get=GetPref_MsgWndErrorColor,put=PutPref_MsgWndErrorColor))
    enum zColor Pref_MsgWndErrorColor;
    __declspec(property(get=GetPref_MsgWndHighColor,put=PutPref_MsgWndHighColor))
    enum zColor Pref_MsgWndHighColor;
    __declspec(property(get=GetPref_MsgWndTextColor,put=PutPref_MsgWndTextColor))
    enum zColor Pref_MsgWndTextColor;
    __declspec(property(get=GetPref_MsgWndWarnColor,put=PutPref_MsgWndWarnColor))
    enum zColor Pref_MsgWndWarnColor;
    __declspec(property(get=GetPref_ScrollBackLines,put=PutPref_ScrollBackLines))
    int Pref_ScrollBackLines;
    __declspec(property(get=GetPref_AspectRatio,put=PutPref_AspectRatio))
    double Pref_AspectRatio;
    __declspec(property(get=GetPref_DeltaAngle,put=PutPref_DeltaAngle))
    double Pref_DeltaAngle;
    __declspec(property(get=GetPref_GeometryScale,put=PutPref_GeometryScale))
    double Pref_GeometryScale;
    __declspec(property(get=GetPref_GeomLoadEdgeFactor,put=PutPref_GeomLoadEdgeFactor))
    double Pref_GeomLoadEdgeFactor;
    __declspec(property(get=GetPref_GeomLoadQuadFactor,put=PutPref_GeomLoadQuadFactor))
    double Pref_GeomLoadQuadFactor;
    __declspec(property(get=GetPref_GeomLoadTriFactor,put=PutPref_GeomLoadTriFactor))
    double Pref_GeomLoadTriFactor;
    __declspec(property(get=GetPref_NeutralVersion,put=PutPref_NeutralVersion))
    double Pref_NeutralVersion;
    __declspec(property(get=GetPref_ViewDynamSpeed,put=PutPref_ViewDynamSpeed))
    double Pref_ViewDynamSpeed;
    __declspec(property(get=GetPref_WtmassFactor,put=PutPref_WtmassFactor))
    double Pref_WtmassFactor;
    __declspec(property(get=GetPref_RenderBeamEdges,put=PutPref_RenderBeamEdges))
    VARIANT_BOOL Pref_RenderBeamEdges;
    __declspec(property(get=GetPref_RenderBitmapAlignment,put=PutPref_RenderBitmapAlignment))
    int Pref_RenderBitmapAlignment;
    __declspec(property(get=GetPref_RenderMemoryOpt,put=PutPref_RenderMemoryOpt))
    VARIANT_BOOL Pref_RenderMemoryOpt;
    __declspec(property(get=GetPref_RenderPixelFormat,put=PutPref_RenderPixelFormat))
    int Pref_RenderPixelFormat;
    __declspec(property(get=GetPref_RenderTex2D,put=PutPref_RenderTex2D))
    VARIANT_BOOL Pref_RenderTex2D;
    __declspec(property(get=GetPref_RenderTexAllTri,put=PutPref_RenderTexAllTri))
    VARIANT_BOOL Pref_RenderTexAllTri;
    __declspec(property(get=GetPref_RenderTexSmooth,put=PutPref_RenderTexSmooth))
    VARIANT_BOOL Pref_RenderTexSmooth;
    __declspec(property(get=GetPref_RenderTexNumber,put=PutPref_RenderTexNumber))
    int Pref_RenderTexNumber;
    __declspec(property(get=GetPref_RenderTiming,put=PutPref_RenderTiming))
    VARIANT_BOOL Pref_RenderTiming;
    __declspec(property(get=GetPref_RenderTDRProtect,put=PutPref_RenderTDRProtect))
    int Pref_RenderTDRProtect;
    __declspec(property(get=GetInfo_WorkplaneModelAdjust,put=PutInfo_WorkplaneModelAdjust))
    VARIANT_BOOL Info_WorkplaneModelAdjust;
    __declspec(property(get=GetInfo_WorkplaneSurfaceAdjust,put=PutInfo_WorkplaneSurfaceAdjust))
    VARIANT_BOOL Info_WorkplaneSurfaceAdjust;
    __declspec(property(get=GetInfo_ModelNeedBox,put=PutInfo_ModelNeedBox))
    VARIANT_BOOL Info_ModelNeedBox;
    __declspec(property(get=GetInfo_UpdateAllViews,put=PutInfo_UpdateAllViews))
    VARIANT_BOOL Info_UpdateAllViews;
    __declspec(property(get=GetInfo_TranslateNotes,put=PutInfo_TranslateNotes))
    VARIANT_BOOL Info_TranslateNotes;
    __declspec(property(get=GetInfo_SnapFullPrecision,put=PutInfo_SnapFullPrecision))
    VARIANT_BOOL Info_SnapFullPrecision;
    __declspec(property(get=GetInfo_SnapCoordOnly,put=PutInfo_SnapCoordOnly))
    VARIANT_BOOL Info_SnapCoordOnly;
    __declspec(property(get=GetInfo_ViewShowErase,put=PutInfo_ViewShowErase))
    VARIANT_BOOL Info_ViewShowErase;
    __declspec(property(get=GetInfo_ViewShowUseColor,put=PutInfo_ViewShowUseColor))
    VARIANT_BOOL Info_ViewShowUseColor;
    __declspec(property(get=GetInfo_CommandNumber,put=PutInfo_CommandNumber))
    int Info_CommandNumber;
    __declspec(property(get=GetInfo_OutputCSys,put=PutInfo_OutputCSys))
    int Info_OutputCSys;
    __declspec(property(get=GetInfo_NodeType,put=PutInfo_NodeType))
    enum zNodeType Info_NodeType;
    __declspec(property(get=GetInfo_TextBorderColor,put=PutInfo_TextBorderColor))
    enum zColor Info_TextBorderColor;
    __declspec(property(get=GetInfo_WorkplaneOnSurface,put=PutInfo_WorkplaneOnSurface))
    int Info_WorkplaneOnSurface;
    __declspec(property(get=GetInfo_WorkplaneOnSurfacePrev,put=PutInfo_WorkplaneOnSurfacePrev))
    int Info_WorkplaneOnSurfacePrev;
    __declspec(property(get=GetInfo_SnapTo,put=PutInfo_SnapTo))
    int Info_SnapTo;
    __declspec(property(get=GetInfo_SnapStyle,put=PutInfo_SnapStyle))
    int Info_SnapStyle;
    __declspec(property(get=GetInfo_SnapSpacingMode,put=PutInfo_SnapSpacingMode))
    int Info_SnapSpacingMode;
    __declspec(property(get=GetInfo_WorkplaneTics,put=PutInfo_WorkplaneTics))
    int Info_WorkplaneTics;
    __declspec(property(get=GetInfo_MatlAngleMethod,put=PutInfo_MatlAngleMethod))
    int Info_MatlAngleMethod;
    __declspec(property(get=GetInfo_MatlAngleDir,put=PutInfo_MatlAngleDir))
    int Info_MatlAngleDir;
    __declspec(property(get=GetInfo_MatlAngleCSys,put=PutInfo_MatlAngleCSys))
    int Info_MatlAngleCSys;
    __declspec(property(get=GetInfo_MeshSizeMinElem,put=PutInfo_MeshSizeMinElem))
    int Info_MeshSizeMinElem;
    __declspec(property(get=GetInfo_ViewShowColor,put=PutInfo_ViewShowColor))
    enum zColor Info_ViewShowColor;
    __declspec(property(get=GetInfo_ViewShowEntity,put=PutInfo_ViewShowEntity))
    enum zDataType Info_ViewShowEntity;
    __declspec(property(get=GetInfo_ViewShowLabel,put=PutInfo_ViewShowLabel))
    int Info_ViewShowLabel;
    __declspec(property(get=GetInfo_GroupAutomaticAdd,put=PutInfo_GroupAutomaticAdd))
    int Info_GroupAutomaticAdd;
    __declspec(property(get=GetInfo_SplineOrder,put=PutInfo_SplineOrder))
    int Info_SplineOrder;
    __declspec(property(get=GetInfo_LayerNoPick,put=PutInfo_LayerNoPick))
    int Info_LayerNoPick;
    __declspec(property(get=GetInfo_MatlUserType,put=PutInfo_MatlUserType))
    int Info_MatlUserType;
    __declspec(property(get=GetInfo_Version,put=PutInfo_Version))
    double Info_Version;
    __declspec(property(get=GetInfo_WorkplaneLabels,put=PutInfo_WorkplaneLabels))
    double Info_WorkplaneLabels;
    __declspec(property(get=GetInfo_DefaultX,put=PutInfo_DefaultX))
    double Info_DefaultX;
    __declspec(property(get=GetInfo_DefaultY,put=PutInfo_DefaultY))
    double Info_DefaultY;
    __declspec(property(get=GetInfo_DefaultZ,put=PutInfo_DefaultZ))
    double Info_DefaultZ;
    __declspec(property(get=GetInfo_LineLength,put=PutInfo_LineLength))
    double Info_LineLength;
    __declspec(property(get=GetInfo_MatlAngle,put=PutInfo_MatlAngle))
    double Info_MatlAngle;
    __declspec(property(get=GetInfo_MeshSizeDefault,put=PutInfo_MeshSizeDefault))
    double Info_MeshSizeDefault;
    __declspec(property(get=GetInfo_GeometryScale,put=PutInfo_GeometryScale))
    double Info_GeometryScale;
    __declspec(property(get=GetTool_CursorSingle,put=PutTool_CursorSingle))
    VARIANT_BOOL Tool_CursorSingle;
    __declspec(property(get=GetTool_MergeTolerance,put=PutTool_MergeTolerance))
    double Tool_MergeTolerance;
    __declspec(property(get=GetPrint_Copies,put=PutPrint_Copies))
    int Print_Copies;
    __declspec(property(get=GetTool_MergeToleranceAuto,put=PutTool_MergeToleranceAuto))
    VARIANT_BOOL Tool_MergeToleranceAuto;
    __declspec(property(get=GetSolid_UpdateActive,put=PutSolid_UpdateActive))
    VARIANT_BOOL Solid_UpdateActive;
    __declspec(property(get=GetSolid_UpdateDelete,put=PutSolid_UpdateDelete))
    VARIANT_BOOL Solid_UpdateDelete;
    __declspec(property(get=GetSolid_UpdateResizeMode,put=PutSolid_UpdateResizeMode))
    int Solid_UpdateResizeMode;
    __declspec(property(get=GetSolid_UpdateResizeTol,put=PutSolid_UpdateResizeTol))
    double Solid_UpdateResizeTol;
    __declspec(property(get=GethMainWnd,put=PuthMainWnd))
    __int64 hMainWnd;
    __declspec(property(get=GethListWnd,put=PuthListWnd))
    __int64 hListWnd;
    __declspec(property(get=GetModelName,put=PutModelName))
    _bstr_t ModelName;
    __declspec(property(get=GetScratchName,put=PutScratchName))
    _bstr_t ScratchName;
    __declspec(property(get=GetFullScratchName,put=PutFullScratchName))
    _bstr_t FullScratchName;
    __declspec(property(get=GetExePath,put=PutExePath))
    _bstr_t ExePath;
    __declspec(property(get=GetSerialNumber,put=PutSerialNumber))
    _bstr_t SerialNumber;
    __declspec(property(get=GetEventLParam,put=PutEventLParam))
    __int64 EventLParam;
    __declspec(property(get=GetvPref_AngleDimetric,put=PutvPref_AngleDimetric))
    _variant_t vPref_AngleDimetric;
    __declspec(property(get=GetvPref_AngleIsometric,put=PutvPref_AngleIsometric))
    _variant_t vPref_AngleIsometric;
    __declspec(property(get=GetvPref_AngleTrimetric,put=PutvPref_AngleTrimetric))
    _variant_t vPref_AngleTrimetric;
    __declspec(property(get=GetvPref_RenderRotate,put=PutvPref_RenderRotate))
    _variant_t vPref_RenderRotate;
    __declspec(property(get=GetvInfo_PermBC,put=PutvInfo_PermBC))
    _variant_t vInfo_PermBC;
    __declspec(property(get=GetvInfo_WorkplaneRuler,put=PutvInfo_WorkplaneRuler))
    _variant_t vInfo_WorkplaneRuler;
    __declspec(property(get=GetvInfo_MaxID,put=PutvInfo_MaxID))
    _variant_t vInfo_MaxID;
    __declspec(property(get=GetvInfo_MinID,put=PutvInfo_MinID))
    _variant_t vInfo_MinID;
    __declspec(property(get=GetvInfo_Count,put=PutvInfo_Count))
    _variant_t vInfo_Count;
    __declspec(property(get=GetvInfo_ElemFormulation1,put=PutvInfo_ElemFormulation1))
    _variant_t vInfo_ElemFormulation1;
    __declspec(property(get=GetvInfo_ElemFormulation2,put=PutvInfo_ElemFormulation2))
    _variant_t vInfo_ElemFormulation2;
    __declspec(property(get=GetvInfo_WorkplaneOrigin,put=PutvInfo_WorkplaneOrigin))
    _variant_t vInfo_WorkplaneOrigin;
    __declspec(property(get=GetvInfo_WorkplaneX,put=PutvInfo_WorkplaneX))
    _variant_t vInfo_WorkplaneX;
    __declspec(property(get=GetvInfo_WorkplaneY,put=PutvInfo_WorkplaneY))
    _variant_t vInfo_WorkplaneY;
    __declspec(property(get=GetvInfo_WorkplaneZ,put=PutvInfo_WorkplaneZ))
    _variant_t vInfo_WorkplaneZ;
    __declspec(property(get=GetvInfo_WorkplanePrevOrigin,put=PutvInfo_WorkplanePrevOrigin))
    _variant_t vInfo_WorkplanePrevOrigin;
    __declspec(property(get=GetvInfo_WorkplanePrevX,put=PutvInfo_WorkplanePrevX))
    _variant_t vInfo_WorkplanePrevX;
    __declspec(property(get=GetvInfo_WorkplanePrevY,put=PutvInfo_WorkplanePrevY))
    _variant_t vInfo_WorkplanePrevY;
    __declspec(property(get=GetvInfo_WorkplanePrevZ,put=PutvInfo_WorkplanePrevZ))
    _variant_t vInfo_WorkplanePrevZ;
    __declspec(property(get=GetvInfo_SnapSpacing,put=PutvInfo_SnapSpacing))
    _variant_t vInfo_SnapSpacing;
    __declspec(property(get=GetvInfo_WorkplaneSizeX,put=PutvInfo_WorkplaneSizeX))
    _variant_t vInfo_WorkplaneSizeX;
    __declspec(property(get=GetvInfo_WorkplaneSizeY,put=PutvInfo_WorkplaneSizeY))
    _variant_t vInfo_WorkplaneSizeY;
    __declspec(property(get=GetvInfo_MatlAngleVec,put=PutvInfo_MatlAngleVec))
    _variant_t vInfo_MatlAngleVec;
    __declspec(property(get=GetvTool_CursorXYZ,put=PutvTool_CursorXYZ))
    _variant_t vTool_CursorXYZ;
    __declspec(property(get=GetvInfo_ModelSizeX,put=PutvInfo_ModelSizeX))
    _variant_t vInfo_ModelSizeX;
    __declspec(property(get=GetvInfo_ModelSizeY,put=PutvInfo_ModelSizeY))
    _variant_t vInfo_ModelSizeY;
    __declspec(property(get=GetvInfo_ModelSizeZ,put=PutvInfo_ModelSizeZ))
    _variant_t vInfo_ModelSizeZ;
    __declspec(property(get=GetvPref_EntityColor,put=PutvPref_EntityColor))
    _variant_t vPref_EntityColor;
    __declspec(property(get=GetvInfo_Increment,put=PutvInfo_Increment))
    _variant_t vInfo_Increment;
    __declspec(property(get=GetvInfo_NextID,put=PutvInfo_NextID))
    _variant_t vInfo_NextID;
    __declspec(property(get=GetvInfo_ActiveID,put=PutvInfo_ActiveID))
    _variant_t vInfo_ActiveID;
    __declspec(property(get=GetvInfo_ActiveType,put=PutvInfo_ActiveType))
    _variant_t vInfo_ActiveType;
    __declspec(property(get=GetvInfo_Color,put=PutvInfo_Color))
    _variant_t vInfo_Color;
    __declspec(property(get=GetvInfo_SurfDivisionsLinear,put=PutvInfo_SurfDivisionsLinear))
    _variant_t vInfo_SurfDivisionsLinear;
    __declspec(property(get=GetvInfo_SurfDivisionsCurved,put=PutvInfo_SurfDivisionsCurved))
    _variant_t vInfo_SurfDivisionsCurved;
    __declspec(property(get=GetPref_ReverseMouseWheel,put=PutPref_ReverseMouseWheel))
    VARIANT_BOOL Pref_ReverseMouseWheel;
    __declspec(property(get=GetPref_ReversePanZoom,put=PutPref_ReversePanZoom))
    VARIANT_BOOL Pref_ReversePanZoom;
    __declspec(property(get=GetPref_AltAccelerator,put=PutPref_AltAccelerator))
    VARIANT_BOOL Pref_AltAccelerator;
    __declspec(property(get=GetPref_AltTheme,put=PutPref_AltTheme))
    VARIANT_BOOL Pref_AltTheme;
    __declspec(property(get=GetPref_ViewLogoScreenRes,put=PutPref_ViewLogoScreenRes))
    VARIANT_BOOL Pref_ViewLogoScreenRes;
    __declspec(property(get=GetPref_ViewBkgdBitmap,put=PutPref_ViewBkgdBitmap))
    _bstr_t Pref_ViewBkgdBitmap;
    __declspec(property(get=GetPref_ViewLogo,put=PutPref_ViewLogo))
    _bstr_t Pref_ViewLogo;
    __declspec(property(get=GetDialogAutoAnswer,put=PutDialogAutoAnswer))
    int DialogAutoAnswer;
    __declspec(property(get=GetPref_MessageFont,put=PutPref_MessageFont))
    _bstr_t Pref_MessageFont;
    __declspec(property(get=GetPref_ListingFont,put=PutPref_ListingFont))
    _bstr_t Pref_ListingFont;
    __declspec(property(get=GetPref_ProgramFont,put=PutPref_ProgramFont))
    _bstr_t Pref_ProgramFont;
    __declspec(property(get=GetPref_ProgramFontSize,put=PutPref_ProgramFontSize))
    int Pref_ProgramFontSize;
    __declspec(property(get=GetPref_MsgWndCmdColor,put=PutPref_MsgWndCmdColor))
    enum zColor Pref_MsgWndCmdColor;
    __declspec(property(get=GetPref_MsgWndTextBold,put=PutPref_MsgWndTextBold))
    VARIANT_BOOL Pref_MsgWndTextBold;
    __declspec(property(get=GetPref_MsgWndCmdBold,put=PutPref_MsgWndCmdBold))
    VARIANT_BOOL Pref_MsgWndCmdBold;
    __declspec(property(get=GetPref_MsgWndHighBold,put=PutPref_MsgWndHighBold))
    VARIANT_BOOL Pref_MsgWndHighBold;
    __declspec(property(get=GetPref_MsgWndWarnBold,put=PutPref_MsgWndWarnBold))
    VARIANT_BOOL Pref_MsgWndWarnBold;
    __declspec(property(get=GetPref_MsgWndErrorBold,put=PutPref_MsgWndErrorBold))
    VARIANT_BOOL Pref_MsgWndErrorBold;
    __declspec(property(get=GetPref_AltSectionProp,put=PutPref_AltSectionProp))
    VARIANT_BOOL Pref_AltSectionProp;
    __declspec(property(get=GetPref_RenderSmoothLines,put=PutPref_RenderSmoothLines))
    VARIANT_BOOL Pref_RenderSmoothLines;
    __declspec(property(get=GetPref_RenderFastPick,put=PutPref_RenderFastPick))
    VARIANT_BOOL Pref_RenderFastPick;
    __declspec(property(get=GetPref_RenderEdgesAsLines,put=PutPref_RenderEdgesAsLines))
    VARIANT_BOOL Pref_RenderEdgesAsLines;
    __declspec(property(get=GetPref_RenderAutoRegen,put=PutPref_RenderAutoRegen))
    VARIANT_BOOL Pref_RenderAutoRegen;
    __declspec(property(get=GetPref_RenderVertexArrays,put=PutPref_RenderVertexArrays))
    int Pref_RenderVertexArrays;
    __declspec(property(get=GetPref_RenderBitBltDelay,put=PutPref_RenderBitBltDelay))
    int Pref_RenderBitBltDelay;
    __declspec(property(get=GetPref_RenderSearchDepth,put=PutPref_RenderSearchDepth))
    int Pref_RenderSearchDepth;
    __declspec(property(get=GetPref_GeomScaleAdjust,put=PutPref_GeomScaleAdjust))
    VARIANT_BOOL Pref_GeomScaleAdjust;
    __declspec(property(get=GetPref_ModelInfoMaxEntity,put=PutPref_ModelInfoMaxEntity))
    int Pref_ModelInfoMaxEntity;
    __declspec(property(get=GetPref_AnimatePanes,put=PutPref_AnimatePanes))
    VARIANT_BOOL Pref_AnimatePanes;
    __declspec(property(get=GetPref_RememberDialogPos,put=PutPref_RememberDialogPos))
    VARIANT_BOOL Pref_RememberDialogPos;
    __declspec(property(get=GetPref_UseMSCNastran2004,put=PutPref_UseMSCNastran2004))
    VARIANT_BOOL Pref_UseMSCNastran2004;
    __declspec(property(get=GetPref_FileRefCheck,put=PutPref_FileRefCheck))
    VARIANT_BOOL Pref_FileRefCheck;
    __declspec(property(get=GetPref_FileRefGeometry,put=PutPref_FileRefGeometry))
    VARIANT_BOOL Pref_FileRefGeometry;
    __declspec(property(get=GetPref_FileRefModel,put=PutPref_FileRefModel))
    VARIANT_BOOL Pref_FileRefModel;
    __declspec(property(get=GetPref_FileRefResults,put=PutPref_FileRefResults))
    VARIANT_BOOL Pref_FileRefResults;
    __declspec(property(get=GetPref_AnalysisMonAutoLoad,put=PutPref_AnalysisMonAutoLoad))
    VARIANT_BOOL Pref_AnalysisMonAutoLoad;
    __declspec(property(get=GetPref_AnalysisMonMaxLines,put=PutPref_AnalysisMonMaxLines))
    int Pref_AnalysisMonMaxLines;
    __declspec(property(get=GetPref_OutputSetTitles,put=PutPref_OutputSetTitles))
    int Pref_OutputSetTitles;
    __declspec(property(get=GetPref_LibConnectionProp,put=PutPref_LibConnectionProp))
    _bstr_t Pref_LibConnectionProp;
    __declspec(property(get=GetPref_UseOldAnalysisInterfaces,put=PutPref_UseOldAnalysisInterfaces))
    VARIANT_BOOL Pref_UseOldAnalysisInterfaces;
    __declspec(property(get=GetInfo_SuperelementID,put=PutInfo_SuperelementID))
    int Info_SuperelementID;
    __declspec(property(get=GetCoordDialogMethod,put=PutCoordDialogMethod))
    enum zPointDefinition CoordDialogMethod;
    __declspec(property(get=GetVectorDialogMethod,put=PutVectorDialogMethod))
    enum zVectorDefinition VectorDialogMethod;
    __declspec(property(get=GetPlaneDialogMethod,put=PutPlaneDialogMethod))
    enum zPlaneDefinition PlaneDialogMethod;
    __declspec(property(get=GetInfo_OrientSolidIsoOutput,put=PutInfo_OrientSolidIsoOutput))
    int Info_OrientSolidIsoOutput;
    __declspec(property(get=GetInfo_OrientSolidAnisoOutput,put=PutInfo_OrientSolidAnisoOutput))
    int Info_OrientSolidAnisoOutput;
    __declspec(property(get=GetInfo_OrientSolidHyperOutput,put=PutInfo_OrientSolidHyperOutput))
    int Info_OrientSolidHyperOutput;
    __declspec(property(get=GetInfo_OrientTria3StressOutput,put=PutInfo_OrientTria3StressOutput))
    int Info_OrientTria3StressOutput;
    __declspec(property(get=GetInfo_OrientTria3StrainOutput,put=PutInfo_OrientTria3StrainOutput))
    int Info_OrientTria3StrainOutput;
    __declspec(property(get=GetInfo_OrientTria3ForceOutput,put=PutInfo_OrientTria3ForceOutput))
    int Info_OrientTria3ForceOutput;
    __declspec(property(get=GetInfo_OrientTria6StressOutput,put=PutInfo_OrientTria6StressOutput))
    int Info_OrientTria6StressOutput;
    __declspec(property(get=GetInfo_OrientTria6StrainOutput,put=PutInfo_OrientTria6StrainOutput))
    int Info_OrientTria6StrainOutput;
    __declspec(property(get=GetInfo_OrientTria6ForceOutput,put=PutInfo_OrientTria6ForceOutput))
    int Info_OrientTria6ForceOutput;
    __declspec(property(get=GetInfo_OrientQuad4StressOutput,put=PutInfo_OrientQuad4StressOutput))
    int Info_OrientQuad4StressOutput;
    __declspec(property(get=GetInfo_OrientQuad4StrainOutput,put=PutInfo_OrientQuad4StrainOutput))
    int Info_OrientQuad4StrainOutput;
    __declspec(property(get=GetInfo_OrientQuad4ForceOutput,put=PutInfo_OrientQuad4ForceOutput))
    int Info_OrientQuad4ForceOutput;
    __declspec(property(get=GetInfo_OrientQuad8StressOutput,put=PutInfo_OrientQuad8StressOutput))
    int Info_OrientQuad8StressOutput;
    __declspec(property(get=GetInfo_OrientQuad8StrainOutput,put=PutInfo_OrientQuad8StrainOutput))
    int Info_OrientQuad8StrainOutput;
    __declspec(property(get=GetInfo_OrientQuad8ForceOutput,put=PutInfo_OrientQuad8ForceOutput))
    int Info_OrientQuad8ForceOutput;
    __declspec(property(get=GetPref_ReadTabSize,put=PutPref_ReadTabSize))
    int Pref_ReadTabSize;
    __declspec(property(get=GetPickBoundaryInternalMode,put=PutPickBoundaryInternalMode))
    int PickBoundaryInternalMode;
    __declspec(property(get=GetPickCombinedCurveInternalMode,put=PutPickCombinedCurveInternalMode))
    int PickCombinedCurveInternalMode;
    __declspec(property(get=GetPref_NastranUseILP64,put=PutPref_NastranUseILP64))
    VARIANT_BOOL Pref_NastranUseILP64;
    __declspec(property(get=GetPref_ConstructionGeometry,put=PutPref_ConstructionGeometry))
    int Pref_ConstructionGeometry;
    __declspec(property(get=GetPref_NastranWriteAllLdbcSets,put=PutPref_NastranWriteAllLdbcSets))
    VARIANT_BOOL Pref_NastranWriteAllLdbcSets;
    __declspec(property(get=GetList_Destination,put=PutList_Destination))
    enum zListDestination List_Destination;
    __declspec(property(get=GetList_FileName,put=PutList_FileName))
    _bstr_t List_FileName;
    __declspec(property(get=GetPref_DeleteRdScratchLdSets,put=PutPref_DeleteRdScratchLdSets))
    VARIANT_BOOL Pref_DeleteRdScratchLdSets;
    __declspec(property(get=GetPref_ImproveSinglePrecision,put=PutPref_ImproveSinglePrecision))
    VARIANT_BOOL Pref_ImproveSinglePrecision;
    __declspec(property(get=GetPref_PaneCaptionsOnTop,put=PutPref_PaneCaptionsOnTop))
    VARIANT_BOOL Pref_PaneCaptionsOnTop;
    __declspec(property(get=GetPref_PictureFormat,put=PutPref_PictureFormat))
    enum zPrefPictureFormat Pref_PictureFormat;
    __declspec(property(get=GetPref_AnimationFormat,put=PutPref_AnimationFormat))
    enum zPrefAnimateFormat Pref_AnimationFormat;
    __declspec(property(get=GetPref_GIFColorOpt,put=PutPref_GIFColorOpt))
    enum zGifColorOpt Pref_GIFColorOpt;
    __declspec(property(get=GetPref_GIFAnimationDelay,put=PutPref_GIFAnimationDelay))
    int Pref_GIFAnimationDelay;
    __declspec(property(get=GetPref_GIFFrameSeries,put=PutPref_GIFFrameSeries))
    VARIANT_BOOL Pref_GIFFrameSeries;
    __declspec(property(get=GetPref_CompressBitmaps,put=PutPref_CompressBitmaps))
    VARIANT_BOOL Pref_CompressBitmaps;
    __declspec(property(get=GetvPref_NasQstOn,put=PutvPref_NasQstOn))
    _variant_t vPref_NasQstOn;
    __declspec(property(get=GetvPref_NasQstVal,put=PutvPref_NasQstVal))
    _variant_t vPref_NasQstVal;
    __declspec(property(get=GetPref_TbxExpandActive,put=PutPref_TbxExpandActive))
    VARIANT_BOOL Pref_TbxExpandActive;
    __declspec(property(get=GetPref_TbxAutomesh,put=PutPref_TbxAutomesh))
    int Pref_TbxAutomesh;
    __declspec(property(get=GetPref_ResPrintMethod,put=PutPref_ResPrintMethod))
    int Pref_ResPrintMethod;
    __declspec(property(get=GetPref_ResPrintScale,put=PutPref_ResPrintScale))
    double Pref_ResPrintScale;
    __declspec(property(get=GetPref_ResCopySaveMethod,put=PutPref_ResCopySaveMethod))
    int Pref_ResCopySaveMethod;
    __declspec(property(get=GetPref_ResCopySaveScale,put=PutPref_ResCopySaveScale))
    double Pref_ResCopySaveScale;
    __declspec(property(get=GetPref_ResScaleWithWidth,put=PutPref_ResScaleWithWidth))
    int Pref_ResScaleWithWidth;
    __declspec(property(get=GetPref_ResScaleWithHeight,put=PutPref_ResScaleWithHeight))
    int Pref_ResScaleWithHeight;
    __declspec(property(get=GetPref_ResFixedWidth,put=PutPref_ResFixedWidth))
    int Pref_ResFixedWidth;
    __declspec(property(get=GetPref_ResFixedHeight,put=PutPref_ResFixedHeight))
    int Pref_ResFixedHeight;
    __declspec(property(get=GetInfo_FacetAngleTolerance,put=PutInfo_FacetAngleTolerance))
    double Info_FacetAngleTolerance;
    __declspec(property(get=GetInfo_FacetChordTolerance,put=PutInfo_FacetChordTolerance))
    double Info_FacetChordTolerance;
    __declspec(property(get=GetInfo_FacetCurveFactor,put=PutInfo_FacetCurveFactor))
    double Info_FacetCurveFactor;
    __declspec(property(get=GetSolid_UpdateMaterialData,put=PutSolid_UpdateMaterialData))
    VARIANT_BOOL Solid_UpdateMaterialData;
    __declspec(property(get=GetSolid_UpdateUseParasolidIdent,put=PutSolid_UpdateUseParasolidIdent))
    VARIANT_BOOL Solid_UpdateUseParasolidIdent;
    __declspec(property(get=GetPref_ResPenMethod,put=PutPref_ResPenMethod))
    int Pref_ResPenMethod;
    __declspec(property(get=GetPref_ResPenScale,put=PutPref_ResPenScale))
    int Pref_ResPenScale;
    __declspec(property(get=GetPref_ResScreenLogoScale,put=PutPref_ResScreenLogoScale))
    double Pref_ResScreenLogoScale;
    __declspec(property(get=GetPref_ResPrintLogoScale,put=PutPref_ResPrintLogoScale))
    double Pref_ResPrintLogoScale;
    __declspec(property(get=GetPref_ResCopySaveLogoScale,put=PutPref_ResCopySaveLogoScale))
    double Pref_ResCopySaveLogoScale;
    __declspec(property(get=GetDialogAutoSkip,put=PutDialogAutoSkip))
    int DialogAutoSkip;
    __declspec(property(get=GetInfo_SuppressedCurveColor,put=PutInfo_SuppressedCurveColor))
    enum zColor Info_SuppressedCurveColor;
    __declspec(property(get=GetInfo_SuppressedSurfaceColor,put=PutInfo_SuppressedSurfaceColor))
    enum zColor Info_SuppressedSurfaceColor;
    __declspec(property(get=GetPref_MsgWndRepeatedErrors,put=PutPref_MsgWndRepeatedErrors))
    int Pref_MsgWndRepeatedErrors;
    __declspec(property(get=GetPref_PaneAltDockSymbols,put=PutPref_PaneAltDockSymbols))
    VARIANT_BOOL Pref_PaneAltDockSymbols;
    __declspec(property(get=GetPref_FastOutputDelete,put=PutPref_FastOutputDelete))
    int Pref_FastOutputDelete;
    __declspec(property(get=GetPref_GroupIncludeFiles,put=PutPref_GroupIncludeFiles))
    VARIANT_BOOL Pref_GroupIncludeFiles;
    __declspec(property(get=GetPref_OpenSaveMethod,put=PutPref_OpenSaveMethod))
    int Pref_OpenSaveMethod;
    __declspec(property(get=GetErrorHasBeenCalled,put=PutErrorHasBeenCalled))
    VARIANT_BOOL ErrorHasBeenCalled;
    __declspec(property(get=GetPref_Enable_Aeroelasticity,put=PutPref_Enable_Aeroelasticity))
    VARIANT_BOOL Pref_Enable_Aeroelasticity;
    __declspec(property(get=GetPref_NasAlternateContinue,put=PutPref_NasAlternateContinue))
    VARIANT_BOOL Pref_NasAlternateContinue;
    __declspec(property(get=GetPref_NasDballScratch,put=PutPref_NasDballScratch))
    VARIANT_BOOL Pref_NasDballScratch;
    __declspec(property(get=GetPref_JTFileVersion,put=PutPref_JTFileVersion))
    int Pref_JTFileVersion;
    __declspec(property(get=GetPref_GIFOptimized,put=PutPref_GIFOptimized))
    VARIANT_BOOL Pref_GIFOptimized;
    __declspec(property(get=GetPref_PreV10SurfaceMesh,put=PutPref_PreV10SurfaceMesh))
    VARIANT_BOOL Pref_PreV10SurfaceMesh;
    __declspec(property(get=GetPref_PickMethod,put=PutPref_PickMethod))
    int Pref_PickMethod;
    __declspec(property(get=GetPref_ConfirmDelete,put=PutPref_ConfirmDelete))
    VARIANT_BOOL Pref_ConfirmDelete;
    __declspec(property(get=GetPref_RenderXORPicking,put=PutPref_RenderXORPicking))
    VARIANT_BOOL Pref_RenderXORPicking;
    __declspec(property(get=GetPref_RenderMultiModelMem,put=PutPref_RenderMultiModelMem))
    VARIANT_BOOL Pref_RenderMultiModelMem;
    __declspec(property(get=GetPref_RenderDebugElapsedTime,put=PutPref_RenderDebugElapsedTime))
    VARIANT_BOOL Pref_RenderDebugElapsedTime;
    __declspec(property(get=GetPref_RenderDebugAllTime,put=PutPref_RenderDebugAllTime))
    VARIANT_BOOL Pref_RenderDebugAllTime;
    __declspec(property(get=GetPref_RenderDebugOGLErrors,put=PutPref_RenderDebugOGLErrors))
    VARIANT_BOOL Pref_RenderDebugOGLErrors;
    __declspec(property(get=GetPref_RenderBlockSize,put=PutPref_RenderBlockSize))
    int Pref_RenderBlockSize;
    __declspec(property(get=GetPref_RenderDialogRefresh,put=PutPref_RenderDialogRefresh))
    VARIANT_BOOL Pref_RenderDialogRefresh;
    __declspec(property(get=GetPref_ShowMode,put=PutPref_ShowMode))
    int Pref_ShowMode;
    __declspec(property(get=GetPref_ShowLabels,put=PutPref_ShowLabels))
    VARIANT_BOOL Pref_ShowLabels;
    __declspec(property(get=GetPref_ShowNormals,put=PutPref_ShowNormals))
    VARIANT_BOOL Pref_ShowNormals;
    __declspec(property(get=GetPref_PreserveNextID,put=PutPref_PreserveNextID))
    VARIANT_BOOL Pref_PreserveNextID;
    __declspec(property(get=GetPref_NastranScratchLocation,put=PutPref_NastranScratchLocation))
    int Pref_NastranScratchLocation;
    __declspec(property(get=GetPref_LibLayup,put=PutPref_LibLayup))
    _bstr_t Pref_LibLayup;
    __declspec(property(get=GetvPref_SpaceballFactors,put=PutvPref_SpaceballFactors))
    _variant_t vPref_SpaceballFactors;
    __declspec(property(get=GetPref_SpaceballSensitivity,put=PutPref_SpaceballSensitivity))
    int Pref_SpaceballSensitivity;
    __declspec(property(get=GetPref_SpaceballDebug,put=PutPref_SpaceballDebug))
    VARIANT_BOOL Pref_SpaceballDebug;
    __declspec(property(get=GetPref_ElemQualAspectRatio,put=PutPref_ElemQualAspectRatio))
    VARIANT_BOOL Pref_ElemQualAspectRatio;
    __declspec(property(get=GetPref_ElemQualTaper,put=PutPref_ElemQualTaper))
    VARIANT_BOOL Pref_ElemQualTaper;
    __declspec(property(get=GetPref_ElemQualAltTaper,put=PutPref_ElemQualAltTaper))
    VARIANT_BOOL Pref_ElemQualAltTaper;
    __declspec(property(get=GetPref_ElemQualIntAngles,put=PutPref_ElemQualIntAngles))
    VARIANT_BOOL Pref_ElemQualIntAngles;
    __declspec(property(get=GetPref_ElemQualSkew,put=PutPref_ElemQualSkew))
    VARIANT_BOOL Pref_ElemQualSkew;
    __declspec(property(get=GetPref_ElemQualWarping,put=PutPref_ElemQualWarping))
    VARIANT_BOOL Pref_ElemQualWarping;
    __declspec(property(get=GetPref_ElemQualNastranWarping,put=PutPref_ElemQualNastranWarping))
    VARIANT_BOOL Pref_ElemQualNastranWarping;
    __declspec(property(get=GetPref_ElemQualTetCollapse,put=PutPref_ElemQualTetCollapse))
    VARIANT_BOOL Pref_ElemQualTetCollapse;
    __declspec(property(get=GetPref_ElemQualJacobian,put=PutPref_ElemQualJacobian))
    VARIANT_BOOL Pref_ElemQualJacobian;
    __declspec(property(get=GetPref_ElemQualCombined,put=PutPref_ElemQualCombined))
    VARIANT_BOOL Pref_ElemQualCombined;
    __declspec(property(get=GetPref_ElemQualExplicitTime,put=PutPref_ElemQualExplicitTime))
    VARIANT_BOOL Pref_ElemQualExplicitTime;
    __declspec(property(get=GetPref_ElemQualAspectRatioVal,put=PutPref_ElemQualAspectRatioVal))
    double Pref_ElemQualAspectRatioVal;
    __declspec(property(get=GetPref_ElemQualTaperVal,put=PutPref_ElemQualTaperVal))
    double Pref_ElemQualTaperVal;
    __declspec(property(get=GetPref_ElemQualAltTaperVal,put=PutPref_ElemQualAltTaperVal))
    double Pref_ElemQualAltTaperVal;
    __declspec(property(get=GetPref_ElemQualIntAnglesVal,put=PutPref_ElemQualIntAnglesVal))
    double Pref_ElemQualIntAnglesVal;
    __declspec(property(get=GetPref_ElemQualSkewVal,put=PutPref_ElemQualSkewVal))
    double Pref_ElemQualSkewVal;
    __declspec(property(get=GetPref_ElemQualWarpingVal,put=PutPref_ElemQualWarpingVal))
    double Pref_ElemQualWarpingVal;
    __declspec(property(get=GetPref_ElemQualNastranWarpingVal,put=PutPref_ElemQualNastranWarpingVal))
    double Pref_ElemQualNastranWarpingVal;
    __declspec(property(get=GetPref_ElemQualTetCollapseVal,put=PutPref_ElemQualTetCollapseVal))
    double Pref_ElemQualTetCollapseVal;
    __declspec(property(get=GetPref_ElemQualJacobianVal,put=PutPref_ElemQualJacobianVal))
    double Pref_ElemQualJacobianVal;
    __declspec(property(get=GetPref_ElemQualCombinedVal,put=PutPref_ElemQualCombinedVal))
    double Pref_ElemQualCombinedVal;
    __declspec(property(get=GetPref_ElemQualExplicitTimeVal,put=PutPref_ElemQualExplicitTimeVal))
    double Pref_ElemQualExplicitTimeVal;
    __declspec(property(get=GetPref_ShowColor,put=PutPref_ShowColor))
    enum zColor Pref_ShowColor;
    __declspec(property(get=GetPref_OrientSolidIsoOutput,put=PutPref_OrientSolidIsoOutput))
    int Pref_OrientSolidIsoOutput;
    __declspec(property(get=GetPref_OrientSolidAnisoOutput,put=PutPref_OrientSolidAnisoOutput))
    int Pref_OrientSolidAnisoOutput;
    __declspec(property(get=GetPref_OrientSolidHyperOutput,put=PutPref_OrientSolidHyperOutput))
    int Pref_OrientSolidHyperOutput;
    __declspec(property(get=GetPref_OrientTria3StressOutput,put=PutPref_OrientTria3StressOutput))
    int Pref_OrientTria3StressOutput;
    __declspec(property(get=GetPref_OrientTria3StrainOutput,put=PutPref_OrientTria3StrainOutput))
    int Pref_OrientTria3StrainOutput;
    __declspec(property(get=GetPref_OrientTria3ForceOutput,put=PutPref_OrientTria3ForceOutput))
    int Pref_OrientTria3ForceOutput;
    __declspec(property(get=GetPref_OrientTria6StressOutput,put=PutPref_OrientTria6StressOutput))
    int Pref_OrientTria6StressOutput;
    __declspec(property(get=GetPref_OrientTria6StrainOutput,put=PutPref_OrientTria6StrainOutput))
    int Pref_OrientTria6StrainOutput;
    __declspec(property(get=GetPref_OrientTria6ForceOutput,put=PutPref_OrientTria6ForceOutput))
    int Pref_OrientTria6ForceOutput;
    __declspec(property(get=GetPref_OrientQuad4StressOutput,put=PutPref_OrientQuad4StressOutput))
    int Pref_OrientQuad4StressOutput;
    __declspec(property(get=GetPref_OrientQuad4StrainOutput,put=PutPref_OrientQuad4StrainOutput))
    int Pref_OrientQuad4StrainOutput;
    __declspec(property(get=GetPref_OrientQuad4ForceOutput,put=PutPref_OrientQuad4ForceOutput))
    int Pref_OrientQuad4ForceOutput;
    __declspec(property(get=GetPref_OrientQuad8StressOutput,put=PutPref_OrientQuad8StressOutput))
    int Pref_OrientQuad8StressOutput;
    __declspec(property(get=GetPref_OrientQuad8StrainOutput,put=PutPref_OrientQuad8StrainOutput))
    int Pref_OrientQuad8StrainOutput;
    __declspec(property(get=GetPref_OrientQuad8ForceOutput,put=PutPref_OrientQuad8ForceOutput))
    int Pref_OrientQuad8ForceOutput;
    __declspec(property(get=GetPref_RenderTrailingZeroes,put=PutPref_RenderTrailingZeroes))
    VARIANT_BOOL Pref_RenderTrailingZeroes;
    __declspec(property(get=GetPref_RenderMaxVBOMB,put=PutPref_RenderMaxVBOMB))
    int Pref_RenderMaxVBOMB;
    __declspec(property(get=GetPref_RenderDebugFrameRate,put=PutPref_RenderDebugFrameRate))
    VARIANT_BOOL Pref_RenderDebugFrameRate;
    __declspec(property(get=GetPref_RenderVBOUsage,put=PutPref_RenderVBOUsage))
    int Pref_RenderVBOUsage;
    __declspec(property(get=GetPref_PreserveIncludes,put=PutPref_PreserveIncludes))
    VARIANT_BOOL Pref_PreserveIncludes;
    __declspec(property(get=GetPref_MemoryMappedFiles,put=PutPref_MemoryMappedFiles))
    VARIANT_BOOL Pref_MemoryMappedFiles;
    __declspec(property(get=GetPref_AutoAttachResults,put=PutPref_AutoAttachResults))
    VARIANT_BOOL Pref_AutoAttachResults;
    __declspec(property(get=GetPref_RenderCaptureIconified,put=PutPref_RenderCaptureIconified))
    VARIANT_BOOL Pref_RenderCaptureIconified;
    __declspec(property(get=GetPref_RenderMinVBOB,put=PutPref_RenderMinVBOB))
    int Pref_RenderMinVBOB;
    __declspec(property(get=GetInfo_MeshSizeAutoDefault,put=PutInfo_MeshSizeAutoDefault))
    VARIANT_BOOL Info_MeshSizeAutoDefault;
    __declspec(property(get=GetPref_AttachResultsDebug,put=PutPref_AttachResultsDebug))
    VARIANT_BOOL Pref_AttachResultsDebug;
    __declspec(property(get=GetPref_AttachResultsTiming,put=PutPref_AttachResultsTiming))
    VARIANT_BOOL Pref_AttachResultsTiming;
    __declspec(property(get=GetPref_ViewPostDynamicMaxMin,put=PutPref_ViewPostDynamicMaxMin))
    VARIANT_BOOL Pref_ViewPostDynamicMaxMin;
    __declspec(property(get=GetDialogAutoSkipMsg,put=PutDialogAutoSkipMsg))
    int DialogAutoSkipMsg;
    __declspec(property(get=GetPref_CleanupModel,put=PutPref_CleanupModel))
    VARIANT_BOOL Pref_CleanupModel;
    __declspec(property(get=GetPref_LegacyXYPlotting,put=PutPref_LegacyXYPlotting))
    VARIANT_BOOL Pref_LegacyXYPlotting;
    __declspec(property(get=GetPref_LibChart,put=PutPref_LibChart))
    _bstr_t Pref_LibChart;
    __declspec(property(get=GetPref_Show0To360Angles,put=PutPref_Show0To360Angles))
    VARIANT_BOOL Pref_Show0To360Angles;
    __declspec(property(get=GetPref_PlaneWheelFactor,put=PutPref_PlaneWheelFactor))
    double Pref_PlaneWheelFactor;
    __declspec(property(get=GetPref_MiddleMouseButtonOK,put=PutPref_MiddleMouseButtonOK))
    VARIANT_BOOL Pref_MiddleMouseButtonOK;
    __declspec(property(get=GetPref_GeomOptimize,put=PutPref_GeomOptimize))
    VARIANT_BOOL Pref_GeomOptimize;
    __declspec(property(get=GetPref_UseRegionDecimalChar,put=PutPref_UseRegionDecimalChar))
    VARIANT_BOOL Pref_UseRegionDecimalChar;
    __declspec(property(get=GetPref_ResFontScale,put=PutPref_ResFontScale))
    double Pref_ResFontScale;
    __declspec(property(get=GetPref_PerformanceGraphics,put=PutPref_PerformanceGraphics))
    VARIANT_BOOL Pref_PerformanceGraphics;
    __declspec(property(get=GetSolidAllowNonManifold,put=PutSolidAllowNonManifold))
    VARIANT_BOOL SolidAllowNonManifold;
    __declspec(property(get=GetPref_CreateResultStudy,put=PutPref_CreateResultStudy))
    VARIANT_BOOL Pref_CreateResultStudy;
    __declspec(property(get=GetPref_ResultStudyTitle,put=PutPref_ResultStudyTitle))
    int Pref_ResultStudyTitle;
    __declspec(property(get=GetInfo_ViewShowNormal,put=PutInfo_ViewShowNormal))
    VARIANT_BOOL Info_ViewShowNormal;
    __declspec(property(get=GetInfo_ViewShowTransparent,put=PutInfo_ViewShowTransparent))
    VARIANT_BOOL Info_ViewShowTransparent;
    __declspec(property(get=GetInfo_ComplexSyncMethod,put=PutInfo_ComplexSyncMethod))
    int Info_ComplexSyncMethod;
    __declspec(property(get=GetInfo_ComplexSyncPhase,put=PutInfo_ComplexSyncPhase))
    double Info_ComplexSyncPhase;
    __declspec(property(get=GetInfo_ComplexSyncIncrement,put=PutInfo_ComplexSyncIncrement))
    double Info_ComplexSyncIncrement;
    __declspec(property(get=GetPref_TabPasteIgnoreDelimeter,put=PutPref_TabPasteIgnoreDelimeter))
    VARIANT_BOOL Pref_TabPasteIgnoreDelimeter;
    __declspec(property(get=GetPref_SnapTo,put=PutPref_SnapTo))
    int Pref_SnapTo;
    __declspec(property(get=GetPref_RenderMaxMagnification,put=PutPref_RenderMaxMagnification))
    double Pref_RenderMaxMagnification;
    __declspec(property(get=GetPref_StudyAppendFemapTitles,put=PutPref_StudyAppendFemapTitles))
    VARIANT_BOOL Pref_StudyAppendFemapTitles;
    __declspec(property(get=GetPref_ElemQualQuadSkew,put=PutPref_ElemQualQuadSkew))
    VARIANT_BOOL Pref_ElemQualQuadSkew;
    __declspec(property(get=GetPref_ElemQualQuadTaper,put=PutPref_ElemQualQuadTaper))
    VARIANT_BOOL Pref_ElemQualQuadTaper;
    __declspec(property(get=GetPref_ElemQualQuadWarp,put=PutPref_ElemQualQuadWarp))
    VARIANT_BOOL Pref_ElemQualQuadWarp;
    __declspec(property(get=GetPref_ElemQualQuadIAMin,put=PutPref_ElemQualQuadIAMin))
    VARIANT_BOOL Pref_ElemQualQuadIAMin;
    __declspec(property(get=GetPref_ElemQualQuadIAMax,put=PutPref_ElemQualQuadIAMax))
    VARIANT_BOOL Pref_ElemQualQuadIAMax;
    __declspec(property(get=GetPref_ElemQualTriaSkew,put=PutPref_ElemQualTriaSkew))
    VARIANT_BOOL Pref_ElemQualTriaSkew;
    __declspec(property(get=GetPref_ElemQualTriaIAMax,put=PutPref_ElemQualTriaIAMax))
    VARIANT_BOOL Pref_ElemQualTriaIAMax;
    __declspec(property(get=GetPref_ElemQualTetAspectRatio,put=PutPref_ElemQualTetAspectRatio))
    VARIANT_BOOL Pref_ElemQualTetAspectRatio;
    __declspec(property(get=GetPref_ElemQualTetEPLR,put=PutPref_ElemQualTetEPLR))
    VARIANT_BOOL Pref_ElemQualTetEPLR;
    __declspec(property(get=GetPref_ElemQualTetDetJ,put=PutPref_ElemQualTetDetJ))
    VARIANT_BOOL Pref_ElemQualTetDetJ;
    __declspec(property(get=GetPref_ElemQualHexAspectRatio,put=PutPref_ElemQualHexAspectRatio))
    VARIANT_BOOL Pref_ElemQualHexAspectRatio;
    __declspec(property(get=GetPref_ElemQualHexEPLR,put=PutPref_ElemQualHexEPLR))
    VARIANT_BOOL Pref_ElemQualHexEPLR;
    __declspec(property(get=GetPref_ElemQualHexDetJ,put=PutPref_ElemQualHexDetJ))
    VARIANT_BOOL Pref_ElemQualHexDetJ;
    __declspec(property(get=GetPref_ElemQualHexWarp,put=PutPref_ElemQualHexWarp))
    VARIANT_BOOL Pref_ElemQualHexWarp;
    __declspec(property(get=GetPref_ElemQualPenAspectRatio,put=PutPref_ElemQualPenAspectRatio))
    VARIANT_BOOL Pref_ElemQualPenAspectRatio;
    __declspec(property(get=GetPref_ElemQualPenEPLR,put=PutPref_ElemQualPenEPLR))
    VARIANT_BOOL Pref_ElemQualPenEPLR;
    __declspec(property(get=GetPref_ElemQualPenDetJ,put=PutPref_ElemQualPenDetJ))
    VARIANT_BOOL Pref_ElemQualPenDetJ;
    __declspec(property(get=GetPref_ElemQualPenWarp,put=PutPref_ElemQualPenWarp))
    VARIANT_BOOL Pref_ElemQualPenWarp;
    __declspec(property(get=GetPref_ElemQualPyrAspectRatio,put=PutPref_ElemQualPyrAspectRatio))
    VARIANT_BOOL Pref_ElemQualPyrAspectRatio;
    __declspec(property(get=GetPref_ElemQualPyrEPLR,put=PutPref_ElemQualPyrEPLR))
    VARIANT_BOOL Pref_ElemQualPyrEPLR;
    __declspec(property(get=GetPref_ElemQualPyrWarp,put=PutPref_ElemQualPyrWarp))
    VARIANT_BOOL Pref_ElemQualPyrWarp;
    __declspec(property(get=GetPref_ElemQualPyrDetJ,put=PutPref_ElemQualPyrDetJ))
    VARIANT_BOOL Pref_ElemQualPyrDetJ;
    __declspec(property(get=GetPref_ElemQualQuadSkewVal,put=PutPref_ElemQualQuadSkewVal))
    double Pref_ElemQualQuadSkewVal;
    __declspec(property(get=GetPref_ElemQualQuadTaperVal,put=PutPref_ElemQualQuadTaperVal))
    double Pref_ElemQualQuadTaperVal;
    __declspec(property(get=GetPref_ElemQualQuadWarpVal,put=PutPref_ElemQualQuadWarpVal))
    double Pref_ElemQualQuadWarpVal;
    __declspec(property(get=GetPref_ElemQualQuadIAMinVal,put=PutPref_ElemQualQuadIAMinVal))
    double Pref_ElemQualQuadIAMinVal;
    __declspec(property(get=GetPref_ElemQualQuadIAMaxVal,put=PutPref_ElemQualQuadIAMaxVal))
    double Pref_ElemQualQuadIAMaxVal;
    __declspec(property(get=GetPref_ElemQualTriaSkewVal,put=PutPref_ElemQualTriaSkewVal))
    double Pref_ElemQualTriaSkewVal;
    __declspec(property(get=GetPref_ElemQualTriaIAMaxVal,put=PutPref_ElemQualTriaIAMaxVal))
    double Pref_ElemQualTriaIAMaxVal;
    __declspec(property(get=GetPref_ElemQualTetAspectRatioVal,put=PutPref_ElemQualTetAspectRatioVal))
    double Pref_ElemQualTetAspectRatioVal;
    __declspec(property(get=GetPref_ElemQualTetEPLRVal,put=PutPref_ElemQualTetEPLRVal))
    double Pref_ElemQualTetEPLRVal;
    __declspec(property(get=GetPref_ElemQualTetDetJVal,put=PutPref_ElemQualTetDetJVal))
    double Pref_ElemQualTetDetJVal;
    __declspec(property(get=GetPref_ElemQualHexAspectRatioVal,put=PutPref_ElemQualHexAspectRatioVal))
    double Pref_ElemQualHexAspectRatioVal;
    __declspec(property(get=GetPref_ElemQualHexEPLRVal,put=PutPref_ElemQualHexEPLRVal))
    double Pref_ElemQualHexEPLRVal;
    __declspec(property(get=GetPref_ElemQualHexDetJVal,put=PutPref_ElemQualHexDetJVal))
    double Pref_ElemQualHexDetJVal;
    __declspec(property(get=GetPref_ElemQualHexWarpVal,put=PutPref_ElemQualHexWarpVal))
    double Pref_ElemQualHexWarpVal;
    __declspec(property(get=GetPref_ElemQualPenAspectRatioVal,put=PutPref_ElemQualPenAspectRatioVal))
    double Pref_ElemQualPenAspectRatioVal;
    __declspec(property(get=GetPref_ElemQualPenEPLRVal,put=PutPref_ElemQualPenEPLRVal))
    double Pref_ElemQualPenEPLRVal;
    __declspec(property(get=GetPref_ElemQualPenDetJVal,put=PutPref_ElemQualPenDetJVal))
    double Pref_ElemQualPenDetJVal;
    __declspec(property(get=GetPref_ElemQualPenWarpVal,put=PutPref_ElemQualPenWarpVal))
    double Pref_ElemQualPenWarpVal;
    __declspec(property(get=GetPref_ElemQualPyrAspectRatioVal,put=PutPref_ElemQualPyrAspectRatioVal))
    double Pref_ElemQualPyrAspectRatioVal;
    __declspec(property(get=GetPref_ElemQualPyrEPLRVal,put=PutPref_ElemQualPyrEPLRVal))
    double Pref_ElemQualPyrEPLRVal;
    __declspec(property(get=GetPref_ElemQualPyrWarpVal,put=PutPref_ElemQualPyrWarpVal))
    double Pref_ElemQualPyrWarpVal;
    __declspec(property(get=GetPref_ElemQualPyrDetJVal,put=PutPref_ElemQualPyrDetJVal))
    double Pref_ElemQualPyrDetJVal;
    __declspec(property(get=GetPref_UserToolsPath,put=PutPref_UserToolsPath))
    _bstr_t Pref_UserToolsPath;
    __declspec(property(get=GetPref_NonmanifoldBooleans,put=PutPref_NonmanifoldBooleans))
    VARIANT_BOOL Pref_NonmanifoldBooleans;
    __declspec(property(get=GetPref_RepeatCreate,put=PutPref_RepeatCreate))
    VARIANT_BOOL Pref_RepeatCreate;
    __declspec(property(get=GetPref_ZoomAroundCursor,put=PutPref_ZoomAroundCursor))
    VARIANT_BOOL Pref_ZoomAroundCursor;
    __declspec(property(get=GetPref_UseSubcaseIdForOutput,put=PutPref_UseSubcaseIdForOutput))
    VARIANT_BOOL Pref_UseSubcaseIdForOutput;
    __declspec(property(get=GetPref_AutoConvertOdb,put=PutPref_AutoConvertOdb))
    VARIANT_BOOL Pref_AutoConvertOdb;
    __declspec(property(get=GetPref_RenderFastPickVisible,put=PutPref_RenderFastPickVisible))
    VARIANT_BOOL Pref_RenderFastPickVisible;
    __declspec(property(get=GetvPref_FBDefContributions,put=PutvPref_FBDefContributions))
    _variant_t vPref_FBDefContributions;
    __declspec(property(get=GetPref_FBDefDispMode,put=PutPref_FBDefDispMode))
    enum zFbdDisplayMode Pref_FBDefDispMode;
    __declspec(property(get=GetvPref_FBDefNodalVectorMode,put=PutvPref_FBDefNodalVectorMode))
    _variant_t vPref_FBDefNodalVectorMode;
    __declspec(property(get=GetvPref_FBDefTotalVectorMode,put=PutvPref_FBDefTotalVectorMode))
    _variant_t vPref_FBDefTotalVectorMode;
    __declspec(property(get=GetvPref_FBDefComponents,put=PutvPref_FBDefComponents))
    _variant_t vPref_FBDefComponents;
    __declspec(property(get=GetPref_ElemQualQuadAR,put=PutPref_ElemQualQuadAR))
    VARIANT_BOOL Pref_ElemQualQuadAR;
    __declspec(property(get=GetPref_ElemQualTriaAR,put=PutPref_ElemQualTriaAR))
    VARIANT_BOOL Pref_ElemQualTriaAR;
    __declspec(property(get=GetPref_ElemQualTriaEPLR,put=PutPref_ElemQualTriaEPLR))
    VARIANT_BOOL Pref_ElemQualTriaEPLR;
    __declspec(property(get=GetPref_ElemQualQuadARVal,put=PutPref_ElemQualQuadARVal))
    double Pref_ElemQualQuadARVal;
    __declspec(property(get=GetPref_ElemQualTriaARVal,put=PutPref_ElemQualTriaARVal))
    double Pref_ElemQualTriaARVal;
    __declspec(property(get=GetPref_ElemQualTriaEPLRVal,put=PutPref_ElemQualTriaEPLRVal))
    double Pref_ElemQualTriaEPLRVal;
    __declspec(property(get=GetPref_ResetNextID,put=PutPref_ResetNextID))
    VARIANT_BOOL Pref_ResetNextID;
    __declspec(property(get=GetPref_SolNXNastProgram,put=PutPref_SolNXNastProgram))
    _bstr_t Pref_SolNXNastProgram;
    __declspec(property(get=GetPref_SolMSCNastProgram,put=PutPref_SolMSCNastProgram))
    _bstr_t Pref_SolMSCNastProgram;
    __declspec(property(get=GetPref_SolNEINastProgram,put=PutPref_SolNEINastProgram))
    _bstr_t Pref_SolNEINastProgram;
    __declspec(property(get=GetPref_SolAnsysProgram,put=PutPref_SolAnsysProgram))
    _bstr_t Pref_SolAnsysProgram;
    __declspec(property(get=GetPref_SolAbaqusProgram,put=PutPref_SolAbaqusProgram))
    _bstr_t Pref_SolAbaqusProgram;
    __declspec(property(get=GetPref_SolLSDynaProgram,put=PutPref_SolLSDynaProgram))
    _bstr_t Pref_SolLSDynaProgram;
    __declspec(property(get=GetPref_SolNXNastCmd,put=PutPref_SolNXNastCmd))
    _bstr_t Pref_SolNXNastCmd;
    __declspec(property(get=GetPref_SolMSCNastCmd,put=PutPref_SolMSCNastCmd))
    _bstr_t Pref_SolMSCNastCmd;
    __declspec(property(get=GetPref_SolNEINastCmd,put=PutPref_SolNEINastCmd))
    _bstr_t Pref_SolNEINastCmd;
    __declspec(property(get=GetPref_SolAnsysCmd,put=PutPref_SolAnsysCmd))
    _bstr_t Pref_SolAnsysCmd;
    __declspec(property(get=GetPref_SolAbaqusCmd,put=PutPref_SolAbaqusCmd))
    _bstr_t Pref_SolAbaqusCmd;
    __declspec(property(get=GetPref_SolLSDynaCmd,put=PutPref_SolLSDynaCmd))
    _bstr_t Pref_SolLSDynaCmd;
    __declspec(property(get=GetPref_SolEchoCmd,put=PutPref_SolEchoCmd))
    VARIANT_BOOL Pref_SolEchoCmd;
    __declspec(property(get=GetPref_NasResTrackRevsion,put=PutPref_NasResTrackRevsion))
    VARIANT_BOOL Pref_NasResTrackRevsion;
    __declspec(property(get=GetPref_RotateAroundCursor,put=PutPref_RotateAroundCursor))
    VARIANT_BOOL Pref_RotateAroundCursor;
    __declspec(property(get=GetPref_ElemQualTetEPIA,put=PutPref_ElemQualTetEPIA))
    VARIANT_BOOL Pref_ElemQualTetEPIA;
    __declspec(property(get=GetPref_ElemQualHexEPIA,put=PutPref_ElemQualHexEPIA))
    VARIANT_BOOL Pref_ElemQualHexEPIA;
    __declspec(property(get=GetPref_ElemQualPenEPIA,put=PutPref_ElemQualPenEPIA))
    VARIANT_BOOL Pref_ElemQualPenEPIA;
    __declspec(property(get=GetPref_ElemQualPyrEPIA,put=PutPref_ElemQualPyrEPIA))
    VARIANT_BOOL Pref_ElemQualPyrEPIA;
    __declspec(property(get=GetPref_ElemQualTetEPIAVal,put=PutPref_ElemQualTetEPIAVal))
    double Pref_ElemQualTetEPIAVal;
    __declspec(property(get=GetPref_ElemQualHexEPIAVal,put=PutPref_ElemQualHexEPIAVal))
    double Pref_ElemQualHexEPIAVal;
    __declspec(property(get=GetPref_ElemQualPenEPIAVal,put=PutPref_ElemQualPenEPIAVal))
    double Pref_ElemQualPenEPIAVal;
    __declspec(property(get=GetPref_ElemQualPyrEPIAVal,put=PutPref_ElemQualPyrEPIAVal))
    double Pref_ElemQualPyrEPIAVal;
    __declspec(property(get=GetInfo_ViewShowAutoscale,put=PutInfo_ViewShowAutoscale))
    VARIANT_BOOL Info_ViewShowAutoscale;
    __declspec(property(get=GetPref_ShowAutoscale,put=PutPref_ShowAutoscale))
    VARIANT_BOOL Pref_ShowAutoscale;
    __declspec(property(get=GetPref_SynchronizedRotation,put=PutPref_SynchronizedRotation))
    VARIANT_BOOL Pref_SynchronizedRotation;
    __declspec(property(get=GetInfo_FreebodyReverse,put=PutInfo_FreebodyReverse))
    VARIANT_BOOL Info_FreebodyReverse;
    __declspec(property(get=GetPref_DefaultFreebodyReverse,put=PutPref_DefaultFreebodyReverse))
    VARIANT_BOOL Pref_DefaultFreebodyReverse;
    __declspec(property(get=GetUndoGrayed,put=PutUndoGrayed))
    VARIANT_BOOL UndoGrayed;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetPref_AngleDimetric (
        int nVectorIndex );
    void PutPref_AngleDimetric (
        int nVectorIndex,
        double _arg2 );
    double GetPref_AngleIsometric (
        int nVectorIndex );
    void PutPref_AngleIsometric (
        int nVectorIndex,
        double _arg2 );
    double GetPref_AngleTrimetric (
        int nVectorIndex );
    void PutPref_AngleTrimetric (
        int nVectorIndex,
        double _arg2 );
    VARIANT_BOOL GetPref_RenderRotate (
        int nVectorIndex );
    void PutPref_RenderRotate (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetInfo_PermBC (
        int nVectorIndex );
    void PutInfo_PermBC (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetInfo_WorkplaneRuler (
        int nVectorIndex );
    void PutInfo_WorkplaneRuler (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    int GetInfo_MaxID (
        enum zDataType nVectorIndex );
    void PutInfo_MaxID (
        enum zDataType nVectorIndex,
        int _arg2 );
    int GetInfo_MinID (
        enum zDataType nVectorIndex );
    void PutInfo_MinID (
        enum zDataType nVectorIndex,
        int _arg2 );
    int GetInfo_Count (
        enum zDataType nVectorIndex );
    void PutInfo_Count (
        enum zDataType nVectorIndex,
        int _arg2 );
    int GetInfo_ElemFormulation1 (
        int nVectorIndex );
    void PutInfo_ElemFormulation1 (
        int nVectorIndex,
        int _arg2 );
    int GetInfo_ElemFormulation2 (
        int nVectorIndex );
    void PutInfo_ElemFormulation2 (
        int nVectorIndex,
        int _arg2 );
    double GetInfo_WorkplaneOrigin (
        int nVectorIndex );
    void PutInfo_WorkplaneOrigin (
        int nVectorIndex,
        double _arg2 );
    double GetInfo_WorkplaneX (
        int nVectorIndex );
    void PutInfo_WorkplaneX (
        int nVectorIndex,
        double _arg2 );
    double GetInfo_WorkplaneY (
        int nVectorIndex );
    void PutInfo_WorkplaneY (
        int nVectorIndex,
        double _arg2 );
    double GetInfo_WorkplaneZ (
        int nVectorIndex );
    void PutInfo_WorkplaneZ (
        int nVectorIndex,
        double _arg2 );
    double GetInfo_WorkplanePrevOrigin (
        int nVectorIndex );
    void PutInfo_WorkplanePrevOrigin (
        int nVectorIndex,
        double _arg2 );
    double GetInfo_WorkplanePrevX (
        int nVectorIndex );
    void PutInfo_WorkplanePrevX (
        int nVectorIndex,
        double _arg2 );
    double GetInfo_WorkplanePrevY (
        int nVectorIndex );
    void PutInfo_WorkplanePrevY (
        int nVectorIndex,
        double _arg2 );
    double GetInfo_WorkplanePrevZ (
        int nVectorIndex );
    void PutInfo_WorkplanePrevZ (
        int nVectorIndex,
        double _arg2 );
    double GetInfo_SnapSpacing (
        int nVectorIndex );
    void PutInfo_SnapSpacing (
        int nVectorIndex,
        double _arg2 );
    double GetInfo_WorkplaneSizeX (
        int nVectorIndex );
    void PutInfo_WorkplaneSizeX (
        int nVectorIndex,
        double _arg2 );
    double GetInfo_WorkplaneSizeY (
        int nVectorIndex );
    void PutInfo_WorkplaneSizeY (
        int nVectorIndex,
        double _arg2 );
    double GetInfo_MatlAngleVec (
        int nVectorIndex );
    void PutInfo_MatlAngleVec (
        int nVectorIndex,
        double _arg2 );
    int GetTool_CursorXYZ (
        int nVectorIndex );
    void PutTool_CursorXYZ (
        int nVectorIndex,
        int _arg2 );
    double GetInfo_ModelSizeX (
        int nVectorIndex );
    void PutInfo_ModelSizeX (
        int nVectorIndex,
        double _arg2 );
    double GetInfo_ModelSizeY (
        int nVectorIndex );
    void PutInfo_ModelSizeY (
        int nVectorIndex,
        double _arg2 );
    double GetInfo_ModelSizeZ (
        int nVectorIndex );
    void PutInfo_ModelSizeZ (
        int nVectorIndex,
        double _arg2 );
    enum zColor GetPref_EntityColor (
        int nVectorIndex );
    void PutPref_EntityColor (
        int nVectorIndex,
        enum zColor _arg2 );
    int GetInfo_Increment (
        enum zDataType nVectorIndex );
    void PutInfo_Increment (
        enum zDataType nVectorIndex,
        int _arg2 );
    int GetInfo_NextID (
        enum zDataType nVectorIndex );
    void PutInfo_NextID (
        enum zDataType nVectorIndex,
        int _arg2 );
    int GetInfo_ActiveID (
        enum zDataType nVectorIndex );
    void PutInfo_ActiveID (
        enum zDataType nVectorIndex,
        int _arg2 );
    int GetInfo_ActiveType (
        enum zDataType nVectorIndex );
    void PutInfo_ActiveType (
        enum zDataType nVectorIndex,
        int _arg2 );
    enum zColor GetInfo_Color (
        enum zDataType nVectorIndex );
    void PutInfo_Color (
        enum zDataType nVectorIndex,
        enum zColor _arg2 );
    int GetInfo_SurfDivisionsLinear (
        int nVectorIndex );
    void PutInfo_SurfDivisionsLinear (
        int nVectorIndex,
        int _arg2 );
    int GetInfo_SurfDivisionsCurved (
        int nVectorIndex );
    void PutInfo_SurfDivisionsCurved (
        int nVectorIndex,
        int _arg2 );
    VARIANT_BOOL GetPref_NasQstOn (
        int nVectorIndex );
    void PutPref_NasQstOn (
        int nVectorIndex,
        VARIANT_BOOL _arg2 );
    int GetPref_NasQstVal (
        int nVectorIndex );
    void PutPref_NasQstVal (
        int nVectorIndex,
        int _arg2 );
    double GetPref_SpaceballFactors (
        int nVectorIndex );
    void PutPref_SpaceballFactors (
        int nVectorIndex,
        double _arg2 );
    unsigned char GetPref_FBDefContributions (
        enum zFbdContribution nVectorIndex );
    void PutPref_FBDefContributions (
        enum zFbdContribution nVectorIndex,
        unsigned char _arg2 );
    enum zFbdVecMode GetPref_FBDefNodalVectorMode (
        int nVectorIndex );
    void PutPref_FBDefNodalVectorMode (
        int nVectorIndex,
        enum zFbdVecMode _arg2 );
    enum zFbdVecMode GetPref_FBDefTotalVectorMode (
        int nVectorIndex );
    void PutPref_FBDefTotalVectorMode (
        int nVectorIndex,
        enum zFbdVecMode _arg2 );
    unsigned char GetPref_FBDefComponents (
        enum zFbdComponent nVectorIndex );
    void PutPref_FBDefComponents (
        enum zFbdComponent nVectorIndex,
        unsigned char _arg2 );
    enum zReturnCode feUnlockApiOnly (
        int nCode );
    enum zReturnCode feAppBringToTop (
        VARIANT_BOOL toTop,
        int underWindow );
    enum zReturnCode feAppPosition (
        VARIANT_BOOL move,
        VARIANT_BOOL Size,
        double x,
        double y,
        double cx,
        double cy );
    enum zReturnCode feAppShowWindow (
        VARIANT_BOOL maximize );
    enum zReturnCode feAppStatusRedraw ( );
    enum zReturnCode feAppStatusShow (
        VARIANT_BOOL Enable,
        int max_status );
    enum zReturnCode feAppStatusUpdate (
        int current_status );
    enum zReturnCode feAppRegisterAddIn (
        VARIANT_BOOL regster,
        int windowID,
        int messageID,
        VARIANT_BOOL tile,
        int location );
    enum zReturnCode feAppMessage (
        enum zMessageColor color,
        _bstr_t message );
    int feAppLock ( );
    int feAppUnlock ( );
    enum zReturnCode feFileNew ( );
    enum zReturnCode feFileOpen (
        VARIANT_BOOL useDlg,
        _bstr_t fName );
    enum zReturnCode feFileSaveAs (
        VARIANT_BOOL useDlg,
        _bstr_t fName );
    enum zReturnCode feFileSave (
        VARIANT_BOOL useDlg );
    enum zReturnCode feFileExit ( );
    enum zReturnCode feFileTimedSave (
        VARIANT_BOOL useDlg,
        VARIANT_BOOL saving,
        VARIANT_BOOL notify,
        int Interval,
        int commands );
    enum zReturnCode feFileReadDxf (
        VARIANT_BOOL useDlg,
        _bstr_t fName,
        VARIANT_BOOL read_TEXT,
        VARIANT_BOOL read_3DFACE,
        VARIANT_BOOL read_BLOCKS,
        VARIANT_BOOL read_POLYELEM,
        VARIANT_BOOL read_TRACE_boundary,
        VARIANT_BOOL read_TRACE_centerline,
        VARIANT_BOOL read_LAYER,
        int first_layer,
        VARIANT_BOOL merge_points,
        double merge_distance );
    enum zReturnCode feFileReadAcisOpt (
        VARIANT_BOOL useDlg,
        _bstr_t fName,
        _bstr_t title,
        int layer,
        enum zColor color,
        VARIANT_BOOL increment_layer,
        VARIANT_BOOL increment_color,
        VARIANT_BOOL assign_color,
        VARIANT_BOOL convert_to_splines,
        VARIANT_BOOL convert_format,
        VARIANT_BOOL clean,
        VARIANT_BOOL heal,
        VARIANT_BOOL check,
        VARIANT_BOOL stringent,
        VARIANT_BOOL delete_invalid,
        VARIANT_BOOL faces,
        double Scale );
    enum zReturnCode feFileReadAcis (
        _bstr_t fName );
    enum zReturnCode feFileReadParasolidOpt (
        VARIANT_BOOL useDlg,
        _bstr_t fName,
        _bstr_t title,
        int layer,
        enum zColor color,
        VARIANT_BOOL increment_layer,
        VARIANT_BOOL increment_color,
        VARIANT_BOOL assign_color,
        VARIANT_BOOL convert_format,
        VARIANT_BOOL clean,
        VARIANT_BOOL heal,
        VARIANT_BOOL check,
        VARIANT_BOOL stringent,
        VARIANT_BOOL delete_invalid,
        VARIANT_BOOL faces,
        double Scale );
    enum zReturnCode feFileReadParasolid (
        _bstr_t fName );
    enum zReturnCode feFileReadStep (
        _bstr_t fName );
    enum zReturnCode feFileReadCatia (
        VARIANT_BOOL useDlg,
        _bstr_t fName,
        VARIANT_BOOL rdAnalytical,
        VARIANT_BOOL rdTopology,
        VARIANT_BOOL rdCurves,
        VARIANT_BOOL stitch,
        VARIANT_BOOL heal );
    enum zReturnCode feFileReadUg (
        VARIANT_BOOL useDlg,
        _bstr_t fName,
        VARIANT_BOOL rdBlanked,
        VARIANT_BOOL rdLayers );
    enum zReturnCode feFileReadCatiaV5 (
        VARIANT_BOOL useDlg,
        _bstr_t fName,
        _bstr_t fPath,
        VARIANT_BOOL rdNoShow,
        VARIANT_BOOL rdInactiveLayers,
        VARIANT_BOOL rdPoints,
        VARIANT_BOOL rdCurves,
        VARIANT_BOOL rdSurfaces,
        VARIANT_BOOL rdBodies,
        VARIANT_BOOL simplify );
    enum zReturnCode feFileReadProe (
        _bstr_t fName );
    enum zReturnCode feFileReadSolidEdge (
        _bstr_t fName );
    enum zReturnCode feFileReadIdeas (
        _bstr_t fName );
    enum zReturnCode feFileReadStl (
        VARIANT_BOOL useDlg,
        _bstr_t fName,
        VARIANT_BOOL skip_short_edges,
        VARIANT_BOOL merge_nodes,
        VARIANT_BOOL close_gaps,
        VARIANT_BOOL PATRAN_file,
        double min_distance );
    enum zReturnCode feFileReadIgesAdv (
        VARIANT_BOOL useDlg,
        _bstr_t fName,
        VARIANT_BOOL read_curves,
        VARIANT_BOOL read_untrimmed_surfaces,
        VARIANT_BOOL read_trimmed_surfaces,
        VARIANT_BOOL read_solids,
        int flavor,
        int trim_curve_option );
    enum zReturnCode feFileReadIges (
        VARIANT_BOOL useDlg,
        _bstr_t fName,
        VARIANT_BOOL merge_points,
        VARIANT_BOOL read_LAYER,
        VARIANT_BOOL read_geom_only,
        VARIANT_BOOL read_surface_data,
        int trim_preference,
        double min_resolution );
    enum zReturnCode feFileWriteParasolid (
        VARIANT_BOOL useDlg,
        _bstr_t fName,
        double version,
        int solidSET );
    enum zReturnCode feFileWriteAcis (
        VARIANT_BOOL useDlg,
        _bstr_t fName,
        double version,
        int solidSET );
    enum zReturnCode feFileWriteStl (
        _bstr_t fName,
        int elemSET );
    enum zReturnCode feFileWriteVrml (
        _bstr_t fName,
        double version,
        VARIANT_BOOL write_solid,
        VARIANT_BOOL single_color,
        VARIANT_BOOL write_deformed,
        VARIANT_BOOL write_contour,
        VARIANT_BOOL write_background,
        enum zColor background_color,
        enum zColor color,
        int solidSET );
    enum zReturnCode feFileWriteStep (
        _bstr_t fName,
        int solidSET );
    enum zReturnCode feFileWriteIges (
        _bstr_t fName,
        VARIANT_BOOL spline_curves,
        VARIANT_BOOL spline_surfaces,
        VARIANT_BOOL bounded_surfaces,
        int customization,
        int surface_options,
        int export_as,
        int solidSET );
    enum zReturnCode feFileReadNastran (
        int brand,
        _bstr_t fName );
    enum zReturnCode feFileReadAnsys (
        int brand,
        _bstr_t fName );
    enum zReturnCode feFileReadAbaqus (
        int brand,
        _bstr_t fName );
    enum zReturnCode feFileReadDyna (
        int brand,
        _bstr_t fName );
    enum zReturnCode feFileReadMarc (
        int brand,
        _bstr_t fName );
    enum zReturnCode feFileWriteNastran (
        int brand,
        _bstr_t fName );
    enum zReturnCode feFileWriteAnsys (
        int brand,
        _bstr_t fName );
    enum zReturnCode feFileWriteAbaqus (
        int brand,
        _bstr_t fName );
    enum zReturnCode feFileWriteDyna (
        int brand,
        _bstr_t fName );
    enum zReturnCode feFileWriteMarc (
        int brand,
        _bstr_t fName );
    enum zReturnCode feFileWriteNeutral (
        int brand,
        _bstr_t fName,
        VARIANT_BOOL write_geometry_model,
        VARIANT_BOOL write_analysis_model,
        VARIANT_BOOL write_output,
        VARIANT_BOOL write_addl_info,
        VARIANT_BOOL expand_geometric,
        VARIANT_BOOL minimize_size,
        int digits,
        double version,
        int groupID );
    enum zReturnCode feFileReadNeutral (
        int brand,
        _bstr_t fName,
        VARIANT_BOOL read_geometry,
        VARIANT_BOOL read_model,
        VARIANT_BOOL read_output,
        VARIANT_BOOL status_messages,
        int offsetID );
    enum zReturnCode feFileReadNastranResults (
        int brand,
        _bstr_t fName );
    enum zReturnCode feFileReadAnsysResults (
        int brand,
        _bstr_t fName );
    enum zReturnCode feFileReadAbaqusResults (
        int brand,
        _bstr_t fName );
    enum zReturnCode feFileReadDynaResults (
        int brand,
        _bstr_t fName );
    enum zReturnCode feFileReadMarcResults (
        int brand,
        _bstr_t fName );
    enum zReturnCode feFilePageSetupSave ( );
    enum zReturnCode feFilePageSetupReset ( );
    enum zReturnCode feFilePrint (
        VARIANT_BOOL useDlg,
        VARIANT_BOOL asBitmap,
        enum zPrintSource source,
        _bstr_t fromFile,
        _bstr_t toFile );
    enum zReturnCode feFilePictureCopy ( );
    enum zReturnCode feFilePictureSave (
        VARIANT_BOOL useDlg,
        VARIANT_BOOL saveDesktop,
        enum zPictFormat format,
        _bstr_t fName );
    enum zReturnCode feFilePictureReplay (
        _bstr_t fName );
    enum zReturnCode feFileMessageCopy ( );
    enum zReturnCode feFileMessageSave (
        VARIANT_BOOL useDlg,
        _bstr_t fName );
    enum zReturnCode feFileMessageSelect (
        int firstLine,
        int lastLine );
    enum zReturnCode feFileProgramRun (
        VARIANT_BOOL useDlg,
        VARIANT_BOOL init,
        VARIANT_BOOL isFile,
        _bstr_t buff );
    enum zReturnCode feFileMessageLineNumber (
        int * CurrentLine );
    enum zReturnCode feFilePictureSave2 (
        VARIANT_BOOL useDlg,
        enum zPictRegion saveRegion,
        enum zPictFormat format,
        _bstr_t fName );
    enum zReturnCode feFileRebuild (
        VARIANT_BOOL useDlg,
        VARIANT_BOOL fullRebuild );
    enum zReturnCode feFilePreferencesSave ( );
    enum zReturnCode feFilePreferencesReset ( );
    enum zReturnCode feFileGetName (
        _bstr_t title,
        _bstr_t filterName,
        _bstr_t filterStr,
        VARIANT_BOOL openForRead,
        BSTR * fName );
    enum zReturnCode feFileExecute (
        _bstr_t cmdline,
        VARIANT_BOOL waitForCompletion );
    enum zReturnCode feNotesGet (
        int noteSET,
        BSTR * notes );
    enum zReturnCode feNotesPut (
        int noteSET,
        VARIANT_BOOL clear,
        _bstr_t notes );
    enum zReturnCode feFilePictureCopy2 (
        enum zPictRegion saveRegion );
    enum zReturnCode feToolUnitConvertFactors (
        const _variant_t & baseMult,
        const _variant_t & baseAdd,
        VARIANT * factorMult,
        VARIANT * factorAdd );
    enum zReturnCode feToolUnitConvert (
        const _variant_t & baseMult,
        const _variant_t & baseAdd,
        const _variant_t & factorMult,
        const _variant_t & factorAdd );
    enum zReturnCode feVarPut (
        _bstr_t varname,
        VARIANT_BOOL evalEqn,
        VARIANT_BOOL setConst,
        double varvalue,
        _bstr_t vareqn );
    enum zReturnCode feVarGet (
        _bstr_t varname,
        double * varvalue,
        BSTR * vareqn );
    enum zReturnCode feVarEval (
        _bstr_t vareqn,
        double * varvalue );
    enum zReturnCode feLayerPut (
        int layID,
        enum zColor layColor,
        _bstr_t layTitle );
    enum zReturnCode feLayerGet (
        int layID,
        enum zColor * layColor,
        BSTR * layTitle );
    enum zReturnCode feTextPut (
        int textID,
        VARIANT_BOOL DrawPointer,
        VARIANT_BOOL DrawBorder,
        VARIANT_BOOL modelPos,
        int horzJust,
        int vertJust,
        int visView,
        int layer,
        int fontID,
        enum zColor BackColor,
        enum zColor bordColor,
        enum zColor textColor,
        const _variant_t & textLoc,
        const _variant_t & pointerLoc,
        _bstr_t tText );
    enum zReturnCode feTextGet (
        int textID,
        VARIANT_BOOL * DrawPointer,
        VARIANT_BOOL * DrawBorder,
        VARIANT_BOOL * modelPos,
        int * horzJust,
        int * vertJust,
        int * visView,
        int * layer,
        int * fontID,
        enum zColor * BackColor,
        enum zColor * bordColor,
        enum zColor * textColor,
        VARIANT * textLoc,
        VARIANT * pointerLoc,
        BSTR * text );
    enum zReturnCode feMeasureDistance (
        const _variant_t & p1,
        const _variant_t & p2,
        double * dist );
    enum zReturnCode feMeasureDistanceToPlane (
        const _variant_t & p1,
        const _variant_t & planePt,
        const _variant_t & planeNorm,
        double * dist );
    enum zReturnCode feMeasureDistanceBetweenLines (
        const _variant_t & pA1,
        const _variant_t & pA2,
        const _variant_t & pB1,
        const _variant_t & pB2,
        double * dist );
    enum zReturnCode feMeasureAngle (
        const _variant_t & center,
        const _variant_t & p1,
        const _variant_t & p2,
        double * angle );
    enum zReturnCode feMeasureCurve (
        int curveSET,
        double * totalLength );
    enum zReturnCode feMeasureSurfaceArea (
        int surfaceSET,
        double * totalArea );
    enum zReturnCode feMeasureSolidMassProp (
        int solidID,
        double * Area,
        double * volume,
        VARIANT * cg,
        VARIANT * Inertia );
    enum zReturnCode feMeasureMeshMassProp (
        int elemSET,
        int csysID,
        VARIANT_BOOL printResults,
        VARIANT_BOOL printDetails,
        double * len,
        double * Area,
        double * volume,
        double * structMass,
        double * nonstructMass,
        double * totalMass,
        VARIANT * structCG,
        VARIANT * nonstructCG,
        VARIANT * totalCG,
        VARIANT * Inertia,
        VARIANT * inertiaCG );
    enum zReturnCode feMeasureSurfSectionProp (
        int surfID,
        const _variant_t & vecBASE,
        const _variant_t & vecDIR,
        VARIANT * sectProp );
    enum zReturnCode feMeasureMeshSectionProp (
        int elemSET,
        const _variant_t & vecBASE,
        const _variant_t & vecDIR,
        VARIANT * sectProp );
    enum zReturnCode feCheckCoincidentNode (
        int keepSET,
        int mergeSET,
        double tolerance,
        VARIANT_BOOL merge,
        VARIANT_BOOL messages,
        int * coinCount,
        VARIANT * coinNodes );
    enum zReturnCode feCheckCoincidentPoint (
        int keepSET,
        int mergeSET,
        double tolerance,
        VARIANT_BOOL merge,
        VARIANT_BOOL messages,
        int * coinCount,
        VARIANT * coinPoints );
    enum zReturnCode feCheckCoincidentCurve (
        int curveSET,
        double tolerance );
    enum zReturnCode feCheckPlanarNodes (
        int nodeSET,
        VARIANT_BOOL messages,
        VARIANT_BOOL Project,
        double tolerance,
        VARIANT_BOOL askPlane,
        const _variant_t & planeBase,
        const _variant_t & planeNormal );
    enum zReturnCode feCheckCoincidentElem (
        int elemSET,
        VARIANT_BOOL chkTYPE,
        VARIANT_BOOL chkSHAPE,
        VARIANT_BOOL chkMASS,
        VARIANT_BOOL doLIST,
        VARIANT_BOOL makeGROUP1,
        VARIANT_BOOL makeGROUP2 );
    enum zReturnCode feCheckElemFixup (
        int elemSET );
    enum zReturnCode feCheckElemDistortion (
        int elemSET,
        VARIANT_BOOL doLIST,
        VARIANT_BOOL makeGROUP,
        VARIANT_BOOL chkASPECT,
        VARIANT_BOOL chkTAPER,
        VARIANT_BOOL chkANGLE,
        VARIANT_BOOL chkWARP,
        VARIANT_BOOL chkNasWARP,
        VARIANT_BOOL chkALTTAPER,
        VARIANT_BOOL chkTET,
        VARIANT_BOOL chkJDet,
        VARIANT_BOOL chkComb,
        double maxASPECT,
        double maxTAPER,
        double maxANGLE,
        double maxWARP,
        double maxNasWARP,
        double maxALTTAPER,
        double maxTET,
        double minJDet,
        double minComb );
    enum zReturnCode feGetElemDistortion (
        int elemID,
        double * valASPECT,
        double * valTAPER,
        double * valANGLE,
        double * valWARP,
        double * valNasWARP,
        double * valALTTAPER,
        double * valTET,
        double * valJDet,
        double * valComb );
    enum zReturnCode feCheckElemNormal (
        int elemSET,
        int csysID,
        VARIANT_BOOL doLIST,
        VARIANT_BOOL swapNORMAL,
        VARIANT_BOOL autonormal,
        const _variant_t & manNORMAL );
    enum zReturnCode feCheckConstraints (
        VARIANT_BOOL doPERM,
        VARIANT_BOOL doLIST,
        VARIANT * bcSUM,
        VARIANT * bcSEP );
    enum zReturnCode feCheckCoincidentLoads (
        int LoadSet,
        VARIANT_BOOL mergeLOADS );
    enum zReturnCode feCheckSumForces (
        VARIANT_BOOL expandGEOM,
        VARIANT_BOOL doLIST,
        VARIANT_BOOL useSETS,
        int nodeSET,
        int elemSET,
        const _variant_t & basePOINT,
        int csysID,
        VARIANT * summedFORCES );
    enum zReturnCode feCoordPick (
        _bstr_t dlgTITLE,
        VARIANT * xyz );
    enum zReturnCode feCoordFromWorkplane (
        const _variant_t & wpXYZ,
        VARIANT * xyz );
    enum zReturnCode feCoordToWorkplane (
        const _variant_t & xyz,
        VARIANT * wpXYZ );
    enum zReturnCode feCoordIntersectCurves (
        int cuID1,
        int cuID2,
        const _variant_t & nearXYZ,
        VARIANT * xyz );
    enum zReturnCode feCoordIntersectLines (
        VARIANT_BOOL infLine,
        const _variant_t & pA1,
        const _variant_t & pA2,
        const _variant_t & pB1,
        const _variant_t & pB2,
        VARIANT * pIntersect );
    enum zReturnCode feCoordOntoCurve (
        int cuID,
        const _variant_t & fromxyz,
        VARIANT * xyz );
    enum zReturnCode feCoordAlongCurve (
        int cuID,
        VARIANT_BOOL fromstart,
        double cuLENGTH,
        VARIANT * xyz );
    enum zReturnCode feCoordCurveMidpoint (
        int cuID,
        VARIANT * xyz );
    enum zReturnCode feCoordCurveCenter (
        int cuID,
        VARIANT * xyz );
    enum zReturnCode feCoordOntoSurface (
        int suID,
        const _variant_t & fromxyz,
        VARIANT * xyz );
    enum zReturnCode feCoordInSurface (
        int suID,
        const _variant_t & suXY,
        VARIANT * xyz );
    enum zReturnCode feCoordSurfaceIntersect (
        int cuID,
        int suID,
        const _variant_t & nearXYZ,
        VARIANT * xyz );
    enum zReturnCode feCoordOnPoint (
        int ptID,
        VARIANT * xyz );
    enum zReturnCode feCoordOnNode (
        int ndID,
        VARIANT * xyz );
    enum zReturnCode feCoordTransform (
        int fromCSYS,
        const _variant_t & fromxyz,
        int toCSYS,
        VARIANT * xyz );
    enum zReturnCode feCoordArrayTransform (
        int Count,
        int fromCSYS,
        int toCSYS,
        VARIANT * xyz );
    enum zReturnCode feCoordColinear (
        const _variant_t & xyz1,
        const _variant_t & xyz2,
        const _variant_t & xyz3,
        VARIANT_BOOL * isColinear );
    enum zReturnCode feCoordToDirCos (
        const _variant_t & origin,
        const _variant_t & xaxis,
        const _variant_t & xyplane,
        VARIANT * dircos );
    enum zReturnCode feCoordRotate (
        const _variant_t & xyz,
        double angle,
        const _variant_t & origin,
        const _variant_t & Axis,
        VARIANT * xyzROT );
    enum zReturnCode feCoordOntoPlane (
        const _variant_t & xyz,
        const _variant_t & projDir,
        const _variant_t & planePt,
        const _variant_t & planeNorm,
        VARIANT * xyzPlane );
    enum zReturnCode feCoordOntoLine (
        const _variant_t & xyz,
        const _variant_t & p1,
        const _variant_t & p2,
        VARIANT * xyzLine );
    enum zReturnCode feCoordPlaneIntersect (
        const _variant_t & baseA,
        const _variant_t & normA,
        const _variant_t & baseB,
        const _variant_t & normB,
        const _variant_t & baseC,
        const _variant_t & normC,
        VARIANT * baseV );
    enum zReturnCode feRotationTransform (
        int fromCSYS,
        const _variant_t & fromROT,
        int toCSYS,
        VARIANT * rot );
    enum zReturnCode feRotationToDirCos (
        const _variant_t & rot,
        VARIANT * dircos );
    enum zReturnCode feRotationFromDirCos (
        const _variant_t & dircos,
        VARIANT * rot );
    enum zReturnCode feVectorTransform (
        int fromCSYS,
        const _variant_t & baseXYZ,
        const _variant_t & fromxyz,
        int toCSYS,
        VARIANT * xyz );
    enum zReturnCode feVectorFromBeam (
        int elemID,
        const _variant_t & bmXYZ,
        VARIANT * xyz );
    enum zReturnCode feVectorToBeam (
        int elemID,
        const _variant_t & xyz,
        VARIANT * bmXYZ );
    enum zReturnCode feVectorLength (
        const _variant_t & xyz,
        double * vecLength );
    enum zReturnCode feVectorCrossProduct (
        const _variant_t & VecA,
        const _variant_t & VecB,
        VARIANT * vecAxB );
    enum zReturnCode feVectorDotProduct (
        const _variant_t & VecA,
        const _variant_t & VecB,
        double * dot );
    enum zReturnCode feVectorAngle (
        const _variant_t & VecA,
        const _variant_t & VecB,
        double * angle );
    enum zReturnCode feVectorAngleAxis (
        const _variant_t & VecA,
        const _variant_t & VecB,
        const _variant_t & vecAXIS,
        double * angle );
    enum zReturnCode feVectorUnit (
        const _variant_t & vecIN,
        VARIANT * vecOUT );
    enum zReturnCode feVectorPlaneIntersect (
        const _variant_t & baseA,
        const _variant_t & normA,
        const _variant_t & baseB,
        const _variant_t & normB,
        VARIANT * ptV,
        VARIANT * dirV );
    enum zReturnCode feVectorPick (
        _bstr_t dlgTITLE,
        VARIANT_BOOL unitVector,
        double * vecLength,
        VARIANT * vecBASE,
        VARIANT * vecDIR );
    enum zReturnCode feVectorAxis (
        int csysID,
        int Axis,
        VARIANT_BOOL positive,
        VARIANT * vecDIR );
    enum zReturnCode feVectorTangentToCurve (
        int cuID,
        const _variant_t & baseXYZ,
        VARIANT * vecDIR );
    enum zReturnCode feVectorNormalToSurface (
        int suID,
        const _variant_t & baseXYZ,
        VARIANT * vecDIR );
    enum zReturnCode feVectorNormalToView (
        int vuID,
        VARIANT * vecDIR );
    enum zReturnCode fePlanePick (
        _bstr_t dlgTITLE,
        VARIANT * plBase,
        VARIANT * plNormal,
        VARIANT * plAxis );
    enum zReturnCode fePlaneLocation (
        const _variant_t & p1,
        const _variant_t & p2,
        const _variant_t & p3,
        VARIANT * planeBase,
        VARIANT * planeNormal,
        VARIANT * planeX );
    enum zReturnCode fePlaneNodes (
        int n1,
        int n2,
        int n3,
        VARIANT * planeBase,
        VARIANT * planeNormal,
        VARIANT * planeX );
    enum zReturnCode fePlanePoints (
        int p1,
        int p2,
        int p3,
        VARIANT * planeBase,
        VARIANT * planeNormal,
        VARIANT * planeX );
    enum zReturnCode fePlaneBisect (
        const _variant_t & p1,
        const _variant_t & p2,
        const _variant_t & p3,
        VARIANT * planeBase,
        VARIANT * planeNormal,
        VARIANT * planeX );
    enum zReturnCode fePlaneCSys (
        const _variant_t & p1,
        int csysID,
        int planeID,
        VARIANT * planeBase,
        VARIANT * planeNormal,
        VARIANT * planeX );
    enum zReturnCode fePlaneSurfaceNormal (
        int surfID,
        int ptID1,
        int ptID2,
        VARIANT_BOOL reversed,
        VARIANT_BOOL align,
        double offset,
        VARIANT * planeBase,
        VARIANT * planeNormal,
        VARIANT * planeX );
    enum zReturnCode fePlaneViewAlign (
        int viewID,
        VARIANT_BOOL intoView,
        VARIANT * planeNormal,
        VARIANT * planeX );
    enum zReturnCode fePlaneCurveNormal (
        int cuID,
        VARIANT * planeBase,
        VARIANT * planeNormal,
        VARIANT * planeX );
    enum zReturnCode feGetReal (
        _bstr_t title,
        double lowerlimit,
        double upperlimit,
        double * value );
    enum zReturnCode feGetInt (
        _bstr_t title,
        int lowerlimit,
        int upperlimit,
        int * value );
    enum zReturnCode feViewRedraw (
        int vuID );
    enum zReturnCode feViewRegenerate (
        int vuID );
    enum zReturnCode feViewAllViews (
        VARIANT_BOOL on_off );
    enum zReturnCode feViewShow (
        enum zDataType dTYPE,
        int ID );
    enum zReturnCode feViewVisible (
        int vuID,
        VARIANT_BOOL Visible );
    enum zReturnCode feViewTile ( );
    enum zReturnCode feViewCascade ( );
    enum zReturnCode feGroupBoolean (
        int opperation,
        int grID1,
        int grID2,
        int grCreate,
        _bstr_t grTitle );
    enum zReturnCode feGroupGenerate (
        int elemSET,
        VARIANT_BOOL planer,
        int brkPropMatl,
        int brkLayer,
        enum zColor brkColor,
        double brkAngle,
        VARIANT_BOOL addLayers );
    enum zReturnCode feGroupGenSolid (
        int solidSET );
    enum zReturnCode feGroupGenProp (
        int elemSET );
    enum zReturnCode feGroupGenMatl (
        int elemSET );
    enum zReturnCode feGroupGenElemType (
        int elemSET );
    enum zReturnCode feGroupPeel (
        int elemSET,
        int peelLayers,
        VARIANT_BOOL keepPeel,
        VARIANT_BOOL keepCore );
    enum zReturnCode feDeleteAll (
        VARIANT_BOOL geometry,
        VARIANT_BOOL Mesh,
        VARIANT_BOOL Output,
        VARIANT_BOOL confirm );
    enum zReturnCode feDelete (
        enum zDataType entityTYPE,
        int entitySET );
    enum zReturnCode feDeleteOutput (
        int outputSetID,
        int vectorSET );
    enum zReturnCode feDeleteLoads (
        int loadSetID,
        enum zDataType entityTYPE,
        int entitySET,
        enum zLoadSelectType loadType );
    enum zReturnCode feDeleteConstraints (
        int bcSetID,
        enum zDataType entityTYPE,
        int entitySET,
        VARIANT_BOOL deleteBC,
        VARIANT_BOOL deleteBE );
    enum zReturnCode feLinePoints (
        VARIANT_BOOL ontoWorkplane,
        const _variant_t & p1,
        const _variant_t & p2,
        VARIANT_BOOL messages );
    enum zReturnCode feLineHorzVert (
        VARIANT_BOOL horizontal,
        const _variant_t & p1,
        double Length,
        VARIANT_BOOL messages );
    enum zReturnCode feLineAtAngle (
        double angle,
        int curveID,
        const _variant_t & p1,
        const _variant_t & p2,
        VARIANT_BOOL messages );
    enum zReturnCode feLineParallel (
        double offset,
        int curveID,
        const _variant_t & p1,
        VARIANT_BOOL messages );
    enum zReturnCode feLineMidline (
        int curve1,
        int curve2,
        VARIANT_BOOL messages );
    enum zReturnCode feLinePointTangent (
        int curveID,
        const _variant_t & p1,
        const _variant_t & p2,
        VARIANT_BOOL messages );
    enum zReturnCode feLine2Tangent (
        int curve1,
        int curve2,
        const _variant_t & p1,
        VARIANT_BOOL messages );
    enum zReturnCode feLineRectangle (
        const _variant_t & p1,
        const _variant_t & p2,
        VARIANT_BOOL messages );
    enum zReturnCode feLinePointIDs (
        int p1,
        int p2,
        VARIANT_BOOL messages );
    enum zReturnCode feArcCenterStartEnd (
        const _variant_t & center,
        const _variant_t & Start,
        const _variant_t & end,
        VARIANT_BOOL messages );
    enum zReturnCode feArcRadiusStartEnd (
        double radius,
        const _variant_t & Start,
        const _variant_t & end,
        VARIANT_BOOL messages );
    enum zReturnCode feArcAngleStartEnd (
        double angle,
        const _variant_t & Start,
        const _variant_t & end,
        VARIANT_BOOL messages );
    enum zReturnCode feArcAngleCenterStart (
        double angle,
        const _variant_t & center,
        const _variant_t & Start,
        VARIANT_BOOL messages );
    enum zReturnCode feArcChordCenterStart (
        double Length,
        const _variant_t & center,
        const _variant_t & Start,
        VARIANT_BOOL messages );
    enum zReturnCode feArcPoints (
        const _variant_t & Start,
        const _variant_t & mid,
        const _variant_t & end,
        VARIANT_BOOL messages );
    enum zReturnCode feArcCenterPoints (
        const _variant_t & center,
        const _variant_t & Start,
        const _variant_t & mid,
        const _variant_t & end,
        VARIANT_BOOL messages );
    enum zReturnCode feArcTangentStartEnd (
        const _variant_t & Tangent,
        const _variant_t & Start,
        const _variant_t & end,
        VARIANT_BOOL messages );
    enum zReturnCode feCircleRadius (
        const _variant_t & center,
        const _variant_t & Start,
        VARIANT_BOOL messages );
    enum zReturnCode feCircleDiameter (
        const _variant_t & Start,
        const _variant_t & dia,
        VARIANT_BOOL messages );
    enum zReturnCode feCircleCenter (
        double radius,
        const _variant_t & center,
        VARIANT_BOOL messages );
    enum zReturnCode feCircle2Point (
        double radius,
        const _variant_t & Start,
        const _variant_t & mid,
        VARIANT_BOOL messages );
    enum zReturnCode feCircleConcentric (
        double radius,
        int curveID,
        VARIANT_BOOL messages );
    enum zReturnCode feCircle3Point (
        const _variant_t & Start,
        const _variant_t & mid,
        const _variant_t & end,
        VARIANT_BOOL messages );
    enum zReturnCode feCircleCenterPoints (
        const _variant_t & center,
        const _variant_t & Start,
        const _variant_t & mid,
        VARIANT_BOOL messages );
    enum zReturnCode feCircleCenterTangent (
        int curveID,
        const _variant_t & center,
        VARIANT_BOOL messages );
    enum zReturnCode feCircleTangentTangent (
        int curve1,
        int curve2,
        double radius,
        const _variant_t & nearloc,
        VARIANT_BOOL messages );
    enum zReturnCode feSplinePoints (
        VARIANT_BOOL propject,
        VARIANT_BOOL controlpoints,
        int Count,
        const _variant_t & xyz,
        VARIANT_BOOL messages );
    enum zReturnCode feSplineTangent (
        const _variant_t & x1,
        const _variant_t & v1,
        const _variant_t & x2,
        const _variant_t & v2,
        VARIANT_BOOL messages );
    enum zReturnCode feSplineEllipse (
        const _variant_t & center,
        const _variant_t & Vector,
        double a,
        double b,
        VARIANT_BOOL messages );
    enum zReturnCode feSplineParabola (
        const _variant_t & center,
        const _variant_t & focus,
        const _variant_t & trim,
        VARIANT_BOOL messages );
    enum zReturnCode feSplineHyperbola (
        const _variant_t & center,
        const _variant_t & towardfocus,
        double angle,
        double height,
        const _variant_t & trim,
        VARIANT_BOOL messages );
    enum zReturnCode feCurveUpdateSurfaces (
        VARIANT_BOOL update,
        VARIANT_BOOL messages );
    enum zReturnCode feCurveIntersectSolids (
        int solid1,
        int solid2 );
    enum zReturnCode feCurveProjectOntoSolid (
        VARIANT_BOOL projectNormal,
        const _variant_t & along,
        int solidID,
        int curveSET,
        VARIANT_BOOL messages );
    enum zReturnCode feCurveParametricOnSurface (
        int surfID,
        VARIANT_BOOL uDir,
        const _variant_t & location,
        VARIANT_BOOL messages );
    enum zReturnCode feCurveSlice (
        int solidID,
        const _variant_t & planeBase,
        const _variant_t & planeNormal,
        const _variant_t & planeX );
    enum zReturnCode feCurveTrim (
        int curveID,
        int TrimID,
        const _variant_t & nearloc,
        VARIANT_BOOL extend );
    enum zReturnCode feCurveExtend (
        int curveID,
        const _variant_t & nearloc );
    enum zReturnCode feCurveBreak (
        int curveID,
        const _variant_t & nearloc );
    enum zReturnCode feCurveJoin (
        int curve1,
        int curve2,
        const _variant_t & nearloc,
        VARIANT_BOOL update1,
        VARIANT_BOOL update2 );
    enum zReturnCode feCurveFillet (
        double radius,
        int curve1,
        int curve2,
        const _variant_t & nearloc,
        VARIANT_BOOL update1,
        VARIANT_BOOL update2 );
    enum zReturnCode feCurveChamfer (
        double len1,
        double len2,
        int curve1,
        int curve2,
        const _variant_t & nearloc,
        VARIANT_BOOL update1,
        VARIANT_BOOL update2 );
    enum zReturnCode feBoundaryFromCurves (
        int curveSET );
    enum zReturnCode feBoundaryFromSurfaces (
        int surfaceSET );
    enum zReturnCode feBoundaryUpdateSurfaces (
        int boundaryID );
    enum zReturnCode feSurfaceCorners (
        VARIANT_BOOL fourCorners,
        const _variant_t & c1,
        const _variant_t & c2,
        const _variant_t & c3,
        const _variant_t & c4 );
    enum zReturnCode feSurfaceEdgeCurves (
        int curve1,
        int curve2,
        int curve3,
        int curve4 );
    enum zReturnCode feSurfaceAlignedCurves (
        int curveCOUNT,
        const _variant_t & curveID );
    enum zReturnCode feSurfaceRuled (
        int cu1,
        int cu2 );
    enum zReturnCode feSurfaceExtrude (
        int curveSET,
        double axisLEN,
        const _variant_t & axisVEC );
    enum zReturnCode feSurfaceRevolve (
        int curveSET,
        double axisANGLE,
        const _variant_t & axisBASE,
        const _variant_t & axisVEC );
    enum zReturnCode feSurfaceSweep (
        int curveSET,
        int pathSET );
    enum zReturnCode feSurfaceMidSingle (
        VARIANT_BOOL trim,
        int surfID1,
        int surfID2 );
    enum zReturnCode feSurfaceMidAuto (
        int surfSET,
        double thick );
    enum zReturnCode feSurfaceMidAttrib (
        int surfSET,
        int matlID );
    enum zReturnCode feSurfaceTrimToSolid (
        int sheetID,
        int solidID );
    enum zReturnCode feSurfaceTrimWithCurves (
        int surfID,
        int curveSET );
    enum zReturnCode feSolidPrimitive (
        int operation,
        int shape,
        VARIANT_BOOL positive,
        const _variant_t & origin,
        const _variant_t & Size,
        _bstr_t title );
    enum zReturnCode feSolidExtrude (
        int operation,
        int surfID,
        int dirmode,
        int depthMode,
        const _variant_t & dirVec,
        const _variant_t & depthVec );
    enum zReturnCode feSolidRevolve (
        int operation,
        int surfID,
        int dirmode,
        int angleMode,
        const _variant_t & axisBASE,
        const _variant_t & axisVEC,
        const _variant_t & angleVec );
    enum zReturnCode feSolidExplode (
        int solidSET );
    enum zReturnCode feSolidStitch (
        int surfaceSET,
        double tolerance );
    enum zReturnCode feSolidFillet (
        int curveSET,
        double radius );
    enum zReturnCode feSolidChamfer (
        int curveSET,
        double radius );
    enum zReturnCode feSolidAdd (
        int solidSET,
        VARIANT_BOOL Redraw );
    enum zReturnCode feSolidRemove (
        int baseID,
        int solidSET,
        VARIANT_BOOL Redraw );
    enum zReturnCode feSolidCommon (
        int baseID,
        int toolID,
        VARIANT_BOOL Redraw );
    enum zReturnCode feSolidEmbed (
        int baseID,
        int toolID,
        VARIANT_BOOL Redraw );
    enum zReturnCode feSolidIntersect (
        int solidSET,
        VARIANT_BOOL Redraw );
    enum zReturnCode feSolidShell (
        int baseID,
        int surfaceSET,
        double thickness,
        VARIANT_BOOL Redraw );
    enum zReturnCode feSolidSlice (
        int solidSET,
        const _variant_t & planeBase,
        const _variant_t & planeNormal,
        VARIANT_BOOL Redraw );
    enum zReturnCode feSolidSliceMatch (
        int solidSET,
        const _variant_t & planeBase,
        const _variant_t & planeNormal,
        VARIANT_BOOL Redraw );
    enum zReturnCode feSolidSliceAlongFace (
        int surfaceID );
    enum zReturnCode feSolidCleanup (
        int solidSET,
        VARIANT_BOOL redundant,
        VARIANT_BOOL sliver,
        VARIANT_BOOL check );
    enum zReturnCode feSolidEmbedFace (
        int surfID,
        int directionMode,
        int curveOpt,
        const _variant_t & dirVec,
        double offset,
        VARIANT_BOOL Redraw );
    enum zReturnCode feGenerateCopy (
        enum zDataType entityTYPE,
        int entitySET,
        const _variant_t & alongVEC,
        int nodeINC,
        VARIANT_BOOL Match );
    enum zReturnCode feGenerateScale (
        enum zDataType entityTYPE,
        int entitySET,
        const _variant_t & origVEC,
        const _variant_t & scaleVEC,
        int csysID,
        VARIANT_BOOL Match );
    enum zReturnCode feGenerateRadialCopy (
        enum zDataType entityTYPE,
        int entitySET,
        const _variant_t & origVEC,
        double Length,
        VARIANT_BOOL Match );
    enum zReturnCode feGenerateRotate (
        enum zDataType entityTYPE,
        int entitySET,
        const _variant_t & origVEC,
        const _variant_t & axisVEC,
        double rotANGLE,
        double transDIST,
        VARIANT_BOOL Match );
    enum zReturnCode feGenerateReflect (
        enum zDataType entityTYPE,
        int entitySET,
        const _variant_t & origVEC,
        const _variant_t & normVEC,
        double trapWIDTH,
        VARIANT_BOOL Match );
    enum zReturnCode feOutputProcess (
        int Count,
        VARIANT_BOOL full_set,
        int processing_method,
        const _variant_t & approach,
        const _variant_t & from_setID,
        const _variant_t & from_vectorID,
        const _variant_t & to_setID,
        const _variant_t & to_vectorID,
        const _variant_t & groupID,
        const _variant_t & factor,
        const _variant_t & overwrite,
        const _variant_t & ply_summary,
        const _variant_t & set_info );
    enum zReturnCode feOutputFromLoad (
        int setID,
        enum zLoadSelectType loadType );
    enum zReturnCode feOutputCalculate (
        int outSET,
        enum zDataType dTYPE,
        int entSET,
        _bstr_t title,
        _bstr_t IDvar,
        _bstr_t SETvar,
        _bstr_t formula );
    enum zReturnCode feMeshSizePoint (
        int pointSET,
        double MeshSize );
    enum zReturnCode feMeshSizeCurve (
        int curveSET,
        int NumElem,
        double MeshSize,
        int minLine,
        int minClosed,
        int minOther,
        int spacing,
        int biasMethod,
        double bias,
        int biasLoc,
        VARIANT_BOOL CustomSize );
    enum zReturnCode feMeshSizeSurface (
        int surfSET,
        VARIANT_BOOL replaceAll,
        double MeshSize,
        int minEdge,
        double maxANGLE,
        int maxOnSmall,
        double smallSize,
        double vertexAspect,
        VARIANT_BOOL mappedRefinement,
        double growthFactor,
        double refineRatio,
        VARIANT_BOOL refineSurf );
    enum zReturnCode feMeshSizeSolid (
        int surfSET,
        VARIANT_BOOL replaceAll,
        double MeshSize,
        int minEdge,
        double maxANGLE,
        int maxOnSmall,
        double smallSize,
        double vertexAspect,
        VARIANT_BOOL mappedRefinement,
        double growthFactor,
        double refineRatio,
        VARIANT_BOOL refineSurf,
        VARIANT_BOOL matchAdjacent,
        VARIANT_BOOL hexMesh,
        VARIANT_BOOL adjustColor,
        VARIANT_BOOL removeSlaving );
    enum zReturnCode feMeshAttrPoint (
        int pointSET,
        int propID );
    enum zReturnCode feMeshAttrCurve (
        int curveSET,
        int propID,
        const _variant_t & orient,
        const _variant_t & offset1,
        const _variant_t & offset2,
        enum zCurveOrientType orient_type,
        enum zCurveOffsetType offset_type,
        const _variant_t & release1,
        const _variant_t & release2 );
    enum zReturnCode feMeshAttrSurface (
        int surfaceSET,
        int propID,
        double offset );
    enum zReturnCode feMeshAttrSolid (
        int solidSET,
        int propID );
    enum zReturnCode feMeshApproachSurface (
        int surfaceSET,
        int approach,
        const _variant_t & approachData );
    enum zReturnCode feMeshPoint (
        int pointSET,
        VARIANT_BOOL MeshElem,
        int propID );
    enum zReturnCode feMeshCurve (
        int curveSET,
        VARIANT_BOOL MeshElem,
        int propID,
        const _variant_t & orient );
    enum zReturnCode feMeshSurface (
        int surfaceSET,
        int propID,
        int minBetween,
        double maxASPECT,
        int maxQuickNodes,
        int meshApproach,
        double quadAngle,
        VARIANT_BOOL midsideGeom,
        double midsideAngle,
        VARIANT_BOOL smoothLaplacian,
        int smoothIter,
        double smoothTol );
    enum zReturnCode feMeshTetSolid (
        enum zDataType entityTYPE,
        int entitySET,
        int propID,
        VARIANT_BOOL surfaceMeshOnly,
        VARIANT_BOOL makeMidside,
        double tetGrowth,
        VARIANT_BOOL checkSurfElem,
        VARIANT_BOOL deleteSurfElem,
        VARIANT_BOOL midsideGeom,
        double midsideAngle,
        int allocateElem );
    enum zReturnCode feMeshHexSolid (
        int solidSET,
        int propID,
        VARIANT_BOOL surfaceMeshOnly,
        VARIANT_BOOL makeMidside,
        VARIANT_BOOL checkSurfElem,
        VARIANT_BOOL deleteSurfElem,
        VARIANT_BOOL midsideGeom,
        double midsideAngle );
    enum zReturnCode feMeshHexSolidFromElement (
        int baseSET,
        int topSET,
        int propID,
        int numLayer,
        int match1,
        int match2,
        VARIANT_BOOL makeMidside,
        VARIANT_BOOL checkSurfElem,
        VARIANT_BOOL deleteSurfElem );
    enum zReturnCode feMeshBetween (
        int propID,
        int genMode,
        int shape,
        VARIANT_BOOL rightSplit,
        VARIANT_BOOL alternate,
        VARIANT_BOOL allQuad,
        VARIANT_BOOL logSpacing,
        int numCorners,
        const _variant_t & numNodes,
        const _variant_t & bias,
        const _variant_t & nodeINC,
        const _variant_t & cornerXYZ );
    enum zReturnCode feMeshClosestLink (
        int fromSET,
        int toSET,
        int connectWith,
        const _variant_t & orient,
        const _variant_t & dof,
        VARIANT_BOOL Reverse );
    enum zReturnCode feMeshCoincidentLink (
        int fromSET,
        int connectWith,
        const _variant_t & orient,
        const _variant_t & dof,
        double tolerance );
    enum zReturnCode feMeshUnzip (
        int fromSET,
        int toSET,
        int connectWith,
        const _variant_t & orient,
        const _variant_t & dof );
    enum zReturnCode feMeshTransition (
        VARIANT_BOOL useNodes,
        int entCOUNT,
        const _variant_t & entID,
        const _variant_t & edgeNUM,
        const _variant_t & edgeBIAS,
        const _variant_t & edgeSIZE,
        int propID,
        int minBetween,
        double maxASPECT,
        int maxQuickNodes,
        int meshApproach,
        double quadAngle,
        VARIANT_BOOL smoothLaplacian,
        int smoothIter,
        double smoothTol );
    enum zReturnCode feMeshRemesh (
        int elemSET,
        int nodeSET,
        int remeshMode,
        int refineRatio,
        double breakAngle,
        VARIANT_BOOL deleteOrig,
        int propID,
        int minBetween,
        double maxASPECT,
        int maxQuickNodes,
        int meshApproach,
        double quadAngle,
        VARIANT_BOOL smoothLaplacian,
        int smoothIter,
        double smoothTol );
    enum zReturnCode feMeshConvertFacets (
        int solidID );
    enum zReturnCode feMeshCleanupSlivers (
        int elemSET,
        double minAngle,
        double minLength );
    enum zReturnCode feMeshEdgeRemoval (
        int elemSET,
        int nd1,
        int nd2 );
    enum zReturnCode feMeshBuildRemeshRegions (
        int elemSET,
        double breakAngle );
    enum zReturnCode feMeshEditRemeshRegions (
        int el1,
        int el2 );
    enum zReturnCode feMeshRemeshRegions (
        double MeshSize,
        int propID,
        int minBetween,
        double maxASPECT,
        int maxQuickNodes,
        int meshApproach,
        double quadAngle,
        VARIANT_BOOL smoothLaplacian,
        int smoothIter,
        double smoothTol );
    enum zReturnCode feMeshEdgeMembers (
        int elemSET,
        int nodeSET,
        int propID,
        const _variant_t & orient );
    enum zReturnCode feMeshSmooth (
        int elemSET,
        VARIANT_BOOL laplaceSmooth,
        int iter,
        double tolerance );
    enum zReturnCode feMeshExtrudeElem (
        int elemSET,
        double axisLEN,
        const _variant_t & axisVEC,
        int propID,
        int NumElem,
        int method,
        VARIANT_BOOL matchCurrent,
        VARIANT_BOOL deleteOrig );
    enum zReturnCode feMeshExtrudeCurve (
        int curveSET,
        double axisLEN,
        const _variant_t & axisVEC,
        int propID,
        int NumElem );
    enum zReturnCode feMeshRevolveElem (
        int elemSET,
        double rotANGLE,
        double rotThrust,
        const _variant_t & axisOrig,
        const _variant_t & axisVEC,
        int propID,
        int NumElem,
        VARIANT_BOOL matchCurrent,
        VARIANT_BOOL deleteOrig );
    enum zReturnCode feMeshRevolveCurve (
        int curveSET,
        double rotANGLE,
        double rotThrust,
        const _variant_t & axisOrig,
        const _variant_t & axisVEC,
        int propID,
        int NumElem );
    enum zReturnCode feMeshSweepElem (
        int elemSET,
        int numPath,
        const _variant_t & curvePath,
        int numAlign,
        const _variant_t & curveAlign,
        const _variant_t & alignLoc,
        int propID,
        VARIANT_BOOL matchCurrent,
        VARIANT_BOOL deleteOrig );
    enum zReturnCode feMeshSweepCurve (
        int curveSET,
        int numPath,
        const _variant_t & curvePath,
        int numAlign,
        const _variant_t & curveAlign,
        const _variant_t & alignLoc,
        int propID );
    enum zReturnCode feProjectOntoCurve (
        enum zDataType entityTYPE,
        int entitySET,
        int curveID );
    enum zReturnCode feProjectOntoSurface (
        enum zDataType entityTYPE,
        int entitySET,
        int surfaceID );
    enum zReturnCode feProjectOntoSolid (
        int nodeSET,
        int elemSET,
        int solidID,
        int surfCount,
        const _variant_t & surfID );
    enum zReturnCode feMoveTo (
        enum zDataType entityTYPE,
        int entitySET,
        double x,
        double y,
        double z,
        VARIANT_BOOL doX,
        VARIANT_BOOL doY,
        VARIANT_BOOL doZ,
        int inCsys,
        VARIANT_BOOL moveRef );
    enum zReturnCode feMoveBy (
        enum zDataType entityTYPE,
        int entitySET,
        VARIANT_BOOL radial,
        double Length,
        const _variant_t & vecLoc );
    enum zReturnCode feMoveOffset (
        int elemSET,
        int method,
        double Length,
        const _variant_t & alongVEC );
    enum zReturnCode feRotateTo (
        enum zDataType entityTYPE,
        int entitySET,
        const _variant_t & axisLoc,
        const _variant_t & axisVEC,
        const _variant_t & fromLoc,
        const _variant_t & toLoc );
    enum zReturnCode feRotateBy (
        enum zDataType entityTYPE,
        int entitySET,
        const _variant_t & axisLoc,
        const _variant_t & axisVEC,
        double angle,
        double thrust );
    enum zReturnCode feAlignTo (
        enum zDataType entityTYPE,
        int entitySET,
        const _variant_t & fromLoc,
        const _variant_t & fromVec,
        const _variant_t & toLoc,
        const _variant_t & toVec );
    enum zReturnCode feScale (
        enum zDataType entityTYPE,
        int entitySET,
        const _variant_t & fromLoc,
        int csysID,
        double xScale,
        double yScale,
        double zScale );
    enum zReturnCode feModifyColor (
        enum zDataType entityTYPE,
        int entitySET,
        enum zColor color,
        VARIANT_BOOL randomize );
    enum zReturnCode feModifyLayer (
        enum zDataType entityTYPE,
        int entitySET,
        int layer );
    enum zReturnCode feModifyTransparency (
        enum zDataType entityTYPE,
        int entitySET,
        double transparency );
    enum zReturnCode feRenumber (
        enum zDataType entityTYPE,
        int entitySET,
        int startID );
    enum zReturnCode feMeshAttach (
        enum zDataType entityTYPE,
        int entitySET,
        enum zDataType attachTYPE,
        int attachID,
        VARIANT_BOOL doNodes );
    enum zReturnCode feMeshDetach (
        enum zDataType entityTYPE,
        int entitySET,
        enum zDataType attachTYPE,
        int attachID,
        VARIANT_BOOL interior );
    enum zReturnCode feModifyDefCSys (
        enum zDataType entityTYPE,
        int entitySET,
        int csysID );
    enum zReturnCode feModifyOutCSys (
        enum zDataType entityTYPE,
        int entitySET,
        int ssysID );
    enum zReturnCode feModifyPermBC (
        int entitySET,
        VARIANT_BOOL t1,
        VARIANT_BOOL t2,
        VARIANT_BOOL t3,
        VARIANT_BOOL r1,
        VARIANT_BOOL r2,
        VARIANT_BOOL r3 );
    enum zReturnCode feModifySplineOrder (
        int entitySET,
        int order );
    enum zReturnCode feModifySplineKnots (
        int entitySET,
        const _variant_t & knotLoc );
    enum zReturnCode feModifyReverseCurve (
        int entitySET );
    enum zReturnCode feModifySurfaceDivisions (
        int entitySET,
        int sDiv,
        int tDiv,
        double tolerance );
    enum zReturnCode feModifyLoadPhase (
        enum zDataType entityTYPE,
        int entitySET,
        double phase );
    enum zReturnCode feModifyElemPropID (
        int entitySET,
        int propID );
    enum zReturnCode feModifyPropMatlID (
        int entitySET,
        int matlID );
    enum zReturnCode feModifyMaterialAngle (
        int entitySET,
        int method,
        const _variant_t & vecDIR,
        int coordDir,
        int coordCsys,
        double angle );
    enum zReturnCode feModifyElemReverse (
        int entitySET,
        int method,
        const _variant_t & vecDIR );
    enum zReturnCode feModifyElemRelease (
        int entitySET,
        const _variant_t & rel1,
        const _variant_t & rel2 );
    enum zReturnCode feModifyElemOrder (
        int entitySET,
        VARIANT_BOOL makeParabolic,
        VARIANT_BOOL ontoGeom,
        double maxANGLE );
    enum zReturnCode feModifyMidside (
        int elemSET,
        int nodeSET );
    enum zReturnCode feModifyFormulation (
        int elemSET,
        int form1,
        int form2 );
    enum zReturnCode feModifySplitQuads (
        int elemSET );
    enum zReturnCode feModifyOffsets (
        int entitySET,
        VARIANT_BOOL endA,
        VARIANT_BOOL endB,
        VARIANT_BOOL radial,
        const _variant_t & off1,
        const _variant_t & off2 );
    enum zReturnCode feModifyOrient (
        int entitySET,
        int method,
        int NodeID,
        const _variant_t & orVec );
    enum zReturnCode feModifyElemType (
        int entitySET,
        int propID,
        int method,
        int NodeID,
        const _variant_t & orVec );
    int feAppLockExit ( );
    int feAppUnlockExit ( );
    int feAppLockModel ( );
    int feAppUnlockModel ( );
    enum zReturnCode feAppEmbed (
        int windowID,
        int x,
        int y,
        int cx,
        int cy );
    enum zReturnCode feAppVisible (
        VARIANT_BOOL Visible );
    enum zReturnCode feAppRegisterMessageHandler (
        VARIANT_BOOL regster,
        int windowID );
    enum zReturnCode feModifySuperelementID (
        int entitySET,
        int nSEID );
    enum zReturnCode feModifyOffsetsToRefPt (
        int entitySET );
    enum zReturnCode feModifyBeamWarping (
        int entitySET,
        int method,
        enum zNodeType nodeType,
        int autoENDA,
        int autoENDB );
    enum zReturnCode feGroupEvaluate (
        int groupSET,
        VARIANT_BOOL forceEval );
    enum zReturnCode feLoadCombine (
        int fromSET,
        int toSET,
        double Scale );
    enum zReturnCode feBCCombine (
        int fromSET,
        int toSET,
        VARIANT_BOOL overwrite );
    enum zReturnCode feAppGetModelName (
        __int64 nModelID,
        BSTR * ModelName );
    enum zReturnCode feFileClose (
        VARIANT_BOOL bSaveChanges );
    enum zReturnCode feAppSetModel (
        __int64 nModelID );
    enum zReturnCode feAppGetModel (
        __int64 * nModelID );
    enum zReturnCode feAppSetModelByName (
        _bstr_t fName );
    enum zReturnCode feAppCountModels (
        int * numModels );
    enum zReturnCode feAppGetAllModels (
        int * numModels,
        VARIANT * nModelID );
    enum zReturnCode feAppRegisterAddInPane (
        VARIANT_BOOL regster,
        int windowID,
        int messageID,
        VARIANT_BOOL bPreventClose,
        VARIANT_BOOL bPreventHide,
        int location,
        int neighborID );
    enum zReturnCode feAppManageToolbars (
        _bstr_t BarName,
        VARIANT_BOOL Visible );
    enum zReturnCode feAppManagePanes (
        _bstr_t PaneName,
        int action );
    enum zReturnCode feAppManageStatusBar (
        VARIANT_BOOL Visible );
    enum zReturnCode feAppManageGraphicsTabs (
        VARIANT_BOOL Visible );
    enum zReturnCode feGetToolbars (
        int * numBars,
        VARIANT * barID,
        VARIANT * barVisible,
        VARIANT * barTitle );
    enum zReturnCode feGetToolbarCommands (
        _bstr_t BarName,
        int * numCmds,
        VARIANT * cmdID,
        VARIANT * cmdVisible,
        VARIANT * cmdSubmenu,
        VARIANT * cmdTitle );
    enum zReturnCode feGetToolbarSubCommands (
        int cmdID,
        int * numSubCmds,
        VARIANT * subcmdID,
        VARIANT * subcmdVisible,
        VARIANT * subcmdTitle );
    enum zReturnCode feAddUserCommand (
        _bstr_t strTitle,
        _bstr_t strCmd,
        _bstr_t strArg,
        _bstr_t strStartDir );
    enum zReturnCode feGetUserCommands (
        int * numCmd,
        VARIANT * strTitle,
        VARIANT * strCmd,
        VARIANT * strArg,
        VARIANT * strStartDir );
    enum zReturnCode feDeleteUserCommand (
        _bstr_t strTitle );
    enum zReturnCode feGetMenuCommands (
        _bstr_t menuName1,
        _bstr_t menuName2,
        int * numCmds,
        VARIANT * cmdID,
        VARIANT * cmdTitle );
    enum zReturnCode feGetMenuCommand (
        _bstr_t menuName1,
        _bstr_t menuName2,
        _bstr_t menuName3,
        int * cmdID );
    enum zReturnCode feSetToolbarVisible (
        _bstr_t BarName,
        VARIANT_BOOL bVisible );
    enum zReturnCode feSetToolbarCommandVisible (
        _bstr_t BarName,
        int cmdID,
        VARIANT_BOOL bVisible );
    enum zReturnCode feSetToolbarCommandTitle (
        _bstr_t BarName,
        int cmdID,
        _bstr_t cmdTitle,
        _bstr_t cmdToolTip,
        _bstr_t cmdDescription );
    enum zReturnCode feResetToolbar (
        _bstr_t BarName );
    enum zReturnCode feAddToolbar (
        _bstr_t BarName,
        int barLocation );
    enum zReturnCode feDeleteToolbar (
        _bstr_t BarName );
    enum zReturnCode feAddToolbarCommand (
        _bstr_t BarName,
        int cmdIndex,
        int cmdID );
    enum zReturnCode feAddToolbarUserCommand (
        _bstr_t BarName,
        int cmdIndex,
        _bstr_t cmdTitle,
        _bstr_t cmdBitmap,
        int * cmdID );
    enum zReturnCode feSaveToolbarLayout (
        _bstr_t fName );
    enum zReturnCode feLoadToolbarLayout (
        _bstr_t fName );
    enum zReturnCode feGetToolbarCommand (
        _bstr_t BarName,
        int cmdIndex,
        int * cmdID );
    enum zReturnCode feSetToolbarCommandBitmap (
        int cmdID,
        _bstr_t cmdBitmap );
    enum zReturnCode feAppGetActiveView (
        int * nViewID );
    enum zReturnCode feAppSetActiveView (
        int nViewID );
    enum zReturnCode feAppGetAllViews (
        int * numViews,
        VARIANT * nViewID );
    enum zReturnCode feSEGetEntityMap (
        int nEntity,
        int * numID,
        VARIANT * nFemapID,
        VARIANT * nSEdgeID );
    enum zReturnCode feModifyNoMergeCurve (
        int entitySET,
        VARIANT_BOOL bNoMerge );
    enum zReturnCode feLicenseExpiration (
        int * nDays );
    enum zReturnCode feRunCommand (
        int nCmdID,
        VARIANT_BOOL bWaitForCompletion );
    enum zReturnCode feCoordArrayTransform2 (
        int Count,
        int fromCSYS,
        int toCSYS,
        const _variant_t & inXYZ,
        VARIANT * xyz );
    enum zReturnCode feRenumberOpt (
        enum zDataType entityTYPE,
        int entitySET,
        int startID,
        int renumMethod,
        int renumCSys,
        VARIANT_BOOL renumAbs,
        VARIANT_BOOL renumDescend,
        VARIANT_BOOL renumConstOff );
    enum zReturnCode feFileWriteSEPost (
        _bstr_t fName,
        VARIANT_BOOL bOutputSurfaceMap );
    enum zReturnCode feCurveProjectOntoSurfaces (
        VARIANT_BOOL projectNormal,
        const _variant_t & along,
        int faceSET,
        int curveSET,
        VARIANT_BOOL messages );
    enum zReturnCode feAppUpdatePanes (
        VARIANT_BOOL bFullRefresh );
    enum zReturnCode feAppMessageBox (
        int msgmode,
        _bstr_t message );
    enum zReturnCode feFileProgramRunning ( );
    enum zReturnCode feWindowMinimize (
        int vuID );
    enum zReturnCode feWindowMaximize (
        int vuID );
    enum zReturnCode feWindowRestore (
        int vuID );
    enum zReturnCode feAppLockDraw ( );
    enum zReturnCode feAppUnlockDraw ( );
    enum zReturnCode feWindowRedraw (
        int vuID );
    enum zReturnCode feWindowRegenerate (
        int vuID );
    enum zReturnCode feWindowShow (
        enum zDataType dTYPE,
        int ID );
    enum zReturnCode feWindowVisible (
        int vuID,
        VARIANT_BOOL Visible );
    enum zReturnCode feWindowTile ( );
    enum zReturnCode feWindowCascade ( );
    enum zReturnCode feSplineBlend (
        int curve1,
        const _variant_t & near1,
        int curve2,
        const _variant_t & near2,
        double factor,
        VARIANT_BOOL messages );
    enum zReturnCode feWindowTileHorz ( );
    enum zReturnCode feAppColorPalette (
        enum zColor nDefault,
        enum zColor * nColor );
    enum zReturnCode feAddToolbarSubmenu (
        _bstr_t BarName,
        int cmdIndex,
        _bstr_t menuName,
        int * menuID );
    enum zReturnCode feAddToolbarSubmenuCommand (
        int menuID,
        int cmdIndex,
        int cmdID );
    enum zReturnCode feAddToolbarSubmenuUserCommand (
        int menuID,
        int cmdIndex,
        _bstr_t cmdTitle,
        _bstr_t cmdBitmap,
        int * cmdID );
    enum zReturnCode feProjectAlongVector (
        enum zDataType entityTYPE,
        int entitySET,
        int surfaceSET,
        const _variant_t & vecAlong );
    enum zReturnCode feWindowSetRect (
        int vuID,
        double pctLeft,
        double pctTop,
        double pctRight,
        double pctBottom );
    enum zReturnCode feWindowTitle (
        int vuID,
        _bstr_t sTitle );
    enum zReturnCode feGFXSelect (
        int nSetID,
        VARIANT_BOOL bEnableAll,
        VARIANT_BOOL bRedraw );
    enum zReturnCode feGFXReset ( );
    enum zReturnCode feGFXEnableView (
        VARIANT_BOOL bEnableAll,
        int nVuID );
    enum zReturnCode feGFXDelete (
        VARIANT_BOOL bAllSets,
        int nSetID );
    enum zReturnCode feGFXLoad (
        int nSetID,
        int nxyz,
        const _variant_t & xyz,
        int npoly,
        const _variant_t & poly,
        enum zColor color,
        enum zColor edgecolor,
        enum zGFXPointSymbol symbol );
    int feOutputConvertV92VectorID (
        int oldVecID );
    enum zReturnCode feProjectOntoVector (
        enum zDataType entityTYPE,
        int entitySET,
        const _variant_t & vecLoc,
        const _variant_t & vecDIR );
    enum zReturnCode feProjectOntoPlane (
        enum zDataType entityTYPE,
        int entitySET,
        const _variant_t & planeLoc,
        const _variant_t & planeNormal );
    enum zReturnCode feAppEventCallback (
        enum zEventCode eventID,
        _bstr_t callback );
    enum zReturnCode feGroupCombine (
        int groupSET,
        int * groupID );
    enum zReturnCode feFileWriteNeutral2 (
        int brand,
        _bstr_t fName,
        VARIANT_BOOL write_geometry_model,
        VARIANT_BOOL write_analysis_model,
        VARIANT_BOOL write_output,
        VARIANT_BOOL write_selector,
        VARIANT_BOOL write_palette,
        VARIANT_BOOL write_groups,
        VARIANT_BOOL write_views,
        VARIANT_BOOL write_addl_info,
        VARIANT_BOOL expand_geometric,
        VARIANT_BOOL minimize_size,
        int digits,
        double version,
        int groupID );
    enum zReturnCode feVectorPerpendicular (
        const _variant_t & vecIN,
        VARIANT * vecPERP );
    enum zReturnCode feGetElementFaces (
        _bstr_t title,
        int orig_nCount,
        const _variant_t & orig_elemID,
        const _variant_t & orig_faceID,
        int * nCount,
        VARIANT * elemID,
        VARIANT * faceID );
    enum zReturnCode feMeshAttachNodes (
        int nNodes,
        const _variant_t & NodeID,
        const _variant_t & attachTYPE,
        const _variant_t & attachID );
    enum zReturnCode feOutputProcessConvert (
        int approach,
        int from_setID,
        int from_vectorID,
        int to_setID,
        int to_vectorID,
        int groupID );
    enum zReturnCode feConnectAuto (
        int solidSET,
        double linearTolerance,
        double angleTolerance,
        int strategy,
        VARIANT_BOOL bSelfConnect,
        VARIANT_BOOL bCombineAll,
        int nConnectProp,
        VARIANT_BOOL bGlued );
    enum zReturnCode feSelectOutput (
        _bstr_t title,
        int nBaseOutputSetID,
        enum zOutputType limitOutputType,
        enum zOutputComplex limitComplex,
        enum zDataType limitToEntity,
        VARIANT_BOOL includeCorner,
        IDispatch * * pOutputSets,
        IDispatch * * pOutputVecs );
    enum zReturnCode feCoordPickByMethod (
        enum zPointDefinition method,
        _bstr_t dlgTITLE,
        VARIANT * xyz );
    enum zReturnCode feVectorPickByMethod (
        enum zVectorDefinition method,
        _bstr_t dlgTITLE,
        VARIANT_BOOL unitVector,
        double * vecLength,
        VARIANT * vecBASE,
        VARIANT * vecDIR );
    enum zReturnCode fePlanePickByMethod (
        enum zPlaneDefinition method,
        _bstr_t dlgTITLE,
        VARIANT * plBase,
        VARIANT * plNormal,
        VARIANT * plAxis );
    enum zReturnCode feLicenseIsAvailable (
        enum zFeatureType nFeature );
    enum zReturnCode feLicenseMethod (
        int * nLicenseType );
    enum zReturnCode feOutputForceBalance (
        int outSETS,
        int boundarynodeSET,
        int boundaryelemSET,
        int csysID,
        const _variant_t & aroundXYZ,
        int * numSETS,
        VARIANT * resultant );
    enum zReturnCode feAppModelContents (
        VARIANT_BOOL bReport,
        int * emptyBlocks,
        VARIANT * entityBlocks );
    enum zReturnCode feFileCurrentDirectory (
        _bstr_t sCurDir );
    enum zReturnCode feFileReadNeutral2 (
        int brand,
        _bstr_t fName,
        VARIANT_BOOL read_geometry,
        VARIANT_BOOL read_model,
        VARIANT_BOOL read_output,
        VARIANT_BOOL read_groups,
        VARIANT_BOOL read_views,
        VARIANT_BOOL status_messages,
        int offsetID );
    enum zReturnCode feAppModelDefragment ( );
    enum zReturnCode feGetElementEdges (
        _bstr_t title,
        int orig_nCount,
        const _variant_t & orig_elemID,
        const _variant_t & orig_faceID,
        int * nCount,
        VARIANT * elemID,
        VARIANT * faceID );
    enum zReturnCode feElementFreeEdge (
        int elemSetID,
        VARIANT_BOOL bParabolicEdges,
        VARIANT_BOOL bLineElem,
        int * nFreeCount,
        VARIANT * nFreeData );
    enum zReturnCode feElementFreeFace (
        int elemSetID,
        VARIANT_BOOL bParabolicEdges,
        VARIANT_BOOL bPlaneElem,
        int * nFreeCount,
        VARIANT * nFreeData );
    enum zReturnCode feSurfaceNormalDeviation (
        int surfaceSetID,
        VARIANT * dAvgNormal,
        double * dMaxAngle );
    enum zReturnCode feAddToolbarSubmenuSubmenu (
        int menuID,
        int ctrlIndex,
        _bstr_t menuName,
        int * submenuID );
    enum zReturnCode feBoundaryAddSurfaces (
        int nBoundaryID,
        int surfaceSET,
        VARIANT_BOOL bAddToExisting );
    enum zReturnCode feCoordVectorPlaneIntersect (
        const _variant_t & xyz,
        const _variant_t & projDir,
        const _variant_t & planePt,
        const _variant_t & planeNorm,
        VARIANT * xyzPlane );
    enum zReturnCode feSurfaceConvert (
        int surfaceSET,
        VARIANT_BOOL bDelete );
    enum zReturnCode feGroupMoveToLayer (
        int nGroupID,
        int nLayerID );
    enum zReturnCode feBoundaryFromPoints (
        int nCSys,
        int nPoints,
        const _variant_t & pXYZ,
        int * nBoundaryID );
    enum zReturnCode feAutoMeshAssociativity (
        int elemSetID,
        int solidSetID,
        double dTolerance,
        VARIANT_BOOL bClearPrevious,
        VARIANT_BOOL bCheckContainment,
        VARIANT_BOOL bAttachMidside,
        VARIANT_BOOL bGroupExtra,
        VARIANT_BOOL bMessages,
        int * nUnattachedGroup );
    int feAppVersion ( );
    enum zReturnCode feSolidStitchNoCleanup (
        int surfaceSET,
        double tolerance );
    enum zReturnCode feSurfaceNonManifoldAdd (
        int solidSET );
    enum zReturnCode feSurfaceRecoverManifold (
        int solidSET );
    enum zReturnCode feModifySolidFacetting (
        int entitySET,
        int sDiv,
        int tDiv,
        double dAngleTol,
        double dChordTol,
        double dCurveFactor );
    enum zReturnCode feSolidRemoveFace (
        int surfaceSET,
        VARIANT_BOOL agressive,
        VARIANT_BOOL Redraw );
    enum zReturnCode feSurfaceRemoveHole (
        int curveSET );
    enum zReturnCode feMeshSurface2 (
        int surfaceSET,
        int propID,
        enum zTopologyType elemShape,
        VARIANT_BOOL bAllowMapped,
        VARIANT_BOOL bResetDefaults );
    enum zReturnCode feAppRegisterAddInPaneWithFrame (
        VARIANT_BOOL regster,
        int windowID,
        int messageID,
        VARIANT_BOOL bPreventClose,
        VARIANT_BOOL bPreventHide,
        int location,
        int neighborID );
    enum zReturnCode feVectorAxisOfSurface (
        int suID,
        VARIANT * baseXYZ,
        VARIANT * vecDIR );
    enum zReturnCode feMeshSurfaceByAttributes (
        int surfaceSET );
    enum zReturnCode feEntityVisibility (
        enum zVisibilityType visType,
        int visID,
        VARIANT_BOOL bIsVisible,
        VARIANT_BOOL bRedraw );
    enum zReturnCode feDeleteMesh (
        enum zDataType enNodeOrElem,
        int elemSET,
        VARIANT_BOOL bDeleteUnused );
    enum zReturnCode feFormatReal (
        double dValue,
        int nWidth,
        int nDecimal,
        enum zRealFormat nFormat,
        BSTR * strValue );
    enum zReturnCode feTruncateReal (
        double dValue,
        int nWidth,
        int nDecimal,
        enum zRealFormat nFormat,
        double * truncValue );
    enum zReturnCode feAppMessageStartListing ( );
    enum zReturnCode feAppMessageEndListing ( );
    enum zReturnCode feModifyRadialOffsets (
        int entitySET,
        VARIANT_BOOL bAroundVector,
        double dRadialOffset,
        const _variant_t & orig,
        const _variant_t & Axis );
    enum zReturnCode feFilePrint2 (
        VARIANT_BOOL useDlg,
        enum zPrintSource source,
        _bstr_t toFile );
    enum zReturnCode feAppUpdateModelBox (
        VARIANT_BOOL bForceUpdate );
    enum zReturnCode feOutputProcessCopy (
        VARIANT_BOOL bFullSet,
        int from_setID,
        int from_vectorID,
        int to_setID );
    enum zReturnCode feOutputProcessMerge (
        VARIANT_BOOL bFullSet,
        VARIANT_BOOL bOverwrite,
        int nCount,
        const _variant_t & from_setID,
        const _variant_t & from_vectorID,
        int to_setID );
    enum zReturnCode feOutputProcessLinearCombination (
        VARIANT_BOOL bFullSet,
        enum zOutputProcessCombine nApproach,
        int nCount,
        const _variant_t & dScaleFactor,
        const _variant_t & from_setID,
        const _variant_t & from_vectorID,
        int to_setID );
    enum zReturnCode feOutputProcessRSSCombination (
        VARIANT_BOOL bFullSet,
        enum zOutputProcessCombine nApproach,
        int nCount,
        const _variant_t & dScaleFactor,
        const _variant_t & from_setID,
        const _variant_t & from_vectorID,
        int to_setID );
    enum zReturnCode feOutputProcessEnvelope (
        VARIANT_BOOL bFullSet,
        enum zOutputProcessEnvType ntype,
        enum zOutputProcessEnvApproach nApproach,
        VARIANT_BOOL bEnvelopeInSets,
        VARIANT_BOOL bEnvelopeAcrossSets,
        VARIANT_BOOL bSetInfo,
        int nCount,
        const _variant_t & from_setID,
        const _variant_t & from_vectorID,
        int to_setID );
    enum zReturnCode feOutputProcessErrorEstimate (
        enum zOutputProcessErrorMethod nMethod,
        int from_setID,
        int from_vectorID,
        int groupID );
    enum zReturnCode feTextMultiPut (
        VARIANT_BOOL DrawPointer,
        VARIANT_BOOL DrawBorder,
        VARIANT_BOOL modelPos,
        int horzJust,
        int vertJust,
        int visView,
        int layer,
        int fontID,
        enum zColor BackColor,
        enum zColor bordColor,
        enum zColor textColor,
        int nCount,
        const _variant_t & textLoc,
        const _variant_t & pointerLoc,
        const _variant_t & tText );
    enum zReturnCode feFileReadPatran (
        _bstr_t fName,
        VARIANT_BOOL bSaveZeroDispAsBC );
    enum zReturnCode feFileReadNeutral3 (
        int brand,
        _bstr_t fName,
        VARIANT_BOOL read_geometry,
        VARIANT_BOOL read_model,
        VARIANT_BOOL read_output,
        VARIANT_BOOL read_groups,
        VARIANT_BOOL read_views,
        VARIANT_BOOL status_messages,
        int offsetID,
        VARIANT_BOOL renumber_layers,
        VARIANT_BOOL renumber_load_bc,
        VARIANT_BOOL always_new_output_sets );
    enum zReturnCode feCheckElemDistortion2 (
        int elemSET,
        VARIANT_BOOL doLIST,
        VARIANT_BOOL makeGROUP,
        VARIANT_BOOL chkASPECT,
        VARIANT_BOOL chkTAPER,
        VARIANT_BOOL chkANGLE,
        VARIANT_BOOL chkWARP,
        VARIANT_BOOL chkNasWARP,
        VARIANT_BOOL chkALTTAPER,
        VARIANT_BOOL chkTET,
        VARIANT_BOOL chkJDet,
        VARIANT_BOOL chkComb,
        VARIANT_BOOL chkExpTime,
        double maxASPECT,
        double maxTAPER,
        double maxANGLE,
        double maxWARP,
        double maxNasWARP,
        double maxALTTAPER,
        double maxTET,
        double minJDet,
        double minComb,
        double minExpTime );
    enum zReturnCode feGetElemDistortion2 (
        int elemID,
        double * valASPECT,
        double * valTAPER,
        double * valANGLE,
        double * valWARP,
        double * valNasWARP,
        double * valALTTAPER,
        double * valTET,
        double * valJDet,
        double * valComb,
        double * valExpTime );
    enum zReturnCode feCheckCoincidentNode2 (
        int mergeSET,
        double tolerance,
        VARIANT_BOOL merge,
        int nMergeMode,
        int nMergeLoc,
        VARIANT_BOOL bMergeAcrossConnections,
        int nMessageMode,
        VARIANT_BOOL bSaveGroups );
    enum zReturnCode feMeasureDistanceBetweenNodes (
        int nFrom,
        int nTo,
        int nOutSetID,
        int nOutVecID,
        int nCSysID,
        VARIANT * vecBASE,
        VARIANT * vecDist,
        double * magDist );
    enum zReturnCode feMeasureAngleBetweenNodes (
        int nVertex,
        int nFrom,
        int nTo,
        int nOutSetID,
        int nOutVecID,
        int nCSysID,
        VARIANT * vecBASE,
        VARIANT * vecNormal,
        double * magAngle );
    enum zReturnCode feScreenPctPick (
        double * x,
        double * y );
    enum zReturnCode feCurveOffsetCurveWasher (
        int curveSET,
        int faceID,
        int nMode,
        VARIANT_BOOL bAutoSelect,
        VARIANT_BOOL bSaveSplit,
        VARIANT_BOOL bExtend,
        double dOffset );
    enum zReturnCode feCurveSplitPointToPoint (
        int nPtA,
        int nPtB );
    enum zReturnCode feCurveSplitPointToEdge (
        int nPtA,
        int nCuID );
    enum zReturnCode feCurveSplitEdgeToEdge (
        int nLongEdge,
        int nShortEdgeSet );
    enum zReturnCode feConnectAuto2 (
        int solidSET,
        int connectTYPE,
        double linearTolerance,
        double angleTolerance,
        int strategy,
        VARIANT_BOOL bSelfConnect,
        VARIANT_BOOL bCombineAll,
        int nConnectProp,
        VARIANT_BOOL bGlued );
    enum zReturnCode feSetToolbarSeparator (
        _bstr_t BarName,
        int cmdID,
        VARIANT_BOOL bAddSep );
    enum zReturnCode feSolidCleanupAdvanced (
        int solidSET,
        VARIANT_BOOL RepairEdges,
        double RepairEdgesVal,
        VARIANT_BOOL CleanSmoothDiscont,
        double CleanSmoothDiscontVal,
        VARIANT_BOOL RemoveSelfInt,
        VARIANT_BOOL AllowSurfMod,
        VARIANT_BOOL RemoveSpikes,
        double RemoveSpikesVal,
        VARIANT_BOOL RemoveSmallEdges,
        double RemoveSmallEdgesVal,
        VARIANT_BOOL RemoveSmallFaces,
        double RemoveSmallFacesVal,
        VARIANT_BOOL RemoveSliverFaces,
        double RemoveSliverFacesVal,
        VARIANT_BOOL ConvertToAnalytic,
        double ConvertToAnalyticVal,
        VARIANT_BOOL RecalcEdges,
        double RecalcEdgesVal,
        VARIANT_BOOL MergeEdges,
        VARIANT_BOOL HealSurfaces,
        double HealSurfacesVal,
        VARIANT_BOOL HealSmoothDiscont,
        double HealSmoothDiscontVal,
        VARIANT_BOOL ReplaceMissing );
    enum zReturnCode feRunIOTest (
        _bstr_t sPath,
        int * nMethod );
    enum zReturnCode feGroupBoolean2 (
        int GroupsToProcessSetID,
        int GroupToSubtractFromID,
        enum zGroupBooleanOp opperation,
        int GroupToCreateID,
        _bstr_t GroupTitle );
    enum zReturnCode feFileIsModified ( );
    enum zReturnCode feBoundaryFromSurfaces2 (
        int surfaceSET,
        VARIANT_BOOL bMessages );
    enum zReturnCode feFileJTName (
        _bstr_t fName );
    enum zReturnCode feFileJTVersion (
        int iVersion );
    enum zReturnCode feFileJTUnits (
        int iUnits );
    enum zReturnCode feFileJTHierarchy (
        int iHier1,
        int iHier2,
        int iHier3,
        int iHier4,
        int iHier5,
        int iHier6,
        int iHier7 );
    enum zReturnCode feSurfaceExtend (
        int curveSET,
        int shape,
        int ExtendTo,
        int ExtendToSolidID,
        const _variant_t & ExtendToLoc,
        double ExtendDist );
    enum zReturnCode feOutputCompare (
        VARIANT_BOOL bList,
        VARIANT_BOOL bFullCase,
        int fromSET,
        int toSETS,
        int ifromVEC,
        int itoVEC,
        double dMaxDiff );
    enum zReturnCode feVectorNormalizedDotProduct (
        const _variant_t & VecA,
        const _variant_t & VecB,
        double * dot );
    enum zReturnCode feCoordCenterOfPoints (
        const _variant_t & vXYZ1,
        const _variant_t & vXYZ2,
        const _variant_t & vXYZ3,
        VARIANT * xyz );
    int feMaxInt (
        int Int1,
        int Int2 );
    int feMinInt (
        int Int1,
        int Int2 );
    double feMaxReal (
        double Real1,
        double Real2 );
    double feMinReal (
        double Real1,
        double Real2 );
    int feOutputForceBalance2 (
        int freebodyID,
        int outSetID,
        VARIANT_BOOL toDataTable,
        VARIANT_BOOL printSummation,
        VARIANT_BOOL printDetails );
    int feLoadFromFreebody (
        int freebodyID,
        int nodeSetID,
        int outSetID,
        int loadSetID,
        VARIANT_BOOL doSummation,
        VARIANT_BOOL doNodes,
        VARIANT_BOOL overrideNodeCheck );
    enum zReturnCode feFileRecoverDBData (
        VARIANT_BOOL useDlg,
        _bstr_t fName );
    enum zReturnCode feModifyColorMultiple (
        enum zDataType entityTYPE,
        int entitySET,
        enum zColor color,
        int method,
        int match_range,
        int limit_to_groupSET );
    enum zReturnCode feSelectOutputSets (
        _bstr_t title,
        IDispatch * * pOutputSets );
    enum zReturnCode feSurfaceFromMesh (
        int elemSetID,
        VARIANT_BOOL bDeleteMesh,
        VARIANT_BOOL bWireframeOnly,
        double tolerance,
        VARIANT_BOOL bLengthCutoff,
        double len_cut_val );
    enum zReturnCode feModifyElemReverse2 (
        int entitySET,
        int method,
        const _variant_t & vecDIR,
        int csysID,
        int csysDir,
        VARIANT_BOOL bPreserveMatlDir );
    enum zReturnCode feFileReadCatia2 (
        VARIANT_BOOL useDlg,
        _bstr_t fName,
        VARIANT_BOOL rdAnalytical,
        VARIANT_BOOL rdTopology,
        VARIANT_BOOL rdCurves,
        VARIANT_BOOL rdNoShow,
        VARIANT_BOOL rdNoPick,
        VARIANT_BOOL rdWorkplanes,
        VARIANT_BOOL stitch,
        VARIANT_BOOL heal,
        VARIANT_BOOL check );
    enum zReturnCode feFileAttachResults (
        enum zAnalysisProgram analysis_program,
        _bstr_t fName,
        VARIANT_BOOL bMmf );
    enum zReturnCode feFileAttachManage (
        int nSetID,
        enum zManageResultsAttach opt,
        _bstr_t fName );
    enum zReturnCode feFileAttachInfo (
        int nID,
        enum zAttachStatus * status,
        BSTR * ModelName,
        IDispatch * * pOutSets );
    enum zReturnCode feFileAttachSave (
        int nID,
        int outSET,
        int outVec,
        int ndSet,
        int elSet );
    enum zReturnCode feFileAttachByOutset (
        int nSetID );
    enum zReturnCode feMeshEdgeSplit (
        int nNode1,
        int nNode2,
        int nNodeSetorZero );
    enum zReturnCode feFileWriteSTAAD (
        _bstr_t fName,
        enum zAnalysisType AnalysisType,
        _bstr_t sStructType,
        _bstr_t sLengthUnits,
        _bstr_t sForceUnits,
        _bstr_t sPropUnits,
        double dGravConstant,
        VARIANT_BOOL bModalCalc,
        double dModalCutOffFreq,
        int nModalCutOffMode,
        VARIANT_BOOL bPrintModel,
        VARIANT_BOOL bPrintDisp,
        VARIANT_BOOL bPrintReactions,
        VARIANT_BOOL bPrintMemberForces,
        VARIANT_BOOL bPrintMemberStresses,
        VARIANT_BOOL bPrintElemForces,
        VARIANT_BOOL bPrintJointForces,
        VARIANT_BOOL bPostDisp,
        VARIANT_BOOL bPostSectionDisp,
        VARIANT_BOOL bPostMemberForces,
        VARIANT_BOOL bPostStresses );
    enum zReturnCode feMeasureDistanceBetweenSolids (
        int solidID1,
        int solidID2,
        double * dist );
    enum zReturnCode feSurfaceNonManifoldAdd2 (
        int solidSET,
        double dTolerance );
    enum zReturnCode feFileWriteFNO (
        int nSetSet,
        int nVectorSet,
        int nGroup,
        _bstr_t fName );
    int feChartPaneGetDisplayed ( );
    enum zReturnCode feChartPaneSetDisplayed (
        int nChartID );
    enum zReturnCode feSetFree (
        int nSetID );
    enum zReturnCode feSetFreeNotInSet (
        int nSetID );
    enum zReturnCode feGroupGenerate2 (
        int elemSET,
        VARIANT_BOOL planer,
        int brkPropMatl,
        int brkLayer,
        enum zColor brkColor,
        double brkAngle,
        VARIANT_BOOL brkMatchNormal,
        VARIANT_BOOL brkNonManifold,
        VARIANT_BOOL addLayers,
        int nExpandGroup );
    enum zReturnCode feSurfaceNonManifoldAdd3 (
        int solidSET,
        double dTolerance,
        VARIANT_BOOL bIntermediateCheck );
    enum zReturnCode feProjectOnto (
        enum zDataType entityTYPE,
        int entitySET,
        enum zProjectOnto projOnto,
        enum zProjectAlong projAlong,
        int ontoSET,
        const _variant_t & vOntoLocation,
        const _variant_t & vOntoVector,
        const _variant_t & vAlongVector,
        VARIANT_BOOL bExtendCurves,
        VARIANT_BOOL bVectorBothDirections );
    enum zReturnCode feFileWriteIdeas (
        _bstr_t fName,
        _bstr_t PartName,
        VARIANT_BOOL WriteGroups,
        VARIANT_BOOL AbsoluteTempScale,
        int UnitSystem,
        double UserLengthFactor,
        VARIANT_BOOL UserForceOrMass,
        double UserForceOrMassFactor,
        double UserTempFactor,
        double UserTempOffset );
    enum zReturnCode feViewAutoscaleVisible (
        int vuID,
        VARIANT_BOOL redoBox );
    enum zReturnCode feViewAutoscaleAll (
        int vuID,
        VARIANT_BOOL redoBox );
    enum zReturnCode feMeshSmooth2 (
        int elemSET,
        int fixednodeSET,
        VARIANT_BOOL laplaceSmooth,
        int iter,
        double tolerance );
    enum zReturnCode feSurfaceOffsetTangent (
        int nSeedSurface,
        double dTolerance,
        VARIANT_BOOL bAutoOffset,
        double dOffset,
        VARIANT_BOOL bDeleteOriginal,
        VARIANT_BOOL bCreateGroup );
    enum zReturnCode feMeshExtrudeElem2 (
        int elemSET,
        double axisLEN,
        const _variant_t & axisOrig,
        const _variant_t & axisVEC,
        int propID,
        int NumElem,
        int method,
        VARIANT_BOOL radialspherical,
        int ontoSurfSetID,
        VARIANT_BOOL matchCurrent,
        VARIANT_BOOL deleteOrig );
    enum zReturnCode feWindowSetSize (
        int vuID,
        int left,
        int top,
        int horz,
        int vert );
    enum zReturnCode feMeasureDistanceBetweenGeometry (
        enum zDataType enFromType,
        int nFromSet,
        enum zDataType enToType,
        int nToSet,
        VARIANT_BOOL bMinimum,
        int * nFromID,
        int * nToID,
        VARIANT * vFrom,
        VARIANT * vTo,
        double * dDistance );
    enum zReturnCode feOutputProcessEnvelopeFromSets (
        VARIANT_BOOL bFullSet,
        enum zOutputProcessEnvType ntype,
        enum zOutputProcessEnvApproach nApproach,
        VARIANT_BOOL bEnvelopeInSets,
        VARIANT_BOOL bEnvelopeAcrossSets,
        VARIANT_BOOL bSetInfo,
        int nSetSet,
        int nVectorSet,
        int to_setID );
    enum zReturnCode feFileAttachSave2 (
        int nID,
        int outSET,
        int outVec,
        int ndSet,
        int elSet,
        VARIANT_BOOL bDetach );
    enum zReturnCode feRenumberOpt2 (
        enum zDataType entityTYPE,
        int entitySET,
        int startID,
        int renumMethod,
        int renumCSys,
        VARIANT_BOOL renumAbs,
        VARIANT_BOOL renumDescend,
        VARIANT_BOOL renumConstOff,
        const _variant_t & xyzSortOrder );
    enum zReturnCode feFileWriteFNO2 (
        int nSetSet,
        int nVectorSet,
        int nOutputOnGroup,
        int nElementConnectivityGroup,
        _bstr_t fName );
    enum zReturnCode feSolidSweepBetween (
        int nSurfID1,
        int nSurfID2,
        int nPtID1,
        int nPtID2,
        double blendFactor );
    enum zReturnCode feSolidSweep (
        int surfaceSET,
        int curveSET );
    enum zReturnCode feElemCountOnProp (
        int nPropSetID,
        VARIANT * vPropID,
        VARIANT * vElemCount );
    enum zReturnCode feSurfaceMidAuto2 (
        int suSetID,
        double dTargetThickness,
        VARIANT_BOOL bCombineTangent,
        double dAngleTolerance,
        VARIANT_BOOL bAutoAdd,
        VARIANT_BOOL bReversePairs );
    enum zReturnCode feCheckSumForces2 (
        VARIANT_BOOL useBodyLoad,
        VARIANT_BOOL expandGEOM,
        VARIANT_BOOL doLIST,
        VARIANT_BOOL useSETS,
        int nodeSET,
        int elemSET,
        int loaddefSET,
        const _variant_t & basePOINT,
        int csysID,
        VARIANT * summedFORCES );
    enum zReturnCode feCompute3DInvariants (
        VARIANT_BOOL bStress,
        const _variant_t & dTensor,
        VARIANT * dInvariant );
    enum zReturnCode feCompute2DInvariants (
        VARIANT_BOOL bStress,
        const _variant_t & dTensor,
        VARIANT * dInvariant );
    enum zReturnCode feMeshTetSolid2 (
        enum zDataType entityTYPE,
        int entitySET,
        int propID,
        VARIANT_BOOL surfaceMeshOnly,
        VARIANT_BOOL makeMidside,
        double tetGrowth,
        VARIANT_BOOL checkSurfElem,
        VARIANT_BOOL deleteSurfElem,
        VARIANT_BOOL midsideGeom,
        double midsideAngle,
        VARIANT_BOOL multiThruThickness,
        VARIANT_BOOL sliverRemoval,
        int tetOptimization );
    enum zReturnCode feAppColorCreate (
        enum zColor enColor,
        enum zColor enPattern,
        enum zColor enLinestyle );
    enum zReturnCode feAppColorGetBaseColor (
        int nColor,
        enum zColor * penColor );
    enum zReturnCode feAppColorGetPattern (
        int nColor,
        enum zColor * penPattern );
    enum zReturnCode feAppColorGetLinestyle (
        int nColor,
        enum zColor * penLinestyle );
    enum zReturnCode feAppColorGetRGB (
        int nColor,
        int * pnRed,
        int * pnGreen,
        int * pnBlue );
    enum zReturnCode feCheckCoincidentNode3 (
        int mergeSET,
        double tolerance,
        VARIANT_BOOL merge,
        int nMergeMode,
        int nMergeLoc,
        VARIANT_BOOL bMergeAcrossConnections,
        VARIANT_BOOL nMergeAcrossOutputCSys,
        int nMergeAcrossCSysID,
        int nMessageMode,
        VARIANT_BOOL bSaveGroups );
    enum zReturnCode feVectorRotate (
        const _variant_t & baseXYZ,
        const _variant_t & vecXYZ,
        double angle,
        const _variant_t & origin,
        const _variant_t & Axis,
        VARIANT * baseROT,
        VARIANT * vecROT );
    enum zReturnCode fePlaneRotate (
        const _variant_t & baseXYZ,
        const _variant_t & vecXXYZ,
        const _variant_t & vecZXYZ,
        double angle,
        const _variant_t & origin,
        const _variant_t & Axis,
        VARIANT * baseROT,
        VARIANT * vecXROT,
        VARIANT * vecYROT,
        VARIANT * vecZROT );
    enum zReturnCode feSolidFillCavity (
        int curveID );
    enum zReturnCode feOutputTransform2 (
        int setSET,
        int vecSET,
        int nodeSET,
        int elemSET,
        enum zOutputDestination nodalMode,
        int nodalCSysID,
        VARIANT_BOOL nodalGlobalComp,
        enum zOutputDestination plateMode,
        int plateCSysID,
        int plateDOF,
        const _variant_t & plateVEC,
        double plateAngle,
        enum zOutputDestination solidMode,
        int solidCSysID,
        VARIANT_BOOL engrShearStrain );
    enum zReturnCode feSolidEmbedMultiple (
        int baseID,
        int toolSetID,
        VARIANT_BOOL Redraw );
    enum zReturnCode feAlignBetweenCSys (
        enum zDataType entityTYPE,
        int entitySET,
        int nFromCSysID,
        int nToCSysID );
    enum zReturnCode feMeshSizeCurveMatchNodes (
        int nCurveSet,
        int nNodeSet,
        double dTolerance );
    enum zReturnCode feMeshSizeCurveMatchXYZ (
        int nCurveSet,
        int nNumXYZ,
        const _variant_t & vecXYZ,
        double dTolerance );
    enum zReturnCode feSurfaceNonManifoldAddExpress (
        int solidSetID,
        double dTolerance );
    enum zReturnCode feCurveOffsetCurveWasher2 (
        int curveSET,
        int faceID,
        int nMode,
        VARIANT_BOOL bAutoSelect,
        VARIANT_BOOL bSaveSplit,
        VARIANT_BOOL bExtend,
        double dOffset,
        int nOffsetmode );
    enum zReturnCode feCurvePad (
        int nCurve,
        double dValue,
        enum zPadOffsetType enPadOffsetType,
        enum zPadAlignment enPadAlignment,
        VARIANT_BOOL bPadAddWasher,
        int nPadAlignCurve,
        VARIANT_BOOL bSetupMappedMeshing,
        const _variant_t & alignVEC );
    enum zReturnCode feFileReadStepOpt2 (
        VARIANT_BOOL useDlg,
        _bstr_t fName,
        int layer,
        int color,
        VARIANT_BOOL increment_layer,
        VARIANT_BOOL increment_color,
        VARIANT_BOOL assign_color,
        VARIANT_BOOL bodies,
        VARIANT_BOOL faceted,
        VARIANT_BOOL Surfaces,
        VARIANT_BOOL Curves,
        VARIANT_BOOL Points,
        VARIANT_BOOL optimize,
        VARIANT_BOOL simplify );
    enum zReturnCode feFileWriteStep2 (
        _bstr_t fName,
        int solidSET,
        int format );
    int feAppMessageClear ( );
    enum zReturnCode feGetRealLength (
        _bstr_t title,
        double * value );
    enum zReturnCode feModifySurfaceNormal (
        enum zDataType entityTYPE,
        int entitySET );
    enum zReturnCode feMeshEdgeSplit2 (
        int nNode1,
        int nNode2,
        int nNumSplits,
        int nBiasType,
        int nBiasLocation,
        double dBias,
        int nNodeSetorZero );
    enum zReturnCode feCurveProjectCurvesOntoSurfaces (
        int cuSetID,
        int suSetID,
        int extendMode,
        VARIANT_BOOL attrib_trans );
    enum zReturnCode feSolidExtendEdgesToSurfaces (
        int cuSetID,
        int suSetID,
        int nExtendShape,
        VARIANT_BOOL bEdgeAuto );
    enum zReturnCode feSolidRemoveRedundantPoint (
        int ptID );
    enum zReturnCode feSolidRemoveBlendsBelowRadius (
        int soSetID,
        double max_rad );
    enum zReturnCode feSolidMovePointOntoGeometry (
        int ptSetID,
        int geomID,
        enum zDataType geomTYPE,
        VARIANT_BOOL bAlongEdge );
    enum zReturnCode feSolidRayFire (
        int soSetID,
        int nNumRay,
        const _variant_t & vRayLoc,
        const _variant_t & vRayDir,
        VARIANT * nHitSurface,
        VARIANT * vHitLoc );
    enum zReturnCode feSurfaceRayFire (
        int suSetID,
        int nNumRay,
        const _variant_t & vRayLoc,
        const _variant_t & vRayDir,
        VARIANT * nHitSurface,
        VARIANT * vHitLoc );
    enum zReturnCode feSolidExtendToSurface (
        int suID1,
        int suID2 );
    enum zReturnCode feSolidMidSurfaceManualInput (
        int suSet1_ID,
        int suSet2_ID );
    enum zReturnCode feGroupsContaining (
        enum zDataType enDataType,
        int nEntityID,
        int nGroupSetID );
    enum zReturnCode feMeasureDistanceBetweenNodes2 (
        int nFrom,
        int nTo,
        int nOutSetID,
        int nOutVecID,
        int nCSysID,
        VARIANT * vecBASE,
        VARIANT * vecTip,
        VARIANT * vecDist,
        double * magDist );
    enum zReturnCode feMeshUnzip2 (
        int fromSET,
        int toSET,
        int connectWith,
        int orientMode,
        int orientID,
        const _variant_t & orientVector,
        const _variant_t & dof,
        VARIANT_BOOL rigidReverse );
    enum zReturnCode feAppSetModel32 (
        int nHiModelID,
        int nLoModelID );
    enum zReturnCode feAppGetModel32 (
        int * nHiModelID,
        int * nLoModelID );
    enum zReturnCode feAppUndoCheckpoint (
        _bstr_t undoTitle );
    enum zReturnCode feSurfaceGetUnderlying (
        int nSurfaceID,
        VARIANT_BOOL bAutoOffset,
        double dOffset,
        double dSizeFactor );
    enum zReturnCode feGroupGenElemShape (
        int elemSET );
    enum zReturnCode feEntitySetVisibility (
        enum zVisibilityType visType,
        int visID,
        VARIANT_BOOL bIsVisible,
        VARIANT_BOOL bRedraw );
    enum zReturnCode feEntityGetVisibility (
        enum zVisibilityType visType,
        int visSetID,
        VARIANT_BOOL bIsVisible );
    enum zReturnCode feVectorArrayTransform (
        int Count,
        int fromCSYS,
        int toCSYS,
        const _variant_t & baseXYZ,
        const _variant_t & fromxyz,
        VARIANT * xyz );
    enum zReturnCode feSurfaceFromMesh2 (
        int elemSetID,
        VARIANT_BOOL bDeleteMesh,
        VARIANT_BOOL bWireframeOnly,
        double tolerance,
        VARIANT_BOOL bLengthCutoff,
        double len_cut_val,
        double ang_tol );
    enum zReturnCode feSolidRemoveCurve (
        int cuSetID,
        enum zCurveRemoveOption nRemoveOption );
    enum zReturnCode feSurfaceOffset (
        int surfID,
        double dOffset );
    enum zReturnCode feCrossSectionReport (
        int nPropID,
        VARIANT_BOOL bDoEndA,
        VARIANT_BOOL bCopyToClipboard,
        _bstr_t fName,
        enum zPictFormat2 nFileFormat );
    enum zReturnCode feGroupGenVisible (
        int nGroupID,
        VARIANT_BOOL bIncludePropAndMatl,
        _bstr_t title );
    enum zReturnCode feCurveSolidToFEMAP (
        int cuSetID );
    enum zReturnCode feResultsRankingToDataTable (
        VARIANT_BOOL bOverrideLock,
        enum zDataType nRankByEntity,
        enum zRankingMethod nMethod,
        enum zRankingApproach nApproach,
        enum zRankingType ntype,
        int nNumberToRank,
        int nEntitySetID,
        int nResultsSetSetID,
        int nResultsVectorSetID );
    enum zReturnCode feResultsToDataTable (
        VARIANT_BOOL bOverrideLock,
        int nCSysID,
        VARIANT_BOOL bSetInColumns,
        VARIANT_BOOL bVecInColumns,
        VARIANT_BOOL bEntInColumns,
        VARIANT_BOOL bAltColumnOrder,
        int nResultsSetSetID,
        int nResultsVectorSetID,
        int nEntitySetID );
    enum zReturnCode feDeleteOutputEntry (
        int setSET,
        int vectorSET,
        int nodeSET,
        int elemSET );
    enum zReturnCode feDeleteOutput2 (
        int outputSetSET,
        int vectorSET );
    enum zReturnCode feGetElementFacesFromSet (
        _bstr_t title,
        int nElemSetID,
        int * nCount,
        VARIANT * elemID,
        VARIANT * faceID );
    enum zReturnCode feFileReadCSVResults (
        _bstr_t fName );
    enum zReturnCode feFileReadJT (
        _bstr_t fName );
    enum zReturnCode feFileWriteJT (
        _bstr_t fName,
        int solidSET );
    enum zReturnCode feSurfaceCornersMultiple (
        int NumberOfSurfaces,
        const _variant_t & fourCorners,
        const _variant_t & c1,
        const _variant_t & c2,
        const _variant_t & c3,
        const _variant_t & c4 );
    enum zReturnCode feCurvesBreakAtIntersections (
        int curveSET );
    enum zReturnCode feSurfaceExtract (
        int suSetID );
    enum zReturnCode feGenerateCopy2 (
        enum zDataType entityTYPE,
        int entitySET,
        const _variant_t & alongVEC,
        int nodeINC,
        VARIANT_BOOL Match,
        VARIANT_BOOL matchColorLayer );
    enum zReturnCode feGenerateScale2 (
        enum zDataType entityTYPE,
        int entitySET,
        const _variant_t & origVEC,
        const _variant_t & scaleVEC,
        int csysID,
        VARIANT_BOOL Match,
        VARIANT_BOOL matchColorLayer );
    enum zReturnCode feGenerateRadialCopy2 (
        enum zDataType entityTYPE,
        int entitySET,
        const _variant_t & origXYZ,
        const _variant_t & aroundVEC,
        double Length,
        VARIANT_BOOL bScaleAroundVec,
        VARIANT_BOOL Match,
        VARIANT_BOOL matchColorLayer );
    enum zReturnCode feGenerateRotate2 (
        enum zDataType entityTYPE,
        int entitySET,
        const _variant_t & origVEC,
        const _variant_t & axisVEC,
        double rotANGLE,
        double transDIST,
        VARIANT_BOOL Match,
        VARIANT_BOOL matchColorLayer );
    enum zReturnCode feGenerateReflect2 (
        enum zDataType entityTYPE,
        int entitySET,
        const _variant_t & origVEC,
        const _variant_t & normVEC,
        double trapWIDTH,
        VARIANT_BOOL Match,
        VARIANT_BOOL matchColorLayer );
    enum zReturnCode feSolidExtractCenterlines (
        int soSetID,
        int inMatID,
        VARIANT_BOOL bTubularOnly );
    enum zReturnCode feViewShow2 (
        enum zDataType dTYPE,
        int ID,
        VARIANT_BOOL qAutoscale );
    enum zReturnCode feWindowShow2 (
        enum zDataType dTYPE,
        int ID,
        VARIANT_BOOL qAutoscale );
    enum zReturnCode feCreateFunction (
        int nNumAvailableTypes,
        const _variant_t & AvailableTypes,
        int * nID );
    int feAppModelInfoShow ( );
    int feAppSetModelInfoShow (
        VARIANT_BOOL bEnable );
    enum zReturnCode feSolidSlice2 (
        int solidSET,
        const _variant_t & planeBase,
        const _variant_t & planeNormal,
        VARIANT_BOOL bSliceOrSection,
        VARIANT_BOOL bMatchAcrossSlice,
        int nNumberOfPlanes,
        double dMultiPlaneOffset,
        enum zColor nSliceColor,
        VARIANT_BOOL Redraw );
    enum zReturnCode feSolidSliceAlongFace2 (
        int surfaceID,
        VARIANT_BOOL bSliceOrSection,
        VARIANT_BOOL bMatchAcrossSlice,
        enum zColor nSliceColor,
        VARIANT_BOOL Redraw );
    enum zReturnCode feSolidSliceWithSheet2 (
        int solidSET,
        int sheetSET,
        VARIANT_BOOL bSliceOrSection,
        VARIANT_BOOL bMatchAcrossSlice,
        enum zColor nSliceColor,
        VARIANT_BOOL deleteTool,
        VARIANT_BOOL Redraw );
    enum zReturnCode feSolidSliceWithCurve2 (
        int solidSET,
        int curveSET,
        VARIANT_BOOL bSliceOrSection,
        VARIANT_BOOL bMatchAcrossSlice,
        enum zColor nSliceColor,
        VARIANT_BOOL bAlongCurveNormal,
        VARIANT_BOOL bVectorDirectionOnly,
        const _variant_t & vectorBase,
        const _variant_t & vectorDirection,
        VARIANT_BOOL deleteTool,
        VARIANT_BOOL Redraw );
    enum zReturnCode feViewShowMultiple (
        int nSets,
        const _variant_t & piTYPEs,
        const _variant_t & piSetIDs,
        VARIANT_BOOL qAutoscale );
    enum zReturnCode feOutputGlobalPly (
        int nSetSet,
        int nVectorSet,
        int nGlobalPlySET,
        VARIANT_BOOL bTop,
        VARIANT_BOOL bBottom,
        VARIANT_BOOL bGlobalPly );
    enum zReturnCode feSolidAlignSplits (
        enum zDataType entityTYPE,
        int setID,
        enum zSolidAlignVecMode vecMode,
        const _variant_t & axisVEC );
    enum zReturnCode feAppUndoClear ( );
    enum zReturnCode feChartPaneCopy (
        VARIANT_BOOL bCopyPicture,
        VARIANT_BOOL bCopyText );
    enum zReturnCode feEntitySetVisibility2 (
        enum zVisibilityType visType,
        int nCount,
        const _variant_t & visEnt,
        const _variant_t & entVisible,
        VARIANT_BOOL bRedraw );
    enum zReturnCode feAppResetLocale ( );
    int feFileReadStepOpt (
        VARIANT_BOOL useDlg,
        _bstr_t fName,
        _bstr_t title,
        int layer,
        int color,
        VARIANT_BOOL increment_layer,
        VARIANT_BOOL increment_color,
        VARIANT_BOOL assign_color,
        VARIANT_BOOL class_VI,
        VARIANT_BOOL class_V,
        VARIANT_BOOL class_IV,
        VARIANT_BOOL class_III,
        VARIANT_BOOL class_II_wf,
        VARIANT_BOOL class_II_curv,
        VARIANT_BOOL class_II_rect,
        VARIANT_BOOL class_II_2d,
        VARIANT_BOOL smooth_g1,
        VARIANT_BOOL explode,
        VARIANT_BOOL analytics,
        VARIANT_BOOL stitch,
        VARIANT_BOOL closed_orient,
        VARIANT_BOOL pro_e,
        VARIANT_BOOL check_input,
        VARIANT_BOOL check_output );

    // Properties:
    ISetPtr GetfeSet ( );
    void PutfeSet ( struct ISet * _val );
    IReadPtr GetfeRead ( );
    void PutfeRead ( struct IRead * _val );
    IMatlPtr GetfeMatl ( );
    void PutfeMatl ( struct IMatl * _val );
    IPropPtr GetfeProp ( );
    void PutfeProp ( struct IProp * _val );
    INodePtr GetfeNode ( );
    void PutfeNode ( struct INode * _val );
    IElemPtr GetfeElem ( );
    void PutfeElem ( struct IElem * _val );
    ICSysPtr GetfeCSys ( );
    void PutfeCSys ( struct ICSys * _val );
    IBCSetPtr GetfeBCSet ( );
    void PutfeBCSet ( struct IBCSet * _val );
    IBCNodePtr GetfeBCNode ( );
    void PutfeBCNode ( struct IBCNode * _val );
    IBCGeomPtr GetfeBCGeom ( );
    void PutfeBCGeom ( struct IBCGeom * _val );
    IBCEqnPtr GetfeBCEqn ( );
    void PutfeBCEqn ( struct IBCEqn * _val );
    ILoadSetPtr GetfeLoadSet ( );
    void PutfeLoadSet ( struct ILoadSet * _val );
    ILoadNTempPtr GetfeLoadNTemp ( );
    void PutfeLoadNTemp ( struct ILoadNTemp * _val );
    ILoadETempPtr GetfeLoadETemp ( );
    void PutfeLoadETemp ( struct ILoadETemp * _val );
    ILoadMeshPtr GetfeLoadMesh ( );
    void PutfeLoadMesh ( struct ILoadMesh * _val );
    ILoadGeomPtr GetfeLoadGeom ( );
    void PutfeLoadGeom ( struct ILoadGeom * _val );
    IGroupPtr GetfeGroup ( );
    void PutfeGroup ( struct IGroup * _val );
    IViewPtr GetfeView ( );
    void PutfeView ( struct IView * _val );
    IViewOrientPtr GetfeViewOrient ( );
    void PutfeViewOrient ( struct IViewOrient * _val );
    IVarPtr GetfeVar ( );
    void PutfeVar ( struct IVar * _val );
    IReportPtr GetfeReport ( );
    void PutfeReport ( struct IReport * _val );
    ILayerPtr GetfeLayer ( );
    void PutfeLayer ( struct ILayer * _val );
    IContactPtr GetfeContact ( );
    void PutfeContact ( struct IContact * _val );
    IFunctionPtr GetfeFunction ( );
    void PutfeFunction ( struct IFunction * _val );
    IOptimPtr GetfeOptim ( );
    void PutfeOptim ( struct IOptim * _val );
    IOutputSetPtr GetfeOutputSet ( );
    void PutfeOutputSet ( struct IOutputSet * _val );
    IOutputPtr GetfeOutput ( );
    void PutfeOutput ( struct IOutput * _val );
    ITmgBCPtr GetfeTMGBC ( );
    void PutfeTMGBC ( struct ITmgBC * _val );
    ITmgCtlPtr GetfeTMGCtrl ( );
    void PutfeTMGCtrl ( struct ITmgCtl * _val );
    ITmgIntPtr GetfeTMGInt ( );
    void PutfeTMGInt ( struct ITmgInt * _val );
    ITmgOptPtr GetfeTMGOpt ( );
    void PutfeTMGOpt ( struct ITmgOpt * _val );
    ITmgRealPtr GetfeTMGReal ( );
    void PutfeTMGReal ( struct ITmgReal * _val );
    IPointPtr GetfePoint ( );
    void PutfePoint ( struct IPoint * _val );
    ICurvePtr GetfeCurve ( );
    void PutfeCurve ( struct ICurve * _val );
    ISurfacePtr GetfeSurface ( );
    void PutfeSurface ( struct ISurface * _val );
    ISolidPtr GetfeSolid ( );
    void PutfeSolid ( struct ISolid * _val );
    IAnalysisMgrPtr GetfeAnalysisSet ( );
    void PutfeAnalysisSet ( struct IAnalysisMgr * _val );
    IAnalysisCasePtr GetfeAnalysisCase ( );
    void PutfeAnalysisCase ( struct IAnalysisCase * _val );
    IUserDataPtr GetfeUserData ( );
    void PutfeUserData ( struct IUserData * _val );
    ITextPtr GetfeText ( );
    void PutfeText ( struct IText * _val );
    IAnalysisMgrPtr GetfeAnalysisMgr ( );
    void PutfeAnalysisMgr ( struct IAnalysisMgr * _val );
    IConnectionPropPtr GetfeConnectionProp ( );
    void PutfeConnectionProp ( struct IConnectionProp * _val );
    IConnectionPtr GetfeConnection ( );
    void PutfeConnection ( struct IConnection * _val );
    ISortSetPtr GetfeSort ( );
    void PutfeSort ( struct ISortSet * _val );
    IScratchPtr GetfeScratch ( );
    void PutfeScratch ( struct IScratch * _val );
    ISelectorPtr GetfeSelector ( );
    void PutfeSelector ( struct ISelector * _val );
    ILoadDefinitionPtr GetfeLoadDefinition ( );
    void PutfeLoadDefinition ( struct ILoadDefinition * _val );
    IGFXPointPtr GetfeGFXPoint ( );
    void PutfeGFXPoint ( struct IGFXPoint * _val );
    IGFXLinePtr GetfeGFXLine ( );
    void PutfeGFXLine ( struct IGFXLine * _val );
    IGFXArrowPtr GetfeGFXArrow ( );
    void PutfeGFXArrow ( struct IGFXArrow * _val );
    IGFXTria3Ptr GetfeGFXTria3 ( );
    void PutfeGFXTria3 ( struct IGFXTria3 * _val );
    IGFXQuad4Ptr GetfeGFXQuad4 ( );
    void PutfeGFXQuad4 ( struct IGFXQuad4 * _val );
    IBCDefinitionPtr GetfeBCDefinition ( );
    void PutfeBCDefinition ( struct IBCDefinition * _val );
    ILayupPtr GetfeLayup ( );
    void PutfeLayup ( struct ILayup * _val );
    IGlobalPlyPtr GetfeGlobalPly ( );
    void PutfeGlobalPly ( struct IGlobalPly * _val );
    IContactPtr GetfeConnectionRegion ( );
    void PutfeConnectionRegion ( struct IContact * _val );
    ILoadBoltPtr GetfeLoadBolt ( );
    void PutfeLoadBolt ( struct ILoadBolt * _val );
    IMapOutputPtr GetfeMapOutput ( );
    void PutfeMapOutput ( struct IMapOutput * _val );
    IDataSurfPtr GetfeDataSurf ( );
    void PutfeDataSurf ( struct IDataSurf * _val );
    IDataTablePtr GetfeDataTable ( );
    void PutfeDataTable ( struct IDataTable * _val );
    IReferencePtr GetfeReference ( );
    void PutfeReference ( struct IReference * _val );
    IAeroPanelPtr GetfeAeroPanel ( );
    void PutfeAeroPanel ( struct IAeroPanel * _val );
    IAeroPropPtr GetfeAeroProp ( );
    void PutfeAeroProp ( struct IAeroProp * _val );
    IAeroSplinePtr GetfeAeroSpline ( );
    void PutfeAeroSpline ( struct IAeroSpline * _val );
    IFreebodyPtr GetfeFreebody ( );
    void PutfeFreebody ( struct IFreebody * _val );
    IMesherPtr GetfeMesher ( );
    void PutfeMesher ( struct IMesher * _val );
    IElementQualityPtr GetfeElementQuality ( );
    void PutfeElementQuality ( struct IElementQuality * _val );
    IAeroSurfPtr GetfeAeroSurf ( );
    void PutfeAeroSurf ( struct IAeroSurf * _val );
    IStressLinearPtr GetfeStressLinear ( );
    void PutfeStressLinear ( struct IStressLinear * _val );
    ISEReferencePtr GetfeSEReference ( );
    void PutfeSEReference ( struct ISEReference * _val );
    IChartPtr GetfeChart ( );
    void PutfeChart ( struct IChart * _val );
    IChartSeriesPtr GetfeChartSeries ( );
    void PutfeChartSeries ( struct IChartSeries * _val );
    IResultsPtr GetfeResults ( );
    void PutfeResults ( struct IResults * _val );
    ITableDataPtr GetfeTableData ( );
    void PutfeTableData ( struct ITableData * _val );
    IInterpolatePtr GetfeInterpolate ( );
    void PutfeInterpolate ( struct IInterpolate * _val );
    IMapDataPtr GetfeMapData ( );
    void PutfeMapData ( struct IMapData * _val );
    ITrackDataPtr GetfeTrackData ( );
    void PutfeTrackData ( struct ITrackData * _val );
    IBeamCalculatorPtr GetfeBeamCalculator ( );
    void PutfeBeamCalculator ( struct IBeamCalculator * _val );
    IAnalysisStudyPtr GetfeAnalysisStudy ( );
    void PutfeAnalysisStudy ( struct IAnalysisStudy * _val );
    IDrawErasePtr GetfeDrawErase ( );
    void PutfeDrawErase ( struct IDrawErase * _val );
    IFreqPtr GetfeFreq ( );
    void PutfeFreq ( struct IFreq * _val );
    IMidFaceCentroidModelPtr GetfeMidFaceCentroidModel ( );
    void PutfeMidFaceCentroidModel ( struct IMidFaceCentroidModel * _val );
    IUserDefinedGraphicsPtr GetfeUserDefinedGraphics ( );
    void PutfeUserDefinedGraphics ( struct IUserDefinedGraphics * _val );
    IVectorPtr GetfeVector ( );
    void PutfeVector ( struct IVector * _val );
    IPlanePtr GetfePlane ( );
    void PutfePlane ( struct IPlane * _val );
    _bstr_t GetPgSetup_HdrFont ( );
    void PutPgSetup_HdrFont ( _bstr_t _val );
    _bstr_t GetPgSetup_TextFont ( );
    void PutPgSetup_TextFont ( _bstr_t _val );
    _bstr_t GetPgSetup_Header ( );
    void PutPgSetup_Header ( _bstr_t _val );
    _bstr_t GetPgSetup_Footer ( );
    void PutPgSetup_Footer ( _bstr_t _val );
    VARIANT_BOOL GetPgSetup_DefaultHdrFont ( );
    void PutPgSetup_DefaultHdrFont ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPgSetup_DefaultTextFont ( );
    void PutPgSetup_DefaultTextFont ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPgSetup_FillMargins ( );
    void PutPgSetup_FillMargins ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPgSetup_MaintainAspect ( );
    void PutPgSetup_MaintainAspect ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPgSetup_IntegerScaling ( );
    void PutPgSetup_IntegerScaling ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPgSetup_PrintBorder ( );
    void PutPgSetup_PrintBorder ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPgSetup_SwapBW ( );
    void PutPgSetup_SwapBW ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPgSetup_TransparentBkgd ( );
    void PutPgSetup_TransparentBkgd ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPgSetup_Monochrome ( );
    void PutPgSetup_Monochrome ( VARIANT_BOOL _val );
    int GetPgSetup_HdrFontSize ( );
    void PutPgSetup_HdrFontSize ( int _val );
    int GetPgSetup_TextFontSize ( );
    void PutPgSetup_TextFontSize ( int _val );
    int GetPgSetup_PenScale ( );
    void PutPgSetup_PenScale ( int _val );
    int GetPgSetup_VertAlign ( );
    void PutPgSetup_VertAlign ( int _val );
    int GetPgSetup_HorzAlign ( );
    void PutPgSetup_HorzAlign ( int _val );
    double GetPgSetup_CustomHeight ( );
    void PutPgSetup_CustomHeight ( double _val );
    double GetPgSetup_CustomWidth ( );
    void PutPgSetup_CustomWidth ( double _val );
    double GetPgSetup_LeftMargin ( );
    void PutPgSetup_LeftMargin ( double _val );
    double GetPgSetup_RightMargin ( );
    void PutPgSetup_RightMargin ( double _val );
    double GetPgSetup_TopMargin ( );
    void PutPgSetup_TopMargin ( double _val );
    double GetPgSetup_BottomMargin ( );
    void PutPgSetup_BottomMargin ( double _val );
    double GetPgSetup_RenderScale ( );
    void PutPgSetup_RenderScale ( double _val );
    _bstr_t GetPref_LibAnalysis ( );
    void PutPref_LibAnalysis ( _bstr_t _val );
    _bstr_t GetPref_LibProp ( );
    void PutPref_LibProp ( _bstr_t _val );
    _bstr_t GetPref_LibReport ( );
    void PutPref_LibReport ( _bstr_t _val );
    _bstr_t GetPref_LibContPal ( );
    void PutPref_LibContPal ( _bstr_t _val );
    _bstr_t GetPref_LibFunction ( );
    void PutPref_LibFunction ( _bstr_t _val );
    _bstr_t GetPref_LibMatl ( );
    void PutPref_LibMatl ( _bstr_t _val );
    _bstr_t GetPref_LibMatlDef ( );
    void PutPref_LibMatlDef ( _bstr_t _val );
    _bstr_t GetPref_LibView ( );
    void PutPref_LibView ( _bstr_t _val );
    _bstr_t GetPref_LibPalette ( );
    void PutPref_LibPalette ( _bstr_t _val );
    _bstr_t GetPref_ViewDimetric ( );
    void PutPref_ViewDimetric ( _bstr_t _val );
    _bstr_t GetPref_ViewIsometric ( );
    void PutPref_ViewIsometric ( _bstr_t _val );
    _bstr_t GetPref_ViewTrimetric ( );
    void PutPref_ViewTrimetric ( _bstr_t _val );
    _bstr_t GetPref_StartupProg ( );
    void PutPref_StartupProg ( _bstr_t _val );
    _bstr_t GetPref_CustomToolsPath ( );
    void PutPref_CustomToolsPath ( _bstr_t _val );
    _bstr_t GetPref_DBScratch ( );
    void PutPref_DBScratch ( _bstr_t _val );
    int GetPref_LengthBasedMeshSize ( );
    void PutPref_LengthBasedMeshSize ( int _val );
    _bstr_t GetPref_MsgWndFont ( );
    void PutPref_MsgWndFont ( _bstr_t _val );
    _bstr_t GetPref_NetKeyDir ( );
    void PutPref_NetKeyDir ( _bstr_t _val );
    VARIANT_BOOL GetPref_PictureCopyTextForXY ( );
    void PutPref_PictureCopyTextForXY ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_WorkplaneNotVisible ( );
    void PutPref_WorkplaneNotVisible ( VARIANT_BOOL _val );
    int GetPref_DefContourPalette ( );
    void PutPref_DefContourPalette ( int _val );
    VARIANT_BOOL GetPref_MetafileToClip ( );
    void PutPref_MetafileToClip ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RenderHW ( );
    void PutPref_RenderHW ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RenderMidside ( );
    void PutPref_RenderMidside ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RepeateCreate ( );
    void PutPref_RepeateCreate ( VARIANT_BOOL _val );
    int GetPref_TooltipDelay ( );
    void PutPref_TooltipDelay ( int _val );
    int GetPref_TooltipDuration ( );
    void PutPref_TooltipDuration ( int _val );
    VARIANT_BOOL GetPref_TrackMousePick ( );
    void PutPref_TrackMousePick ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_PickAllInside ( );
    void PutPref_PickAllInside ( VARIANT_BOOL _val );
    int GetPref_NastranMemory ( );
    void PutPref_NastranMemory ( int _val );
    int GetPref_NastranOutputTo ( );
    void PutPref_NastranOutputTo ( int _val );
    _bstr_t GetPref_NastranOutputPath ( );
    void PutPref_NastranOutputPath ( _bstr_t _val );
    VARIANT_BOOL GetPref_BackupModel ( );
    void PutPref_BackupModel ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_AutomaticTitles ( );
    void PutPref_AutomaticTitles ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_DeleteScratchFile ( );
    void PutPref_DeleteScratchFile ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RunProgNewModels ( );
    void PutPref_RunProgNewModels ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_MeshInMemory ( );
    void PutPref_MeshInMemory ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_FastTriMesh ( );
    void PutPref_FastTriMesh ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_TimedSaveNotify ( );
    void PutPref_TimedSaveNotify ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_TimedSaveOn ( );
    void PutPref_TimedSaveOn ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_GeomLogFile ( );
    void PutPref_GeomLogFile ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_AdjMidsideGeomLoad ( );
    void PutPref_AdjMidsideGeomLoad ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ReadComments ( );
    void PutPref_ReadComments ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_WriteComments ( );
    void PutPref_WriteComments ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ComputePrincipal ( );
    void PutPref_ComputePrincipal ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_AssumeEngrStrain ( );
    void PutPref_AssumeEngrStrain ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ReadDirCos ( );
    void PutPref_ReadDirCos ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_UseVisQ ( );
    void PutPref_UseVisQ ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_KeepSolverWindow ( );
    void PutPref_KeepSolverWindow ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_MinimizeDuringSolve ( );
    void PutPref_MinimizeDuringSolve ( VARIANT_BOOL _val );
    int GetPref_DBCacheBlocksPerPage ( );
    void PutPref_DBCacheBlocksPerPage ( int _val );
    int GetPref_DBCacheMaxMemoryPct ( );
    void PutPref_DBCacheMaxMemoryPct ( int _val );
    int GetPref_DBCacheMaxLabel ( );
    void PutPref_DBCacheMaxLabel ( int _val );
    int GetPref_DBUndoLevels ( );
    void PutPref_DBUndoLevels ( int _val );
    int GetPref_DBLowDiskWarning ( );
    void PutPref_DBLowDiskWarning ( int _val );
    int GetPref_TimedSaveCommands ( );
    void PutPref_TimedSaveCommands ( int _val );
    int GetPref_TimedSaveInterval ( );
    void PutPref_TimedSaveInterval ( int _val );
    int GetPref_GeomEngine ( );
    void PutPref_GeomEngine ( int _val );
    enum zAnalysisTranslator GetPref_AnalysisProg ( );
    void PutPref_AnalysisProg ( enum zAnalysisTranslator _val );
    enum zAnalysisType GetPref_AnalysisType ( );
    void PutPref_AnalysisType ( enum zAnalysisType _val );
    int GetPref_InterfaceStyle ( );
    void PutPref_InterfaceStyle ( int _val );
    int GetPref_NeutralDigits ( );
    void PutPref_NeutralDigits ( int _val );
    int GetPref_SolverMemory ( );
    void PutPref_SolverMemory ( int _val );
    VARIANT_BOOL GetPref_LoadModifyRotate ( );
    void PutPref_LoadModifyRotate ( VARIANT_BOOL _val );
    int GetPref_RecentlyUsedFiles ( );
    void PutPref_RecentlyUsedFiles ( int _val );
    int GetPref_LibViewNumber ( );
    void PutPref_LibViewNumber ( int _val );
    int GetPref_ViewDynamicMode ( );
    void PutPref_ViewDynamicMode ( int _val );
    int GetPref_MsgWndFontSize ( );
    void PutPref_MsgWndFontSize ( int _val );
    enum zColor GetPref_MsgWndBackColor ( );
    void PutPref_MsgWndBackColor ( enum zColor _val );
    enum zColor GetPref_MsgWndErrorColor ( );
    void PutPref_MsgWndErrorColor ( enum zColor _val );
    enum zColor GetPref_MsgWndHighColor ( );
    void PutPref_MsgWndHighColor ( enum zColor _val );
    enum zColor GetPref_MsgWndTextColor ( );
    void PutPref_MsgWndTextColor ( enum zColor _val );
    enum zColor GetPref_MsgWndWarnColor ( );
    void PutPref_MsgWndWarnColor ( enum zColor _val );
    int GetPref_ScrollBackLines ( );
    void PutPref_ScrollBackLines ( int _val );
    double GetPref_AspectRatio ( );
    void PutPref_AspectRatio ( double _val );
    double GetPref_DeltaAngle ( );
    void PutPref_DeltaAngle ( double _val );
    double GetPref_GeometryScale ( );
    void PutPref_GeometryScale ( double _val );
    double GetPref_GeomLoadEdgeFactor ( );
    void PutPref_GeomLoadEdgeFactor ( double _val );
    double GetPref_GeomLoadQuadFactor ( );
    void PutPref_GeomLoadQuadFactor ( double _val );
    double GetPref_GeomLoadTriFactor ( );
    void PutPref_GeomLoadTriFactor ( double _val );
    double GetPref_NeutralVersion ( );
    void PutPref_NeutralVersion ( double _val );
    double GetPref_ViewDynamSpeed ( );
    void PutPref_ViewDynamSpeed ( double _val );
    double GetPref_WtmassFactor ( );
    void PutPref_WtmassFactor ( double _val );
    VARIANT_BOOL GetPref_RenderBeamEdges ( );
    void PutPref_RenderBeamEdges ( VARIANT_BOOL _val );
    int GetPref_RenderBitmapAlignment ( );
    void PutPref_RenderBitmapAlignment ( int _val );
    VARIANT_BOOL GetPref_RenderMemoryOpt ( );
    void PutPref_RenderMemoryOpt ( VARIANT_BOOL _val );
    int GetPref_RenderPixelFormat ( );
    void PutPref_RenderPixelFormat ( int _val );
    VARIANT_BOOL GetPref_RenderTex2D ( );
    void PutPref_RenderTex2D ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RenderTexAllTri ( );
    void PutPref_RenderTexAllTri ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RenderTexSmooth ( );
    void PutPref_RenderTexSmooth ( VARIANT_BOOL _val );
    int GetPref_RenderTexNumber ( );
    void PutPref_RenderTexNumber ( int _val );
    VARIANT_BOOL GetPref_RenderTiming ( );
    void PutPref_RenderTiming ( VARIANT_BOOL _val );
    int GetPref_RenderTDRProtect ( );
    void PutPref_RenderTDRProtect ( int _val );
    VARIANT_BOOL GetInfo_WorkplaneModelAdjust ( );
    void PutInfo_WorkplaneModelAdjust ( VARIANT_BOOL _val );
    VARIANT_BOOL GetInfo_WorkplaneSurfaceAdjust ( );
    void PutInfo_WorkplaneSurfaceAdjust ( VARIANT_BOOL _val );
    VARIANT_BOOL GetInfo_ModelNeedBox ( );
    void PutInfo_ModelNeedBox ( VARIANT_BOOL _val );
    VARIANT_BOOL GetInfo_UpdateAllViews ( );
    void PutInfo_UpdateAllViews ( VARIANT_BOOL _val );
    VARIANT_BOOL GetInfo_TranslateNotes ( );
    void PutInfo_TranslateNotes ( VARIANT_BOOL _val );
    VARIANT_BOOL GetInfo_SnapFullPrecision ( );
    void PutInfo_SnapFullPrecision ( VARIANT_BOOL _val );
    VARIANT_BOOL GetInfo_SnapCoordOnly ( );
    void PutInfo_SnapCoordOnly ( VARIANT_BOOL _val );
    VARIANT_BOOL GetInfo_ViewShowErase ( );
    void PutInfo_ViewShowErase ( VARIANT_BOOL _val );
    VARIANT_BOOL GetInfo_ViewShowUseColor ( );
    void PutInfo_ViewShowUseColor ( VARIANT_BOOL _val );
    int GetInfo_CommandNumber ( );
    void PutInfo_CommandNumber ( int _val );
    int GetInfo_OutputCSys ( );
    void PutInfo_OutputCSys ( int _val );
    enum zNodeType GetInfo_NodeType ( );
    void PutInfo_NodeType ( enum zNodeType _val );
    enum zColor GetInfo_TextBorderColor ( );
    void PutInfo_TextBorderColor ( enum zColor _val );
    int GetInfo_WorkplaneOnSurface ( );
    void PutInfo_WorkplaneOnSurface ( int _val );
    int GetInfo_WorkplaneOnSurfacePrev ( );
    void PutInfo_WorkplaneOnSurfacePrev ( int _val );
    int GetInfo_SnapTo ( );
    void PutInfo_SnapTo ( int _val );
    int GetInfo_SnapStyle ( );
    void PutInfo_SnapStyle ( int _val );
    int GetInfo_SnapSpacingMode ( );
    void PutInfo_SnapSpacingMode ( int _val );
    int GetInfo_WorkplaneTics ( );
    void PutInfo_WorkplaneTics ( int _val );
    int GetInfo_MatlAngleMethod ( );
    void PutInfo_MatlAngleMethod ( int _val );
    int GetInfo_MatlAngleDir ( );
    void PutInfo_MatlAngleDir ( int _val );
    int GetInfo_MatlAngleCSys ( );
    void PutInfo_MatlAngleCSys ( int _val );
    int GetInfo_MeshSizeMinElem ( );
    void PutInfo_MeshSizeMinElem ( int _val );
    enum zColor GetInfo_ViewShowColor ( );
    void PutInfo_ViewShowColor ( enum zColor _val );
    enum zDataType GetInfo_ViewShowEntity ( );
    void PutInfo_ViewShowEntity ( enum zDataType _val );
    int GetInfo_ViewShowLabel ( );
    void PutInfo_ViewShowLabel ( int _val );
    int GetInfo_GroupAutomaticAdd ( );
    void PutInfo_GroupAutomaticAdd ( int _val );
    int GetInfo_SplineOrder ( );
    void PutInfo_SplineOrder ( int _val );
    int GetInfo_LayerNoPick ( );
    void PutInfo_LayerNoPick ( int _val );
    int GetInfo_MatlUserType ( );
    void PutInfo_MatlUserType ( int _val );
    double GetInfo_Version ( );
    void PutInfo_Version ( double _val );
    double GetInfo_WorkplaneLabels ( );
    void PutInfo_WorkplaneLabels ( double _val );
    double GetInfo_DefaultX ( );
    void PutInfo_DefaultX ( double _val );
    double GetInfo_DefaultY ( );
    void PutInfo_DefaultY ( double _val );
    double GetInfo_DefaultZ ( );
    void PutInfo_DefaultZ ( double _val );
    double GetInfo_LineLength ( );
    void PutInfo_LineLength ( double _val );
    double GetInfo_MatlAngle ( );
    void PutInfo_MatlAngle ( double _val );
    double GetInfo_MeshSizeDefault ( );
    void PutInfo_MeshSizeDefault ( double _val );
    double GetInfo_GeometryScale ( );
    void PutInfo_GeometryScale ( double _val );
    VARIANT_BOOL GetTool_CursorSingle ( );
    void PutTool_CursorSingle ( VARIANT_BOOL _val );
    double GetTool_MergeTolerance ( );
    void PutTool_MergeTolerance ( double _val );
    int GetPrint_Copies ( );
    void PutPrint_Copies ( int _val );
    VARIANT_BOOL GetTool_MergeToleranceAuto ( );
    void PutTool_MergeToleranceAuto ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSolid_UpdateActive ( );
    void PutSolid_UpdateActive ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSolid_UpdateDelete ( );
    void PutSolid_UpdateDelete ( VARIANT_BOOL _val );
    int GetSolid_UpdateResizeMode ( );
    void PutSolid_UpdateResizeMode ( int _val );
    double GetSolid_UpdateResizeTol ( );
    void PutSolid_UpdateResizeTol ( double _val );
    __int64 GethMainWnd ( );
    void PuthMainWnd ( __int64 _val );
    __int64 GethListWnd ( );
    void PuthListWnd ( __int64 _val );
    _bstr_t GetModelName ( );
    void PutModelName ( _bstr_t _val );
    _bstr_t GetScratchName ( );
    void PutScratchName ( _bstr_t _val );
    _bstr_t GetFullScratchName ( );
    void PutFullScratchName ( _bstr_t _val );
    _bstr_t GetExePath ( );
    void PutExePath ( _bstr_t _val );
    _bstr_t GetSerialNumber ( );
    void PutSerialNumber ( _bstr_t _val );
    __int64 GetEventLParam ( );
    void PutEventLParam ( __int64 _val );
    _variant_t GetvPref_AngleDimetric ( );
    void PutvPref_AngleDimetric ( const _variant_t & _val );
    _variant_t GetvPref_AngleIsometric ( );
    void PutvPref_AngleIsometric ( const _variant_t & _val );
    _variant_t GetvPref_AngleTrimetric ( );
    void PutvPref_AngleTrimetric ( const _variant_t & _val );
    _variant_t GetvPref_RenderRotate ( );
    void PutvPref_RenderRotate ( const _variant_t & _val );
    _variant_t GetvInfo_PermBC ( );
    void PutvInfo_PermBC ( const _variant_t & _val );
    _variant_t GetvInfo_WorkplaneRuler ( );
    void PutvInfo_WorkplaneRuler ( const _variant_t & _val );
    _variant_t GetvInfo_MaxID ( );
    void PutvInfo_MaxID ( const _variant_t & _val );
    _variant_t GetvInfo_MinID ( );
    void PutvInfo_MinID ( const _variant_t & _val );
    _variant_t GetvInfo_Count ( );
    void PutvInfo_Count ( const _variant_t & _val );
    _variant_t GetvInfo_ElemFormulation1 ( );
    void PutvInfo_ElemFormulation1 ( const _variant_t & _val );
    _variant_t GetvInfo_ElemFormulation2 ( );
    void PutvInfo_ElemFormulation2 ( const _variant_t & _val );
    _variant_t GetvInfo_WorkplaneOrigin ( );
    void PutvInfo_WorkplaneOrigin ( const _variant_t & _val );
    _variant_t GetvInfo_WorkplaneX ( );
    void PutvInfo_WorkplaneX ( const _variant_t & _val );
    _variant_t GetvInfo_WorkplaneY ( );
    void PutvInfo_WorkplaneY ( const _variant_t & _val );
    _variant_t GetvInfo_WorkplaneZ ( );
    void PutvInfo_WorkplaneZ ( const _variant_t & _val );
    _variant_t GetvInfo_WorkplanePrevOrigin ( );
    void PutvInfo_WorkplanePrevOrigin ( const _variant_t & _val );
    _variant_t GetvInfo_WorkplanePrevX ( );
    void PutvInfo_WorkplanePrevX ( const _variant_t & _val );
    _variant_t GetvInfo_WorkplanePrevY ( );
    void PutvInfo_WorkplanePrevY ( const _variant_t & _val );
    _variant_t GetvInfo_WorkplanePrevZ ( );
    void PutvInfo_WorkplanePrevZ ( const _variant_t & _val );
    _variant_t GetvInfo_SnapSpacing ( );
    void PutvInfo_SnapSpacing ( const _variant_t & _val );
    _variant_t GetvInfo_WorkplaneSizeX ( );
    void PutvInfo_WorkplaneSizeX ( const _variant_t & _val );
    _variant_t GetvInfo_WorkplaneSizeY ( );
    void PutvInfo_WorkplaneSizeY ( const _variant_t & _val );
    _variant_t GetvInfo_MatlAngleVec ( );
    void PutvInfo_MatlAngleVec ( const _variant_t & _val );
    _variant_t GetvTool_CursorXYZ ( );
    void PutvTool_CursorXYZ ( const _variant_t & _val );
    _variant_t GetvInfo_ModelSizeX ( );
    void PutvInfo_ModelSizeX ( const _variant_t & _val );
    _variant_t GetvInfo_ModelSizeY ( );
    void PutvInfo_ModelSizeY ( const _variant_t & _val );
    _variant_t GetvInfo_ModelSizeZ ( );
    void PutvInfo_ModelSizeZ ( const _variant_t & _val );
    _variant_t GetvPref_EntityColor ( );
    void PutvPref_EntityColor ( const _variant_t & _val );
    _variant_t GetvInfo_Increment ( );
    void PutvInfo_Increment ( const _variant_t & _val );
    _variant_t GetvInfo_NextID ( );
    void PutvInfo_NextID ( const _variant_t & _val );
    _variant_t GetvInfo_ActiveID ( );
    void PutvInfo_ActiveID ( const _variant_t & _val );
    _variant_t GetvInfo_ActiveType ( );
    void PutvInfo_ActiveType ( const _variant_t & _val );
    _variant_t GetvInfo_Color ( );
    void PutvInfo_Color ( const _variant_t & _val );
    _variant_t GetvInfo_SurfDivisionsLinear ( );
    void PutvInfo_SurfDivisionsLinear ( const _variant_t & _val );
    _variant_t GetvInfo_SurfDivisionsCurved ( );
    void PutvInfo_SurfDivisionsCurved ( const _variant_t & _val );
    VARIANT_BOOL GetPref_ReverseMouseWheel ( );
    void PutPref_ReverseMouseWheel ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ReversePanZoom ( );
    void PutPref_ReversePanZoom ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_AltAccelerator ( );
    void PutPref_AltAccelerator ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_AltTheme ( );
    void PutPref_AltTheme ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ViewLogoScreenRes ( );
    void PutPref_ViewLogoScreenRes ( VARIANT_BOOL _val );
    _bstr_t GetPref_ViewBkgdBitmap ( );
    void PutPref_ViewBkgdBitmap ( _bstr_t _val );
    _bstr_t GetPref_ViewLogo ( );
    void PutPref_ViewLogo ( _bstr_t _val );
    int GetDialogAutoAnswer ( );
    void PutDialogAutoAnswer ( int _val );
    _bstr_t GetPref_MessageFont ( );
    void PutPref_MessageFont ( _bstr_t _val );
    _bstr_t GetPref_ListingFont ( );
    void PutPref_ListingFont ( _bstr_t _val );
    _bstr_t GetPref_ProgramFont ( );
    void PutPref_ProgramFont ( _bstr_t _val );
    int GetPref_ProgramFontSize ( );
    void PutPref_ProgramFontSize ( int _val );
    enum zColor GetPref_MsgWndCmdColor ( );
    void PutPref_MsgWndCmdColor ( enum zColor _val );
    VARIANT_BOOL GetPref_MsgWndTextBold ( );
    void PutPref_MsgWndTextBold ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_MsgWndCmdBold ( );
    void PutPref_MsgWndCmdBold ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_MsgWndHighBold ( );
    void PutPref_MsgWndHighBold ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_MsgWndWarnBold ( );
    void PutPref_MsgWndWarnBold ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_MsgWndErrorBold ( );
    void PutPref_MsgWndErrorBold ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_AltSectionProp ( );
    void PutPref_AltSectionProp ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RenderSmoothLines ( );
    void PutPref_RenderSmoothLines ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RenderFastPick ( );
    void PutPref_RenderFastPick ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RenderEdgesAsLines ( );
    void PutPref_RenderEdgesAsLines ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RenderAutoRegen ( );
    void PutPref_RenderAutoRegen ( VARIANT_BOOL _val );
    int GetPref_RenderVertexArrays ( );
    void PutPref_RenderVertexArrays ( int _val );
    int GetPref_RenderBitBltDelay ( );
    void PutPref_RenderBitBltDelay ( int _val );
    int GetPref_RenderSearchDepth ( );
    void PutPref_RenderSearchDepth ( int _val );
    VARIANT_BOOL GetPref_GeomScaleAdjust ( );
    void PutPref_GeomScaleAdjust ( VARIANT_BOOL _val );
    int GetPref_ModelInfoMaxEntity ( );
    void PutPref_ModelInfoMaxEntity ( int _val );
    VARIANT_BOOL GetPref_AnimatePanes ( );
    void PutPref_AnimatePanes ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RememberDialogPos ( );
    void PutPref_RememberDialogPos ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_UseMSCNastran2004 ( );
    void PutPref_UseMSCNastran2004 ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_FileRefCheck ( );
    void PutPref_FileRefCheck ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_FileRefGeometry ( );
    void PutPref_FileRefGeometry ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_FileRefModel ( );
    void PutPref_FileRefModel ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_FileRefResults ( );
    void PutPref_FileRefResults ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_AnalysisMonAutoLoad ( );
    void PutPref_AnalysisMonAutoLoad ( VARIANT_BOOL _val );
    int GetPref_AnalysisMonMaxLines ( );
    void PutPref_AnalysisMonMaxLines ( int _val );
    int GetPref_OutputSetTitles ( );
    void PutPref_OutputSetTitles ( int _val );
    _bstr_t GetPref_LibConnectionProp ( );
    void PutPref_LibConnectionProp ( _bstr_t _val );
    VARIANT_BOOL GetPref_UseOldAnalysisInterfaces ( );
    void PutPref_UseOldAnalysisInterfaces ( VARIANT_BOOL _val );
    int GetInfo_SuperelementID ( );
    void PutInfo_SuperelementID ( int _val );
    enum zPointDefinition GetCoordDialogMethod ( );
    void PutCoordDialogMethod ( enum zPointDefinition _val );
    enum zVectorDefinition GetVectorDialogMethod ( );
    void PutVectorDialogMethod ( enum zVectorDefinition _val );
    enum zPlaneDefinition GetPlaneDialogMethod ( );
    void PutPlaneDialogMethod ( enum zPlaneDefinition _val );
    int GetInfo_OrientSolidIsoOutput ( );
    void PutInfo_OrientSolidIsoOutput ( int _val );
    int GetInfo_OrientSolidAnisoOutput ( );
    void PutInfo_OrientSolidAnisoOutput ( int _val );
    int GetInfo_OrientSolidHyperOutput ( );
    void PutInfo_OrientSolidHyperOutput ( int _val );
    int GetInfo_OrientTria3StressOutput ( );
    void PutInfo_OrientTria3StressOutput ( int _val );
    int GetInfo_OrientTria3StrainOutput ( );
    void PutInfo_OrientTria3StrainOutput ( int _val );
    int GetInfo_OrientTria3ForceOutput ( );
    void PutInfo_OrientTria3ForceOutput ( int _val );
    int GetInfo_OrientTria6StressOutput ( );
    void PutInfo_OrientTria6StressOutput ( int _val );
    int GetInfo_OrientTria6StrainOutput ( );
    void PutInfo_OrientTria6StrainOutput ( int _val );
    int GetInfo_OrientTria6ForceOutput ( );
    void PutInfo_OrientTria6ForceOutput ( int _val );
    int GetInfo_OrientQuad4StressOutput ( );
    void PutInfo_OrientQuad4StressOutput ( int _val );
    int GetInfo_OrientQuad4StrainOutput ( );
    void PutInfo_OrientQuad4StrainOutput ( int _val );
    int GetInfo_OrientQuad4ForceOutput ( );
    void PutInfo_OrientQuad4ForceOutput ( int _val );
    int GetInfo_OrientQuad8StressOutput ( );
    void PutInfo_OrientQuad8StressOutput ( int _val );
    int GetInfo_OrientQuad8StrainOutput ( );
    void PutInfo_OrientQuad8StrainOutput ( int _val );
    int GetInfo_OrientQuad8ForceOutput ( );
    void PutInfo_OrientQuad8ForceOutput ( int _val );
    int GetPref_ReadTabSize ( );
    void PutPref_ReadTabSize ( int _val );
    int GetPickBoundaryInternalMode ( );
    void PutPickBoundaryInternalMode ( int _val );
    int GetPickCombinedCurveInternalMode ( );
    void PutPickCombinedCurveInternalMode ( int _val );
    VARIANT_BOOL GetPref_NastranUseILP64 ( );
    void PutPref_NastranUseILP64 ( VARIANT_BOOL _val );
    int GetPref_ConstructionGeometry ( );
    void PutPref_ConstructionGeometry ( int _val );
    VARIANT_BOOL GetPref_NastranWriteAllLdbcSets ( );
    void PutPref_NastranWriteAllLdbcSets ( VARIANT_BOOL _val );
    enum zListDestination GetList_Destination ( );
    void PutList_Destination ( enum zListDestination _val );
    _bstr_t GetList_FileName ( );
    void PutList_FileName ( _bstr_t _val );
    VARIANT_BOOL GetPref_DeleteRdScratchLdSets ( );
    void PutPref_DeleteRdScratchLdSets ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ImproveSinglePrecision ( );
    void PutPref_ImproveSinglePrecision ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_PaneCaptionsOnTop ( );
    void PutPref_PaneCaptionsOnTop ( VARIANT_BOOL _val );
    enum zPrefPictureFormat GetPref_PictureFormat ( );
    void PutPref_PictureFormat ( enum zPrefPictureFormat _val );
    enum zPrefAnimateFormat GetPref_AnimationFormat ( );
    void PutPref_AnimationFormat ( enum zPrefAnimateFormat _val );
    enum zGifColorOpt GetPref_GIFColorOpt ( );
    void PutPref_GIFColorOpt ( enum zGifColorOpt _val );
    int GetPref_GIFAnimationDelay ( );
    void PutPref_GIFAnimationDelay ( int _val );
    VARIANT_BOOL GetPref_GIFFrameSeries ( );
    void PutPref_GIFFrameSeries ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_CompressBitmaps ( );
    void PutPref_CompressBitmaps ( VARIANT_BOOL _val );
    _variant_t GetvPref_NasQstOn ( );
    void PutvPref_NasQstOn ( const _variant_t & _val );
    _variant_t GetvPref_NasQstVal ( );
    void PutvPref_NasQstVal ( const _variant_t & _val );
    VARIANT_BOOL GetPref_TbxExpandActive ( );
    void PutPref_TbxExpandActive ( VARIANT_BOOL _val );
    int GetPref_TbxAutomesh ( );
    void PutPref_TbxAutomesh ( int _val );
    int GetPref_ResPrintMethod ( );
    void PutPref_ResPrintMethod ( int _val );
    double GetPref_ResPrintScale ( );
    void PutPref_ResPrintScale ( double _val );
    int GetPref_ResCopySaveMethod ( );
    void PutPref_ResCopySaveMethod ( int _val );
    double GetPref_ResCopySaveScale ( );
    void PutPref_ResCopySaveScale ( double _val );
    int GetPref_ResScaleWithWidth ( );
    void PutPref_ResScaleWithWidth ( int _val );
    int GetPref_ResScaleWithHeight ( );
    void PutPref_ResScaleWithHeight ( int _val );
    int GetPref_ResFixedWidth ( );
    void PutPref_ResFixedWidth ( int _val );
    int GetPref_ResFixedHeight ( );
    void PutPref_ResFixedHeight ( int _val );
    double GetInfo_FacetAngleTolerance ( );
    void PutInfo_FacetAngleTolerance ( double _val );
    double GetInfo_FacetChordTolerance ( );
    void PutInfo_FacetChordTolerance ( double _val );
    double GetInfo_FacetCurveFactor ( );
    void PutInfo_FacetCurveFactor ( double _val );
    VARIANT_BOOL GetSolid_UpdateMaterialData ( );
    void PutSolid_UpdateMaterialData ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSolid_UpdateUseParasolidIdent ( );
    void PutSolid_UpdateUseParasolidIdent ( VARIANT_BOOL _val );
    int GetPref_ResPenMethod ( );
    void PutPref_ResPenMethod ( int _val );
    int GetPref_ResPenScale ( );
    void PutPref_ResPenScale ( int _val );
    double GetPref_ResScreenLogoScale ( );
    void PutPref_ResScreenLogoScale ( double _val );
    double GetPref_ResPrintLogoScale ( );
    void PutPref_ResPrintLogoScale ( double _val );
    double GetPref_ResCopySaveLogoScale ( );
    void PutPref_ResCopySaveLogoScale ( double _val );
    int GetDialogAutoSkip ( );
    void PutDialogAutoSkip ( int _val );
    enum zColor GetInfo_SuppressedCurveColor ( );
    void PutInfo_SuppressedCurveColor ( enum zColor _val );
    enum zColor GetInfo_SuppressedSurfaceColor ( );
    void PutInfo_SuppressedSurfaceColor ( enum zColor _val );
    int GetPref_MsgWndRepeatedErrors ( );
    void PutPref_MsgWndRepeatedErrors ( int _val );
    VARIANT_BOOL GetPref_PaneAltDockSymbols ( );
    void PutPref_PaneAltDockSymbols ( VARIANT_BOOL _val );
    int GetPref_FastOutputDelete ( );
    void PutPref_FastOutputDelete ( int _val );
    VARIANT_BOOL GetPref_GroupIncludeFiles ( );
    void PutPref_GroupIncludeFiles ( VARIANT_BOOL _val );
    int GetPref_OpenSaveMethod ( );
    void PutPref_OpenSaveMethod ( int _val );
    VARIANT_BOOL GetErrorHasBeenCalled ( );
    void PutErrorHasBeenCalled ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_Enable_Aeroelasticity ( );
    void PutPref_Enable_Aeroelasticity ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_NasAlternateContinue ( );
    void PutPref_NasAlternateContinue ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_NasDballScratch ( );
    void PutPref_NasDballScratch ( VARIANT_BOOL _val );
    int GetPref_JTFileVersion ( );
    void PutPref_JTFileVersion ( int _val );
    VARIANT_BOOL GetPref_GIFOptimized ( );
    void PutPref_GIFOptimized ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_PreV10SurfaceMesh ( );
    void PutPref_PreV10SurfaceMesh ( VARIANT_BOOL _val );
    int GetPref_PickMethod ( );
    void PutPref_PickMethod ( int _val );
    VARIANT_BOOL GetPref_ConfirmDelete ( );
    void PutPref_ConfirmDelete ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RenderXORPicking ( );
    void PutPref_RenderXORPicking ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RenderMultiModelMem ( );
    void PutPref_RenderMultiModelMem ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RenderDebugElapsedTime ( );
    void PutPref_RenderDebugElapsedTime ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RenderDebugAllTime ( );
    void PutPref_RenderDebugAllTime ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RenderDebugOGLErrors ( );
    void PutPref_RenderDebugOGLErrors ( VARIANT_BOOL _val );
    int GetPref_RenderBlockSize ( );
    void PutPref_RenderBlockSize ( int _val );
    VARIANT_BOOL GetPref_RenderDialogRefresh ( );
    void PutPref_RenderDialogRefresh ( VARIANT_BOOL _val );
    int GetPref_ShowMode ( );
    void PutPref_ShowMode ( int _val );
    VARIANT_BOOL GetPref_ShowLabels ( );
    void PutPref_ShowLabels ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ShowNormals ( );
    void PutPref_ShowNormals ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_PreserveNextID ( );
    void PutPref_PreserveNextID ( VARIANT_BOOL _val );
    int GetPref_NastranScratchLocation ( );
    void PutPref_NastranScratchLocation ( int _val );
    _bstr_t GetPref_LibLayup ( );
    void PutPref_LibLayup ( _bstr_t _val );
    _variant_t GetvPref_SpaceballFactors ( );
    void PutvPref_SpaceballFactors ( const _variant_t & _val );
    int GetPref_SpaceballSensitivity ( );
    void PutPref_SpaceballSensitivity ( int _val );
    VARIANT_BOOL GetPref_SpaceballDebug ( );
    void PutPref_SpaceballDebug ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualAspectRatio ( );
    void PutPref_ElemQualAspectRatio ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualTaper ( );
    void PutPref_ElemQualTaper ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualAltTaper ( );
    void PutPref_ElemQualAltTaper ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualIntAngles ( );
    void PutPref_ElemQualIntAngles ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualSkew ( );
    void PutPref_ElemQualSkew ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualWarping ( );
    void PutPref_ElemQualWarping ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualNastranWarping ( );
    void PutPref_ElemQualNastranWarping ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualTetCollapse ( );
    void PutPref_ElemQualTetCollapse ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualJacobian ( );
    void PutPref_ElemQualJacobian ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualCombined ( );
    void PutPref_ElemQualCombined ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualExplicitTime ( );
    void PutPref_ElemQualExplicitTime ( VARIANT_BOOL _val );
    double GetPref_ElemQualAspectRatioVal ( );
    void PutPref_ElemQualAspectRatioVal ( double _val );
    double GetPref_ElemQualTaperVal ( );
    void PutPref_ElemQualTaperVal ( double _val );
    double GetPref_ElemQualAltTaperVal ( );
    void PutPref_ElemQualAltTaperVal ( double _val );
    double GetPref_ElemQualIntAnglesVal ( );
    void PutPref_ElemQualIntAnglesVal ( double _val );
    double GetPref_ElemQualSkewVal ( );
    void PutPref_ElemQualSkewVal ( double _val );
    double GetPref_ElemQualWarpingVal ( );
    void PutPref_ElemQualWarpingVal ( double _val );
    double GetPref_ElemQualNastranWarpingVal ( );
    void PutPref_ElemQualNastranWarpingVal ( double _val );
    double GetPref_ElemQualTetCollapseVal ( );
    void PutPref_ElemQualTetCollapseVal ( double _val );
    double GetPref_ElemQualJacobianVal ( );
    void PutPref_ElemQualJacobianVal ( double _val );
    double GetPref_ElemQualCombinedVal ( );
    void PutPref_ElemQualCombinedVal ( double _val );
    double GetPref_ElemQualExplicitTimeVal ( );
    void PutPref_ElemQualExplicitTimeVal ( double _val );
    enum zColor GetPref_ShowColor ( );
    void PutPref_ShowColor ( enum zColor _val );
    int GetPref_OrientSolidIsoOutput ( );
    void PutPref_OrientSolidIsoOutput ( int _val );
    int GetPref_OrientSolidAnisoOutput ( );
    void PutPref_OrientSolidAnisoOutput ( int _val );
    int GetPref_OrientSolidHyperOutput ( );
    void PutPref_OrientSolidHyperOutput ( int _val );
    int GetPref_OrientTria3StressOutput ( );
    void PutPref_OrientTria3StressOutput ( int _val );
    int GetPref_OrientTria3StrainOutput ( );
    void PutPref_OrientTria3StrainOutput ( int _val );
    int GetPref_OrientTria3ForceOutput ( );
    void PutPref_OrientTria3ForceOutput ( int _val );
    int GetPref_OrientTria6StressOutput ( );
    void PutPref_OrientTria6StressOutput ( int _val );
    int GetPref_OrientTria6StrainOutput ( );
    void PutPref_OrientTria6StrainOutput ( int _val );
    int GetPref_OrientTria6ForceOutput ( );
    void PutPref_OrientTria6ForceOutput ( int _val );
    int GetPref_OrientQuad4StressOutput ( );
    void PutPref_OrientQuad4StressOutput ( int _val );
    int GetPref_OrientQuad4StrainOutput ( );
    void PutPref_OrientQuad4StrainOutput ( int _val );
    int GetPref_OrientQuad4ForceOutput ( );
    void PutPref_OrientQuad4ForceOutput ( int _val );
    int GetPref_OrientQuad8StressOutput ( );
    void PutPref_OrientQuad8StressOutput ( int _val );
    int GetPref_OrientQuad8StrainOutput ( );
    void PutPref_OrientQuad8StrainOutput ( int _val );
    int GetPref_OrientQuad8ForceOutput ( );
    void PutPref_OrientQuad8ForceOutput ( int _val );
    VARIANT_BOOL GetPref_RenderTrailingZeroes ( );
    void PutPref_RenderTrailingZeroes ( VARIANT_BOOL _val );
    int GetPref_RenderMaxVBOMB ( );
    void PutPref_RenderMaxVBOMB ( int _val );
    VARIANT_BOOL GetPref_RenderDebugFrameRate ( );
    void PutPref_RenderDebugFrameRate ( VARIANT_BOOL _val );
    int GetPref_RenderVBOUsage ( );
    void PutPref_RenderVBOUsage ( int _val );
    VARIANT_BOOL GetPref_PreserveIncludes ( );
    void PutPref_PreserveIncludes ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_MemoryMappedFiles ( );
    void PutPref_MemoryMappedFiles ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_AutoAttachResults ( );
    void PutPref_AutoAttachResults ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RenderCaptureIconified ( );
    void PutPref_RenderCaptureIconified ( VARIANT_BOOL _val );
    int GetPref_RenderMinVBOB ( );
    void PutPref_RenderMinVBOB ( int _val );
    VARIANT_BOOL GetInfo_MeshSizeAutoDefault ( );
    void PutInfo_MeshSizeAutoDefault ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_AttachResultsDebug ( );
    void PutPref_AttachResultsDebug ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_AttachResultsTiming ( );
    void PutPref_AttachResultsTiming ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ViewPostDynamicMaxMin ( );
    void PutPref_ViewPostDynamicMaxMin ( VARIANT_BOOL _val );
    int GetDialogAutoSkipMsg ( );
    void PutDialogAutoSkipMsg ( int _val );
    VARIANT_BOOL GetPref_CleanupModel ( );
    void PutPref_CleanupModel ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_LegacyXYPlotting ( );
    void PutPref_LegacyXYPlotting ( VARIANT_BOOL _val );
    _bstr_t GetPref_LibChart ( );
    void PutPref_LibChart ( _bstr_t _val );
    VARIANT_BOOL GetPref_Show0To360Angles ( );
    void PutPref_Show0To360Angles ( VARIANT_BOOL _val );
    double GetPref_PlaneWheelFactor ( );
    void PutPref_PlaneWheelFactor ( double _val );
    VARIANT_BOOL GetPref_MiddleMouseButtonOK ( );
    void PutPref_MiddleMouseButtonOK ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_GeomOptimize ( );
    void PutPref_GeomOptimize ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_UseRegionDecimalChar ( );
    void PutPref_UseRegionDecimalChar ( VARIANT_BOOL _val );
    double GetPref_ResFontScale ( );
    void PutPref_ResFontScale ( double _val );
    VARIANT_BOOL GetPref_PerformanceGraphics ( );
    void PutPref_PerformanceGraphics ( VARIANT_BOOL _val );
    VARIANT_BOOL GetSolidAllowNonManifold ( );
    void PutSolidAllowNonManifold ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_CreateResultStudy ( );
    void PutPref_CreateResultStudy ( VARIANT_BOOL _val );
    int GetPref_ResultStudyTitle ( );
    void PutPref_ResultStudyTitle ( int _val );
    VARIANT_BOOL GetInfo_ViewShowNormal ( );
    void PutInfo_ViewShowNormal ( VARIANT_BOOL _val );
    VARIANT_BOOL GetInfo_ViewShowTransparent ( );
    void PutInfo_ViewShowTransparent ( VARIANT_BOOL _val );
    int GetInfo_ComplexSyncMethod ( );
    void PutInfo_ComplexSyncMethod ( int _val );
    double GetInfo_ComplexSyncPhase ( );
    void PutInfo_ComplexSyncPhase ( double _val );
    double GetInfo_ComplexSyncIncrement ( );
    void PutInfo_ComplexSyncIncrement ( double _val );
    VARIANT_BOOL GetPref_TabPasteIgnoreDelimeter ( );
    void PutPref_TabPasteIgnoreDelimeter ( VARIANT_BOOL _val );
    int GetPref_SnapTo ( );
    void PutPref_SnapTo ( int _val );
    double GetPref_RenderMaxMagnification ( );
    void PutPref_RenderMaxMagnification ( double _val );
    VARIANT_BOOL GetPref_StudyAppendFemapTitles ( );
    void PutPref_StudyAppendFemapTitles ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualQuadSkew ( );
    void PutPref_ElemQualQuadSkew ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualQuadTaper ( );
    void PutPref_ElemQualQuadTaper ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualQuadWarp ( );
    void PutPref_ElemQualQuadWarp ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualQuadIAMin ( );
    void PutPref_ElemQualQuadIAMin ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualQuadIAMax ( );
    void PutPref_ElemQualQuadIAMax ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualTriaSkew ( );
    void PutPref_ElemQualTriaSkew ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualTriaIAMax ( );
    void PutPref_ElemQualTriaIAMax ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualTetAspectRatio ( );
    void PutPref_ElemQualTetAspectRatio ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualTetEPLR ( );
    void PutPref_ElemQualTetEPLR ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualTetDetJ ( );
    void PutPref_ElemQualTetDetJ ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualHexAspectRatio ( );
    void PutPref_ElemQualHexAspectRatio ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualHexEPLR ( );
    void PutPref_ElemQualHexEPLR ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualHexDetJ ( );
    void PutPref_ElemQualHexDetJ ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualHexWarp ( );
    void PutPref_ElemQualHexWarp ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualPenAspectRatio ( );
    void PutPref_ElemQualPenAspectRatio ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualPenEPLR ( );
    void PutPref_ElemQualPenEPLR ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualPenDetJ ( );
    void PutPref_ElemQualPenDetJ ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualPenWarp ( );
    void PutPref_ElemQualPenWarp ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualPyrAspectRatio ( );
    void PutPref_ElemQualPyrAspectRatio ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualPyrEPLR ( );
    void PutPref_ElemQualPyrEPLR ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualPyrWarp ( );
    void PutPref_ElemQualPyrWarp ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualPyrDetJ ( );
    void PutPref_ElemQualPyrDetJ ( VARIANT_BOOL _val );
    double GetPref_ElemQualQuadSkewVal ( );
    void PutPref_ElemQualQuadSkewVal ( double _val );
    double GetPref_ElemQualQuadTaperVal ( );
    void PutPref_ElemQualQuadTaperVal ( double _val );
    double GetPref_ElemQualQuadWarpVal ( );
    void PutPref_ElemQualQuadWarpVal ( double _val );
    double GetPref_ElemQualQuadIAMinVal ( );
    void PutPref_ElemQualQuadIAMinVal ( double _val );
    double GetPref_ElemQualQuadIAMaxVal ( );
    void PutPref_ElemQualQuadIAMaxVal ( double _val );
    double GetPref_ElemQualTriaSkewVal ( );
    void PutPref_ElemQualTriaSkewVal ( double _val );
    double GetPref_ElemQualTriaIAMaxVal ( );
    void PutPref_ElemQualTriaIAMaxVal ( double _val );
    double GetPref_ElemQualTetAspectRatioVal ( );
    void PutPref_ElemQualTetAspectRatioVal ( double _val );
    double GetPref_ElemQualTetEPLRVal ( );
    void PutPref_ElemQualTetEPLRVal ( double _val );
    double GetPref_ElemQualTetDetJVal ( );
    void PutPref_ElemQualTetDetJVal ( double _val );
    double GetPref_ElemQualHexAspectRatioVal ( );
    void PutPref_ElemQualHexAspectRatioVal ( double _val );
    double GetPref_ElemQualHexEPLRVal ( );
    void PutPref_ElemQualHexEPLRVal ( double _val );
    double GetPref_ElemQualHexDetJVal ( );
    void PutPref_ElemQualHexDetJVal ( double _val );
    double GetPref_ElemQualHexWarpVal ( );
    void PutPref_ElemQualHexWarpVal ( double _val );
    double GetPref_ElemQualPenAspectRatioVal ( );
    void PutPref_ElemQualPenAspectRatioVal ( double _val );
    double GetPref_ElemQualPenEPLRVal ( );
    void PutPref_ElemQualPenEPLRVal ( double _val );
    double GetPref_ElemQualPenDetJVal ( );
    void PutPref_ElemQualPenDetJVal ( double _val );
    double GetPref_ElemQualPenWarpVal ( );
    void PutPref_ElemQualPenWarpVal ( double _val );
    double GetPref_ElemQualPyrAspectRatioVal ( );
    void PutPref_ElemQualPyrAspectRatioVal ( double _val );
    double GetPref_ElemQualPyrEPLRVal ( );
    void PutPref_ElemQualPyrEPLRVal ( double _val );
    double GetPref_ElemQualPyrWarpVal ( );
    void PutPref_ElemQualPyrWarpVal ( double _val );
    double GetPref_ElemQualPyrDetJVal ( );
    void PutPref_ElemQualPyrDetJVal ( double _val );
    _bstr_t GetPref_UserToolsPath ( );
    void PutPref_UserToolsPath ( _bstr_t _val );
    VARIANT_BOOL GetPref_NonmanifoldBooleans ( );
    void PutPref_NonmanifoldBooleans ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RepeatCreate ( );
    void PutPref_RepeatCreate ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ZoomAroundCursor ( );
    void PutPref_ZoomAroundCursor ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_UseSubcaseIdForOutput ( );
    void PutPref_UseSubcaseIdForOutput ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_AutoConvertOdb ( );
    void PutPref_AutoConvertOdb ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RenderFastPickVisible ( );
    void PutPref_RenderFastPickVisible ( VARIANT_BOOL _val );
    _variant_t GetvPref_FBDefContributions ( );
    void PutvPref_FBDefContributions ( const _variant_t & _val );
    enum zFbdDisplayMode GetPref_FBDefDispMode ( );
    void PutPref_FBDefDispMode ( enum zFbdDisplayMode _val );
    _variant_t GetvPref_FBDefNodalVectorMode ( );
    void PutvPref_FBDefNodalVectorMode ( const _variant_t & _val );
    _variant_t GetvPref_FBDefTotalVectorMode ( );
    void PutvPref_FBDefTotalVectorMode ( const _variant_t & _val );
    _variant_t GetvPref_FBDefComponents ( );
    void PutvPref_FBDefComponents ( const _variant_t & _val );
    VARIANT_BOOL GetPref_ElemQualQuadAR ( );
    void PutPref_ElemQualQuadAR ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualTriaAR ( );
    void PutPref_ElemQualTriaAR ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualTriaEPLR ( );
    void PutPref_ElemQualTriaEPLR ( VARIANT_BOOL _val );
    double GetPref_ElemQualQuadARVal ( );
    void PutPref_ElemQualQuadARVal ( double _val );
    double GetPref_ElemQualTriaARVal ( );
    void PutPref_ElemQualTriaARVal ( double _val );
    double GetPref_ElemQualTriaEPLRVal ( );
    void PutPref_ElemQualTriaEPLRVal ( double _val );
    VARIANT_BOOL GetPref_ResetNextID ( );
    void PutPref_ResetNextID ( VARIANT_BOOL _val );
    _bstr_t GetPref_SolNXNastProgram ( );
    void PutPref_SolNXNastProgram ( _bstr_t _val );
    _bstr_t GetPref_SolMSCNastProgram ( );
    void PutPref_SolMSCNastProgram ( _bstr_t _val );
    _bstr_t GetPref_SolNEINastProgram ( );
    void PutPref_SolNEINastProgram ( _bstr_t _val );
    _bstr_t GetPref_SolAnsysProgram ( );
    void PutPref_SolAnsysProgram ( _bstr_t _val );
    _bstr_t GetPref_SolAbaqusProgram ( );
    void PutPref_SolAbaqusProgram ( _bstr_t _val );
    _bstr_t GetPref_SolLSDynaProgram ( );
    void PutPref_SolLSDynaProgram ( _bstr_t _val );
    _bstr_t GetPref_SolNXNastCmd ( );
    void PutPref_SolNXNastCmd ( _bstr_t _val );
    _bstr_t GetPref_SolMSCNastCmd ( );
    void PutPref_SolMSCNastCmd ( _bstr_t _val );
    _bstr_t GetPref_SolNEINastCmd ( );
    void PutPref_SolNEINastCmd ( _bstr_t _val );
    _bstr_t GetPref_SolAnsysCmd ( );
    void PutPref_SolAnsysCmd ( _bstr_t _val );
    _bstr_t GetPref_SolAbaqusCmd ( );
    void PutPref_SolAbaqusCmd ( _bstr_t _val );
    _bstr_t GetPref_SolLSDynaCmd ( );
    void PutPref_SolLSDynaCmd ( _bstr_t _val );
    VARIANT_BOOL GetPref_SolEchoCmd ( );
    void PutPref_SolEchoCmd ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_NasResTrackRevsion ( );
    void PutPref_NasResTrackRevsion ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_RotateAroundCursor ( );
    void PutPref_RotateAroundCursor ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualTetEPIA ( );
    void PutPref_ElemQualTetEPIA ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualHexEPIA ( );
    void PutPref_ElemQualHexEPIA ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualPenEPIA ( );
    void PutPref_ElemQualPenEPIA ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ElemQualPyrEPIA ( );
    void PutPref_ElemQualPyrEPIA ( VARIANT_BOOL _val );
    double GetPref_ElemQualTetEPIAVal ( );
    void PutPref_ElemQualTetEPIAVal ( double _val );
    double GetPref_ElemQualHexEPIAVal ( );
    void PutPref_ElemQualHexEPIAVal ( double _val );
    double GetPref_ElemQualPenEPIAVal ( );
    void PutPref_ElemQualPenEPIAVal ( double _val );
    double GetPref_ElemQualPyrEPIAVal ( );
    void PutPref_ElemQualPyrEPIAVal ( double _val );
    VARIANT_BOOL GetInfo_ViewShowAutoscale ( );
    void PutInfo_ViewShowAutoscale ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_ShowAutoscale ( );
    void PutPref_ShowAutoscale ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_SynchronizedRotation ( );
    void PutPref_SynchronizedRotation ( VARIANT_BOOL _val );
    VARIANT_BOOL GetInfo_FreebodyReverse ( );
    void PutInfo_FreebodyReverse ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPref_DefaultFreebodyReverse ( );
    void PutPref_DefaultFreebodyReverse ( VARIANT_BOOL _val );
    VARIANT_BOOL GetUndoGrayed ( );
    void PutUndoGrayed ( VARIANT_BOOL _val );
};

enum zAnalysisTranslator
{
    FTR_NONE = -1,
    FTR_MSC_NASTRAN = 0,
    FTR_PC_NASTRAN = 1,
    FTR_PAL_2 = 2,
    FTR_STARDYNE = 3,
    FTR_ANSYS = 4,
    FTR_ANSYS_PC_LINEAR = 5,
    FTR_ALGOR = 6,
    FTR_COSMOS = 7,
    FTR_PATRAN = 8,
    FTR_FEMAP_NEUTRAL = 9,
    FTR_DXF = 10,
    FTR_IGES = 11,
    FTR_TABLE = 12,
    FTR_UAI_NASTRAN = 13,
    FTR_COSMIC_NASTRAN = 14,
    FTR_STAAD = 15,
    FTR_ABAQUS = 16,
    FTR_WECAN = 17,
    FTR_SAP = 18,
    FTR_CDA_SPRINT = 19,
    FTR_CAEFEM = 20,
    FTR_IDEAS = 21,
    FTR_ME_NASTRAN = 22,
    FTR_ADINA = 23,
    FTR_GENESIS = 24,
    FTR_ODBC = 25,
    FTR_CSA_NASTRAN = 26,
    FTR_SLA = 27,
    FTR_CFDESIGN = 28,
    FTR_ACIS = 29,
    FTR_PARASOLID = 30,
    FTR_LS_DYNA = 31,
    FTR_MARC = 32,
    FTR_SINDA = 33,
    FTR_STEP = 34,
    FTR_NE_NASTRAN = 35,
    FTR_MODEL_SOLUTION = 36,
    FTR_NCODE_NOT_USED = 37,
    FTR_CATIA = 38,
    FTR_PROE = 39,
    FTR_VDA = 40,
    FTR_SOLIDEDGE = 41,
    FTR_TMG = 42,
    FTR_UNIGRAPHICS = 43,
    FTR_VR_NASTRAN = 44,
    FTR_NX_NASTRAN = 45,
    FTR_CATIA_V5 = 46,
    FTR_SOLIDWORKS = 47,
    FTR_TOSCA = 48,
    FTR_JT = 49
};

enum zPointDefinition
{
    FCD_COORDINATES = 0,
    FCD_WORKPLANE_COORDINATES = 1,
    FCD_USE_POINTS = 2,
    FCD_USE_NODES = 3,
    FCD_OFFSET = 4,
    FCD_DISTANCE = 5,
    FCD_CENTER = 6,
    FCD_ALONG = 7,
    FCD_MESH_LOCATION = 8,
    FCD_BETWEEN = 9,
    FCD_INTERSECTION = 10,
    FCD_MIDPOINT = 11,
    FCD_PROJECT_ON_CURVE = 12,
    FCD_PROJECT_ON_SURFACE = 13,
    FCD_ON_SURFACE = 14,
    FCD_INTERSECTCURVESURFACE = 15,
    FCD_CG_SURFACE = 16,
    FCD_ALONGLENGTH = 17,
    FCD_CENTER_POINTS = 18
};

enum zVectorDefinition
{
    FVD_POSITION = 0,
    FVD_POSITION_LENGTH = 1,
    FVD_USE_POINTS = 2,
    FVD_USE_NODES = 3,
    FVD_COMPONENTS = 4,
    FVD_DIRECTION = 5,
    FVD_TANGENT = 6,
    FVD_NORMAL_TO_SURFACE = 7,
    FVD_BISECT = 8,
    FVD_NORMAL = 9,
    FVD_DEFCS_AXIS = 10,
    FVD_GLOBAL_AXIS = 11,
    FVD_NORMAL_TO_VIEW = 12,
    FVD_AXIS_OF_SURFACE = 13,
    FVD_SAVED = 14
};

enum zPlaneDefinition
{
    FPD_POSITION = 0,
    FPD_USE_POINTS = 1,
    FPD_USE_NODES = 2,
    FPD_COMPONENTS = 3,
    FPD_BISECT = 4,
    FPD_NORMAL = 5,
    FPD_DEFCS_AXIS = 6,
    FPD_GLOBAL_AXIS = 7,
    FPD_NORMAL_TO_VIEW = 8,
    FPD_NORMAL_TO_CURVE = 9,
    FPD_NORMAL_TO_SURFACE = 10,
    FPD_SAVED = 11
};

enum zListDestination
{
    FDST_SCREEN = 1,
    FDST_PRINTER = 16,
    FDST_FILE = 256,
    FDST_SCR_PRINT = 17,
    FDST_SCR_FILE = 257,
    FDST_FILE_PRINT = 272,
    FDST_ALL = 273
};

enum zPrefPictureFormat
{
    PPFM_BMP = 0,
    PPFM_JPEG = 1,
    PPFM_PNG = 2,
    PPFM_GIF = 3,
    PPFM_TIF = 4
};

enum zPrefAnimateFormat
{
    PAFM_BMP = 0,
    PAFM_BMPSERIES = 1,
    PAFM_AVI = 2,
    PAFM_GIF = 3
};

enum zGifColorOpt
{
    GIFC_NET = 0,
    GIFC_OCTREE = 1,
    GIFC_DITHER = 2
};

enum zMessageColor
{
    FCM_NORMAL = 0,
    FCM_HIGHLIGHT = 1,
    FCM_WARNING = 2,
    FCM_ERROR = 3,
    FCM_COMMAND = 4
};

enum zPrintSource
{
    FPS_VIEW = 0,
    FPS_DESKTOP = 1,
    FPS_FILE = 2,
    FPS_LAYOUT = 3,
    FPS_MESSAGES = 4,
    FPS_PROGRAMFILE = 5,
    FPS_ENTITYINFO = 6,
    FPS_APIPROGRAM = 7,
    FPS_DATATABLE = 8,
    FPS_CHART = 9
};

enum zPictFormat
{
    FPM_BMP = 1,
    FPM_METAFILE = 2,
    FPM_PLACEMF = 3,
    FPM_JPEG = 4,
    FPM_BMPSERIES = 5,
    FPM_AVI = 6,
    FPM_JT = 7,
    FPM_GIF = 9,
    FPM_GIFANIM = 10,
    FPM_TIF = 11,
    FPM_PNG = 12
};

enum zPictRegion
{
    FPRG_WINDOW = 0,
    FPRG_LAYOUT = 1,
    FPRG_DESKTOP = 2
};

enum zLoadSelectType
{
    FLS_ANY = -1,
    FLS_BODY = 1,
    FLS_NONLINEAR = 8,
    FLS_NHTGEN = 2,
    FLS_NHTFLUX = 4,
    FLS_FORCE = 16,
    FLS_DISP = 32,
    FLS_ACCEL = 64,
    FLS_LINELOAD = 128,
    FLS_VELOCITY = 2048,
    FLS_PRESS = 256,
    FLS_EHTGEN = 512,
    FLS_EHTFLUX = 1024,
    FLS_NTEMP = 4096,
    FLS_ETEMP = 8192,
    FLS_ECONVECTION = 16384,
    FLS_ERADIATION = 32768,
    FLS_NTRANSIENT = 65536,
    FLS_FLPRESSURE = 131072,
    FLS_FLTRACKING = 262144,
    FLS_FLUNKNOWN = 524288,
    FLS_FLSLIP = 1048576,
    FLS_FLFAN = 2097152,
    FLS_FLPERIODIC = 4194304,
    FLS_NONE = 0
};

enum zFeatureType
{
    FEAT_NX_NASTRAN_BASIC = 0,
    FEAT_NX_NASTRAN_NONLINEAR = 1,
    FEAT_NX_NASTRAN_DYNAMICS = 2,
    FEAT_NX_NASTRAN_DMAP = 3,
    FEAT_NX_NASTRAN_SUPERELEMENTS = 4,
    FEAT_NX_NASTRAN_AERO_BASIC = 5,
    FEAT_NX_NASTRAN_OPTIMIZATION = 7,
    FEAT_NX_NASTRAN_ADV_NONLINEAR = 8,
    FEAT_NX_NASTRAN_ROTORDYN = 10,
    FEAT_NX_NASTRAN_ADV_NONLINEAR_EXPLICIT = 11,
    FEAT_NX_NASTRAN_USS = 19,
    FEAT_NX_NASTRAN_DMP = 20,
    FEAT_MAYA_THERMAL = 15,
    FEAT_MAYA_ADVANCED_THERMAL = 16,
    FEAT_MAYA_FLOW = 17,
    FEAT_MAYA_TOOLKIT = 18
};

enum zVisibilityType
{
    FVIS_MATL = 10,
    FVIS_PROP = 11,
    FVIS_ELEM = 8,
    FVIS_ELEM_TYPE = 37,
    FVIS_ELEM_SHAPE = 157,
    FVIS_SOLID = 39,
    FVIS_SURFACE = 5,
    FVIS_CURVE = 4,
    FVIS_POINT = 3,
    FVIS_AERO_PANEL = 95,
    FVIS_AERO_SPLINE = 98,
    FVIS_AERO_SURFACE = 99,
    FVIS_CSYS = 9,
    FVIS_CONNECTION_REGION = 58,
    FVIS_CONNECTION = 71,
    FVIS_FREEBODY = 102
};

enum zRealFormat
{
    FRFM_NORMAL = 0,
    FRFM_EXPONENTIAL = 1,
    FRFM_NASTRAN = 2
};

enum zOutputProcessCombine
{
    FOPC_ALL = 0,
    FOPC_IN_SET = 1,
    FOPC_EACH_VECTOR = 2
};

enum zOutputProcessEnvApproach
{
    FOPA_ALL = 0,
    FOPA_LOCATIONS = 1,
    FOPA_EACH = 2
};

enum zOutputProcessErrorMethod
{
    FOPM_MAXDIFF = 0,
    FOPM_DIFFAVG = 1,
    FOPM_PCTMAXDIFF = 2,
    FOPM_PCTDIFFAVG = 3,
    FOPM_NORMMAXDIFF = 4,
    FOPM_NORMDIFFAVG = 5
};

enum zGroupBooleanOp
{
    FGB_ADD = 0,
    FGB_SUBTRACT = 1,
    FGB_INALL = 2,
    FGB_ONLYINONE = 3,
    FGB_NOTINANY = 4,
    FGB_NOTINALL = 5
};

enum zManageResultsAttach
{
    FMRA_LOAD = 0,
    FMRA_UNLOAD = 1,
    FMRA_DETACH = 2,
    FMRA_UPDATE_PATH = 3
};

enum zAttachStatus
{
    FRA_UNLOADED = 0,
    FRA_OPEN = 1,
    FRA_OPEN_CHECK = 2,
    FRA_ERROR = 3,
    FRA_UNLOAD_CHECK = 4
};

enum zProjectOnto
{
    FPO_CURVE = 0,
    FPO_SURFACE = 1,
    FPO_VECTOR = 2,
    FPO_PLANE = 3
};

enum zProjectAlong
{
    FPA_CLOSEST = 0,
    FPA_VECTOR = 1
};

enum zPadOffsetType
{
    FPAD_SCALE = 0,
    FPAD_DIST = 1
};

enum zPadAlignment
{
    FPAD_AUTO = 0,
    FPAD_VECTOR = 1,
    FPAD_CURVE = 2
};

enum zCurveRemoveOption
{
    FCRO_NORMAL = 0,
    FCRO_AGGRESSIVE = 1,
    FCRO_COMBINE = 2
};

enum zPictFormat2
{
    FPM2_BMP = 1,
    FPM2_JPEG = 4,
    FPM2_GIF = 9,
    FPM2_TIF = 11,
    FPM2_PNG = 12
};

enum zRankingMethod
{
    FRKM_SETS = 0,
    FRKM_ENTITY = 1
};

enum zRankingApproach
{
    FRKA_ALL = 0,
    FRKA_EACH = 1
};

enum zRankingType
{
    FRKT_MAX = 0,
    FRKT_MIN = 1,
    FRKT_MAXABS = 2
};

enum zSolidAlignVecMode
{
    FSAV_VECAUTO = 0,
    FSAV_VECINPUT = 1,
    FSAV_VECASK = 2
};

struct __declspec(uuid("a01dd4c4-a8f0-11d4-9fac-00105a0a86c2"))
model;
    // [ default ] dispinterface Imodel

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_femap =
    {0x08f336b3,0xe668,0x11d4,{0x94,0x41,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IRead =
    {0x86603850,0x0da7,0x11d5,{0x94,0x70,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Read =
    {0x86603852,0x0da7,0x11d5,{0x94,0x70,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ISet =
    {0xfc77c4f9,0xec92,0x11d4,{0x94,0x49,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Set =
    {0xfc77c4fb,0xec92,0x11d4,{0x94,0x49,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ISortSet =
    {0xe4a806f0,0x65dd,0x4b9a,{0x8c,0xa7,0xbb,0x2b,0x71,0xbe,0xdf,0xae}};
extern "C" const GUID __declspec(selectany) CLSID_SortSet =
    {0xe4a806f2,0x65dd,0x4b9a,{0x8c,0xa7,0xbb,0x2b,0x71,0xbe,0xdf,0xae}};
extern "C" const GUID __declspec(selectany) DIID_IMapData =
    {0x0023ea23,0x812a,0x4253,{0xa4,0x31,0x86,0xb4,0x27,0xa4,0x9c,0x8c}};
extern "C" const GUID __declspec(selectany) CLSID_MapData =
    {0x0023ea25,0x812a,0x4253,{0xa4,0x31,0x86,0xb4,0x27,0xa4,0x9c,0x8c}};
extern "C" const GUID __declspec(selectany) DIID_ITrackData =
    {0xcf420f7f,0x631e,0x4597,{0x83,0xa5,0xb6,0xc9,0x71,0xae,0xab,0x99}};
extern "C" const GUID __declspec(selectany) CLSID_TrackData =
    {0xcf420f81,0x631e,0x4597,{0x83,0xa5,0xb6,0xc9,0x71,0xae,0xab,0x99}};
extern "C" const GUID __declspec(selectany) DIID_IResults =
    {0x2b88e749,0x3213,0x47ab,{0x9c,0xad,0x0a,0xea,0x2e,0x41,0x5f,0x16}};
extern "C" const GUID __declspec(selectany) CLSID_Results =
    {0x2b88e74b,0x3213,0x47ab,{0x9c,0xad,0x0a,0xea,0x2e,0x41,0x5f,0x16}};
extern "C" const GUID __declspec(selectany) DIID_IMesher =
    {0xb0bd5ea3,0xc79d,0x4140,{0x83,0xff,0x06,0x42,0xf6,0x6d,0x2f,0x37}};
extern "C" const GUID __declspec(selectany) CLSID_Mesher =
    {0xb0bd5ea5,0xc79d,0x4140,{0x83,0xff,0x06,0x42,0xf6,0x6d,0x2f,0x37}};
extern "C" const GUID __declspec(selectany) DIID_IElementQuality =
    {0xded875d4,0x7d90,0x445b,{0x89,0xc7,0x17,0xd7,0x09,0xdb,0x45,0xf9}};
extern "C" const GUID __declspec(selectany) CLSID_ElementQuality =
    {0xded875d6,0x7d90,0x445b,{0x89,0xc7,0x17,0xd7,0x09,0xdb,0x45,0xf9}};
extern "C" const GUID __declspec(selectany) DIID_IStressLinear =
    {0x08b1c6b1,0x3124,0x4d88,{0xbe,0x4c,0xdf,0xe7,0x64,0x2e,0x81,0x7e}};
extern "C" const GUID __declspec(selectany) CLSID_StressLinear =
    {0x08b1c6b3,0x3124,0x4d88,{0xbe,0x4c,0xdf,0xe7,0x64,0x2e,0x81,0x7e}};
extern "C" const GUID __declspec(selectany) DIID_IDBase =
    {0x90561a64,0xeb1f,0x11d4,{0x94,0x47,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_DBase =
    {0x90561a66,0xeb1f,0x11d4,{0x94,0x47,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IAnalysisCase =
    {0xab06c174,0x0e7e,0x11d5,{0x94,0x71,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_AnalysisCase =
    {0xab06c176,0x0e7e,0x11d5,{0x94,0x71,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_INode =
    {0x43752af6,0xe669,0x11d4,{0x94,0x41,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Node =
    {0x43752af8,0xe669,0x11d4,{0x94,0x41,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IAnalysisMgr =
    {0x00ef42f8,0x0e77,0x11d5,{0x94,0x71,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_AnalysisMgr =
    {0x00ef42fa,0x0e77,0x11d5,{0x94,0x71,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IBCEqn =
    {0x56434b14,0xf392,0x11d4,{0x94,0x53,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_BCEqn =
    {0x56434b16,0xf392,0x11d4,{0x94,0x53,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IBCGeom =
    {0xd7297e16,0xf305,0x11d4,{0x94,0x52,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_BCGeom =
    {0xd7297e18,0xf305,0x11d4,{0x94,0x52,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IBCNode =
    {0xd0e25456,0xf2fb,0x11d4,{0x94,0x52,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_BCNode =
    {0xd0e25458,0xf2fb,0x11d4,{0x94,0x52,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IBCSet =
    {0x5d2f5e14,0xf2f1,0x11d4,{0x94,0x52,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_BCSet =
    {0x5d2f5e16,0xf2f1,0x11d4,{0x94,0x52,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IContact =
    {0x14057452,0x0382,0x11d5,{0x94,0x65,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Contact =
    {0x14057454,0x0382,0x11d5,{0x94,0x65,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_ConnectionRegion =
    {0x14057456,0x0382,0x11d5,{0x94,0x65,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ICSys =
    {0x10ce53b8,0xf2e2,0x11d4,{0x94,0x52,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_CSys =
    {0x10ce53ba,0xf2e2,0x11d4,{0x94,0x52,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ICurve =
    {0x1f9f16ce,0x09d6,0x11d5,{0x94,0x6c,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Curve =
    {0x1f9f16d0,0x09d6,0x11d5,{0x94,0x6c,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IUserData =
    {0xcfa77c4c,0x63e9,0x11d5,{0x94,0xaa,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_UserData =
    {0xcfa77c4e,0x63e9,0x11d5,{0x94,0xaa,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ILayup =
    {0xedb333c3,0x3711,0x47a5,{0xa6,0x28,0x33,0xb4,0xb8,0x76,0x8f,0x88}};
extern "C" const GUID __declspec(selectany) CLSID_Layup =
    {0xedb333c5,0x3711,0x47a5,{0xa6,0x28,0x33,0xb4,0xb8,0x76,0x8f,0x88}};
extern "C" const GUID __declspec(selectany) DIID_IMatl =
    {0x0ad6e2e8,0xee3e,0x11d4,{0x94,0x4c,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Matl =
    {0x0ad6e2ea,0xee3e,0x11d4,{0x94,0x4c,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IProp =
    {0x7110873a,0xf096,0x11d4,{0x94,0x4f,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Prop =
    {0x7110873c,0xf096,0x11d4,{0x94,0x4f,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IElem =
    {0x1e6c26fe,0xf16a,0x11d4,{0x94,0x50,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Elem =
    {0x1e6c2700,0xf16a,0x11d4,{0x94,0x50,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IFunction =
    {0x14481c56,0x0767,0x11d5,{0x94,0x67,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Function =
    {0x14481c58,0x0767,0x11d5,{0x94,0x67,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IGroup =
    {0xfa671d08,0xf7a8,0x11d4,{0x94,0x57,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Group =
    {0xfa671d0a,0xf7a8,0x11d4,{0x94,0x57,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ILayer =
    {0xe0974272,0x0376,0x11d5,{0x94,0x65,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_layer =
    {0xe0974274,0x0376,0x11d5,{0x94,0x65,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ILoadETemp =
    {0x1faf0e14,0xf6c9,0x11d4,{0x94,0x56,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_LoadETemp =
    {0x1faf0e16,0xf6c9,0x11d4,{0x94,0x56,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ILoadGeom =
    {0x78456266,0xf7a9,0x11d4,{0x94,0x57,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_LoadGeom =
    {0x78456268,0xf7a9,0x11d4,{0x94,0x57,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ILoadMesh =
    {0xffdf9e7c,0xf6dd,0x11d4,{0x94,0x56,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_LoadMesh =
    {0xffdf9e7e,0xf6dd,0x11d4,{0x94,0x56,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ILoadNTemp =
    {0x33a4c0d4,0xf6c5,0x11d4,{0x94,0x56,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_LoadNTemp =
    {0x33a4c0d6,0xf6c5,0x11d4,{0x94,0x56,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ILoadSet =
    {0x39a8f662,0xf3cf,0x11d4,{0x94,0x53,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_LoadSet =
    {0x39a8f664,0xf3cf,0x11d4,{0x94,0x53,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IOptim =
    {0xd3a5591a,0x080c,0x11d5,{0x94,0x68,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Optim =
    {0xd3a5591b,0x080c,0x11d5,{0x94,0x68,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IOutput =
    {0xf7e2a8a0,0x0820,0x11d5,{0x94,0x68,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Output =
    {0xf7e2a8a2,0x0820,0x11d5,{0x94,0x68,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IOutputSet =
    {0x423c4774,0x0814,0x11d5,{0x94,0x68,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_OutputSet =
    {0x423c4776,0x0814,0x11d5,{0x94,0x68,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IPoint =
    {0xa97fa4fa,0x09ca,0x11d5,{0x94,0x6c,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Point =
    {0xa97fa4fc,0x09ca,0x11d5,{0x94,0x6c,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IReport =
    {0x0d85757c,0x0374,0x11d5,{0x94,0x65,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Report =
    {0x0d85757e,0x0374,0x11d5,{0x94,0x65,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ISolid =
    {0x28bcba84,0x0d7f,0x11d5,{0x94,0x70,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Solid =
    {0x28bcba86,0x0d7f,0x11d5,{0x94,0x70,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ISurface =
    {0xaa0fcdbc,0x0cb0,0x11d5,{0x94,0x6f,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Surface =
    {0xaa0fcdbe,0x0cb0,0x11d5,{0x94,0x6f,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ITmgBC =
    {0xf809a642,0x09bc,0x11d5,{0x94,0x6c,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_TmgBC =
    {0xf809a644,0x09bc,0x11d5,{0x94,0x6c,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ITmgCtl =
    {0xc1dd56f8,0x09bd,0x11d5,{0x94,0x6c,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_TmgCtl =
    {0xc1dd56fa,0x09bd,0x11d5,{0x94,0x6c,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ITmgInt =
    {0x5a0aef80,0x09be,0x11d5,{0x94,0x6c,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_TmgInt =
    {0x5a0aef82,0x09be,0x11d5,{0x94,0x6c,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ITmgOpt =
    {0xec1095a6,0x09be,0x11d5,{0x94,0x6c,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_TmgOpt =
    {0xec1095a8,0x09be,0x11d5,{0x94,0x6c,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_ITmgReal =
    {0x9d6a22b4,0x09be,0x11d5,{0x94,0x6c,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_TmgReal =
    {0x9d6a22b6,0x09be,0x11d5,{0x94,0x6c,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IVar =
    {0x72473e7e,0x0369,0x11d5,{0x94,0x65,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_Var =
    {0x72473e7f,0x0369,0x11d5,{0x94,0x65,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IView =
    {0x037bfa00,0xf86c,0x11d4,{0x94,0x58,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_View =
    {0x037bfa02,0xf86c,0x11d4,{0x94,0x58,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) DIID_IViewOrient =
    {0x3042ddd0,0xbb63,0x41cb,{0x85,0xf7,0x52,0xfd,0xe6,0x3b,0x06,0x24}};
extern "C" const GUID __declspec(selectany) CLSID_ViewOrient =
    {0x3042ddd2,0xbb63,0x41cb,{0x85,0xf7,0x52,0xfd,0xe6,0x3b,0x06,0x24}};
extern "C" const GUID __declspec(selectany) DIID_IText =
    {0xfdea6c66,0x77f3,0x4f6c,{0xbd,0xb9,0xea,0x97,0x69,0x19,0xb4,0x21}};
extern "C" const GUID __declspec(selectany) CLSID_text =
    {0xfdea6c67,0x77f3,0x4f6c,{0xbd,0xb9,0xea,0x97,0x69,0x19,0xb4,0x21}};
extern "C" const GUID __declspec(selectany) DIID_IConnectionProp =
    {0xfa64fd83,0x5c92,0x425f,{0x87,0xb4,0xfc,0x84,0x9d,0x84,0x89,0x8b}};
extern "C" const GUID __declspec(selectany) CLSID_ConnectionProp =
    {0xfa64fd81,0x5c92,0x425f,{0x87,0xb4,0xfc,0x84,0x9d,0x84,0x89,0x8b}};
extern "C" const GUID __declspec(selectany) DIID_IConnection =
    {0x1a8c9c57,0x6711,0x4498,{0xbd,0xd9,0x8b,0xd5,0x45,0x86,0x84,0x2e}};
extern "C" const GUID __declspec(selectany) CLSID_Connection =
    {0x1a8c9c55,0x6711,0x4498,{0xbd,0xd9,0x8b,0xd5,0x45,0x86,0x84,0x2e}};
extern "C" const GUID __declspec(selectany) DIID_IScratch =
    {0x98d6bd3c,0x3ddd,0x4457,{0xb6,0xad,0x15,0xd6,0xa1,0xf3,0xce,0x51}};
extern "C" const GUID __declspec(selectany) CLSID_Scratch =
    {0x98d6bd3e,0x3ddd,0x4457,{0xb6,0xad,0x15,0xd6,0xa1,0xf3,0xce,0x51}};
extern "C" const GUID __declspec(selectany) DIID_ISelector =
    {0x8a3498f7,0xa383,0x419e,{0x81,0x17,0x86,0xa0,0x30,0x51,0x75,0xff}};
extern "C" const GUID __declspec(selectany) CLSID_Selector =
    {0x8a3498f9,0xa383,0x419e,{0x81,0x17,0x86,0xa0,0x30,0x51,0x75,0xff}};
extern "C" const GUID __declspec(selectany) DIID_ILoadDefinition =
    {0xa9bf3a1f,0xe8f6,0x4d5c,{0xbc,0x48,0xa1,0x91,0xc6,0x1c,0x57,0xd2}};
extern "C" const GUID __declspec(selectany) CLSID_LoadDefinition =
    {0xa9bf3a21,0xe8f6,0x4d5c,{0xbc,0x48,0xa1,0x91,0xc6,0x1c,0x57,0xd2}};
extern "C" const GUID __declspec(selectany) DIID_IBCDefinition =
    {0xf1704416,0x2455,0x4c38,{0x8c,0x0c,0xae,0x23,0xe0,0x62,0xd4,0x21}};
extern "C" const GUID __declspec(selectany) CLSID_BCDefinition =
    {0xf1704418,0x2455,0x4c38,{0x8c,0x0c,0xae,0x23,0xe0,0x62,0xd4,0x21}};
extern "C" const GUID __declspec(selectany) DIID_IGFXPoint =
    {0x90c90b34,0xd880,0x497a,{0x9c,0xd6,0xaa,0xc2,0xca,0xdb,0x7b,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_GFXPoint =
    {0x90c90b36,0xd880,0x497a,{0x9c,0xd6,0xaa,0xc2,0xca,0xdb,0x7b,0x7c}};
extern "C" const GUID __declspec(selectany) DIID_IGFXLine =
    {0x72fa0dcd,0x21f2,0x4e55,{0x9e,0xdc,0x5d,0x4f,0x64,0xed,0x7e,0xc6}};
extern "C" const GUID __declspec(selectany) CLSID_GFXLine =
    {0x72fa0dcf,0x21f2,0x4e55,{0x9e,0xdc,0x5d,0x4f,0x64,0xed,0x7e,0xc6}};
extern "C" const GUID __declspec(selectany) DIID_IGFXArrow =
    {0x1694667a,0xa6bd,0x4ea1,{0xb1,0xf0,0x64,0x85,0x58,0x8c,0xda,0xeb}};
extern "C" const GUID __declspec(selectany) CLSID_GFXArrow =
    {0x1694667c,0xa6bd,0x4ea1,{0xb1,0xf0,0x64,0x85,0x58,0x8c,0xda,0xeb}};
extern "C" const GUID __declspec(selectany) DIID_IGFXTria3 =
    {0xcac6d4f9,0x4d32,0x42c5,{0x91,0x0c,0xd7,0x3f,0xbb,0x9a,0xeb,0x62}};
extern "C" const GUID __declspec(selectany) CLSID_GFXTria3 =
    {0xcac6d4fb,0x4d32,0x42c5,{0x91,0x0c,0xd7,0x3f,0xbb,0x9a,0xeb,0x62}};
extern "C" const GUID __declspec(selectany) DIID_IGFXQuad4 =
    {0x5070769b,0x079c,0x46e2,{0xbb,0x16,0x57,0xd7,0x26,0x0f,0x9c,0x2b}};
extern "C" const GUID __declspec(selectany) CLSID_GFXQuad4 =
    {0x5070769d,0x079c,0x46e2,{0xbb,0x16,0x57,0xd7,0x26,0x0f,0x9c,0x2b}};
extern "C" const GUID __declspec(selectany) DIID_IGlobalPly =
    {0xa09ece66,0x9245,0x409b,{0x93,0x21,0xa2,0x47,0x6a,0xe7,0xd4,0xe7}};
extern "C" const GUID __declspec(selectany) CLSID_globalply =
    {0xa09ece68,0x9245,0x409b,{0x93,0x21,0xa2,0x47,0x6a,0xe7,0xd4,0xe7}};
extern "C" const GUID __declspec(selectany) DIID_ILoadBolt =
    {0x0dc9d655,0x721a,0x4ae7,{0xb4,0x68,0x0c,0x4b,0x0f,0xdc,0x97,0xaa}};
extern "C" const GUID __declspec(selectany) CLSID_LoadBolt =
    {0x0dc9d657,0x721a,0x4ae7,{0xb4,0x68,0x0c,0x4b,0x0f,0xdc,0x97,0xaa}};
extern "C" const GUID __declspec(selectany) DIID_IMapOutput =
    {0xfb7c8189,0x2114,0x43d6,{0x86,0xde,0x78,0x13,0x8c,0xdf,0x8c,0x0b}};
extern "C" const GUID __declspec(selectany) CLSID_MapOutput =
    {0xfb7c8191,0x2114,0x43d6,{0x86,0xde,0x78,0x13,0x8c,0xdf,0x8c,0x0b}};
extern "C" const GUID __declspec(selectany) DIID_IDataSurf =
    {0x8f814530,0x166a,0x4092,{0xbb,0xd8,0xc3,0x74,0x83,0x77,0x2f,0x1e}};
extern "C" const GUID __declspec(selectany) CLSID_DataSurf =
    {0x8f814532,0x166a,0x4092,{0xbb,0xd8,0xc3,0x74,0x83,0x77,0x2f,0x1e}};
extern "C" const GUID __declspec(selectany) DIID_IDataTable =
    {0x473e5696,0x513b,0x4a26,{0xbd,0x0f,0xfd,0xb3,0x68,0x20,0xe7,0xb1}};
extern "C" const GUID __declspec(selectany) CLSID_DataTable =
    {0x473e5698,0x513b,0x4a26,{0xbd,0x0f,0xfd,0xb3,0x68,0x20,0xe7,0xb1}};
extern "C" const GUID __declspec(selectany) DIID_IReference =
    {0xe6f57aaf,0xe85e,0x455b,{0xaa,0x4d,0x4f,0xf4,0x88,0x24,0xbb,0x31}};
extern "C" const GUID __declspec(selectany) CLSID_Reference =
    {0xe6f57ab1,0xe85e,0x455b,{0xaa,0x4d,0x4f,0xf4,0x88,0x24,0xbb,0x31}};
extern "C" const GUID __declspec(selectany) DIID_IAeroPanel =
    {0x923d4ff7,0x4c93,0x4daa,{0x82,0x23,0xf2,0x75,0xcc,0x54,0xc6,0x9f}};
extern "C" const GUID __declspec(selectany) CLSID_AeroPanel =
    {0x923d4ff9,0x4c93,0x4daa,{0x82,0x23,0xf2,0x75,0xcc,0x54,0xc6,0x9f}};
extern "C" const GUID __declspec(selectany) DIID_IAeroProp =
    {0x6c3881eb,0x8c68,0x4807,{0xb6,0x9a,0x44,0x30,0x73,0x7f,0x37,0xb1}};
extern "C" const GUID __declspec(selectany) CLSID_AeroProp =
    {0x6c3881ed,0x8c68,0x4807,{0xb6,0x9a,0x44,0x30,0x73,0x7f,0x37,0xb1}};
extern "C" const GUID __declspec(selectany) DIID_IAeroSpline =
    {0x39b680b2,0x1ad7,0x44bb,{0x8c,0x89,0xa6,0x99,0xf3,0xb1,0x91,0xae}};
extern "C" const GUID __declspec(selectany) CLSID_AeroSpline =
    {0x39b680b4,0x1ad7,0x44bb,{0x8c,0x89,0xa6,0x99,0xf3,0xb1,0x91,0xae}};
extern "C" const GUID __declspec(selectany) DIID_IAeroSurf =
    {0x61cff16f,0xcc7e,0x40bb,{0xa2,0x0f,0xb1,0xf0,0x65,0xc3,0x6b,0x29}};
extern "C" const GUID __declspec(selectany) CLSID_AeroSurf =
    {0x61cff171,0xcc7e,0x40bb,{0xa2,0x0f,0xb1,0xf0,0x65,0xc3,0x6b,0x29}};
extern "C" const GUID __declspec(selectany) DIID_IFreebody =
    {0xf39a93f2,0xdfd9,0x42d5,{0xb6,0x63,0x8f,0x09,0xa9,0x59,0xda,0xfe}};
extern "C" const GUID __declspec(selectany) CLSID_Freebody =
    {0xf39a93f4,0xdfd9,0x42d5,{0xb6,0x63,0x8f,0x09,0xa9,0x59,0xda,0xfe}};
extern "C" const GUID __declspec(selectany) DIID_ISEReference =
    {0xbcf73006,0xfaaa,0x4648,{0x9a,0xbe,0xa4,0xdf,0x90,0x0d,0x45,0xbf}};
extern "C" const GUID __declspec(selectany) CLSID_SEReference =
    {0xbcf73008,0xfaaa,0x4648,{0x9a,0xbe,0xa4,0xdf,0x90,0x0d,0x45,0xbf}};
extern "C" const GUID __declspec(selectany) DIID_IChart =
    {0x7aadc5ef,0x400b,0x4984,{0x9d,0x12,0x31,0x42,0x96,0x95,0x2f,0x1f}};
extern "C" const GUID __declspec(selectany) CLSID_Chart =
    {0x7aadc5f1,0x400b,0x4984,{0x9d,0x12,0x31,0x42,0x96,0x95,0x2f,0x1f}};
extern "C" const GUID __declspec(selectany) DIID_IChartSeries =
    {0x19988e81,0xf344,0x4944,{0x82,0xde,0xae,0xbe,0x26,0x68,0x9f,0x33}};
extern "C" const GUID __declspec(selectany) CLSID_ChartSeries =
    {0x19988e83,0xf344,0x4944,{0x82,0xde,0xae,0xbe,0x26,0x68,0x9f,0x33}};
extern "C" const GUID __declspec(selectany) DIID_ITableData =
    {0x17387165,0x149c,0x43e5,{0xa9,0x1d,0xea,0xc4,0xd1,0xe4,0xea,0xad}};
extern "C" const GUID __declspec(selectany) CLSID_TableData =
    {0x17387167,0x149c,0x43e5,{0xa9,0x1d,0xea,0xc4,0xd1,0xe4,0xea,0xad}};
extern "C" const GUID __declspec(selectany) DIID_IInterpolate =
    {0x60266d03,0xaf68,0x4b10,{0x90,0x6c,0x4b,0xda,0xfa,0xde,0x37,0x46}};
extern "C" const GUID __declspec(selectany) CLSID_Interpolate =
    {0x60266d05,0xaf68,0x4b10,{0x90,0x6c,0x4b,0xda,0xfa,0xde,0x37,0x46}};
extern "C" const GUID __declspec(selectany) DIID_IBeamCalculator =
    {0x3a62fe4c,0xd156,0x4f16,{0x9c,0x1b,0xf8,0x1c,0x6b,0xb4,0x08,0x9a}};
extern "C" const GUID __declspec(selectany) CLSID_BeamCalculator =
    {0x3a62fe4e,0xd156,0x4f16,{0x9c,0x1b,0xf8,0x1c,0x6b,0xb4,0x08,0x9a}};
extern "C" const GUID __declspec(selectany) DIID_IAnalysisStudy =
    {0x589eafb8,0xb3d0,0x42fb,{0xb9,0x02,0xfe,0x0a,0x88,0xb7,0xec,0x80}};
extern "C" const GUID __declspec(selectany) CLSID_AnalysisStudy =
    {0x589eafba,0xb3d0,0x42fb,{0xb9,0x02,0xfe,0x0a,0x88,0xb7,0xec,0x80}};
extern "C" const GUID __declspec(selectany) DIID_IDrawErase =
    {0x0becb769,0x5f94,0x4718,{0x94,0x2b,0x9a,0x2a,0x86,0x6a,0x59,0xd1}};
extern "C" const GUID __declspec(selectany) CLSID_DrawErase =
    {0x0becb76b,0x5f94,0x4718,{0x94,0x2b,0x9a,0x2a,0x86,0x6a,0x59,0xd1}};
extern "C" const GUID __declspec(selectany) DIID_IFreq =
    {0xbc4680a4,0x7b1c,0x449b,{0xb7,0xf7,0xaa,0xf2,0x1e,0xc0,0xab,0xd3}};
extern "C" const GUID __declspec(selectany) CLSID_Frequency =
    {0xbc4680a6,0x7b1c,0x449b,{0xb7,0xf7,0xaa,0xf2,0x1e,0xc0,0xab,0xd3}};
extern "C" const GUID __declspec(selectany) DIID_IMidFaceCentroidModel =
    {0x8d7600a5,0xc1b7,0x4740,{0x8d,0x63,0x50,0xe4,0x76,0xa8,0x4b,0x2d}};
extern "C" const GUID __declspec(selectany) CLSID_MidFaceCentroidModel =
    {0x8d7600b6,0xc1b7,0x4740,{0x8d,0x63,0x50,0xe4,0x76,0xa8,0x4b,0x2d}};
extern "C" const GUID __declspec(selectany) DIID_IUserDefinedGraphics =
    {0x9b5131e5,0xbfb8,0x4219,{0x8f,0x7d,0x76,0x4d,0xbc,0x32,0xc3,0x23}};
extern "C" const GUID __declspec(selectany) CLSID_UserDefinedGraphics =
    {0x9b5131e7,0xbfb8,0x4219,{0x8f,0x7d,0x76,0x4d,0xbc,0x32,0xc3,0x23}};
extern "C" const GUID __declspec(selectany) DIID_IVector =
    {0xf2e67c72,0x0e5b,0x477f,{0x83,0x77,0xba,0xcd,0x73,0x17,0xa2,0xff}};
extern "C" const GUID __declspec(selectany) CLSID_Vector =
    {0xf2e67c74,0x0e5b,0x477f,{0x83,0x77,0xba,0xcd,0x73,0x17,0xa2,0xff}};
extern "C" const GUID __declspec(selectany) DIID_IPlane =
    {0x891a6125,0x406e,0x4438,{0x8a,0x3f,0xaf,0x25,0x4f,0x45,0x08,0xdd}};
extern "C" const GUID __declspec(selectany) CLSID_Plane =
    {0x891a6127,0x406e,0x4438,{0x8a,0x3f,0xaf,0x25,0x4f,0x45,0x08,0xdd}};
extern "C" const GUID __declspec(selectany) DIID_Imodel =
    {0x08f336b2,0xe668,0x11d4,{0x94,0x41,0x00,0x10,0x83,0xff,0xf1,0x1c}};
extern "C" const GUID __declspec(selectany) CLSID_model =
    {0xa01dd4c4,0xa8f0,0x11d4,{0x9f,0xac,0x00,0x10,0x5a,0x0a,0x86,0xc2}};

//
// Function implementation mapping
//

#pragma start_map_region("e:\femcon\femcon\x64\debug\femap.tli")
__declspec(implementation_key(1)) _bstr_t IRead::Field ( int fieldID );
__declspec(implementation_key(2)) int IRead::IntField ( int fieldID, int defValue );
__declspec(implementation_key(3)) double IRead::RealField ( int fieldID, double defValue );
__declspec(implementation_key(4)) VARIANT_BOOL IRead::BoolField ( int fieldID, VARIANT_BOOL defValue );
__declspec(implementation_key(5)) enum zReturnCode IRead::Open ( _bstr_t filename, int maxLineLength );
__declspec(implementation_key(6)) enum zReturnCode IRead::Close ( );
__declspec(implementation_key(7)) enum zReturnCode IRead::Read ( );
__declspec(implementation_key(8)) enum zReturnCode IRead::Skipped ( );
__declspec(implementation_key(9)) enum zReturnCode IRead::AtEOF ( );
__declspec(implementation_key(10)) int IRead::Position ( );
__declspec(implementation_key(11)) enum zReturnCode IRead::Jump ( int jumpto );
__declspec(implementation_key(12)) enum zReturnCode IRead::ShowStatus ( VARIANT_BOOL on );
__declspec(implementation_key(13)) enum zReturnCode IRead::SetNoBlankLines ( VARIANT_BOOL on );
__declspec(implementation_key(14)) enum zReturnCode IRead::SetNoShortLines ( VARIANT_BOOL on, int minLineLength );
__declspec(implementation_key(15)) enum zReturnCode IRead::SetTrimSpace ( VARIANT_BOOL on );
__declspec(implementation_key(16)) enum zReturnCode IRead::SetTrimEndSpace ( VARIANT_BOOL on );
__declspec(implementation_key(17)) enum zReturnCode IRead::SetTrimFront ( VARIANT_BOOL on, int numChar );
__declspec(implementation_key(18)) enum zReturnCode IRead::SetUppercase ( VARIANT_BOOL on );
__declspec(implementation_key(19)) enum zReturnCode IRead::SetSkip ( VARIANT_BOOL on );
__declspec(implementation_key(20)) enum zReturnCode IRead::SetSearch ( VARIANT_BOOL on );
__declspec(implementation_key(21)) enum zReturnCode IRead::SetSearchString ( _bstr_t s, _bstr_t sor );
__declspec(implementation_key(22)) enum zReturnCode IRead::SetFormFeed ( VARIANT_BOOL on );
__declspec(implementation_key(23)) enum zReturnCode IRead::SetSkipAfterSearch ( int lines );
__declspec(implementation_key(24)) enum zReturnCode IRead::SetTabSize ( int tabsize );
__declspec(implementation_key(25)) enum zReturnCode IRead::LineInit ( int maxLineLength );
__declspec(implementation_key(26)) enum zReturnCode IRead::Reparse ( );
__declspec(implementation_key(27)) enum zReturnCode IRead::FixedFormat ( int numField, const _variant_t & width );
__declspec(implementation_key(28)) enum zReturnCode IRead::SetFreeFormat ( );
__declspec(implementation_key(29)) enum zReturnCode IRead::SetFixedFormat ( );
__declspec(implementation_key(30)) enum zReturnCode IRead::SetAutoFormat ( );
__declspec(implementation_key(31)) enum zReturnCode IRead::JumpToEnd ( int jumpto );
__declspec(implementation_key(32)) enum zReturnCode IRead::Size ( __int64 * nSize );
__declspec(implementation_key(33)) enum zReturnCode IRead::TimeCreated ( __int64 * nTime );
__declspec(implementation_key(34)) enum zReturnCode IRead::TimeWritten ( __int64 * nTime );
__declspec(implementation_key(35)) enum zReturnCode IRead::TimeAccessed ( __int64 * nTime );
__declspec(implementation_key(36)) enum zReturnCode IRead::ClearSearch ( );
__declspec(implementation_key(37)) _bstr_t IRead::GetLine ( );
__declspec(implementation_key(38)) void IRead::PutLine ( _bstr_t _val );
__declspec(implementation_key(39)) VARIANT_BOOL IRead::GetTruncated ( );
__declspec(implementation_key(40)) void IRead::PutTruncated ( VARIANT_BOOL _val );
__declspec(implementation_key(41)) VARIANT_BOOL IRead::GetShared ( );
__declspec(implementation_key(42)) void IRead::PutShared ( VARIANT_BOOL _val );
__declspec(implementation_key(43)) VARIANT_BOOL IRead::GetExclusive ( );
__declspec(implementation_key(44)) void IRead::PutExclusive ( VARIANT_BOOL _val );
__declspec(implementation_key(45)) VARIANT_BOOL IRead::GetSharedDelete ( );
__declspec(implementation_key(46)) void IRead::PutSharedDelete ( VARIANT_BOOL _val );
__declspec(implementation_key(47)) enum zReturnCode ISet::SetDeveloperID ( int DeveloperID );
__declspec(implementation_key(48)) enum zReturnCode ISet::GetSavedSet ( int nSavedID, VARIANT_BOOL bClear );
__declspec(implementation_key(49)) enum zReturnCode ISet::GetAllSavedSets ( );
__declspec(implementation_key(50)) enum zReturnCode ISet::PutSavedSet ( int nPutID, enum zDataType entityTYPE, int * nSavedID );
__declspec(implementation_key(51)) enum zReturnCode ISet::DeleteSavedSet ( int nSavedID );
__declspec(implementation_key(52)) enum zReturnCode ISet::DeleteAllSavedSets ( );
__declspec(implementation_key(53)) enum zReturnCode ISet::DeleteOtherSavedSets ( );
__declspec(implementation_key(54)) enum zReturnCode ISet::ResetSavedSet ( );
__declspec(implementation_key(55)) int ISet::NextSavedSet ( );
__declspec(implementation_key(56)) int ISet::EmptySavedSet ( );
__declspec(implementation_key(57)) int ISet::CountSavedSets ( int * pnAllSets );
__declspec(implementation_key(58)) enum zReturnCode ISet::AddToSavedSet ( int nSavedID, enum zDataType entityTYPE, int entID );
__declspec(implementation_key(59)) enum zReturnCode ISet::AddSetToSavedSet ( int nSavedID, enum zDataType entityTYPE );
__declspec(implementation_key(60)) enum zReturnCode ISet::RemoveFromSavedSet ( int nSavedID, enum zDataType entityTYPE, int entID );
__declspec(implementation_key(61)) enum zReturnCode ISet::RemoveSetFromSavedSet ( int nSavedID, enum zDataType entityTYPE );
__declspec(implementation_key(62)) enum zReturnCode ISet::GetSavedSetType ( int nSavedID, enum zDataType * pnDataType );
__declspec(implementation_key(63)) enum zReturnCode ISet::Add ( int entID );
__declspec(implementation_key(64)) enum zReturnCode ISet::AddRange ( int startID, int stopID, int increment );
__declspec(implementation_key(65)) enum zReturnCode ISet::Reload ( int oldID );
__declspec(implementation_key(66)) enum zReturnCode ISet::Remove ( int entID );
__declspec(implementation_key(67)) enum zReturnCode ISet::IsAdded ( int entID );
__declspec(implementation_key(68)) enum zReturnCode ISet::Reset ( );
__declspec(implementation_key(69)) int ISet::Next ( );
__declspec(implementation_key(70)) enum zReturnCode ISet::AddSet ( int addID );
__declspec(implementation_key(71)) enum zReturnCode ISet::RemoveSet ( int addID );
__declspec(implementation_key(72)) enum zReturnCode ISet::AddCommon ( int set1, int set2 );
__declspec(implementation_key(73)) enum zReturnCode ISet::Copy ( int origID );
__declspec(implementation_key(74)) int ISet::Count ( );
__declspec(implementation_key(75)) enum zReturnCode ISet::AddAll ( enum zDataType entityTYPE );
__declspec(implementation_key(76)) enum zReturnCode ISet::Select ( enum zDataType entityTYPE, VARIANT_BOOL clear, _bstr_t title );
__declspec(implementation_key(77)) enum zReturnCode ISet::SelectID ( enum zDataType entityTYPE, _bstr_t title, int * selID );
__declspec(implementation_key(78)) enum zReturnCode ISet::AddGroup ( enum zDataType entityTYPE, int groupID );
__declspec(implementation_key(79)) enum zReturnCode ISet::AddRule ( int ID, enum zGroupDefinitionType ruleID );
__declspec(implementation_key(80)) enum zReturnCode ISet::AddSetRule ( int addID, enum zGroupDefinitionType ruleID );
__declspec(implementation_key(81)) enum zReturnCode ISet::clear ( );
__declspec(implementation_key(82)) enum zReturnCode ISet::DeleteAll ( );
__declspec(implementation_key(83)) int ISet::First ( );
__declspec(implementation_key(84)) int ISet::Last ( );
__declspec(implementation_key(85)) enum zReturnCode ISet::RemoveRange ( int startID, int stopID, int increment );
__declspec(implementation_key(86)) enum zReturnCode ISet::CopyToClipboard ( VARIANT_BOOL bAsList );
__declspec(implementation_key(87)) enum zReturnCode ISet::AddEntitiesOnLayer ( int laySET, enum zDataType entityTYPE );
__declspec(implementation_key(88)) enum zReturnCode ISet::GetArray ( int * numID, VARIANT * arrayID );
__declspec(implementation_key(89)) enum zReturnCode ISet::AddArray ( int numID, const _variant_t & arrayID );
__declspec(implementation_key(90)) enum zReturnCode ISet::Match ( int otherID );
__declspec(implementation_key(91)) enum zReturnCode ISet::SelectOutputVectorID ( _bstr_t title, int outputSetID, enum zOutputType limitOutputType, enum zOutputComplex limitComplex, enum zDataType limitToEntity, VARIANT_BOOL allowCorner, int * selID );
__declspec(implementation_key(92)) int ISet::NextID ( );
__declspec(implementation_key(93)) enum zReturnCode ISet::SelectMultiID ( enum zDataType entityTYPE, int entitySET, _bstr_t title );
__declspec(implementation_key(94)) int ISet::IsEmpty ( );
__declspec(implementation_key(95)) enum zReturnCode ISet::AddAllExcept ( enum zDataType entityTYPE, int exceptSET );
__declspec(implementation_key(96)) enum zReturnCode ISet::RemoveNotCommon ( int set1 );
__declspec(implementation_key(97)) enum zReturnCode ISet::RemoveNotCommonToGroup ( enum zDataType entityTYPE, int groupID );
__declspec(implementation_key(98)) enum zReturnCode ISet::RemoveGroup ( enum zDataType entityTYPE, int groupID );
__declspec(implementation_key(99)) enum zReturnCode ISet::Debug ( );
__declspec(implementation_key(100)) enum zReturnCode ISet::IsSetAdded ( int set1 );
__declspec(implementation_key(101)) enum zReturnCode ISet::ConvertToAllSurfaces ( );
__declspec(implementation_key(102)) enum zReturnCode ISet::ConvertToBoundarySurfaces ( );
__declspec(implementation_key(103)) enum zReturnCode ISet::ConvertToBoundarySurfacesOnly ( );
__declspec(implementation_key(104)) enum zReturnCode ISet::ConvertToInternalSurfaces ( );
__declspec(implementation_key(105)) enum zReturnCode ISet::ConvertToAllCurves ( );
__declspec(implementation_key(106)) enum zReturnCode ISet::ConvertToCombinedCurves ( );
__declspec(implementation_key(107)) enum zReturnCode ISet::ConvertToCombinedCurvesOnly ( );
__declspec(implementation_key(108)) enum zReturnCode ISet::ConvertToInternalCurves ( );
__declspec(implementation_key(109)) enum zReturnCode ISet::IsArrayAdded ( int numID, const _variant_t & arrayID );
__declspec(implementation_key(110)) enum zReturnCode ISet::HasCommon ( int set1 );
__declspec(implementation_key(111)) enum zReturnCode ISet::RemoveArray ( int numID, const _variant_t & arrayID );
__declspec(implementation_key(112)) enum zReturnCode ISet::AddCoordinate ( enum zDataType entityTYPE, int nCSysID, const _variant_t & vbXYZ, const _variant_t & vnMode, const _variant_t & vdMin, const _variant_t & vdMax );
__declspec(implementation_key(113)) enum zReturnCode ISet::AddAroundPoint ( enum zDataType entityTYPE, const _variant_t & vBase, enum zCoordPick nMode, double dMin, double vdMax );
__declspec(implementation_key(114)) enum zReturnCode ISet::AddAroundVector ( enum zDataType entityTYPE, const _variant_t & vBase, const _variant_t & vVec, enum zCoordPick nMode, double dMin, double vdMax );
__declspec(implementation_key(115)) enum zReturnCode ISet::AddAroundPlane ( enum zDataType entityTYPE, const _variant_t & vBase, const _variant_t & vVec, enum zCoordPick nMode, double dMin, double vdMax );
__declspec(implementation_key(116)) enum zReturnCode ISet::AddNodesOnGeometry ( enum zDataType geomTYPE, int geomID, VARIANT_BOOL bClear, VARIANT_BOOL bFullTree, VARIANT_BOOL bBoundaryOnly );
__declspec(implementation_key(117)) enum zReturnCode ISet::SelectList ( int nNumEntity, enum zDataType entityTYPE );
__declspec(implementation_key(118)) enum zReturnCode ISet::AddAllTitle ( enum zDataType entityTYPE, int nSetID, _bstr_t sFind );
__declspec(implementation_key(119)) enum zReturnCode ISet::AddAllColor ( enum zDataType entityTYPE, int nSetID, int nColor, enum zColorMatch nColorMatch );
__declspec(implementation_key(120)) enum zReturnCode ISet::AddMidsideNodes ( int nSetID );
__declspec(implementation_key(121)) enum zReturnCode ISet::RemoveInternalCurves ( );
__declspec(implementation_key(122)) enum zReturnCode ISet::SelectIDInSet ( enum zDataType entityTYPE, _bstr_t title, int nInSetID, int * selID );
__declspec(implementation_key(123)) enum zReturnCode ISet::AddNewRemoveCommonSet ( int addID );
__declspec(implementation_key(124)) int ISet::CountCommon ( int set1 );
__declspec(implementation_key(125)) int ISet::CountNotCommon ( int set1 );
__declspec(implementation_key(126)) enum zReturnCode ISet::HasNotCommon ( int set1 );
__declspec(implementation_key(127)) int ISet::NextAfter ( int nStartID );
__declspec(implementation_key(128)) int ISet::Prev ( );
__declspec(implementation_key(129)) int ISet::PrevBefore ( int nStartID );
__declspec(implementation_key(130)) int ISet::PrevID ( );
__declspec(implementation_key(131)) int ISet::EmptyBlock ( int nStartID, int nCount, int * nFirstEmptyID );
__declspec(implementation_key(132)) int ISet::NextEmptyAfter ( int nStartID );
__declspec(implementation_key(133)) int ISet::AddAllInRange ( enum zDataType entityTYPE, int startID, int stopID );
__declspec(implementation_key(134)) enum zReturnCode ISet::Reload2 ( int oldID );
__declspec(implementation_key(135)) enum zReturnCode ISet::AddAllSavedSetIDs ( );
__declspec(implementation_key(136)) enum zReturnCode ISet::AddCoordinate2 ( enum zDataType entityTYPE, int nCSysID, const _variant_t & vbXYZ, const _variant_t & vnMode, const _variant_t & vdMin, const _variant_t & vdMax );
__declspec(implementation_key(137)) enum zReturnCode ISet::AddAroundPoint2 ( enum zDataType entityTYPE, const _variant_t & vBase, enum zCoordPick nMode, double dMin, double vdMax );
__declspec(implementation_key(138)) enum zReturnCode ISet::AddAroundVector2 ( enum zDataType entityTYPE, const _variant_t & vBase, const _variant_t & vVec, enum zCoordPick nMode, double dMin, double vdMax );
__declspec(implementation_key(139)) enum zReturnCode ISet::AddAroundPlane2 ( enum zDataType entityTYPE, const _variant_t & vBase, const _variant_t & vVec, enum zCoordPick nMode, double dMin, double vdMax );
__declspec(implementation_key(140)) enum zReturnCode ISet::Show ( enum zDataType entityTYPE );
__declspec(implementation_key(141)) enum zReturnCode ISet::ShowAutoscale ( enum zDataType entityTYPE );
__declspec(implementation_key(142)) enum zReturnCode ISet::AddSolidElementsAlongVector ( const _variant_t & p1, const _variant_t & p2, int elemSET, VARIANT_BOOL bRequireIntersect, VARIANT_BOOL bInfiniteVector, VARIANT_BOOL bDirectionalVector );
__declspec(implementation_key(143)) enum zReturnCode ISet::AddVisible ( int nVuID, enum zDataType entityTYPE, VARIANT_BOOL bUseViewDrawEntityOption );
__declspec(implementation_key(144)) enum zReturnCode ISet::AddAllConnectedElements ( );
__declspec(implementation_key(145)) enum zReturnCode ISet::AddConnectedFillets ( );
__declspec(implementation_key(146)) enum zReturnCode ISet::AddTangentSurfaces ( double dTol );
__declspec(implementation_key(147)) enum zReturnCode ISet::AddConstrained ( VARIANT_BOOL bInAnySet, int nSetID, VARIANT_BOOL bExpandBC, enum zDataType enOnType, enum zMatchOpt enMatch, VARIANT_BOOL bDOF1, VARIANT_BOOL bDOF2, VARIANT_BOOL bDOF3, VARIANT_BOOL bDOF4, VARIANT_BOOL bDOF5, VARIANT_BOOL bDOF6 );
__declspec(implementation_key(148)) enum zReturnCode ISet::AddLoaded ( VARIANT_BOOL bInAnySet, int nSetID, VARIANT_BOOL bExpandLoad, enum zLoadType enLoadType, enum zRangeOpt enRangeOpt, double dMin, double dMax );
__declspec(implementation_key(149)) enum zReturnCode ISet::RemoveRule ( int ID, enum zGroupDefinitionType ruleID );
__declspec(implementation_key(150)) enum zReturnCode ISet::RemoveSetRule ( int removeID, enum zGroupDefinitionType ruleID );
__declspec(implementation_key(151)) enum zReturnCode ISet::AddConnectedElements ( );
__declspec(implementation_key(152)) enum zReturnCode ISet::AddComponentOutputVectors ( int nFromOutputSetID );
__declspec(implementation_key(153)) enum zReturnCode ISet::AddSimilarOutputVectors ( int nFromOutputSetID );
__declspec(implementation_key(154)) enum zReturnCode ISet::AddComplexOutputVectors ( int nFromOutputSetID );
__declspec(implementation_key(155)) enum zReturnCode ISet::SelectIDWithNew ( enum zDataType entityTYPE, _bstr_t title, int * selID );
__declspec(implementation_key(156)) int ISet::GetID ( );
__declspec(implementation_key(157)) void ISet::PutID ( int _val );
__declspec(implementation_key(158)) VARIANT_BOOL ISet::GetSave ( );
__declspec(implementation_key(159)) void ISet::PutSave ( VARIANT_BOOL _val );
__declspec(implementation_key(160)) int ISet::GetCurrentID ( );
__declspec(implementation_key(161)) void ISet::PutCurrentID ( int _val );
__declspec(implementation_key(162)) enum zReturnCode ISortSet::Add ( int nID );
__declspec(implementation_key(163)) enum zReturnCode ISortSet::AddReal ( int nID, double dReal1, double dReal2, double dReal3 );
__declspec(implementation_key(164)) enum zReturnCode ISortSet::AddInt ( int nID, int dInt1, int dInt2, int dInt3 );
__declspec(implementation_key(165)) enum zReturnCode ISortSet::AddAll ( int nID, double dReal1, double dReal2, double dReal3, int dInt1, int dInt2, int dInt3, enum zDataType eDataType );
__declspec(implementation_key(166)) enum zReturnCode ISortSet::SetData ( int nID, double dReal1, double dReal2, double dReal3, int dInt1, int dInt2, int dInt3, enum zDataType eDataType );
__declspec(implementation_key(167)) enum zReturnCode ISortSet::GetData ( int nID, double * dReal1, double * dReal2, double * dReal3, int * dInt1, int * dInt2, int * dInt3, enum zDataType * eDataType );
__declspec(implementation_key(168)) enum zReturnCode ISortSet::Find ( int nID );
__declspec(implementation_key(169)) enum zReturnCode ISortSet::Remove ( int nID );
__declspec(implementation_key(170)) enum zReturnCode ISortSet::IsAdded ( int nID );
__declspec(implementation_key(171)) enum zReturnCode ISortSet::Reset ( );
__declspec(implementation_key(172)) int ISortSet::Next ( );
__declspec(implementation_key(173)) int ISortSet::Prev ( );
__declspec(implementation_key(174)) int ISortSet::Count ( );
__declspec(implementation_key(175)) enum zReturnCode ISortSet::clear ( );
__declspec(implementation_key(176)) int ISortSet::First ( );
__declspec(implementation_key(177)) int ISortSet::Last ( );
__declspec(implementation_key(178)) enum zReturnCode ISortSet::Sort ( VARIANT_BOOL bSortReal );
__declspec(implementation_key(179)) enum zReturnCode ISortSet::Select ( enum zDataType entityTYPE, VARIANT_BOOL Reload, _bstr_t title );
__declspec(implementation_key(180)) enum zReturnCode ISortSet::SelectID ( enum zDataType entityTYPE, _bstr_t title, int * selID );
__declspec(implementation_key(181)) int ISortSet::Current ( );
__declspec(implementation_key(182)) enum zReturnCode ISortSet::RemoveSet ( int nSetID );
__declspec(implementation_key(183)) enum zReturnCode ISortSet::ConvertToBoundarySurfaces ( );
__declspec(implementation_key(184)) enum zReturnCode ISortSet::SelectList ( int nNumEntity, enum zDataType entityTYPE );
__declspec(implementation_key(185)) enum zReturnCode ISortSet::SortRemoveDuplicates ( VARIANT_BOOL bSortReal );
__declspec(implementation_key(186)) int ISortSet::IsEmpty ( );
__declspec(implementation_key(187)) enum zReturnCode ISortSet::AddAroundPoint ( enum zDataType entityTYPE, int nSetID, const _variant_t & vBase );
__declspec(implementation_key(188)) enum zReturnCode ISortSet::AddAroundVector ( enum zDataType entityTYPE, int nSetID, const _variant_t & vBase, const _variant_t & vDir );
__declspec(implementation_key(189)) enum zReturnCode ISortSet::AddAroundPlane ( enum zDataType entityTYPE, int nSetID, const _variant_t & vBase, const _variant_t & vDir, VARIANT_BOOL bAbs );
__declspec(implementation_key(190)) enum zReturnCode ISortSet::SetReal ( int nID, double dReal1, double dReal2, double dReal3 );
__declspec(implementation_key(191)) enum zReturnCode ISortSet::GetReal ( int nID, double * dReal1, double * dReal2, double * dReal3 );
__declspec(implementation_key(192)) enum zReturnCode ISortSet::SetInt ( int nID, int dInt1, int dInt2, int dInt3 );
__declspec(implementation_key(193)) enum zReturnCode ISortSet::GetInt ( int nID, int * dInt1, int * dInt2, int * dInt3 );
__declspec(implementation_key(194)) enum zReturnCode ISortSet::SetDataType ( int nID, enum zDataType eDataType );
__declspec(implementation_key(195)) enum zReturnCode ISortSet::GetDataType ( int nID, enum zDataType * eDataType );
__declspec(implementation_key(196)) enum zReturnCode ISortSet::GetSet ( int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(197)) int ISortSet::GetID ( );
__declspec(implementation_key(198)) void ISortSet::PutID ( int _val );
__declspec(implementation_key(199)) double ISortSet::GetdReal1 ( );
__declspec(implementation_key(200)) void ISortSet::PutdReal1 ( double _val );
__declspec(implementation_key(201)) double ISortSet::GetdReal2 ( );
__declspec(implementation_key(202)) void ISortSet::PutdReal2 ( double _val );
__declspec(implementation_key(203)) double ISortSet::GetdReal3 ( );
__declspec(implementation_key(204)) void ISortSet::PutdReal3 ( double _val );
__declspec(implementation_key(205)) int ISortSet::GetnInt1 ( );
__declspec(implementation_key(206)) void ISortSet::PutnInt1 ( int _val );
__declspec(implementation_key(207)) int ISortSet::GetnInt2 ( );
__declspec(implementation_key(208)) void ISortSet::PutnInt2 ( int _val );
__declspec(implementation_key(209)) int ISortSet::GetnInt3 ( );
__declspec(implementation_key(210)) void ISortSet::PutnInt3 ( int _val );
__declspec(implementation_key(211)) enum zDataType ISortSet::GeteDataType ( );
__declspec(implementation_key(212)) void ISortSet::PuteDataType ( enum zDataType _val );
__declspec(implementation_key(213)) enum zReturnCode IMapData::clear ( );
__declspec(implementation_key(214)) enum zReturnCode IMapData::Initialize ( int nCount );
__declspec(implementation_key(215)) int IMapData::Count ( );
__declspec(implementation_key(216)) enum zReturnCode IMapData::GetIDs ( int nIDSet );
__declspec(implementation_key(217)) enum zReturnCode IMapData::Remove ( int nID );
__declspec(implementation_key(218)) enum zReturnCode IMapData::RemoveAll ( );
__declspec(implementation_key(219)) int IMapData::DefineReal ( );
__declspec(implementation_key(220)) int IMapData::DefineInt ( );
__declspec(implementation_key(221)) int IMapData::DefineBool ( );
__declspec(implementation_key(222)) int IMapData::DefineString ( int nLength );
__declspec(implementation_key(223)) int IMapData::DefineVariant ( const _variant_t & vVar );
__declspec(implementation_key(224)) enum zReturnCode IMapData::SetReal ( int nIndex, int nID, double dVal );
__declspec(implementation_key(225)) enum zReturnCode IMapData::SetInt ( int nIndex, int nID, int nVal );
__declspec(implementation_key(226)) enum zReturnCode IMapData::SetBool ( int nIndex, int nID, VARIANT_BOOL bVal );
__declspec(implementation_key(227)) enum zReturnCode IMapData::SetString ( int nIndex, int nID, _bstr_t sVal );
__declspec(implementation_key(228)) enum zReturnCode IMapData::SetVariant ( int nIndex, int nID, const _variant_t & vVal );
__declspec(implementation_key(229)) enum zReturnCode IMapData::GetReal ( int nIndex, int nID, double * pdVal );
__declspec(implementation_key(230)) enum zReturnCode IMapData::GetInt ( int nIndex, int nID, int * pnVal );
__declspec(implementation_key(231)) enum zReturnCode IMapData::GetBool ( int nIndex, int nID, VARIANT_BOOL * pbVal );
__declspec(implementation_key(232)) enum zReturnCode IMapData::GetString ( int nIndex, int nID, BSTR * psVal );
__declspec(implementation_key(233)) enum zReturnCode IMapData::GetVariant ( int nIndex, int nID, const _variant_t & vVal );
__declspec(implementation_key(234)) enum zReturnCode ITrackData::clear ( );
__declspec(implementation_key(235)) enum zReturnCode ITrackData::Start ( enum zDataType entityTYPE );
__declspec(implementation_key(236)) enum zReturnCode ITrackData::StartGeometry ( );
__declspec(implementation_key(237)) enum zReturnCode ITrackData::StartMesh ( );
__declspec(implementation_key(238)) enum zReturnCode ITrackData::Stop ( enum zDataType entityTYPE );
__declspec(implementation_key(239)) enum zReturnCode ITrackData::StopAll ( );
__declspec(implementation_key(240)) enum zReturnCode ITrackData::Created ( enum zDataType entityTYPE, int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(241)) enum zReturnCode ITrackData::Deleted ( enum zDataType entityTYPE, int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(242)) enum zReturnCode IResults::clear ( );
__declspec(implementation_key(243)) enum zReturnCode IResults::GetModel ( __int64 * nModelID );
__declspec(implementation_key(244)) enum zReturnCode IResults::SetModel ( __int64 nModelID );
__declspec(implementation_key(245)) int IResults::NumberOfRows ( );
__declspec(implementation_key(246)) int IResults::NumberOfColumns ( );
__declspec(implementation_key(247)) enum zReturnCode IResults::DataLocation ( enum zDataType * nDataType );
__declspec(implementation_key(248)) enum zReturnCode IResults::FindColumn ( int nSetID, int nVectorID, int * nColumnIndex );
__declspec(implementation_key(249)) enum zReturnCode IResults::IsPopulated ( );
__declspec(implementation_key(250)) enum zReturnCode IResults::Populate ( );
__declspec(implementation_key(251)) enum zReturnCode IResults::AddColumn ( int nSetID, int nVectorID, VARIANT_BOOL bAddComponentsCorners, int * nNumColumnsAdded, VARIANT * nColumnIndices );
__declspec(implementation_key(252)) enum zReturnCode IResults::AddEmptyColumns ( int nNumberOfColumns, VARIANT * nColumnIndices );
__declspec(implementation_key(253)) enum zReturnCode IResults::AddConversionColumn ( int nSetID, int nVectorID, enum zResultsConvert nConversionApproach, int * nColumnIndex );
__declspec(implementation_key(254)) enum zReturnCode IResults::GetColumnTitle ( int nColumnIndex, BSTR * sTitle );
__declspec(implementation_key(255)) enum zReturnCode IResults::GetColumnVector ( int nColumnIndex, int * pnSetID, int * pnVectorID );
__declspec(implementation_key(256)) enum zReturnCode IResults::GetColumnMinMax ( int nColumnIndex, int nLimitToSet, int * pnMinID, int * pnMaxID, double * pdMinVal, double * pdMaxVal );
__declspec(implementation_key(257)) enum zReturnCode IResults::SetTri3Orientation ( int nStress, int nStrain, int nForce );
__declspec(implementation_key(258)) enum zReturnCode IResults::SetTri6Orientation ( int nStress, int nStrain, int nForce );
__declspec(implementation_key(259)) enum zReturnCode IResults::SetQuad4Orientation ( int nStress, int nStrain, int nForce );
__declspec(implementation_key(260)) enum zReturnCode IResults::SetQuad8Orientation ( int nStress, int nStrain, int nForce );
__declspec(implementation_key(261)) enum zReturnCode IResults::SetSolidOrientation ( int nIsotropic, int nAnisotropic, int nHyperelastic );
__declspec(implementation_key(262)) enum zReturnCode IResults::SetEngrShearStrain ( VARIANT_BOOL bEngrShearStrain );
__declspec(implementation_key(263)) enum zReturnCode IResults::SetNodalTransform ( enum zOutputDestination nTransformTo, int nCSysID );
__declspec(implementation_key(264)) enum zReturnCode IResults::SetPlateTransform ( enum zOutputDestination nTransformTo, int nCSysID, int nCSysAxis, double dVecX, double dVecY, double dVecZ, double dToleranceAngle );
__declspec(implementation_key(265)) enum zReturnCode IResults::SetSolidTransform ( enum zOutputDestination nTransformTo, int nCSysID );
__declspec(implementation_key(266)) enum zReturnCode IResults::Reset ( );
__declspec(implementation_key(267)) enum zReturnCode IResults::Next ( int nColumnIndex, int * pnID, double * pdVal );
__declspec(implementation_key(268)) enum zReturnCode IResults::GetValue ( int nID, int nColumnIndex, double * pdVal );
__declspec(implementation_key(269)) enum zReturnCode IResults::GetInRow ( int nRowIndex, int nColumnIndex, int * pnID, double * pdVal );
__declspec(implementation_key(270)) enum zReturnCode IResults::GetMultipleInRow ( int nRowIndex, int nNumberOfColumns, const _variant_t & nColumnIndices, int * pnID, VARIANT * pdVals );
__declspec(implementation_key(271)) enum zReturnCode IResults::SetValue ( int nID, int nColumnIndex, double dVal );
__declspec(implementation_key(272)) enum zReturnCode IResults::SetInRow ( int nRowIndex, int nColumnIndex, double dVal );
__declspec(implementation_key(273)) enum zReturnCode IResults::SetMultipleInRow ( int nRowIndex, int nNumberOfColumns, const _variant_t & nColumnIndices, const _variant_t & dVals );
__declspec(implementation_key(274)) enum zReturnCode IResults::DataNeeded ( enum zDataType nDataType, int nEntitySetID );
__declspec(implementation_key(275)) enum zReturnCode IResults::GetRowByID ( int nID, VARIANT * pdVals );
__declspec(implementation_key(276)) enum zReturnCode IResults::GetRow ( int nRowIndex, int * pnID, VARIANT * pdVals );
__declspec(implementation_key(277)) enum zReturnCode IResults::GetRows ( int nNumberOfRows, const _variant_t & nRowIndices, VARIANT * pnIDs, VARIANT * pdVals );
__declspec(implementation_key(278)) enum zReturnCode IResults::GetRowsByID ( int nEntitySetID, VARIANT * pdVals );
__declspec(implementation_key(279)) enum zReturnCode IResults::SetColumnGlobalPly ( int nColumnIndex, int nGlobalPlyID );
__declspec(implementation_key(280)) enum zReturnCode IResults::AddEnvelopeColumn ( enum zOutputProcessEnvType nEnvelopeType, int * nDataColumnIndex, int * nColumnColumnIndex );
__declspec(implementation_key(281)) enum zReturnCode IResults::IsAPIColumn ( int nColumnIndex );
__declspec(implementation_key(282)) enum zReturnCode IResults::GetColumn ( int nColIndex, VARIANT * pnIDs, VARIANT * pdVals );
__declspec(implementation_key(283)) enum zReturnCode IResults::GetColumns ( int nNumberOfColumns, const _variant_t & nColIndices, VARIANT * pnIDs, VARIANT * pdVals );
__declspec(implementation_key(284)) enum zReturnCode IResults::GetRowsAndColumns ( int nNumberOfRows, const _variant_t & nRowIndices, int nNumberOfColumns, const _variant_t & nColIndices, VARIANT * pnIDs, VARIANT * pdVals, VARIANT_BOOL * pbAllExist );
__declspec(implementation_key(285)) enum zReturnCode IResults::GetRowsAndColumnsByID ( int nEntitySetID, int nNumberOfColumns, const _variant_t & nColIndices, VARIANT * pdVals, VARIANT_BOOL * pbAllExist );
__declspec(implementation_key(286)) enum zReturnCode IResults::GetColumnSum ( int nColumnIndex, int nLimitToSet, int * pnNumVal, double * pdSum, double * pdSumSq );
__declspec(implementation_key(287)) enum zReturnCode IResults::SetComplexOptions ( VARIANT_BOOL bExpandComplex, double dComplexPhase );
__declspec(implementation_key(288)) enum zReturnCode IResults::SendToDataTable ( );
__declspec(implementation_key(289)) int IResults::NumberOfSets ( );
__declspec(implementation_key(290)) enum zReturnCode IResults::NextSetReset ( );
__declspec(implementation_key(291)) int IResults::NextSet ( enum zExistState nExistState, enum zLocateOption nLocateOption );
__declspec(implementation_key(292)) enum zReturnCode IResults::SetExists ( int nSetID );
__declspec(implementation_key(293)) enum zReturnCode IResults::SetInfo ( int nSetID, enum zAnalysisProgram * pnAnalysisProgram, enum zAnalysisType * pnAnalysisType, double * pdSetValue );
__declspec(implementation_key(294)) enum zReturnCode IResults::SetTitle ( int nSetID, BSTR * sTitle );
__declspec(implementation_key(295)) enum zReturnCode IResults::SetNotes ( int nSetID, BSTR * sNotes );
__declspec(implementation_key(296)) enum zReturnCode IResults::SetLocation ( int nSetID, enum zResultsLocation * pnSetLocation );
__declspec(implementation_key(297)) enum zReturnCode IResults::SetHasVectorsInDB ( int nSetID );
__declspec(implementation_key(298)) enum zReturnCode IResults::Sets ( int nSetSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(299)) int IResults::SetSubcase ( int nSetID );
__declspec(implementation_key(300)) int IResults::SetRevision ( int nSetID );
__declspec(implementation_key(301)) enum zReturnCode IResults::NextVectorReset ( int nSetID );
__declspec(implementation_key(302)) int IResults::NextVector ( int nSetID, enum zExistState nExistState, enum zLocateOption nLocateOption );
__declspec(implementation_key(303)) enum zReturnCode IResults::VectorExists ( int nSetID, int nVectorID );
__declspec(implementation_key(304)) enum zReturnCode IResults::VectorInfo ( int nSetID, int nVectorID, enum zDataType * pnDataType, enum zOutputType * pnOutputType, VARIANT_BOOL * pbCentroidTotal, VARIANT_BOOL * pbCalcWarn, int * pnCompDir );
__declspec(implementation_key(305)) enum zReturnCode IResults::VectorTitle ( int nSetID, int nVectorID, BSTR * sTitle );
__declspec(implementation_key(306)) enum zReturnCode IResults::VectorComponents ( int nSetID, int nVectorID, int * pnNumComponents, VARIANT * pnComponents );
__declspec(implementation_key(307)) enum zReturnCode IResults::VectorLocation ( int nSetID, int nVectorID, enum zResultsLocation * pnVectorLocation );
__declspec(implementation_key(308)) enum zReturnCode IResults::VectorEntities ( int nSetID, int nVectorID, int nEntitySetID, VARIANT_BOOL bClear );
__declspec(implementation_key(309)) enum zReturnCode IResults::Vectors ( int nSetID, int nVectorSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(310)) enum zReturnCode IResults::EntityValue ( int nSetID, int nVectorID, int nEntityID, double * pdVal );
__declspec(implementation_key(311)) double IResults::GetValueForNonExisting ( );
__declspec(implementation_key(312)) void IResults::PutValueForNonExisting ( double _val );
__declspec(implementation_key(313)) enum zReturnCode IMesher::UI ( VARIANT_BOOL bMeshingOptions );
__declspec(implementation_key(314)) enum zReturnCode IMesher::clear ( );
__declspec(implementation_key(315)) enum zReturnCode IMesher::AddSurface ( int nSetID, VARIANT_BOOL bSetSizes );
__declspec(implementation_key(316)) enum zReturnCode IMesher::AddSolid ( int nSetID, VARIANT_BOOL bSetSizes );
__declspec(implementation_key(317)) enum zReturnCode IMesher::SetSizes ( double dPrepareSize, double dMeshSize, double dInteriorGrowthFactor );
__declspec(implementation_key(318)) enum zReturnCode IMesher::Prepare ( );
__declspec(implementation_key(319)) enum zReturnCode IMesher::Size ( );
__declspec(implementation_key(320)) enum zReturnCode IMesher::Mesh ( );
__declspec(implementation_key(321)) enum zReturnCode IMesher::Apply ( );
__declspec(implementation_key(322)) enum zReturnCode IMesher::HasPrevious ( );
__declspec(implementation_key(323)) enum zReturnCode IMesher::RemovePrevious ( );
__declspec(implementation_key(324)) VARIANT_BOOL IMesher::GetPrepareGeometry ( );
__declspec(implementation_key(325)) void IMesher::PutPrepareGeometry ( VARIANT_BOOL _val );
__declspec(implementation_key(326)) VARIANT_BOOL IMesher::GetMeshSizing ( );
__declspec(implementation_key(327)) void IMesher::PutMeshSizing ( VARIANT_BOOL _val );
__declspec(implementation_key(328)) VARIANT_BOOL IMesher::GetMeshing ( );
__declspec(implementation_key(329)) void IMesher::PutMeshing ( VARIANT_BOOL _val );
__declspec(implementation_key(330)) int IMesher::GetMeshType ( );
__declspec(implementation_key(331)) void IMesher::PutMeshType ( int _val );
__declspec(implementation_key(332)) VARIANT_BOOL IMesher::GetMidsideNodes ( );
__declspec(implementation_key(333)) void IMesher::PutMidsideNodes ( VARIANT_BOOL _val );
__declspec(implementation_key(334)) VARIANT_BOOL IMesher::GetSyncSizes ( );
__declspec(implementation_key(335)) void IMesher::PutSyncSizes ( VARIANT_BOOL _val );
__declspec(implementation_key(336)) int IMesher::GetLengthBasedSizing ( );
__declspec(implementation_key(337)) void IMesher::PutLengthBasedSizing ( int _val );
__declspec(implementation_key(338)) double IMesher::GetPrepareSize ( );
__declspec(implementation_key(339)) void IMesher::PutPrepareSize ( double _val );
__declspec(implementation_key(340)) double IMesher::GetMeshSize ( );
__declspec(implementation_key(341)) void IMesher::PutMeshSize ( double _val );
__declspec(implementation_key(342)) double IMesher::GetInteriorGrowthFactor ( );
__declspec(implementation_key(343)) void IMesher::PutInteriorGrowthFactor ( double _val );
__declspec(implementation_key(344)) VARIANT_BOOL IMesher::GetAutoSelectTriMesher ( );
__declspec(implementation_key(345)) void IMesher::PutAutoSelectTriMesher ( VARIANT_BOOL _val );
__declspec(implementation_key(346)) enum zMesherType IMesher::GetTriMesher ( );
__declspec(implementation_key(347)) void IMesher::PutTriMesher ( enum zMesherType _val );
__declspec(implementation_key(348)) VARIANT_BOOL IMesher::GetMappedMeshingAllowed ( );
__declspec(implementation_key(349)) void IMesher::PutMappedMeshingAllowed ( VARIANT_BOOL _val );
__declspec(implementation_key(350)) int IMesher::GetNodeMergeOption ( );
__declspec(implementation_key(351)) void IMesher::PutNodeMergeOption ( int _val );
__declspec(implementation_key(352)) double IMesher::GetTetGrowthRatio ( );
__declspec(implementation_key(353)) void IMesher::PutTetGrowthRatio ( double _val );
__declspec(implementation_key(354)) double IMesher::GetInitialSizeRatio ( );
__declspec(implementation_key(355)) void IMesher::PutInitialSizeRatio ( double _val );
__declspec(implementation_key(356)) VARIANT_BOOL IMesher::GetAskAlreadyMeshed ( );
__declspec(implementation_key(357)) void IMesher::PutAskAlreadyMeshed ( VARIANT_BOOL _val );
__declspec(implementation_key(358)) double IMesher::GetNarrowSizePct ( );
__declspec(implementation_key(359)) void IMesher::PutNarrowSizePct ( double _val );
__declspec(implementation_key(360)) double IMesher::GetCurveSuppressPct ( );
__declspec(implementation_key(361)) void IMesher::PutCurveSuppressPct ( double _val );
__declspec(implementation_key(362)) double IMesher::GetNarrowAngle ( );
__declspec(implementation_key(363)) void IMesher::PutNarrowAngle ( double _val );
__declspec(implementation_key(364)) double IMesher::GetFeatureEdgeAngle ( );
__declspec(implementation_key(365)) void IMesher::PutFeatureEdgeAngle ( double _val );
__declspec(implementation_key(366)) double IMesher::GetCombinedCurveAngle ( );
__declspec(implementation_key(367)) void IMesher::PutCombinedCurveAngle ( double _val );
__declspec(implementation_key(368)) VARIANT_BOOL IMesher::GetGeometryCleanup ( );
__declspec(implementation_key(369)) void IMesher::PutGeometryCleanup ( VARIANT_BOOL _val );
__declspec(implementation_key(370)) VARIANT_BOOL IMesher::GetSuppressVoids ( );
__declspec(implementation_key(371)) void IMesher::PutSuppressVoids ( VARIANT_BOOL _val );
__declspec(implementation_key(372)) VARIANT_BOOL IMesher::GetDetectClosePoints ( );
__declspec(implementation_key(373)) void IMesher::PutDetectClosePoints ( VARIANT_BOOL _val );
__declspec(implementation_key(374)) VARIANT_BOOL IMesher::GetCutSlivers ( );
__declspec(implementation_key(375)) void IMesher::PutCutSlivers ( VARIANT_BOOL _val );
__declspec(implementation_key(376)) VARIANT_BOOL IMesher::GetProcessBlends ( );
__declspec(implementation_key(377)) void IMesher::PutProcessBlends ( VARIANT_BOOL _val );
__declspec(implementation_key(378)) VARIANT_BOOL IMesher::GetCombineSmallSurfaces ( );
__declspec(implementation_key(379)) void IMesher::PutCombineSmallSurfaces ( VARIANT_BOOL _val );
__declspec(implementation_key(380)) VARIANT_BOOL IMesher::GetMinElemOnEdgeOn ( );
__declspec(implementation_key(381)) void IMesher::PutMinElemOnEdgeOn ( VARIANT_BOOL _val );
__declspec(implementation_key(382)) VARIANT_BOOL IMesher::GetMaxAngleToleranceOn ( );
__declspec(implementation_key(383)) void IMesher::PutMaxAngleToleranceOn ( VARIANT_BOOL _val );
__declspec(implementation_key(384)) VARIANT_BOOL IMesher::GetMaxElemSmallFeatureOn ( );
__declspec(implementation_key(385)) void IMesher::PutMaxElemSmallFeatureOn ( VARIANT_BOOL _val );
__declspec(implementation_key(386)) VARIANT_BOOL IMesher::GetMaxPctSmallFeatureOn ( );
__declspec(implementation_key(387)) void IMesher::PutMaxPctSmallFeatureOn ( VARIANT_BOOL _val );
__declspec(implementation_key(388)) VARIANT_BOOL IMesher::GetVertexAspectRatioOn ( );
__declspec(implementation_key(389)) void IMesher::PutVertexAspectRatioOn ( VARIANT_BOOL _val );
__declspec(implementation_key(390)) VARIANT_BOOL IMesher::GetMappedMeshingRefinement ( );
__declspec(implementation_key(391)) void IMesher::PutMappedMeshingRefinement ( VARIANT_BOOL _val );
__declspec(implementation_key(392)) VARIANT_BOOL IMesher::GetSuppressShortEdgesPctOn ( );
__declspec(implementation_key(393)) void IMesher::PutSuppressShortEdgesPctOn ( VARIANT_BOOL _val );
__declspec(implementation_key(394)) VARIANT_BOOL IMesher::GetAutoBoundarySmallSurfPctOn ( );
__declspec(implementation_key(395)) void IMesher::PutAutoBoundarySmallSurfPctOn ( VARIANT_BOOL _val );
__declspec(implementation_key(396)) int IMesher::GetMinElemOnEdge ( );
__declspec(implementation_key(397)) void IMesher::PutMinElemOnEdge ( int _val );
__declspec(implementation_key(398)) double IMesher::GetMaxAngleTolerance ( );
__declspec(implementation_key(399)) void IMesher::PutMaxAngleTolerance ( double _val );
__declspec(implementation_key(400)) int IMesher::GetMaxElemSmallFeature ( );
__declspec(implementation_key(401)) void IMesher::PutMaxElemSmallFeature ( int _val );
__declspec(implementation_key(402)) double IMesher::GetMaxPctSmallFeature ( );
__declspec(implementation_key(403)) void IMesher::PutMaxPctSmallFeature ( double _val );
__declspec(implementation_key(404)) double IMesher::GetVertexAspectRatio ( );
__declspec(implementation_key(405)) void IMesher::PutVertexAspectRatio ( double _val );
__declspec(implementation_key(406)) double IMesher::GetSuppressShortEdgesPct ( );
__declspec(implementation_key(407)) void IMesher::PutSuppressShortEdgesPct ( double _val );
__declspec(implementation_key(408)) double IMesher::GetAutoBoundarySmallSurfPct ( );
__declspec(implementation_key(409)) void IMesher::PutAutoBoundarySmallSurfPct ( double _val );
__declspec(implementation_key(410)) VARIANT_BOOL IMesher::GetRefinementRatioOn ( );
__declspec(implementation_key(411)) void IMesher::PutRefinementRatioOn ( VARIANT_BOOL _val );
__declspec(implementation_key(412)) double IMesher::GetRefinementRatio ( );
__declspec(implementation_key(413)) void IMesher::PutRefinementRatio ( double _val );
__declspec(implementation_key(414)) VARIANT_BOOL IMesher::GetRefineSurfaceMesh ( );
__declspec(implementation_key(415)) void IMesher::PutRefineSurfaceMesh ( VARIANT_BOOL _val );
__declspec(implementation_key(416)) VARIANT_BOOL IMesher::GetAdjacentSurfaceMatching ( );
__declspec(implementation_key(417)) void IMesher::PutAdjacentSurfaceMatching ( VARIANT_BOOL _val );
__declspec(implementation_key(418)) VARIANT_BOOL IMesher::GetRemovePreviousSlaving ( );
__declspec(implementation_key(419)) void IMesher::PutRemovePreviousSlaving ( VARIANT_BOOL _val );
__declspec(implementation_key(420)) VARIANT_BOOL IMesher::GetAdjustColors ( );
__declspec(implementation_key(421)) void IMesher::PutAdjustColors ( VARIANT_BOOL _val );
__declspec(implementation_key(422)) VARIANT_BOOL IMesher::GetSkipSizingOnSlaved ( );
__declspec(implementation_key(423)) void IMesher::PutSkipSizingOnSlaved ( VARIANT_BOOL _val );
__declspec(implementation_key(424)) VARIANT_BOOL IMesher::GetPreV10Meshing ( );
__declspec(implementation_key(425)) void IMesher::PutPreV10Meshing ( VARIANT_BOOL _val );
__declspec(implementation_key(426)) VARIANT_BOOL IMesher::GetMidsideMoveToGeometry ( );
__declspec(implementation_key(427)) void IMesher::PutMidsideMoveToGeometry ( VARIANT_BOOL _val );
__declspec(implementation_key(428)) VARIANT_BOOL IMesher::GetMidsideMaxDistortionAngleOn ( );
__declspec(implementation_key(429)) void IMesher::PutMidsideMaxDistortionAngleOn ( VARIANT_BOOL _val );
__declspec(implementation_key(430)) double IMesher::GetMidsideMaxDistortionAngle ( );
__declspec(implementation_key(431)) void IMesher::PutMidsideMaxDistortionAngle ( double _val );
__declspec(implementation_key(432)) VARIANT_BOOL IMesher::GetConnectEdgeNodesOn ( );
__declspec(implementation_key(433)) void IMesher::PutConnectEdgeNodesOn ( VARIANT_BOOL _val );
__declspec(implementation_key(434)) double IMesher::GetConnectEdgeNodes ( );
__declspec(implementation_key(435)) void IMesher::PutConnectEdgeNodes ( double _val );
__declspec(implementation_key(436)) VARIANT_BOOL IMesher::GetSmoothingLaplacian ( );
__declspec(implementation_key(437)) void IMesher::PutSmoothingLaplacian ( VARIANT_BOOL _val );
__declspec(implementation_key(438)) int IMesher::GetSmoothingIterations ( );
__declspec(implementation_key(439)) void IMesher::PutSmoothingIterations ( int _val );
__declspec(implementation_key(440)) double IMesher::GetSmoothingTolerance ( );
__declspec(implementation_key(441)) void IMesher::PutSmoothingTolerance ( double _val );
__declspec(implementation_key(442)) enum zMeshOffsetFrom IMesher::GetOffsetMeshMode ( );
__declspec(implementation_key(443)) void IMesher::PutOffsetMeshMode ( enum zMeshOffsetFrom _val );
__declspec(implementation_key(444)) double IMesher::GetOffsetMeshDistance ( );
__declspec(implementation_key(445)) void IMesher::PutOffsetMeshDistance ( double _val );
__declspec(implementation_key(446)) double IMesher::GetMapMaxAngleDeviation ( );
__declspec(implementation_key(447)) void IMesher::PutMapMaxAngleDeviation ( double _val );
__declspec(implementation_key(448)) double IMesher::GetMapMinCornerAngle ( );
__declspec(implementation_key(449)) void IMesher::PutMapMinCornerAngle ( double _val );
__declspec(implementation_key(450)) VARIANT_BOOL IMesher::GetMapEqualSidesOnly ( );
__declspec(implementation_key(451)) void IMesher::PutMapEqualSidesOnly ( VARIANT_BOOL _val );
__declspec(implementation_key(452)) VARIANT_BOOL IMesher::GetMapSubdivisions ( );
__declspec(implementation_key(453)) void IMesher::PutMapSubdivisions ( VARIANT_BOOL _val );
__declspec(implementation_key(454)) VARIANT_BOOL IMesher::GetMapSplitQuadMap ( );
__declspec(implementation_key(455)) void IMesher::PutMapSplitQuadMap ( VARIANT_BOOL _val );
__declspec(implementation_key(456)) VARIANT_BOOL IMesher::GetMapAlternateBias ( );
__declspec(implementation_key(457)) void IMesher::PutMapAlternateBias ( VARIANT_BOOL _val );
__declspec(implementation_key(458)) VARIANT_BOOL IMesher::GetMapRightBias ( );
__declspec(implementation_key(459)) void IMesher::PutMapRightBias ( VARIANT_BOOL _val );
__declspec(implementation_key(460)) VARIANT_BOOL IMesher::GetPostMeshingCleanup ( );
__declspec(implementation_key(461)) void IMesher::PutPostMeshingCleanup ( VARIANT_BOOL _val );
__declspec(implementation_key(462)) int IMesher::GetQuadEdgeLayers ( );
__declspec(implementation_key(463)) void IMesher::PutQuadEdgeLayers ( int _val );
__declspec(implementation_key(464)) double IMesher::GetCutQuadDeviationAngle ( );
__declspec(implementation_key(465)) void IMesher::PutCutQuadDeviationAngle ( double _val );
__declspec(implementation_key(466)) int IMesher::GetMinElemBetweenBoundary ( );
__declspec(implementation_key(467)) void IMesher::PutMinElemBetweenBoundary ( int _val );
__declspec(implementation_key(468)) double IMesher::GetMaxElemAspectRatio ( );
__declspec(implementation_key(469)) void IMesher::PutMaxElemAspectRatio ( double _val );
__declspec(implementation_key(470)) VARIANT_BOOL IMesher::GetQuickCutBoundaryOn ( );
__declspec(implementation_key(471)) void IMesher::PutQuickCutBoundaryOn ( VARIANT_BOOL _val );
__declspec(implementation_key(472)) int IMesher::GetQuickCutMaxNodes ( );
__declspec(implementation_key(473)) void IMesher::PutQuickCutMaxNodes ( int _val );
__declspec(implementation_key(474)) VARIANT_BOOL IMesher::GetAttributePropOnly ( );
__declspec(implementation_key(475)) void IMesher::PutAttributePropOnly ( VARIANT_BOOL _val );
__declspec(implementation_key(476)) VARIANT_BOOL IMesher::GetTetStatusMessages ( );
__declspec(implementation_key(477)) void IMesher::PutTetStatusMessages ( VARIANT_BOOL _val );
__declspec(implementation_key(478)) VARIANT_BOOL IMesher::GetTetQualityToDataTable ( );
__declspec(implementation_key(479)) void IMesher::PutTetQualityToDataTable ( VARIANT_BOOL _val );
__declspec(implementation_key(480)) VARIANT_BOOL IMesher::GetTetCheckSurfaceElem ( );
__declspec(implementation_key(481)) void IMesher::PutTetCheckSurfaceElem ( VARIANT_BOOL _val );
__declspec(implementation_key(482)) VARIANT_BOOL IMesher::GetTetDeleteSurfaceElem ( );
__declspec(implementation_key(483)) void IMesher::PutTetDeleteSurfaceElem ( VARIANT_BOOL _val );
__declspec(implementation_key(484)) VARIANT_BOOL IMesher::GetTetSmoothSolidElemOn ( );
__declspec(implementation_key(485)) void IMesher::PutTetSmoothSolidElemOn ( VARIANT_BOOL _val );
__declspec(implementation_key(486)) double IMesher::GetTetSmoothSolidElem ( );
__declspec(implementation_key(487)) void IMesher::PutTetSmoothSolidElem ( double _val );
__declspec(implementation_key(488)) VARIANT_BOOL IMesher::GetTetMidsideMoveToGeometry ( );
__declspec(implementation_key(489)) void IMesher::PutTetMidsideMoveToGeometry ( VARIANT_BOOL _val );
__declspec(implementation_key(490)) VARIANT_BOOL IMesher::GetTetMidsideMaxDistortionAngleOn ( );
__declspec(implementation_key(491)) void IMesher::PutTetMidsideMaxDistortionAngleOn ( VARIANT_BOOL _val );
__declspec(implementation_key(492)) double IMesher::GetTetMidsideMaxDistortionAngle ( );
__declspec(implementation_key(493)) void IMesher::PutTetMidsideMaxDistortionAngle ( double _val );
__declspec(implementation_key(494)) VARIANT_BOOL IMesher::GetTetAdjustNodalPrecision ( );
__declspec(implementation_key(495)) void IMesher::PutTetAdjustNodalPrecision ( VARIANT_BOOL _val );
__declspec(implementation_key(496)) VARIANT_BOOL IMesher::GetTetMeshVoids ( );
__declspec(implementation_key(497)) void IMesher::PutTetMeshVoids ( VARIANT_BOOL _val );
__declspec(implementation_key(498)) VARIANT_BOOL IMesher::GetTetPreV10Meshing ( );
__declspec(implementation_key(499)) void IMesher::PutTetPreV10Meshing ( VARIANT_BOOL _val );
__declspec(implementation_key(500)) VARIANT_BOOL IMesher::GetRemovePreviousOnly ( );
__declspec(implementation_key(501)) void IMesher::PutRemovePreviousOnly ( VARIANT_BOOL _val );
__declspec(implementation_key(502)) VARIANT_BOOL IMesher::GetRemovePreviousPrep ( );
__declspec(implementation_key(503)) void IMesher::PutRemovePreviousPrep ( VARIANT_BOOL _val );
__declspec(implementation_key(504)) VARIANT_BOOL IMesher::GetDeletePreviousMesh ( );
__declspec(implementation_key(505)) void IMesher::PutDeletePreviousMesh ( VARIANT_BOOL _val );
__declspec(implementation_key(506)) VARIANT_BOOL IMesher::GetSilent ( );
__declspec(implementation_key(507)) void IMesher::PutSilent ( VARIANT_BOOL _val );
__declspec(implementation_key(508)) int IMesher::GetFixedGroupID ( );
__declspec(implementation_key(509)) void IMesher::PutFixedGroupID ( int _val );
__declspec(implementation_key(510)) enum zReturnCode IElementQuality::clear ( );
__declspec(implementation_key(511)) enum zReturnCode IElementQuality::GetAspectRatio ( int nElemID, double * pdValue );
__declspec(implementation_key(512)) ISortSetPtr IElementQuality::AspectRatio ( int nElemSet, double dLimitVal );
__declspec(implementation_key(513)) enum zReturnCode IElementQuality::GetTaper ( int nElemID, double * pdValue );
__declspec(implementation_key(514)) ISortSetPtr IElementQuality::Taper ( int nElemSet, double dLimitVal );
__declspec(implementation_key(515)) enum zReturnCode IElementQuality::GetAlternateTaper ( int nElemID, double * pdValue );
__declspec(implementation_key(516)) ISortSetPtr IElementQuality::AlternateTaper ( int nElemSet, double dLimitVal );
__declspec(implementation_key(517)) enum zReturnCode IElementQuality::GetInternalAngle ( int nElemID, double * pdValue );
__declspec(implementation_key(518)) ISortSetPtr IElementQuality::InternalAngle ( int nElemSet, double dLimitVal );
__declspec(implementation_key(519)) enum zReturnCode IElementQuality::GetSkew ( int nElemID, double * pdValue );
__declspec(implementation_key(520)) ISortSetPtr IElementQuality::Skew ( int nElemSet, double dLimitVal );
__declspec(implementation_key(521)) enum zReturnCode IElementQuality::GetWarping ( int nElemID, double * pdValue );
__declspec(implementation_key(522)) ISortSetPtr IElementQuality::Warping ( int nElemSet, double dLimitVal );
__declspec(implementation_key(523)) enum zReturnCode IElementQuality::GetNastranWarping ( int nElemID, double * pdValue );
__declspec(implementation_key(524)) ISortSetPtr IElementQuality::NastranWarping ( int nElemSet, double dLimitVal );
__declspec(implementation_key(525)) enum zReturnCode IElementQuality::GetTetCollapse ( int nElemID, double * pdValue );
__declspec(implementation_key(526)) ISortSetPtr IElementQuality::TetCollapse ( int nElemSet, double dLimitVal );
__declspec(implementation_key(527)) enum zReturnCode IElementQuality::GetJacobian ( int nElemID, double * pdValue );
__declspec(implementation_key(528)) ISortSetPtr IElementQuality::Jacobian ( int nElemSet, double dLimitVal );
__declspec(implementation_key(529)) enum zReturnCode IElementQuality::GetCombined ( int nElemID, double * pdValue );
__declspec(implementation_key(530)) ISortSetPtr IElementQuality::Combined ( int nElemSet, double dLimitVal );
__declspec(implementation_key(531)) enum zReturnCode IElementQuality::GetExplicitTimeStep ( int nElemID, double * pdValue );
__declspec(implementation_key(532)) ISortSetPtr IElementQuality::ExplicitTimeStep ( int nElemSet, double dLimitVal );
__declspec(implementation_key(533)) ISetPtr IElementQuality::CheckQuality ( int nElemSet, VARIANT_BOOL bList, VARIANT_BOOL bGroup );
__declspec(implementation_key(534)) enum zReturnCode IElementQuality::SetModelDefaults ( );
__declspec(implementation_key(535)) enum zReturnCode IElementQuality::GetModelDefaults ( );
__declspec(implementation_key(536)) enum zReturnCode IElementQuality::GetNastranQuadSkew ( int nElemID, double * pdValue );
__declspec(implementation_key(537)) ISortSetPtr IElementQuality::NastranQuadSkew ( int nElemSet, double dLimitVal );
__declspec(implementation_key(538)) enum zReturnCode IElementQuality::GetNastranQuadTaper ( int nElemID, double * pdValue );
__declspec(implementation_key(539)) ISortSetPtr IElementQuality::NastranQuadTaper ( int nElemSet, double dLimitVal );
__declspec(implementation_key(540)) enum zReturnCode IElementQuality::GetNastranQuadWarp ( int nElemID, double * pdValue );
__declspec(implementation_key(541)) ISortSetPtr IElementQuality::NastranQuadWarp ( int nElemSet, double dLimitVal );
__declspec(implementation_key(542)) enum zReturnCode IElementQuality::GetNastranQuadIAMin ( int nElemID, double * pdValue );
__declspec(implementation_key(543)) ISortSetPtr IElementQuality::NastranQuadIAMin ( int nElemSet, double dLimitVal );
__declspec(implementation_key(544)) enum zReturnCode IElementQuality::GetNastranQuadIAMax ( int nElemID, double * pdValue );
__declspec(implementation_key(545)) ISortSetPtr IElementQuality::NastranQuadIAMax ( int nElemSet, double dLimitVal );
__declspec(implementation_key(546)) enum zReturnCode IElementQuality::GetNastranTriaSkew ( int nElemID, double * pdValue );
__declspec(implementation_key(547)) ISortSetPtr IElementQuality::NastranTriaSkew ( int nElemSet, double dLimitVal );
__declspec(implementation_key(548)) enum zReturnCode IElementQuality::GetNastranTriaIAMax ( int nElemID, double * pdValue );
__declspec(implementation_key(549)) ISortSetPtr IElementQuality::NastranTriaIAMax ( int nElemSet, double dLimitVal );
__declspec(implementation_key(550)) enum zReturnCode IElementQuality::GetNastranTetraAR ( int nElemID, double * pdValue );
__declspec(implementation_key(551)) ISortSetPtr IElementQuality::NastranTetraAR ( int nElemSet, double dLimitVal );
__declspec(implementation_key(552)) enum zReturnCode IElementQuality::GetNastranTetraEPLR ( int nElemID, double * pdValue );
__declspec(implementation_key(553)) ISortSetPtr IElementQuality::NastranTetraEPLR ( int nElemSet, double dLimitVal );
__declspec(implementation_key(554)) enum zReturnCode IElementQuality::GetNastranTetraDetJ ( int nElemID, double * pdValue );
__declspec(implementation_key(555)) ISortSetPtr IElementQuality::NastranTetraDetJ ( int nElemSet, double dLimitVal );
__declspec(implementation_key(556)) enum zReturnCode IElementQuality::GetNastranHexAR ( int nElemID, double * pdValue );
__declspec(implementation_key(557)) ISortSetPtr IElementQuality::NastranHexAR ( int nElemSet, double dLimitVal );
__declspec(implementation_key(558)) enum zReturnCode IElementQuality::GetNastranHexEPLR ( int nElemID, double * pdValue );
__declspec(implementation_key(559)) ISortSetPtr IElementQuality::NastranHexEPLR ( int nElemSet, double dLimitVal );
__declspec(implementation_key(560)) enum zReturnCode IElementQuality::GetNastranHexDetJ ( int nElemID, double * pdValue );
__declspec(implementation_key(561)) ISortSetPtr IElementQuality::NastranHexDetJ ( int nElemSet, double dLimitVal );
__declspec(implementation_key(562)) enum zReturnCode IElementQuality::GetNastranHexWarp ( int nElemID, double * pdValue );
__declspec(implementation_key(563)) ISortSetPtr IElementQuality::NastranHexWarp ( int nElemSet, double dLimitVal );
__declspec(implementation_key(564)) enum zReturnCode IElementQuality::GetNastranPenAR ( int nElemID, double * pdValue );
__declspec(implementation_key(565)) ISortSetPtr IElementQuality::NastranPenAR ( int nElemSet, double dLimitVal );
__declspec(implementation_key(566)) enum zReturnCode IElementQuality::GetNastranPenEPLR ( int nElemID, double * pdValue );
__declspec(implementation_key(567)) ISortSetPtr IElementQuality::NastranPenEPLR ( int nElemSet, double dLimitVal );
__declspec(implementation_key(568)) enum zReturnCode IElementQuality::GetNastranPenDetJ ( int nElemID, double * pdValue );
__declspec(implementation_key(569)) ISortSetPtr IElementQuality::NastranPenDetJ ( int nElemSet, double dLimitVal );
__declspec(implementation_key(570)) enum zReturnCode IElementQuality::GetNastranPenWarp ( int nElemID, double * pdValue );
__declspec(implementation_key(571)) ISortSetPtr IElementQuality::NastranPenWarp ( int nElemSet, double dLimitVal );
__declspec(implementation_key(572)) enum zReturnCode IElementQuality::GetNastranPyrAR ( int nElemID, double * pdValue );
__declspec(implementation_key(573)) ISortSetPtr IElementQuality::NastranPyrAR ( int nElemSet, double dLimitVal );
__declspec(implementation_key(574)) enum zReturnCode IElementQuality::GetNastranPyrEPLR ( int nElemID, double * pdValue );
__declspec(implementation_key(575)) ISortSetPtr IElementQuality::NastranPyrEPLR ( int nElemSet, double dLimitVal );
__declspec(implementation_key(576)) enum zReturnCode IElementQuality::GetNastranPyrWarp ( int nElemID, double * pdValue );
__declspec(implementation_key(577)) ISortSetPtr IElementQuality::NastranPyrWarp ( int nElemSet, double dLimitVal );
__declspec(implementation_key(578)) enum zReturnCode IElementQuality::GetNastranPyrDetJ ( int nElemID, double * pdValue );
__declspec(implementation_key(579)) ISortSetPtr IElementQuality::NastranPyrDetJ ( int nElemSet, double dLimitVal );
__declspec(implementation_key(580)) ISetPtr IElementQuality::CheckNastranQuality ( int nElemSet, VARIANT_BOOL bList, VARIANT_BOOL bGroup );
__declspec(implementation_key(581)) enum zReturnCode IElementQuality::GetNastranQuadAR ( int nElemID, double * pdValue );
__declspec(implementation_key(582)) ISortSetPtr IElementQuality::NastranQuadAR ( int nElemSet, double dLimitVal );
__declspec(implementation_key(583)) enum zReturnCode IElementQuality::GetNastranTriaAR ( int nElemID, double * pdValue );
__declspec(implementation_key(584)) ISortSetPtr IElementQuality::NastranTriaAR ( int nElemSet, double dLimitVal );
__declspec(implementation_key(585)) enum zReturnCode IElementQuality::GetNastranTriaEPLR ( int nElemID, double * pdValue );
__declspec(implementation_key(586)) ISortSetPtr IElementQuality::NastranTriaEPLR ( int nElemSet, double dLimitVal );
__declspec(implementation_key(587)) enum zReturnCode IElementQuality::GetNastranTetraEPIA ( int nElemID, double * pdValue );
__declspec(implementation_key(588)) ISortSetPtr IElementQuality::NastranTetraEPIA ( int nElemSet, double dLimitVal );
__declspec(implementation_key(589)) enum zReturnCode IElementQuality::GetNastranHexEPIA ( int nElemID, double * pdValue );
__declspec(implementation_key(590)) ISortSetPtr IElementQuality::NastranHexEPIA ( int nElemSet, double dLimitVal );
__declspec(implementation_key(591)) enum zReturnCode IElementQuality::GetNastranPenEPIA ( int nElemID, double * pdValue );
__declspec(implementation_key(592)) ISortSetPtr IElementQuality::NastranPenEPIA ( int nElemSet, double dLimitVal );
__declspec(implementation_key(593)) enum zReturnCode IElementQuality::GetNastranPyrEPIA ( int nElemID, double * pdValue );
__declspec(implementation_key(594)) ISortSetPtr IElementQuality::NastranPyrEPIA ( int nElemSet, double dLimitVal );
__declspec(implementation_key(595)) VARIANT_BOOL IElementQuality::GetAspectRatioOn ( );
__declspec(implementation_key(596)) void IElementQuality::PutAspectRatioOn ( VARIANT_BOOL _val );
__declspec(implementation_key(597)) VARIANT_BOOL IElementQuality::GetTaperOn ( );
__declspec(implementation_key(598)) void IElementQuality::PutTaperOn ( VARIANT_BOOL _val );
__declspec(implementation_key(599)) VARIANT_BOOL IElementQuality::GetAlternateTaperOn ( );
__declspec(implementation_key(600)) void IElementQuality::PutAlternateTaperOn ( VARIANT_BOOL _val );
__declspec(implementation_key(601)) VARIANT_BOOL IElementQuality::GetInternalAngleOn ( );
__declspec(implementation_key(602)) void IElementQuality::PutInternalAngleOn ( VARIANT_BOOL _val );
__declspec(implementation_key(603)) VARIANT_BOOL IElementQuality::GetSkewOn ( );
__declspec(implementation_key(604)) void IElementQuality::PutSkewOn ( VARIANT_BOOL _val );
__declspec(implementation_key(605)) VARIANT_BOOL IElementQuality::GetWarpingOn ( );
__declspec(implementation_key(606)) void IElementQuality::PutWarpingOn ( VARIANT_BOOL _val );
__declspec(implementation_key(607)) VARIANT_BOOL IElementQuality::GetNastranWarpingOn ( );
__declspec(implementation_key(608)) void IElementQuality::PutNastranWarpingOn ( VARIANT_BOOL _val );
__declspec(implementation_key(609)) VARIANT_BOOL IElementQuality::GetTetCollapseOn ( );
__declspec(implementation_key(610)) void IElementQuality::PutTetCollapseOn ( VARIANT_BOOL _val );
__declspec(implementation_key(611)) VARIANT_BOOL IElementQuality::GetJacobianOn ( );
__declspec(implementation_key(612)) void IElementQuality::PutJacobianOn ( VARIANT_BOOL _val );
__declspec(implementation_key(613)) VARIANT_BOOL IElementQuality::GetCombinedOn ( );
__declspec(implementation_key(614)) void IElementQuality::PutCombinedOn ( VARIANT_BOOL _val );
__declspec(implementation_key(615)) VARIANT_BOOL IElementQuality::GetExplicitTimeStepOn ( );
__declspec(implementation_key(616)) void IElementQuality::PutExplicitTimeStepOn ( VARIANT_BOOL _val );
__declspec(implementation_key(617)) double IElementQuality::GetAspectRatioLimit ( );
__declspec(implementation_key(618)) void IElementQuality::PutAspectRatioLimit ( double _val );
__declspec(implementation_key(619)) double IElementQuality::GetTaperLimit ( );
__declspec(implementation_key(620)) void IElementQuality::PutTaperLimit ( double _val );
__declspec(implementation_key(621)) double IElementQuality::GetAlternateTaperLimit ( );
__declspec(implementation_key(622)) void IElementQuality::PutAlternateTaperLimit ( double _val );
__declspec(implementation_key(623)) double IElementQuality::GetInternalAngleLimit ( );
__declspec(implementation_key(624)) void IElementQuality::PutInternalAngleLimit ( double _val );
__declspec(implementation_key(625)) double IElementQuality::GetSkewLimit ( );
__declspec(implementation_key(626)) void IElementQuality::PutSkewLimit ( double _val );
__declspec(implementation_key(627)) double IElementQuality::GetWarpingLimit ( );
__declspec(implementation_key(628)) void IElementQuality::PutWarpingLimit ( double _val );
__declspec(implementation_key(629)) double IElementQuality::GetNastranWarpingLimit ( );
__declspec(implementation_key(630)) void IElementQuality::PutNastranWarpingLimit ( double _val );
__declspec(implementation_key(631)) double IElementQuality::GetTetCollapseLimit ( );
__declspec(implementation_key(632)) void IElementQuality::PutTetCollapseLimit ( double _val );
__declspec(implementation_key(633)) double IElementQuality::GetJacobianLimit ( );
__declspec(implementation_key(634)) void IElementQuality::PutJacobianLimit ( double _val );
__declspec(implementation_key(635)) double IElementQuality::GetCombinedLimit ( );
__declspec(implementation_key(636)) void IElementQuality::PutCombinedLimit ( double _val );
__declspec(implementation_key(637)) double IElementQuality::GetExplicitTimeStepLimit ( );
__declspec(implementation_key(638)) void IElementQuality::PutExplicitTimeStepLimit ( double _val );
__declspec(implementation_key(639)) VARIANT_BOOL IElementQuality::GetNastranQuadSkewOn ( );
__declspec(implementation_key(640)) void IElementQuality::PutNastranQuadSkewOn ( VARIANT_BOOL _val );
__declspec(implementation_key(641)) double IElementQuality::GetNastranQuadSkewLimit ( );
__declspec(implementation_key(642)) void IElementQuality::PutNastranQuadSkewLimit ( double _val );
__declspec(implementation_key(643)) VARIANT_BOOL IElementQuality::GetNastranQuadTaperOn ( );
__declspec(implementation_key(644)) void IElementQuality::PutNastranQuadTaperOn ( VARIANT_BOOL _val );
__declspec(implementation_key(645)) double IElementQuality::GetNastranQuadTaperLimit ( );
__declspec(implementation_key(646)) void IElementQuality::PutNastranQuadTaperLimit ( double _val );
__declspec(implementation_key(647)) VARIANT_BOOL IElementQuality::GetNastranQuadWarpOn ( );
__declspec(implementation_key(648)) void IElementQuality::PutNastranQuadWarpOn ( VARIANT_BOOL _val );
__declspec(implementation_key(649)) double IElementQuality::GetNastranQuadWarpLimit ( );
__declspec(implementation_key(650)) void IElementQuality::PutNastranQuadWarpLimit ( double _val );
__declspec(implementation_key(651)) VARIANT_BOOL IElementQuality::GetNastranQuadIAMinOn ( );
__declspec(implementation_key(652)) void IElementQuality::PutNastranQuadIAMinOn ( VARIANT_BOOL _val );
__declspec(implementation_key(653)) double IElementQuality::GetNastranQuadIAMinLimit ( );
__declspec(implementation_key(654)) void IElementQuality::PutNastranQuadIAMinLimit ( double _val );
__declspec(implementation_key(655)) VARIANT_BOOL IElementQuality::GetNastranQuadIAMaxOn ( );
__declspec(implementation_key(656)) void IElementQuality::PutNastranQuadIAMaxOn ( VARIANT_BOOL _val );
__declspec(implementation_key(657)) double IElementQuality::GetNastranQuadIAMaxLimit ( );
__declspec(implementation_key(658)) void IElementQuality::PutNastranQuadIAMaxLimit ( double _val );
__declspec(implementation_key(659)) VARIANT_BOOL IElementQuality::GetNastranTriaSkewOn ( );
__declspec(implementation_key(660)) void IElementQuality::PutNastranTriaSkewOn ( VARIANT_BOOL _val );
__declspec(implementation_key(661)) double IElementQuality::GetNastranTriaSkewLimit ( );
__declspec(implementation_key(662)) void IElementQuality::PutNastranTriaSkewLimit ( double _val );
__declspec(implementation_key(663)) VARIANT_BOOL IElementQuality::GetNastranTriaIAMaxOn ( );
__declspec(implementation_key(664)) void IElementQuality::PutNastranTriaIAMaxOn ( VARIANT_BOOL _val );
__declspec(implementation_key(665)) double IElementQuality::GetNastranTriaIAMaxLimit ( );
__declspec(implementation_key(666)) void IElementQuality::PutNastranTriaIAMaxLimit ( double _val );
__declspec(implementation_key(667)) VARIANT_BOOL IElementQuality::GetNastranTetraAROn ( );
__declspec(implementation_key(668)) void IElementQuality::PutNastranTetraAROn ( VARIANT_BOOL _val );
__declspec(implementation_key(669)) double IElementQuality::GetNastranTetraARLimit ( );
__declspec(implementation_key(670)) void IElementQuality::PutNastranTetraARLimit ( double _val );
__declspec(implementation_key(671)) VARIANT_BOOL IElementQuality::GetNastranTetraEPLROn ( );
__declspec(implementation_key(672)) void IElementQuality::PutNastranTetraEPLROn ( VARIANT_BOOL _val );
__declspec(implementation_key(673)) double IElementQuality::GetNastranTetraEPLRLimit ( );
__declspec(implementation_key(674)) void IElementQuality::PutNastranTetraEPLRLimit ( double _val );
__declspec(implementation_key(675)) VARIANT_BOOL IElementQuality::GetNastranTetraDetJOn ( );
__declspec(implementation_key(676)) void IElementQuality::PutNastranTetraDetJOn ( VARIANT_BOOL _val );
__declspec(implementation_key(677)) double IElementQuality::GetNastranTetraDetJLimit ( );
__declspec(implementation_key(678)) void IElementQuality::PutNastranTetraDetJLimit ( double _val );
__declspec(implementation_key(679)) VARIANT_BOOL IElementQuality::GetNastranHexAROn ( );
__declspec(implementation_key(680)) void IElementQuality::PutNastranHexAROn ( VARIANT_BOOL _val );
__declspec(implementation_key(681)) double IElementQuality::GetNastranHexARLimit ( );
__declspec(implementation_key(682)) void IElementQuality::PutNastranHexARLimit ( double _val );
__declspec(implementation_key(683)) VARIANT_BOOL IElementQuality::GetNastranHexEPLROn ( );
__declspec(implementation_key(684)) void IElementQuality::PutNastranHexEPLROn ( VARIANT_BOOL _val );
__declspec(implementation_key(685)) double IElementQuality::GetNastranHexEPLRLimit ( );
__declspec(implementation_key(686)) void IElementQuality::PutNastranHexEPLRLimit ( double _val );
__declspec(implementation_key(687)) VARIANT_BOOL IElementQuality::GetNastranHexDetJOn ( );
__declspec(implementation_key(688)) void IElementQuality::PutNastranHexDetJOn ( VARIANT_BOOL _val );
__declspec(implementation_key(689)) double IElementQuality::GetNastranHexDetJLimit ( );
__declspec(implementation_key(690)) void IElementQuality::PutNastranHexDetJLimit ( double _val );
__declspec(implementation_key(691)) VARIANT_BOOL IElementQuality::GetNastranHexWarpOn ( );
__declspec(implementation_key(692)) void IElementQuality::PutNastranHexWarpOn ( VARIANT_BOOL _val );
__declspec(implementation_key(693)) double IElementQuality::GetNastranHexWarpLimit ( );
__declspec(implementation_key(694)) void IElementQuality::PutNastranHexWarpLimit ( double _val );
__declspec(implementation_key(695)) VARIANT_BOOL IElementQuality::GetNastranPenAROn ( );
__declspec(implementation_key(696)) void IElementQuality::PutNastranPenAROn ( VARIANT_BOOL _val );
__declspec(implementation_key(697)) double IElementQuality::GetNastranPenARLimit ( );
__declspec(implementation_key(698)) void IElementQuality::PutNastranPenARLimit ( double _val );
__declspec(implementation_key(699)) VARIANT_BOOL IElementQuality::GetNastranPenEPLROn ( );
__declspec(implementation_key(700)) void IElementQuality::PutNastranPenEPLROn ( VARIANT_BOOL _val );
__declspec(implementation_key(701)) double IElementQuality::GetNastranPenEPLRLimit ( );
__declspec(implementation_key(702)) void IElementQuality::PutNastranPenEPLRLimit ( double _val );
__declspec(implementation_key(703)) VARIANT_BOOL IElementQuality::GetNastranPenDetJOn ( );
__declspec(implementation_key(704)) void IElementQuality::PutNastranPenDetJOn ( VARIANT_BOOL _val );
__declspec(implementation_key(705)) double IElementQuality::GetNastranPenDetJLimit ( );
__declspec(implementation_key(706)) void IElementQuality::PutNastranPenDetJLimit ( double _val );
__declspec(implementation_key(707)) VARIANT_BOOL IElementQuality::GetNastranPenWarpOn ( );
__declspec(implementation_key(708)) void IElementQuality::PutNastranPenWarpOn ( VARIANT_BOOL _val );
__declspec(implementation_key(709)) double IElementQuality::GetNastranPenWarpLimit ( );
__declspec(implementation_key(710)) void IElementQuality::PutNastranPenWarpLimit ( double _val );
__declspec(implementation_key(711)) VARIANT_BOOL IElementQuality::GetNastranPyrAROn ( );
__declspec(implementation_key(712)) void IElementQuality::PutNastranPyrAROn ( VARIANT_BOOL _val );
__declspec(implementation_key(713)) double IElementQuality::GetNastranPyrARLimit ( );
__declspec(implementation_key(714)) void IElementQuality::PutNastranPyrARLimit ( double _val );
__declspec(implementation_key(715)) VARIANT_BOOL IElementQuality::GetNastranPyrEPLROn ( );
__declspec(implementation_key(716)) void IElementQuality::PutNastranPyrEPLROn ( VARIANT_BOOL _val );
__declspec(implementation_key(717)) double IElementQuality::GetNastranPyrEPLRLimit ( );
__declspec(implementation_key(718)) void IElementQuality::PutNastranPyrEPLRLimit ( double _val );
__declspec(implementation_key(719)) VARIANT_BOOL IElementQuality::GetNastranPyrDetJOn ( );
__declspec(implementation_key(720)) void IElementQuality::PutNastranPyrDetJOn ( VARIANT_BOOL _val );
__declspec(implementation_key(721)) double IElementQuality::GetNastranPyrDetJLimit ( );
__declspec(implementation_key(722)) void IElementQuality::PutNastranPyrDetJLimit ( double _val );
__declspec(implementation_key(723)) VARIANT_BOOL IElementQuality::GetNastranPyrWarpOn ( );
__declspec(implementation_key(724)) void IElementQuality::PutNastranPyrWarpOn ( VARIANT_BOOL _val );
__declspec(implementation_key(725)) double IElementQuality::GetNastranPyrWarpLimit ( );
__declspec(implementation_key(726)) void IElementQuality::PutNastranPyrWarpLimit ( double _val );
__declspec(implementation_key(727)) VARIANT_BOOL IElementQuality::GetNastranQuadAROn ( );
__declspec(implementation_key(728)) void IElementQuality::PutNastranQuadAROn ( VARIANT_BOOL _val );
__declspec(implementation_key(729)) double IElementQuality::GetNastranQuadARLimit ( );
__declspec(implementation_key(730)) void IElementQuality::PutNastranQuadARLimit ( double _val );
__declspec(implementation_key(731)) VARIANT_BOOL IElementQuality::GetNastranTriaAROn ( );
__declspec(implementation_key(732)) void IElementQuality::PutNastranTriaAROn ( VARIANT_BOOL _val );
__declspec(implementation_key(733)) double IElementQuality::GetNastranTriaARLimit ( );
__declspec(implementation_key(734)) void IElementQuality::PutNastranTriaARLimit ( double _val );
__declspec(implementation_key(735)) VARIANT_BOOL IElementQuality::GetNastranTriaEPLROn ( );
__declspec(implementation_key(736)) void IElementQuality::PutNastranTriaEPLROn ( VARIANT_BOOL _val );
__declspec(implementation_key(737)) double IElementQuality::GetNastranTriaEPLRLimit ( );
__declspec(implementation_key(738)) void IElementQuality::PutNastranTriaEPLRLimit ( double _val );
__declspec(implementation_key(739)) VARIANT_BOOL IElementQuality::GetNastranTetraEPIAOn ( );
__declspec(implementation_key(740)) void IElementQuality::PutNastranTetraEPIAOn ( VARIANT_BOOL _val );
__declspec(implementation_key(741)) double IElementQuality::GetNastranTetraEPIALimit ( );
__declspec(implementation_key(742)) void IElementQuality::PutNastranTetraEPIALimit ( double _val );
__declspec(implementation_key(743)) VARIANT_BOOL IElementQuality::GetNastranHexEPIAOn ( );
__declspec(implementation_key(744)) void IElementQuality::PutNastranHexEPIAOn ( VARIANT_BOOL _val );
__declspec(implementation_key(745)) double IElementQuality::GetNastranHexEPIALimit ( );
__declspec(implementation_key(746)) void IElementQuality::PutNastranHexEPIALimit ( double _val );
__declspec(implementation_key(747)) VARIANT_BOOL IElementQuality::GetNastranPenEPIAOn ( );
__declspec(implementation_key(748)) void IElementQuality::PutNastranPenEPIAOn ( VARIANT_BOOL _val );
__declspec(implementation_key(749)) double IElementQuality::GetNastranPenEPIALimit ( );
__declspec(implementation_key(750)) void IElementQuality::PutNastranPenEPIALimit ( double _val );
__declspec(implementation_key(751)) VARIANT_BOOL IElementQuality::GetNastranPyrEPIAOn ( );
__declspec(implementation_key(752)) void IElementQuality::PutNastranPyrEPIAOn ( VARIANT_BOOL _val );
__declspec(implementation_key(753)) double IElementQuality::GetNastranPyrEPIALimit ( );
__declspec(implementation_key(754)) void IElementQuality::PutNastranPyrEPIALimit ( double _val );
__declspec(implementation_key(755)) enum zReturnCode IStressLinear::clear ( );
__declspec(implementation_key(756)) enum zReturnCode IStressLinear::AddElem ( int nElemSet );
__declspec(implementation_key(757)) enum zReturnCode IStressLinear::ElemAlongLine ( const _variant_t & vXYZ1, const _variant_t & vXYZ2, int nSetID );
__declspec(implementation_key(758)) enum zReturnCode IStressLinear::LoadData ( int nElemSet, VARIANT_BOOL bSolids, int dataType, int setID, int vectorID );
__declspec(implementation_key(759)) enum zReturnCode IStressLinear::FindElemWithXYZ ( const _variant_t & vXYZ, int * elemID, int * virtElemID );
__declspec(implementation_key(760)) enum zReturnCode IStressLinear::GetInterpValues ( const _variant_t & vXYZ, int virtElemID, VARIANT * values );
__declspec(implementation_key(761)) enum zReturnCode IStressLinear::Transform3DStress ( int cSysFromID, int cSysToID, const _variant_t & vStressTensorIn, VARIANT * vStressTensorOut );
__declspec(implementation_key(762)) enum zReturnCode IStressLinear::CalcSolidPrinStresses ( const _variant_t & vStressTensorIn, VARIANT * vPrinTrescaData );
__declspec(implementation_key(763)) int IStressLinear::GetNumElem ( );
__declspec(implementation_key(764)) void IStressLinear::PutNumElem ( int _val );
__declspec(implementation_key(765)) int IStressLinear::GetDataMode ( );
__declspec(implementation_key(766)) void IStressLinear::PutDataMode ( int _val );
__declspec(implementation_key(767)) int IStressLinear::GetAvgMode ( );
__declspec(implementation_key(768)) void IStressLinear::PutAvgMode ( int _val );
__declspec(implementation_key(769)) enum zReturnCode IDBase::NextSet ( );
__declspec(implementation_key(770)) enum zReturnCode IDBase::PrevSet ( );
__declspec(implementation_key(771)) enum zReturnCode IDBase::NextEmptySet ( );
__declspec(implementation_key(772)) enum zReturnCode IDBase::PrevEmptySet ( );
__declspec(implementation_key(773)) enum zReturnCode IDBase::Get ( int ID );
__declspec(implementation_key(774)) enum zReturnCode IDBase::Put ( int ID );
__declspec(implementation_key(775)) enum zReturnCode IDBase::Exist ( int ID );
__declspec(implementation_key(776)) enum zReturnCode IDBase::Deletable ( int ID );
__declspec(implementation_key(777)) enum zReturnCode IDBase::Delete ( int ID );
__declspec(implementation_key(778)) enum zReturnCode IDBase::Reset ( );
__declspec(implementation_key(779)) enum zReturnCode IDBase::Next ( );
__declspec(implementation_key(780)) enum zReturnCode IDBase::Prev ( );
__declspec(implementation_key(781)) enum zReturnCode IDBase::First ( );
__declspec(implementation_key(782)) enum zReturnCode IDBase::Last ( );
__declspec(implementation_key(783)) int IDBase::NextID ( );
__declspec(implementation_key(784)) int IDBase::PrevID ( );
__declspec(implementation_key(785)) int IDBase::NextEmptyID ( );
__declspec(implementation_key(786)) int IDBase::PrevEmptyID ( );
__declspec(implementation_key(787)) enum zReturnCode IDBase::GetLibrary ( int ID );
__declspec(implementation_key(788)) enum zReturnCode IDBase::PutLibrary ( );
__declspec(implementation_key(789)) enum zReturnCode IDBase::DeleteLibrary ( int ID );
__declspec(implementation_key(790)) enum zReturnCode IDBase::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(791)) enum zReturnCode IDBase::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(792)) int IDBase::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(793)) enum zReturnCode IDBase::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(794)) enum zReturnCode IDBase::NextInSet ( int nSetID );
__declspec(implementation_key(795)) enum zReturnCode IDBase::FirstInSet ( int nSetID );
__declspec(implementation_key(796)) int IDBase::CountSet ( );
__declspec(implementation_key(797)) enum zReturnCode IDBase::NextExistingInSet ( int nSetID );
__declspec(implementation_key(798)) enum zReturnCode IDBase::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(799)) int IDBase::GetID ( );
__declspec(implementation_key(800)) void IDBase::PutID ( int _val );
__declspec(implementation_key(801)) int IDBase::GetsetID ( );
__declspec(implementation_key(802)) void IDBase::PutsetID ( int _val );
__declspec(implementation_key(803)) int IDBase::GetActive ( );
__declspec(implementation_key(804)) void IDBase::PutActive ( int _val );
__declspec(implementation_key(805)) int IAnalysisCase::GetNasSubseqCase ( int nVectorIndex );
__declspec(implementation_key(806)) void IAnalysisCase::PutNasSubseqCase ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(807)) double IAnalysisCase::GetNasSubseqFactor ( int nVectorIndex );
__declspec(implementation_key(808)) void IAnalysisCase::PutNasSubseqFactor ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(809)) int IAnalysisCase::GetBCSet ( int nVectorIndex );
__declspec(implementation_key(810)) void IAnalysisCase::PutBCSet ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(811)) int IAnalysisCase::GetOutput ( int nVectorIndex );
__declspec(implementation_key(812)) void IAnalysisCase::PutOutput ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(813)) VARIANT_BOOL IAnalysisCase::GetNasCnlConvergenceFlags ( int nVectorIndex );
__declspec(implementation_key(814)) void IAnalysisCase::PutNasCnlConvergenceFlags ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(815)) double IAnalysisCase::GetNasCnlConvergenceValue ( int nVectorIndex );
__declspec(implementation_key(816)) void IAnalysisCase::PutNasCnlConvergenceValue ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(817)) VARIANT_BOOL IAnalysisCase::GetMSCNasCnlConvergenceFlags ( int nVectorIndex );
__declspec(implementation_key(818)) void IAnalysisCase::PutMSCNasCnlConvergenceFlags ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(819)) enum zReturnCode IAnalysisCase::Get ( int entID );
__declspec(implementation_key(820)) enum zReturnCode IAnalysisCase::Put ( int entID );
__declspec(implementation_key(821)) enum zReturnCode IAnalysisCase::GetContactTable ( int * Count, VARIANT * rowSeg, VARIANT * colSeg, VARIANT * tieType, VARIANT * distTol, VARIANT * sepForce, VARIANT * friction, VARIANT * interClose );
__declspec(implementation_key(822)) enum zReturnCode IAnalysisCase::PutContactTable ( int Count, const _variant_t & rowSeg, const _variant_t & colSeg, const _variant_t & tieType, const _variant_t & distTol, const _variant_t & sepForce, const _variant_t & friction, const _variant_t & interClose );
__declspec(implementation_key(823)) enum zReturnCode IAnalysisCase::InitAnalysisCase ( int nSetID, int nCaseID );
__declspec(implementation_key(824)) enum zReturnCode IAnalysisCase::DeleteAnalysisCase ( int nSetID, int nCaseID );
__declspec(implementation_key(825)) enum zReturnCode IAnalysisCase::GetStandardTrim ( VARIANT * useTrim, VARIANT * TrimID, VARIANT * TrimVal );
__declspec(implementation_key(826)) enum zReturnCode IAnalysisCase::PutStandardTrim ( const _variant_t & useTrim, const _variant_t & TrimID, const _variant_t & TrimVal );
__declspec(implementation_key(827)) enum zReturnCode IAnalysisCase::GetTrimControlSurf ( VARIANT * useTrim, VARIANT * TrimID, VARIANT * TrimVal );
__declspec(implementation_key(828)) enum zReturnCode IAnalysisCase::PutTrimControlSurf ( const _variant_t & useTrim, const _variant_t & TrimID, const _variant_t & TrimVal );
__declspec(implementation_key(829)) enum zReturnCode IAnalysisCase::NextSet ( );
__declspec(implementation_key(830)) enum zReturnCode IAnalysisCase::PrevSet ( );
__declspec(implementation_key(831)) enum zReturnCode IAnalysisCase::NextEmptySet ( );
__declspec(implementation_key(832)) enum zReturnCode IAnalysisCase::PrevEmptySet ( );
__declspec(implementation_key(833)) enum zReturnCode IAnalysisCase::Exist ( int ID );
__declspec(implementation_key(834)) enum zReturnCode IAnalysisCase::Deletable ( int ID );
__declspec(implementation_key(835)) enum zReturnCode IAnalysisCase::Delete ( int ID );
__declspec(implementation_key(836)) enum zReturnCode IAnalysisCase::Reset ( );
__declspec(implementation_key(837)) enum zReturnCode IAnalysisCase::Next ( );
__declspec(implementation_key(838)) enum zReturnCode IAnalysisCase::Prev ( );
__declspec(implementation_key(839)) enum zReturnCode IAnalysisCase::First ( );
__declspec(implementation_key(840)) enum zReturnCode IAnalysisCase::Last ( );
__declspec(implementation_key(841)) int IAnalysisCase::NextID ( );
__declspec(implementation_key(842)) int IAnalysisCase::PrevID ( );
__declspec(implementation_key(843)) int IAnalysisCase::NextEmptyID ( );
__declspec(implementation_key(844)) int IAnalysisCase::PrevEmptyID ( );
__declspec(implementation_key(845)) enum zReturnCode IAnalysisCase::GetLibrary ( int ID );
__declspec(implementation_key(846)) enum zReturnCode IAnalysisCase::PutLibrary ( );
__declspec(implementation_key(847)) enum zReturnCode IAnalysisCase::DeleteLibrary ( int ID );
__declspec(implementation_key(848)) enum zReturnCode IAnalysisCase::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(849)) enum zReturnCode IAnalysisCase::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(850)) int IAnalysisCase::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(851)) enum zReturnCode IAnalysisCase::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(852)) enum zReturnCode IAnalysisCase::NextInSet ( int nSetID );
__declspec(implementation_key(853)) enum zReturnCode IAnalysisCase::FirstInSet ( int nSetID );
__declspec(implementation_key(854)) int IAnalysisCase::CountSet ( );
__declspec(implementation_key(855)) enum zReturnCode IAnalysisCase::NextExistingInSet ( int nSetID );
__declspec(implementation_key(856)) enum zReturnCode IAnalysisCase::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(857)) _bstr_t IAnalysisCase::GetCaseTitle ( );
__declspec(implementation_key(858)) void IAnalysisCase::PutCaseTitle ( _bstr_t _val );
__declspec(implementation_key(859)) int IAnalysisCase::GetcaseID ( );
__declspec(implementation_key(860)) void IAnalysisCase::PutcaseID ( int _val );
__declspec(implementation_key(861)) _bstr_t IAnalysisCase::GetEcho ( );
__declspec(implementation_key(862)) void IAnalysisCase::PutEcho ( _bstr_t _val );
__declspec(implementation_key(863)) VARIANT_BOOL IAnalysisCase::GetSkipStandard ( );
__declspec(implementation_key(864)) void IAnalysisCase::PutSkipStandard ( VARIANT_BOOL _val );
__declspec(implementation_key(865)) int IAnalysisCase::GetStartText ( );
__declspec(implementation_key(866)) void IAnalysisCase::PutStartText ( int _val );
__declspec(implementation_key(867)) int IAnalysisCase::GetEndText ( );
__declspec(implementation_key(868)) void IAnalysisCase::PutEndText ( int _val );
__declspec(implementation_key(869)) int IAnalysisCase::GetDestination ( );
__declspec(implementation_key(870)) void IAnalysisCase::PutDestination ( int _val );
__declspec(implementation_key(871)) int IAnalysisCase::GetImaginary ( );
__declspec(implementation_key(872)) void IAnalysisCase::PutImaginary ( int _val );
__declspec(implementation_key(873)) int IAnalysisCase::GetCornerOutput ( );
__declspec(implementation_key(874)) void IAnalysisCase::PutCornerOutput ( int _val );
__declspec(implementation_key(875)) int IAnalysisCase::GetIntegrationOutput ( );
__declspec(implementation_key(876)) void IAnalysisCase::PutIntegrationOutput ( int _val );
__declspec(implementation_key(877)) VARIANT_BOOL IAnalysisCase::GetAbaHistOn ( );
__declspec(implementation_key(878)) void IAnalysisCase::PutAbaHistOn ( VARIANT_BOOL _val );
__declspec(implementation_key(879)) double IAnalysisCase::GetAbaHistTimePeriod ( );
__declspec(implementation_key(880)) void IAnalysisCase::PutAbaHistTimePeriod ( double _val );
__declspec(implementation_key(881)) double IAnalysisCase::GetAbaHistInitTimeInc ( );
__declspec(implementation_key(882)) void IAnalysisCase::PutAbaHistInitTimeInc ( double _val );
__declspec(implementation_key(883)) double IAnalysisCase::GetAbaHistMinTimeInc ( );
__declspec(implementation_key(884)) void IAnalysisCase::PutAbaHistMinTimeInc ( double _val );
__declspec(implementation_key(885)) double IAnalysisCase::GetAbaHistMaxTimeInc ( );
__declspec(implementation_key(886)) void IAnalysisCase::PutAbaHistMaxTimeInc ( double _val );
__declspec(implementation_key(887)) int IAnalysisCase::GetAbaHistEigenvectors ( );
__declspec(implementation_key(888)) void IAnalysisCase::PutAbaHistEigenvectors ( int _val );
__declspec(implementation_key(889)) double IAnalysisCase::GetAbaHistMinFreq ( );
__declspec(implementation_key(890)) void IAnalysisCase::PutAbaHistMinFreq ( double _val );
__declspec(implementation_key(891)) double IAnalysisCase::GetAbaHistMaxFreq ( );
__declspec(implementation_key(892)) void IAnalysisCase::PutAbaHistMaxFreq ( double _val );
__declspec(implementation_key(893)) double IAnalysisCase::GetAbaHistShiftFreq ( );
__declspec(implementation_key(894)) void IAnalysisCase::PutAbaHistShiftFreq ( double _val );
__declspec(implementation_key(895)) double IAnalysisCase::GetAbaHistScaleFactor ( );
__declspec(implementation_key(896)) void IAnalysisCase::PutAbaHistScaleFactor ( double _val );
__declspec(implementation_key(897)) int IAnalysisCase::GetAbaHistOutInterval ( );
__declspec(implementation_key(898)) void IAnalysisCase::PutAbaHistOutInterval ( int _val );
__declspec(implementation_key(899)) VARIANT_BOOL IAnalysisCase::GetAbaHistNonlinGeom ( );
__declspec(implementation_key(900)) void IAnalysisCase::PutAbaHistNonlinGeom ( VARIANT_BOOL _val );
__declspec(implementation_key(901)) VARIANT_BOOL IAnalysisCase::GetAbaHistLinearPert ( );
__declspec(implementation_key(902)) void IAnalysisCase::PutAbaHistLinearPert ( VARIANT_BOOL _val );
__declspec(implementation_key(903)) VARIANT_BOOL IAnalysisCase::GetAbaHistAutoContact ( );
__declspec(implementation_key(904)) void IAnalysisCase::PutAbaHistAutoContact ( VARIANT_BOOL _val );
__declspec(implementation_key(905)) VARIANT_BOOL IAnalysisCase::GetAbaHistStabilize ( );
__declspec(implementation_key(906)) void IAnalysisCase::PutAbaHistStabilize ( VARIANT_BOOL _val );
__declspec(implementation_key(907)) VARIANT_BOOL IAnalysisCase::GetAbaHistOutZeroInc ( );
__declspec(implementation_key(908)) void IAnalysisCase::PutAbaHistOutZeroInc ( VARIANT_BOOL _val );
__declspec(implementation_key(909)) int IAnalysisCase::GetAbaHistStepAmp ( );
__declspec(implementation_key(910)) void IAnalysisCase::PutAbaHistStepAmp ( int _val );
__declspec(implementation_key(911)) int IAnalysisCase::GetAbaHistStepLoad ( );
__declspec(implementation_key(912)) void IAnalysisCase::PutAbaHistStepLoad ( int _val );
__declspec(implementation_key(913)) int IAnalysisCase::GetAbaHistStepConstr ( );
__declspec(implementation_key(914)) void IAnalysisCase::PutAbaHistStepConstr ( int _val );
__declspec(implementation_key(915)) enum zAnalysisType IAnalysisCase::GetAbaHistAnalysisType ( );
__declspec(implementation_key(916)) void IAnalysisCase::PutAbaHistAnalysisType ( enum zAnalysisType _val );
__declspec(implementation_key(917)) VARIANT_BOOL IAnalysisCase::GetAnsDOFOn ( );
__declspec(implementation_key(918)) void IAnalysisCase::PutAnsDOFOn ( VARIANT_BOOL _val );
__declspec(implementation_key(919)) VARIANT_BOOL IAnalysisCase::GetAnsDOFDoSet ( );
__declspec(implementation_key(920)) void IAnalysisCase::PutAnsDOFDoSet ( VARIANT_BOOL _val );
__declspec(implementation_key(921)) VARIANT_BOOL IAnalysisCase::GetAnsDOFAutomatic ( );
__declspec(implementation_key(922)) void IAnalysisCase::PutAnsDOFAutomatic ( VARIANT_BOOL _val );
__declspec(implementation_key(923)) VARIANT_BOOL IAnalysisCase::GetAnsDOFNoRotation ( );
__declspec(implementation_key(924)) void IAnalysisCase::PutAnsDOFNoRotation ( VARIANT_BOOL _val );
__declspec(implementation_key(925)) int IAnalysisCase::GetAnsDOFSetID ( );
__declspec(implementation_key(926)) void IAnalysisCase::PutAnsDOFSetID ( int _val );
__declspec(implementation_key(927)) int IAnalysisCase::GetAnsDOFNumber ( );
__declspec(implementation_key(928)) void IAnalysisCase::PutAnsDOFNumber ( int _val );
__declspec(implementation_key(929)) VARIANT_BOOL IAnalysisCase::GetAnsModesOn ( );
__declspec(implementation_key(930)) void IAnalysisCase::PutAnsModesOn ( VARIANT_BOOL _val );
__declspec(implementation_key(931)) int IAnalysisCase::GetAnsModesNumModes ( );
__declspec(implementation_key(932)) void IAnalysisCase::PutAnsModesNumModes ( int _val );
__declspec(implementation_key(933)) double IAnalysisCase::GetAnsModesMinFreq ( );
__declspec(implementation_key(934)) void IAnalysisCase::PutAnsModesMinFreq ( double _val );
__declspec(implementation_key(935)) double IAnalysisCase::GetAnsModesMaxFreq ( );
__declspec(implementation_key(936)) void IAnalysisCase::PutAnsModesMaxFreq ( double _val );
__declspec(implementation_key(937)) double IAnalysisCase::GetAnsModesModalMethod ( );
__declspec(implementation_key(938)) void IAnalysisCase::PutAnsModesModalMethod ( double _val );
__declspec(implementation_key(939)) VARIANT_BOOL IAnalysisCase::GetAnsModesElemResults ( );
__declspec(implementation_key(940)) void IAnalysisCase::PutAnsModesElemResults ( VARIANT_BOOL _val );
__declspec(implementation_key(941)) VARIANT_BOOL IAnalysisCase::GetAnsHeatOn ( );
__declspec(implementation_key(942)) void IAnalysisCase::PutAnsHeatOn ( VARIANT_BOOL _val );
__declspec(implementation_key(943)) double IAnalysisCase::GetAnsHeatEndTime ( );
__declspec(implementation_key(944)) void IAnalysisCase::PutAnsHeatEndTime ( double _val );
__declspec(implementation_key(945)) double IAnalysisCase::GetAnsHeatTimeStep ( );
__declspec(implementation_key(946)) void IAnalysisCase::PutAnsHeatTimeStep ( double _val );
__declspec(implementation_key(947)) int IAnalysisCase::GetAnsHeatOutputFreq ( );
__declspec(implementation_key(948)) void IAnalysisCase::PutAnsHeatOutputFreq ( int _val );
__declspec(implementation_key(949)) VARIANT_BOOL IAnalysisCase::GetMarHistOn ( );
__declspec(implementation_key(950)) void IAnalysisCase::PutMarHistOn ( VARIANT_BOOL _val );
__declspec(implementation_key(951)) int IAnalysisCase::GetMarHistContactProp ( );
__declspec(implementation_key(952)) void IAnalysisCase::PutMarHistContactProp ( int _val );
__declspec(implementation_key(953)) int IAnalysisCase::GetMarHistCtrlMethod ( );
__declspec(implementation_key(954)) void IAnalysisCase::PutMarHistCtrlMethod ( int _val );
__declspec(implementation_key(955)) int IAnalysisCase::GetMarHistSolverMeth ( );
__declspec(implementation_key(956)) void IAnalysisCase::PutMarHistSolverMeth ( int _val );
__declspec(implementation_key(957)) int IAnalysisCase::GetMarHistCtrlMaxStep ( );
__declspec(implementation_key(958)) void IAnalysisCase::PutMarHistCtrlMaxStep ( int _val );
__declspec(implementation_key(959)) int IAnalysisCase::GetMarHistCtrlMaxRecycle ( );
__declspec(implementation_key(960)) void IAnalysisCase::PutMarHistCtrlMaxRecycle ( int _val );
__declspec(implementation_key(961)) int IAnalysisCase::GetMarHistCtrlMinRecycle ( );
__declspec(implementation_key(962)) void IAnalysisCase::PutMarHistCtrlMinRecycle ( int _val );
__declspec(implementation_key(963)) double IAnalysisCase::GetMarHistMaxResidual ( );
__declspec(implementation_key(964)) void IAnalysisCase::PutMarHistMaxResidual ( double _val );
__declspec(implementation_key(965)) int IAnalysisCase::GetMarHistConvergeMeth ( );
__declspec(implementation_key(966)) void IAnalysisCase::PutMarHistConvergeMeth ( int _val );
__declspec(implementation_key(967)) VARIANT_BOOL IAnalysisCase::GetMarHistNonPosDefinite ( );
__declspec(implementation_key(968)) void IAnalysisCase::PutMarHistNonPosDefinite ( VARIANT_BOOL _val );
__declspec(implementation_key(969)) VARIANT_BOOL IAnalysisCase::GetMarHistNonSymmetric ( );
__declspec(implementation_key(970)) void IAnalysisCase::PutMarHistNonSymmetric ( VARIANT_BOOL _val );
__declspec(implementation_key(971)) double IAnalysisCase::GetMarHistModalMinFreq ( );
__declspec(implementation_key(972)) void IAnalysisCase::PutMarHistModalMinFreq ( double _val );
__declspec(implementation_key(973)) double IAnalysisCase::GetMarHistModalMaxFreq ( );
__declspec(implementation_key(974)) void IAnalysisCase::PutMarHistModalMaxFreq ( double _val );
__declspec(implementation_key(975)) int IAnalysisCase::GetMarHistModalEigen ( );
__declspec(implementation_key(976)) void IAnalysisCase::PutMarHistModalEigen ( int _val );
__declspec(implementation_key(977)) int IAnalysisCase::GetMarHistChecking ( );
__declspec(implementation_key(978)) void IAnalysisCase::PutMarHistChecking ( int _val );
__declspec(implementation_key(979)) VARIANT_BOOL IAnalysisCase::GetMarHistAutoSwitch ( );
__declspec(implementation_key(980)) void IAnalysisCase::PutMarHistAutoSwitch ( VARIANT_BOOL _val );
__declspec(implementation_key(981)) enum zAnalysisType IAnalysisCase::GetMarHistAnalCaseSol ( );
__declspec(implementation_key(982)) void IAnalysisCase::PutMarHistAnalCaseSol ( enum zAnalysisType _val );
__declspec(implementation_key(983)) int IAnalysisCase::GetMarHistBuckleNumModes ( );
__declspec(implementation_key(984)) void IAnalysisCase::PutMarHistBuckleNumModes ( int _val );
__declspec(implementation_key(985)) int IAnalysisCase::GetMarHistBucklePosEigen ( );
__declspec(implementation_key(986)) void IAnalysisCase::PutMarHistBucklePosEigen ( int _val );
__declspec(implementation_key(987)) VARIANT_BOOL IAnalysisCase::GetMarIncOn ( );
__declspec(implementation_key(988)) void IAnalysisCase::PutMarIncOn ( VARIANT_BOOL _val );
__declspec(implementation_key(989)) int IAnalysisCase::GetMarIncArcLenMeth ( );
__declspec(implementation_key(990)) void IAnalysisCase::PutMarIncArcLenMeth ( int _val );
__declspec(implementation_key(991)) double IAnalysisCase::GetMarIncTimePeriod ( );
__declspec(implementation_key(992)) void IAnalysisCase::PutMarIncTimePeriod ( double _val );
__declspec(implementation_key(993)) double IAnalysisCase::GetMarIncInitTimeInc ( );
__declspec(implementation_key(994)) void IAnalysisCase::PutMarIncInitTimeInc ( double _val );
__declspec(implementation_key(995)) double IAnalysisCase::GetMarIncMinTimeInc ( );
__declspec(implementation_key(996)) void IAnalysisCase::PutMarIncMinTimeInc ( double _val );
__declspec(implementation_key(997)) double IAnalysisCase::GetMarIncMaxTimeInc ( );
__declspec(implementation_key(998)) void IAnalysisCase::PutMarIncMaxTimeInc ( double _val );
__declspec(implementation_key(999)) double IAnalysisCase::GetMarIncScaleFact ( );
__declspec(implementation_key(1000)) void IAnalysisCase::PutMarIncScaleFact ( double _val );
__declspec(implementation_key(1001)) int IAnalysisCase::GetMarIncMaxStep ( );
__declspec(implementation_key(1002)) void IAnalysisCase::PutMarIncMaxStep ( int _val );
__declspec(implementation_key(1003)) int IAnalysisCase::GetMarIncNumOutInc ( );
__declspec(implementation_key(1004)) void IAnalysisCase::PutMarIncNumOutInc ( int _val );
__declspec(implementation_key(1005)) VARIANT_BOOL IAnalysisCase::GetMarIncQuasiStatDamp ( );
__declspec(implementation_key(1006)) void IAnalysisCase::PutMarIncQuasiStatDamp ( VARIANT_BOOL _val );
__declspec(implementation_key(1007)) double IAnalysisCase::GetMarIncFracFirst ( );
__declspec(implementation_key(1008)) void IAnalysisCase::PutMarIncFracFirst ( double _val );
__declspec(implementation_key(1009)) int IAnalysisCase::GetMarIncMaxNumInc ( );
__declspec(implementation_key(1010)) void IAnalysisCase::PutMarIncMaxNumInc ( int _val );
__declspec(implementation_key(1011)) int IAnalysisCase::GetMarIncCtrlMaxRecycle ( );
__declspec(implementation_key(1012)) void IAnalysisCase::PutMarIncCtrlMaxRecycle ( int _val );
__declspec(implementation_key(1013)) double IAnalysisCase::GetMarIncMaxFracForAll ( );
__declspec(implementation_key(1014)) void IAnalysisCase::PutMarIncMaxFracForAll ( double _val );
__declspec(implementation_key(1015)) double IAnalysisCase::GetMarIncTotalTime ( );
__declspec(implementation_key(1016)) void IAnalysisCase::PutMarIncTotalTime ( double _val );
__declspec(implementation_key(1017)) VARIANT_BOOL IAnalysisCase::GetMarCtblOn ( );
__declspec(implementation_key(1018)) void IAnalysisCase::PutMarCtblOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1019)) VARIANT_BOOL IAnalysisCase::GetMarCtblWrite ( );
__declspec(implementation_key(1020)) void IAnalysisCase::PutMarCtblWrite ( VARIANT_BOOL _val );
__declspec(implementation_key(1021)) VARIANT_BOOL IAnalysisCase::GetNasOmodesOn ( );
__declspec(implementation_key(1022)) void IAnalysisCase::PutNasOmodesOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1023)) _bstr_t IAnalysisCase::GetNasOmodes ( );
__declspec(implementation_key(1024)) void IAnalysisCase::PutNasOmodes ( _bstr_t _val );
__declspec(implementation_key(1025)) _variant_t IAnalysisCase::GetvBCSet ( );
__declspec(implementation_key(1026)) void IAnalysisCase::PutvBCSet ( const _variant_t & _val );
__declspec(implementation_key(1027)) _variant_t IAnalysisCase::GetvOutput ( );
__declspec(implementation_key(1028)) void IAnalysisCase::PutvOutput ( const _variant_t & _val );
__declspec(implementation_key(1029)) int IAnalysisCase::GetCaseType ( );
__declspec(implementation_key(1030)) void IAnalysisCase::PutCaseType ( int _val );
__declspec(implementation_key(1031)) VARIANT_BOOL IAnalysisCase::GetDynHistOn ( );
__declspec(implementation_key(1032)) void IAnalysisCase::PutDynHistOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1033)) int IAnalysisCase::GetDynHistBodyLoadGrp ( );
__declspec(implementation_key(1034)) void IAnalysisCase::PutDynHistBodyLoadGrp ( int _val );
__declspec(implementation_key(1035)) VARIANT_BOOL IAnalysisCase::GetDynHistMassDampOn ( );
__declspec(implementation_key(1036)) void IAnalysisCase::PutDynHistMassDampOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1037)) double IAnalysisCase::GetDynHistMsssDamp ( );
__declspec(implementation_key(1038)) void IAnalysisCase::PutDynHistMsssDamp ( double _val );
__declspec(implementation_key(1039)) VARIANT_BOOL IAnalysisCase::GetDynHistImplicit ( );
__declspec(implementation_key(1040)) void IAnalysisCase::PutDynHistImplicit ( VARIANT_BOOL _val );
__declspec(implementation_key(1041)) VARIANT_BOOL IAnalysisCase::GetDynHistSpringback ( );
__declspec(implementation_key(1042)) void IAnalysisCase::PutDynHistSpringback ( VARIANT_BOOL _val );
__declspec(implementation_key(1043)) VARIANT_BOOL IAnalysisCase::GetDynHistStrainOutput ( );
__declspec(implementation_key(1044)) void IAnalysisCase::PutDynHistStrainOutput ( VARIANT_BOOL _val );
__declspec(implementation_key(1045)) double IAnalysisCase::GetDynHistTotalTime ( );
__declspec(implementation_key(1046)) void IAnalysisCase::PutDynHistTotalTime ( double _val );
__declspec(implementation_key(1047)) double IAnalysisCase::GetDynHistTimeHistOuput ( );
__declspec(implementation_key(1048)) void IAnalysisCase::PutDynHistTimeHistOuput ( double _val );
__declspec(implementation_key(1049)) double IAnalysisCase::GetDynHistPrintHistOutput ( );
__declspec(implementation_key(1050)) void IAnalysisCase::PutDynHistPrintHistOutput ( double _val );
__declspec(implementation_key(1051)) int IAnalysisCase::GetDynHistPlateIntgPts ( );
__declspec(implementation_key(1052)) void IAnalysisCase::PutDynHistPlateIntgPts ( int _val );
__declspec(implementation_key(1053)) int IAnalysisCase::GetDynHistGroupHistId ( );
__declspec(implementation_key(1054)) void IAnalysisCase::PutDynHistGroupHistId ( int _val );
__declspec(implementation_key(1055)) VARIANT_BOOL IAnalysisCase::GetNasCnlOn ( );
__declspec(implementation_key(1056)) void IAnalysisCase::PutNasCnlOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1057)) VARIANT_BOOL IAnalysisCase::GetNasCnlUseLoadSet ( );
__declspec(implementation_key(1058)) void IAnalysisCase::PutNasCnlUseLoadSet ( VARIANT_BOOL _val );
__declspec(implementation_key(1059)) int IAnalysisCase::GetNasCnlIncrements ( );
__declspec(implementation_key(1060)) void IAnalysisCase::PutNasCnlIncrements ( int _val );
__declspec(implementation_key(1061)) double IAnalysisCase::GetNasCnlTime_Increment ( );
__declspec(implementation_key(1062)) void IAnalysisCase::PutNasCnlTime_Increment ( double _val );
__declspec(implementation_key(1063)) int IAnalysisCase::GetNasCnlMaxIter ( );
__declspec(implementation_key(1064)) void IAnalysisCase::PutNasCnlMaxIter ( int _val );
__declspec(implementation_key(1065)) _variant_t IAnalysisCase::GetvNasCnlConvergenceFlags ( );
__declspec(implementation_key(1066)) void IAnalysisCase::PutvNasCnlConvergenceFlags ( const _variant_t & _val );
__declspec(implementation_key(1067)) _variant_t IAnalysisCase::GetvNasCnlConvergenceValue ( );
__declspec(implementation_key(1068)) void IAnalysisCase::PutvNasCnlConvergenceValue ( const _variant_t & _val );
__declspec(implementation_key(1069)) int IAnalysisCase::GetNasCnlCtiffnessMethod ( );
__declspec(implementation_key(1070)) void IAnalysisCase::PutNasCnlCtiffnessMethod ( int _val );
__declspec(implementation_key(1071)) int IAnalysisCase::GetNasCnlKstep ( );
__declspec(implementation_key(1072)) void IAnalysisCase::PutNasCnlKstep ( int _val );
__declspec(implementation_key(1073)) int IAnalysisCase::GetNasCnlIntermediateOutput ( );
__declspec(implementation_key(1074)) void IAnalysisCase::PutNasCnlIntermediateOutput ( int _val );
__declspec(implementation_key(1075)) int IAnalysisCase::GetNasCnlOutputInterval ( );
__declspec(implementation_key(1076)) void IAnalysisCase::PutNasCnlOutputInterval ( int _val );
__declspec(implementation_key(1077)) int IAnalysisCase::GetNasCnlSolutionStrategy ( );
__declspec(implementation_key(1078)) void IAnalysisCase::PutNasCnlSolutionStrategy ( int _val );
__declspec(implementation_key(1079)) int IAnalysisCase::GetNasCnlSolutionOverrides ( );
__declspec(implementation_key(1080)) void IAnalysisCase::PutNasCnlSolutionOverrides ( int _val );
__declspec(implementation_key(1081)) VARIANT_BOOL IAnalysisCase::GetNasCnlModnewtonLineSearch ( );
__declspec(implementation_key(1082)) void IAnalysisCase::PutNasCnlModnewtonLineSearch ( VARIANT_BOOL _val );
__declspec(implementation_key(1083)) VARIANT_BOOL IAnalysisCase::GetNasCnlModnewtonQuasiNewton ( );
__declspec(implementation_key(1084)) void IAnalysisCase::PutNasCnlModnewtonQuasiNewton ( VARIANT_BOOL _val );
__declspec(implementation_key(1085)) VARIANT_BOOL IAnalysisCase::GetNasCnlModnewtonBisection ( );
__declspec(implementation_key(1086)) void IAnalysisCase::PutNasCnlModnewtonBisection ( VARIANT_BOOL _val );
__declspec(implementation_key(1087)) int IAnalysisCase::GetNasCnlArcConstraintType ( );
__declspec(implementation_key(1088)) void IAnalysisCase::PutNasCnlArcConstraintType ( int _val );
__declspec(implementation_key(1089)) double IAnalysisCase::GetNasCnlArcMinAdjust ( );
__declspec(implementation_key(1090)) void IAnalysisCase::PutNasCnlArcMinAdjust ( double _val );
__declspec(implementation_key(1091)) double IAnalysisCase::GetNasCnlArcMaxAdjust ( );
__declspec(implementation_key(1092)) void IAnalysisCase::PutNasCnlArcMaxAdjust ( double _val );
__declspec(implementation_key(1093)) double IAnalysisCase::GetNasCnlArcLoadScale ( );
__declspec(implementation_key(1094)) void IAnalysisCase::PutNasCnlArcLoadScale ( double _val );
__declspec(implementation_key(1095)) int IAnalysisCase::GetNasCnlArcDesiredIter ( );
__declspec(implementation_key(1096)) void IAnalysisCase::PutNasCnlArcDesiredIter ( int _val );
__declspec(implementation_key(1097)) int IAnalysisCase::GetNasCnlArcMaxSteps ( );
__declspec(implementation_key(1098)) void IAnalysisCase::PutNasCnlArcMaxSteps ( int _val );
__declspec(implementation_key(1099)) int IAnalysisCase::GetNasCnlTimeSkipAdjust ( );
__declspec(implementation_key(1100)) void IAnalysisCase::PutNasCnlTimeSkipAdjust ( int _val );
__declspec(implementation_key(1101)) int IAnalysisCase::GetNasCnlDominantPeriodSteps ( );
__declspec(implementation_key(1102)) void IAnalysisCase::PutNasCnlDominantPeriodSteps ( int _val );
__declspec(implementation_key(1103)) double IAnalysisCase::GetNasCnlBoundsRb ( );
__declspec(implementation_key(1104)) void IAnalysisCase::PutNasCnlBoundsRb ( double _val );
__declspec(implementation_key(1105)) double IAnalysisCase::GetNasCnlStabilityTolerance ( );
__declspec(implementation_key(1106)) void IAnalysisCase::PutNasCnlStabilityTolerance ( double _val );
__declspec(implementation_key(1107)) int IAnalysisCase::GetNasCnlDivergenceLimit ( );
__declspec(implementation_key(1108)) void IAnalysisCase::PutNasCnlDivergenceLimit ( int _val );
__declspec(implementation_key(1109)) int IAnalysisCase::GetNasCnlQuasiNewtonVectors ( );
__declspec(implementation_key(1110)) void IAnalysisCase::PutNasCnlQuasiNewtonVectors ( int _val );
__declspec(implementation_key(1111)) int IAnalysisCase::GetNasCnlMaxLineSearch ( );
__declspec(implementation_key(1112)) void IAnalysisCase::PutNasCnlMaxLineSearch ( int _val );
__declspec(implementation_key(1113)) double IAnalysisCase::GetNasCnlLineSearchTolerance ( );
__declspec(implementation_key(1114)) void IAnalysisCase::PutNasCnlLineSearchTolerance ( double _val );
__declspec(implementation_key(1115)) int IAnalysisCase::GetNasCnlMaxBisections ( );
__declspec(implementation_key(1116)) void IAnalysisCase::PutNasCnlMaxBisections ( int _val );
__declspec(implementation_key(1117)) double IAnalysisCase::GetNasCnlMaxRotation ( );
__declspec(implementation_key(1118)) void IAnalysisCase::PutNasCnlMaxRotation ( double _val );
__declspec(implementation_key(1119)) double IAnalysisCase::GetNasCnlFstress ( );
__declspec(implementation_key(1120)) void IAnalysisCase::PutNasCnlFstress ( double _val );
__declspec(implementation_key(1121)) double IAnalysisCase::GetNasCnlMaxAdjust ( );
__declspec(implementation_key(1122)) void IAnalysisCase::PutNasCnlMaxAdjust ( double _val );
__declspec(implementation_key(1123)) VARIANT_BOOL IAnalysisCase::GetNasCnlCreep ( );
__declspec(implementation_key(1124)) void IAnalysisCase::PutNasCnlCreep ( VARIANT_BOOL _val );
__declspec(implementation_key(1125)) VARIANT_BOOL IAnalysisCase::GetNasCnlSkipNLPARM ( );
__declspec(implementation_key(1126)) void IAnalysisCase::PutNasCnlSkipNLPARM ( VARIANT_BOOL _val );
__declspec(implementation_key(1127)) VARIANT_BOOL IAnalysisCase::GetNasCaeOn ( );
__declspec(implementation_key(1128)) void IAnalysisCase::PutNasCaeOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1129)) double IAnalysisCase::GetNasCaeMachNumber ( );
__declspec(implementation_key(1130)) void IAnalysisCase::PutNasCaeMachNumber ( double _val );
__declspec(implementation_key(1131)) double IAnalysisCase::GetNasCaeDynPressure ( );
__declspec(implementation_key(1132)) void IAnalysisCase::PutNasCaeDynPressure ( double _val );
__declspec(implementation_key(1133)) VARIANT_BOOL IAnalysisCase::GetNasCaeRigidTrim ( );
__declspec(implementation_key(1134)) void IAnalysisCase::PutNasCaeRigidTrim ( VARIANT_BOOL _val );
__declspec(implementation_key(1135)) VARIANT_BOOL IAnalysisCase::GetNasCaeWrtieTrim ( );
__declspec(implementation_key(1136)) void IAnalysisCase::PutNasCaeWrtieTrim ( VARIANT_BOOL _val );
__declspec(implementation_key(1137)) VARIANT_BOOL IAnalysisCase::GetNasCflOn ( );
__declspec(implementation_key(1138)) void IAnalysisCase::PutNasCflOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1139)) int IAnalysisCase::GetNasCflMethod ( );
__declspec(implementation_key(1140)) void IAnalysisCase::PutNasCflMethod ( int _val );
__declspec(implementation_key(1141)) int IAnalysisCase::GetNasCflDenID ( );
__declspec(implementation_key(1142)) void IAnalysisCase::PutNasCflDenID ( int _val );
__declspec(implementation_key(1143)) int IAnalysisCase::GetNasCflMachFactID ( );
__declspec(implementation_key(1144)) void IAnalysisCase::PutNasCflMachFactID ( int _val );
__declspec(implementation_key(1145)) int IAnalysisCase::GetNasCflRfreqFactID ( );
__declspec(implementation_key(1146)) void IAnalysisCase::PutNasCflRfreqFactID ( int _val );
__declspec(implementation_key(1147)) int IAnalysisCase::GetNasCflFliMethod ( );
__declspec(implementation_key(1148)) void IAnalysisCase::PutNasCflFliMethod ( int _val );
__declspec(implementation_key(1149)) int IAnalysisCase::GetNasCflEig ( );
__declspec(implementation_key(1150)) void IAnalysisCase::PutNasCflEig ( int _val );
__declspec(implementation_key(1151)) double IAnalysisCase::GetNasCflEps ( );
__declspec(implementation_key(1152)) void IAnalysisCase::PutNasCflEps ( double _val );
__declspec(implementation_key(1153)) VARIANT_BOOL IAnalysisCase::GetNasCflWriteFlutter ( );
__declspec(implementation_key(1154)) void IAnalysisCase::PutNasCflWriteFlutter ( VARIANT_BOOL _val );
__declspec(implementation_key(1155)) int IAnalysisCase::GetNasSELoad ( );
__declspec(implementation_key(1156)) void IAnalysisCase::PutNasSELoad ( int _val );
__declspec(implementation_key(1157)) int IAnalysisCase::GetNasCflSdampID ( );
__declspec(implementation_key(1158)) void IAnalysisCase::PutNasCflSdampID ( int _val );
__declspec(implementation_key(1159)) VARIANT_BOOL IAnalysisCase::GetNasCnlkDAMP ( );
__declspec(implementation_key(1160)) void IAnalysisCase::PutNasCnlkDAMP ( VARIANT_BOOL _val );
__declspec(implementation_key(1161)) int IAnalysisCase::GetNasCnlkUPDATE ( );
__declspec(implementation_key(1162)) void IAnalysisCase::PutNasCnlkUPDATE ( int _val );
__declspec(implementation_key(1163)) VARIANT_BOOL IAnalysisCase::GetNasRelEMotion ( );
__declspec(implementation_key(1164)) void IAnalysisCase::PutNasRelEMotion ( VARIANT_BOOL _val );
__declspec(implementation_key(1165)) int IAnalysisCase::GetNasCnlStiffnessMethod ( );
__declspec(implementation_key(1166)) void IAnalysisCase::PutNasCnlStiffnessMethod ( int _val );
__declspec(implementation_key(1167)) _bstr_t IAnalysisCase::GetCaseLabel ( );
__declspec(implementation_key(1168)) void IAnalysisCase::PutCaseLabel ( _bstr_t _val );
__declspec(implementation_key(1169)) int IAnalysisCase::GetContactOption ( );
__declspec(implementation_key(1170)) void IAnalysisCase::PutContactOption ( int _val );
__declspec(implementation_key(1171)) int IAnalysisCase::GetContactSetType ( );
__declspec(implementation_key(1172)) void IAnalysisCase::PutContactSetType ( int _val );
__declspec(implementation_key(1173)) _variant_t IAnalysisCase::GetvMSCNasCnlConvergenceFlags ( );
__declspec(implementation_key(1174)) void IAnalysisCase::PutvMSCNasCnlConvergenceFlags ( const _variant_t & _val );
__declspec(implementation_key(1175)) VARIANT_BOOL IAnalysisCase::GetNasCurvatureStrain ( );
__declspec(implementation_key(1176)) void IAnalysisCase::PutNasCurvatureStrain ( VARIANT_BOOL _val );
__declspec(implementation_key(1177)) int IAnalysisCase::GetID ( );
__declspec(implementation_key(1178)) void IAnalysisCase::PutID ( int _val );
__declspec(implementation_key(1179)) int IAnalysisCase::GetsetID ( );
__declspec(implementation_key(1180)) void IAnalysisCase::PutsetID ( int _val );
__declspec(implementation_key(1181)) int IAnalysisCase::GetActive ( );
__declspec(implementation_key(1182)) void IAnalysisCase::PutActive ( int _val );
__declspec(implementation_key(1183)) VARIANT_BOOL INode::GetpermBC ( int nVectorIndex );
__declspec(implementation_key(1184)) void INode::PutpermBC ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(1185)) enum zReturnCode INode::GetCoordArray ( int setID, int * numNode, VARIANT * entID, VARIANT * xyz );
__declspec(implementation_key(1186)) enum zReturnCode INode::GetAllArray ( int setID, int * numNode, VARIANT * entID, VARIANT * xyz, VARIANT * layer, VARIANT * color, VARIANT * ndType, VARIANT * defCSys, VARIANT * outCSys, VARIANT * permBC );
__declspec(implementation_key(1187)) enum zReturnCode INode::GetAll ( int entID, double * x, double * y, double * z, int * nlayer, enum zColor * nColor, enum zNodeType * ntype, int * defCSys, int * outCSys, VARIANT * permBC );
__declspec(implementation_key(1188)) enum zReturnCode INode::PutAll ( int entID, double x, double y, double z, int layer, enum zColor color, enum zNodeType ndType, int defCSys, int outCSys, const _variant_t & permBC );
__declspec(implementation_key(1189)) enum zReturnCode INode::PutAllArray ( int numNode, const _variant_t & entID, const _variant_t & xyz, const _variant_t & layer, const _variant_t & color, const _variant_t & ndType, const _variant_t & defCSys, const _variant_t & outCSys, const _variant_t & permBC );
__declspec(implementation_key(1190)) enum zReturnCode INode::Put ( int entID );
__declspec(implementation_key(1191)) enum zReturnCode INode::GetClosest ( const _variant_t & vXYZ );
__declspec(implementation_key(1192)) enum zReturnCode INode::IsMidsideNode ( int elemSET );
__declspec(implementation_key(1193)) enum zReturnCode INode::PutCoordArray ( int numNode, const _variant_t & entID, const _variant_t & xyz );
__declspec(implementation_key(1194)) enum zReturnCode INode::GetCoordArray2 ( int setID, int * numNode, VARIANT * entID, VARIANT * Exist, VARIANT * xyz );
__declspec(implementation_key(1195)) enum zReturnCode INode::GetAllArray2 ( int setID, int * numNode, VARIANT * entID, VARIANT * Exist, VARIANT * xyz, VARIANT * layer, VARIANT * color, VARIANT * ndType, VARIANT * defCSys, VARIANT * outCSys, VARIANT * permBC );
__declspec(implementation_key(1196)) enum zReturnCode INode::NextSet ( );
__declspec(implementation_key(1197)) enum zReturnCode INode::PrevSet ( );
__declspec(implementation_key(1198)) enum zReturnCode INode::NextEmptySet ( );
__declspec(implementation_key(1199)) enum zReturnCode INode::PrevEmptySet ( );
__declspec(implementation_key(1200)) enum zReturnCode INode::Get ( int ID );
__declspec(implementation_key(1201)) enum zReturnCode INode::Exist ( int ID );
__declspec(implementation_key(1202)) enum zReturnCode INode::Deletable ( int ID );
__declspec(implementation_key(1203)) enum zReturnCode INode::Delete ( int ID );
__declspec(implementation_key(1204)) enum zReturnCode INode::Reset ( );
__declspec(implementation_key(1205)) enum zReturnCode INode::Next ( );
__declspec(implementation_key(1206)) enum zReturnCode INode::Prev ( );
__declspec(implementation_key(1207)) enum zReturnCode INode::First ( );
__declspec(implementation_key(1208)) enum zReturnCode INode::Last ( );
__declspec(implementation_key(1209)) int INode::NextID ( );
__declspec(implementation_key(1210)) int INode::PrevID ( );
__declspec(implementation_key(1211)) int INode::NextEmptyID ( );
__declspec(implementation_key(1212)) int INode::PrevEmptyID ( );
__declspec(implementation_key(1213)) enum zReturnCode INode::GetLibrary ( int ID );
__declspec(implementation_key(1214)) enum zReturnCode INode::PutLibrary ( );
__declspec(implementation_key(1215)) enum zReturnCode INode::DeleteLibrary ( int ID );
__declspec(implementation_key(1216)) enum zReturnCode INode::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(1217)) enum zReturnCode INode::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(1218)) int INode::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(1219)) enum zReturnCode INode::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(1220)) enum zReturnCode INode::NextInSet ( int nSetID );
__declspec(implementation_key(1221)) enum zReturnCode INode::FirstInSet ( int nSetID );
__declspec(implementation_key(1222)) int INode::CountSet ( );
__declspec(implementation_key(1223)) enum zReturnCode INode::NextExistingInSet ( int nSetID );
__declspec(implementation_key(1224)) enum zReturnCode INode::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(1225)) double INode::Getx ( );
__declspec(implementation_key(1226)) void INode::Putx ( double _val );
__declspec(implementation_key(1227)) double INode::Gety ( );
__declspec(implementation_key(1228)) void INode::Puty ( double _val );
__declspec(implementation_key(1229)) double INode::Getz ( );
__declspec(implementation_key(1230)) void INode::Putz ( double _val );
__declspec(implementation_key(1231)) int INode::Getlayer ( );
__declspec(implementation_key(1232)) void INode::Putlayer ( int _val );
__declspec(implementation_key(1233)) enum zColor INode::Getcolor ( );
__declspec(implementation_key(1234)) void INode::Putcolor ( enum zColor _val );
__declspec(implementation_key(1235)) enum zNodeType INode::Gettype ( );
__declspec(implementation_key(1236)) void INode::Puttype ( enum zNodeType _val );
__declspec(implementation_key(1237)) int INode::GetdefCSys ( );
__declspec(implementation_key(1238)) void INode::PutdefCSys ( int _val );
__declspec(implementation_key(1239)) int INode::GetoutCSys ( );
__declspec(implementation_key(1240)) void INode::PutoutCSys ( int _val );
__declspec(implementation_key(1241)) _variant_t INode::GetvpermBC ( );
__declspec(implementation_key(1242)) void INode::PutvpermBC ( const _variant_t & _val );
__declspec(implementation_key(1243)) int INode::GetsuperelementID ( );
__declspec(implementation_key(1244)) void INode::PutsuperelementID ( int _val );
__declspec(implementation_key(1245)) _variant_t INode::Getxyz ( );
__declspec(implementation_key(1246)) void INode::Putxyz ( const _variant_t & _val );
__declspec(implementation_key(1247)) int INode::GetNumberOfElements ( );
__declspec(implementation_key(1248)) void INode::PutNumberOfElements ( int _val );
__declspec(implementation_key(1249)) int INode::GetNumberOfLoads ( );
__declspec(implementation_key(1250)) void INode::PutNumberOfLoads ( int _val );
__declspec(implementation_key(1251)) int INode::GetNumberOfConstraints ( );
__declspec(implementation_key(1252)) void INode::PutNumberOfConstraints ( int _val );
__declspec(implementation_key(1253)) int INode::GetID ( );
__declspec(implementation_key(1254)) void INode::PutID ( int _val );
__declspec(implementation_key(1255)) int INode::GetsetID ( );
__declspec(implementation_key(1256)) void INode::PutsetID ( int _val );
__declspec(implementation_key(1257)) int INode::GetActive ( );
__declspec(implementation_key(1258)) void INode::PutActive ( int _val );
__declspec(implementation_key(1259)) VARIANT_BOOL IAnalysisMgr::GetNasNonlinEpsFlag ( int nVectorIndex );
__declspec(implementation_key(1260)) void IAnalysisMgr::PutNasNonlinEpsFlag ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(1261)) double IAnalysisMgr::GetNasNonlinEps ( int nVectorIndex );
__declspec(implementation_key(1262)) void IAnalysisMgr::PutNasNonlinEps ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(1263)) double IAnalysisMgr::GetNasModeFreqRange ( int nVectorIndex );
__declspec(implementation_key(1264)) void IAnalysisMgr::PutNasModeFreqRange ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(1265)) int IAnalysisMgr::GetNasModeXYRequest ( int nVectorIndex );
__declspec(implementation_key(1266)) void IAnalysisMgr::PutNasModeXYRequest ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(1267)) int IAnalysisMgr::GetNasRandomRequest ( int nVectorIndex );
__declspec(implementation_key(1268)) void IAnalysisMgr::PutNasRandomRequest ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(1269)) VARIANT_BOOL IAnalysisMgr::GetNasRandXYRequest ( int nVectorIndex );
__declspec(implementation_key(1270)) void IAnalysisMgr::PutNasRandXYRequest ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(1271)) VARIANT_BOOL IAnalysisMgr::GetNasGenSpecRequest ( int nVectorIndex );
__declspec(implementation_key(1272)) void IAnalysisMgr::PutNasGenSpecRequest ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(1273)) VARIANT_BOOL IAnalysisMgr::GetNasGCheckTest ( int nVectorIndex );
__declspec(implementation_key(1274)) void IAnalysisMgr::PutNasGCheckTest ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(1275)) double IAnalysisMgr::GetNasGCheckTol ( int nVectorIndex );
__declspec(implementation_key(1276)) void IAnalysisMgr::PutNasGCheckTol ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(1277)) int IAnalysisMgr::GetNasGCheckMsg ( int nVectorIndex );
__declspec(implementation_key(1278)) void IAnalysisMgr::PutNasGCheckMsg ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(1279)) VARIANT_BOOL IAnalysisMgr::GetNasMCheckWtDOFSet ( int nVectorIndex );
__declspec(implementation_key(1280)) void IAnalysisMgr::PutNasMCheckWtDOFSet ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(1281)) VARIANT_BOOL IAnalysisMgr::GetNasMCheckGrndDOFSet ( int nVectorIndex );
__declspec(implementation_key(1282)) void IAnalysisMgr::PutNasMCheckGrndDOFSet ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(1283)) double IAnalysisMgr::GetFStDynFreqRange ( int nVectorIndex );
__declspec(implementation_key(1284)) void IAnalysisMgr::PutFStDynFreqRange ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(1285)) double IAnalysisMgr::GetNasModeImagFreqRange ( int nVectorIndex );
__declspec(implementation_key(1286)) void IAnalysisMgr::PutNasModeImagFreqRange ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(1287)) VARIANT_BOOL IAnalysisMgr::GetNasDdamCoeffOn ( int nVectorIndex );
__declspec(implementation_key(1288)) void IAnalysisMgr::PutNasDdamCoeffOn ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(1289)) double IAnalysisMgr::GetNasDdamCoeffVal ( int nVectorIndex );
__declspec(implementation_key(1290)) void IAnalysisMgr::PutNasDdamCoeffVal ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(1291)) double IAnalysisMgr::GetNasDynKeepFreq ( int nVectorIndex );
__declspec(implementation_key(1292)) void IAnalysisMgr::PutNasDynKeepFreq ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(1293)) VARIANT_BOOL IAnalysisMgr::GetNasGCheckTest2 ( int nVectorIndex );
__declspec(implementation_key(1294)) void IAnalysisMgr::PutNasGCheckTest2 ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(1295)) double IAnalysisMgr::GetNasGCheckTol2 ( int nVectorIndex );
__declspec(implementation_key(1296)) void IAnalysisMgr::PutNasGCheckTol2 ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(1297)) int IAnalysisMgr::GetNasGCheckMsg2 ( int nVectorIndex );
__declspec(implementation_key(1298)) void IAnalysisMgr::PutNasGCheckMsg2 ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(1299)) double IAnalysisMgr::GetNasBulkAlpha1Val ( int nVectorIndex );
__declspec(implementation_key(1300)) void IAnalysisMgr::PutNasBulkAlpha1Val ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(1301)) double IAnalysisMgr::GetNasBulkAlpha2Val ( int nVectorIndex );
__declspec(implementation_key(1302)) void IAnalysisMgr::PutNasBulkAlpha2Val ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(1303)) int IAnalysisMgr::GetBCSet ( int nVectorIndex );
__declspec(implementation_key(1304)) void IAnalysisMgr::PutBCSet ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(1305)) int IAnalysisMgr::GetOutput ( int nVectorIndex );
__declspec(implementation_key(1306)) void IAnalysisMgr::PutOutput ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(1307)) VARIANT_BOOL IAnalysisMgr::GetNasCnlConvergenceFlags ( int nVectorIndex );
__declspec(implementation_key(1308)) void IAnalysisMgr::PutNasCnlConvergenceFlags ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(1309)) double IAnalysisMgr::GetNasCnlConvergenceValue ( int nVectorIndex );
__declspec(implementation_key(1310)) void IAnalysisMgr::PutNasCnlConvergenceValue ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(1311)) VARIANT_BOOL IAnalysisMgr::GetMSCNasCnlConvergenceFlags ( int nVectorIndex );
__declspec(implementation_key(1312)) void IAnalysisMgr::PutMSCNasCnlConvergenceFlags ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(1313)) enum zReturnCode IAnalysisMgr::GetText ( int textID, BSTR * text );
__declspec(implementation_key(1314)) enum zReturnCode IAnalysisMgr::PutText ( int textID, _bstr_t text );
__declspec(implementation_key(1315)) enum zReturnCode IAnalysisMgr::GetCorrelate ( int * Count, VARIANT * excitedCase, VARIANT * appliedCase, VARIANT * realScale, VARIANT * imagScale, VARIANT * realFunc, VARIANT * imagFunc );
__declspec(implementation_key(1316)) enum zReturnCode IAnalysisMgr::PutCorrelate ( int Count, const _variant_t & excitedCase, const _variant_t & appliedCase, const _variant_t & realScale, const _variant_t & imagScale, const _variant_t & realFunc, const _variant_t & imagFunc );
__declspec(implementation_key(1317)) enum zReturnCode IAnalysisMgr::Get ( int entID );
__declspec(implementation_key(1318)) enum zReturnCode IAnalysisMgr::Put ( int entID );
__declspec(implementation_key(1319)) IAnalysisCasePtr IAnalysisMgr::Case ( int entID );
__declspec(implementation_key(1320)) enum zReturnCode IAnalysisMgr::Analyze ( int entID );
__declspec(implementation_key(1321)) enum zReturnCode IAnalysisMgr::AnalyzeMultiple ( int setID );
__declspec(implementation_key(1322)) enum zReturnCode IAnalysisMgr::ClearAnalysisQueue ( );
__declspec(implementation_key(1323)) enum zReturnCode IAnalysisMgr::GetCorrelate2 ( int * Count, VARIANT * excitedCase, VARIANT * appliedCase, VARIANT * realScale, VARIANT * imagScale, VARIANT * realFunc, VARIANT * imagFunc, VARIANT * realInterp, VARIANT * imagInterp );
__declspec(implementation_key(1324)) enum zReturnCode IAnalysisMgr::PutCorrelate2 ( int Count, const _variant_t & excitedCase, const _variant_t & appliedCase, const _variant_t & realScale, const _variant_t & imagScale, const _variant_t & realFunc, const _variant_t & imagFunc, const _variant_t & realInterp, const _variant_t & imagInterp );
__declspec(implementation_key(1325)) enum zReturnCode IAnalysisMgr::Preview ( int entID );
__declspec(implementation_key(1326)) enum zReturnCode IAnalysisMgr::GetStandardTrim ( VARIANT * useTrim, VARIANT * TrimID, VARIANT * TrimVal );
__declspec(implementation_key(1327)) enum zReturnCode IAnalysisMgr::PutStandardTrim ( const _variant_t & useTrim, const _variant_t & TrimID, const _variant_t & TrimVal );
__declspec(implementation_key(1328)) enum zReturnCode IAnalysisMgr::GetTrimControlSurf ( VARIANT * useTrim, VARIANT * TrimID, VARIANT * TrimVal );
__declspec(implementation_key(1329)) enum zReturnCode IAnalysisMgr::PutTrimControlSurf ( const _variant_t & useTrim, const _variant_t & TrimID, const _variant_t & TrimVal );
__declspec(implementation_key(1330)) enum zReturnCode IAnalysisMgr::GetContactTable ( int * Count, VARIANT * rowSeg, VARIANT * colSeg, VARIANT * tieType, VARIANT * distTol, VARIANT * sepForce, VARIANT * friction, VARIANT * interClose );
__declspec(implementation_key(1331)) enum zReturnCode IAnalysisMgr::PutContactTable ( int Count, const _variant_t & rowSeg, const _variant_t & colSeg, const _variant_t & tieType, const _variant_t & distTol, const _variant_t & sepForce, const _variant_t & friction, const _variant_t & interClose );
__declspec(implementation_key(1332)) enum zReturnCode IAnalysisMgr::InitAnalysisMgr ( enum zAnalysisMgrProgram analysis_program, enum zAnalysisType analysis_type, VARIANT_BOOL InitMasterCase );
__declspec(implementation_key(1333)) enum zReturnCode IAnalysisMgr::DeleteAnalysisCase ( int nSetID, int nCaseID );
__declspec(implementation_key(1334)) enum zReturnCode IAnalysisMgr::AllFreqOn ( );
__declspec(implementation_key(1335)) enum zReturnCode IAnalysisMgr::AllFreqOff ( );
__declspec(implementation_key(1336)) enum zReturnCode IAnalysisMgr::TurnOnFreq ( int freqID );
__declspec(implementation_key(1337)) enum zReturnCode IAnalysisMgr::TurnOffFreq ( int freqID );
__declspec(implementation_key(1338)) enum zReturnCode IAnalysisMgr::NextSet ( );
__declspec(implementation_key(1339)) enum zReturnCode IAnalysisMgr::PrevSet ( );
__declspec(implementation_key(1340)) enum zReturnCode IAnalysisMgr::NextEmptySet ( );
__declspec(implementation_key(1341)) enum zReturnCode IAnalysisMgr::PrevEmptySet ( );
__declspec(implementation_key(1342)) enum zReturnCode IAnalysisMgr::Exist ( int ID );
__declspec(implementation_key(1343)) enum zReturnCode IAnalysisMgr::Deletable ( int ID );
__declspec(implementation_key(1344)) enum zReturnCode IAnalysisMgr::Delete ( int ID );
__declspec(implementation_key(1345)) enum zReturnCode IAnalysisMgr::Reset ( );
__declspec(implementation_key(1346)) enum zReturnCode IAnalysisMgr::Next ( );
__declspec(implementation_key(1347)) enum zReturnCode IAnalysisMgr::Prev ( );
__declspec(implementation_key(1348)) enum zReturnCode IAnalysisMgr::First ( );
__declspec(implementation_key(1349)) enum zReturnCode IAnalysisMgr::Last ( );
__declspec(implementation_key(1350)) int IAnalysisMgr::NextID ( );
__declspec(implementation_key(1351)) int IAnalysisMgr::PrevID ( );
__declspec(implementation_key(1352)) int IAnalysisMgr::NextEmptyID ( );
__declspec(implementation_key(1353)) int IAnalysisMgr::PrevEmptyID ( );
__declspec(implementation_key(1354)) enum zReturnCode IAnalysisMgr::GetLibrary ( int ID );
__declspec(implementation_key(1355)) enum zReturnCode IAnalysisMgr::PutLibrary ( );
__declspec(implementation_key(1356)) enum zReturnCode IAnalysisMgr::DeleteLibrary ( int ID );
__declspec(implementation_key(1357)) enum zReturnCode IAnalysisMgr::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(1358)) enum zReturnCode IAnalysisMgr::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(1359)) int IAnalysisMgr::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(1360)) enum zReturnCode IAnalysisMgr::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(1361)) enum zReturnCode IAnalysisMgr::NextInSet ( int nSetID );
__declspec(implementation_key(1362)) enum zReturnCode IAnalysisMgr::FirstInSet ( int nSetID );
__declspec(implementation_key(1363)) int IAnalysisMgr::CountSet ( );
__declspec(implementation_key(1364)) enum zReturnCode IAnalysisMgr::NextExistingInSet ( int nSetID );
__declspec(implementation_key(1365)) enum zReturnCode IAnalysisMgr::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(1366)) enum zAnalysisMgrProgram IAnalysisMgr::GetSolver ( );
__declspec(implementation_key(1367)) void IAnalysisMgr::PutSolver ( enum zAnalysisMgrProgram _val );
__declspec(implementation_key(1368)) enum zAnalysisType IAnalysisMgr::GetAnalysisType ( );
__declspec(implementation_key(1369)) void IAnalysisMgr::PutAnalysisType ( enum zAnalysisType _val );
__declspec(implementation_key(1370)) _bstr_t IAnalysisMgr::Gettitle ( );
__declspec(implementation_key(1371)) void IAnalysisMgr::Puttitle ( _bstr_t _val );
__declspec(implementation_key(1372)) VARIANT_BOOL IAnalysisMgr::GetNasExecOn ( );
__declspec(implementation_key(1373)) void IAnalysisMgr::PutNasExecOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1374)) int IAnalysisMgr::GetNasExecVersion ( );
__declspec(implementation_key(1375)) void IAnalysisMgr::PutNasExecVersion ( int _val );
__declspec(implementation_key(1376)) _bstr_t IAnalysisMgr::GetNasExecOutDir ( );
__declspec(implementation_key(1377)) void IAnalysisMgr::PutNasExecOutDir ( _bstr_t _val );
__declspec(implementation_key(1378)) _bstr_t IAnalysisMgr::GetNasExecProblem ( );
__declspec(implementation_key(1379)) void IAnalysisMgr::PutNasExecProblem ( _bstr_t _val );
__declspec(implementation_key(1380)) _bstr_t IAnalysisMgr::GetNasExecSolName ( );
__declspec(implementation_key(1381)) void IAnalysisMgr::PutNasExecSolName ( _bstr_t _val );
__declspec(implementation_key(1382)) double IAnalysisMgr::GetNasExecMaxTime ( );
__declspec(implementation_key(1383)) void IAnalysisMgr::PutNasExecMaxTime ( double _val );
__declspec(implementation_key(1384)) _bstr_t IAnalysisMgr::GetNasExecDiag ( );
__declspec(implementation_key(1385)) void IAnalysisMgr::PutNasExecDiag ( _bstr_t _val );
__declspec(implementation_key(1386)) VARIANT_BOOL IAnalysisMgr::GetNasExecIterSolve ( );
__declspec(implementation_key(1387)) void IAnalysisMgr::PutNasExecIterSolve ( VARIANT_BOOL _val );
__declspec(implementation_key(1388)) int IAnalysisMgr::GetNasExecNumCPU ( );
__declspec(implementation_key(1389)) void IAnalysisMgr::PutNasExecNumCPU ( int _val );
__declspec(implementation_key(1390)) VARIANT_BOOL IAnalysisMgr::GetNasExecSaveDB ( );
__declspec(implementation_key(1391)) void IAnalysisMgr::PutNasExecSaveDB ( VARIANT_BOOL _val );
__declspec(implementation_key(1392)) VARIANT_BOOL IAnalysisMgr::GetNasExecRestart ( );
__declspec(implementation_key(1393)) void IAnalysisMgr::PutNasExecRestart ( VARIANT_BOOL _val );
__declspec(implementation_key(1394)) _bstr_t IAnalysisMgr::GetNasExecRestartDB ( );
__declspec(implementation_key(1395)) void IAnalysisMgr::PutNasExecRestartDB ( _bstr_t _val );
__declspec(implementation_key(1396)) VARIANT_BOOL IAnalysisMgr::GetNasExecSkipStandard ( );
__declspec(implementation_key(1397)) void IAnalysisMgr::PutNasExecSkipStandard ( VARIANT_BOOL _val );
__declspec(implementation_key(1398)) int IAnalysisMgr::GetNasExecStartText ( );
__declspec(implementation_key(1399)) void IAnalysisMgr::PutNasExecStartText ( int _val );
__declspec(implementation_key(1400)) int IAnalysisMgr::GetNasExecEndText ( );
__declspec(implementation_key(1401)) void IAnalysisMgr::PutNasExecEndText ( int _val );
__declspec(implementation_key(1402)) VARIANT_BOOL IAnalysisMgr::GetNasBulkOn ( );
__declspec(implementation_key(1403)) void IAnalysisMgr::PutNasBulkOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1404)) VARIANT_BOOL IAnalysisMgr::GetNasBulkAutospc ( );
__declspec(implementation_key(1405)) void IAnalysisMgr::PutNasBulkAutospc ( VARIANT_BOOL _val );
__declspec(implementation_key(1406)) VARIANT_BOOL IAnalysisMgr::GetNasBulkGrdpnt ( );
__declspec(implementation_key(1407)) void IAnalysisMgr::PutNasBulkGrdpnt ( VARIANT_BOOL _val );
__declspec(implementation_key(1408)) VARIANT_BOOL IAnalysisMgr::GetNasBulkWtmass ( );
__declspec(implementation_key(1409)) void IAnalysisMgr::PutNasBulkWtmass ( VARIANT_BOOL _val );
__declspec(implementation_key(1410)) VARIANT_BOOL IAnalysisMgr::GetNasBulkK6rot ( );
__declspec(implementation_key(1411)) void IAnalysisMgr::PutNasBulkK6rot ( VARIANT_BOOL _val );
__declspec(implementation_key(1412)) VARIANT_BOOL IAnalysisMgr::GetNasBulkMaxratio ( );
__declspec(implementation_key(1413)) void IAnalysisMgr::PutNasBulkMaxratio ( VARIANT_BOOL _val );
__declspec(implementation_key(1414)) VARIANT_BOOL IAnalysisMgr::GetNasBulkNdamp ( );
__declspec(implementation_key(1415)) void IAnalysisMgr::PutNasBulkNdamp ( VARIANT_BOOL _val );
__declspec(implementation_key(1416)) VARIANT_BOOL IAnalysisMgr::GetNasBulkInrel ( );
__declspec(implementation_key(1417)) void IAnalysisMgr::PutNasBulkInrel ( VARIANT_BOOL _val );
__declspec(implementation_key(1418)) VARIANT_BOOL IAnalysisMgr::GetNasBulkLangle ( );
__declspec(implementation_key(1419)) void IAnalysisMgr::PutNasBulkLangle ( VARIANT_BOOL _val );
__declspec(implementation_key(1420)) VARIANT_BOOL IAnalysisMgr::GetNasBulkPrgpst ( );
__declspec(implementation_key(1421)) void IAnalysisMgr::PutNasBulkPrgpst ( VARIANT_BOOL _val );
__declspec(implementation_key(1422)) VARIANT_BOOL IAnalysisMgr::GetNasBulkLgdisp ( );
__declspec(implementation_key(1423)) void IAnalysisMgr::PutNasBulkLgdisp ( VARIANT_BOOL _val );
__declspec(implementation_key(1424)) VARIANT_BOOL IAnalysisMgr::GetNasBulkDdrmmOff ( );
__declspec(implementation_key(1425)) void IAnalysisMgr::PutNasBulkDdrmmOff ( VARIANT_BOOL _val );
__declspec(implementation_key(1426)) VARIANT_BOOL IAnalysisMgr::GetNasBulkModacc ( );
__declspec(implementation_key(1427)) void IAnalysisMgr::PutNasBulkModacc ( VARIANT_BOOL _val );
__declspec(implementation_key(1428)) VARIANT_BOOL IAnalysisMgr::GetNasBulkResVec ( );
__declspec(implementation_key(1429)) void IAnalysisMgr::PutNasBulkResVec ( VARIANT_BOOL _val );
__declspec(implementation_key(1430)) int IAnalysisMgr::GetNasBulkGrdpntVal ( );
__declspec(implementation_key(1431)) void IAnalysisMgr::PutNasBulkGrdpntVal ( int _val );
__declspec(implementation_key(1432)) double IAnalysisMgr::GetNasBulkWtmassVal ( );
__declspec(implementation_key(1433)) void IAnalysisMgr::PutNasBulkWtmassVal ( double _val );
__declspec(implementation_key(1434)) double IAnalysisMgr::GetNasBulkK6rotVal ( );
__declspec(implementation_key(1435)) void IAnalysisMgr::PutNasBulkK6rotVal ( double _val );
__declspec(implementation_key(1436)) double IAnalysisMgr::GetNasBulkMaxratioVal ( );
__declspec(implementation_key(1437)) void IAnalysisMgr::PutNasBulkMaxratioVal ( double _val );
__declspec(implementation_key(1438)) double IAnalysisMgr::GetNasBulkNdampVal ( );
__declspec(implementation_key(1439)) void IAnalysisMgr::PutNasBulkNdampVal ( double _val );
__declspec(implementation_key(1440)) int IAnalysisMgr::GetNasBulkLargeField ( );
__declspec(implementation_key(1441)) void IAnalysisMgr::PutNasBulkLargeField ( int _val );
__declspec(implementation_key(1442)) VARIANT_BOOL IAnalysisMgr::GetNasBulkQuadr ( );
__declspec(implementation_key(1443)) void IAnalysisMgr::PutNasBulkQuadr ( VARIANT_BOOL _val );
__declspec(implementation_key(1444)) VARIANT_BOOL IAnalysisMgr::GetNasBulkSkipStandard ( );
__declspec(implementation_key(1445)) void IAnalysisMgr::PutNasBulkSkipStandard ( VARIANT_BOOL _val );
__declspec(implementation_key(1446)) int IAnalysisMgr::GetNasBulkStartText ( );
__declspec(implementation_key(1447)) void IAnalysisMgr::PutNasBulkStartText ( int _val );
__declspec(implementation_key(1448)) int IAnalysisMgr::GetNasBulkEndText ( );
__declspec(implementation_key(1449)) void IAnalysisMgr::PutNasBulkEndText ( int _val );
__declspec(implementation_key(1450)) int IAnalysisMgr::GetNasBulkGroupID ( );
__declspec(implementation_key(1451)) void IAnalysisMgr::PutNasBulkGroupID ( int _val );
__declspec(implementation_key(1452)) VARIANT_BOOL IAnalysisMgr::GetNasNonlinOn ( );
__declspec(implementation_key(1453)) void IAnalysisMgr::PutNasNonlinOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1454)) int IAnalysisMgr::GetNasNonlinNDT ( );
__declspec(implementation_key(1455)) void IAnalysisMgr::PutNasNonlinNDT ( int _val );
__declspec(implementation_key(1456)) double IAnalysisMgr::GetNasNonlinDT ( );
__declspec(implementation_key(1457)) void IAnalysisMgr::PutNasNonlinDT ( double _val );
__declspec(implementation_key(1458)) int IAnalysisMgr::GetNasNonlinNO ( );
__declspec(implementation_key(1459)) void IAnalysisMgr::PutNasNonlinNO ( int _val );
__declspec(implementation_key(1460)) int IAnalysisMgr::GetNasNonlinMaxIter ( );
__declspec(implementation_key(1461)) void IAnalysisMgr::PutNasNonlinMaxIter ( int _val );
__declspec(implementation_key(1462)) VARIANT_BOOL IAnalysisMgr::GetNasModeOn ( );
__declspec(implementation_key(1463)) void IAnalysisMgr::PutNasModeOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1464)) int IAnalysisMgr::GetNasModeEigrSet ( );
__declspec(implementation_key(1465)) void IAnalysisMgr::PutNasModeEigrSet ( int _val );
__declspec(implementation_key(1466)) int IAnalysisMgr::GetNasModeMethod ( );
__declspec(implementation_key(1467)) void IAnalysisMgr::PutNasModeMethod ( int _val );
__declspec(implementation_key(1468)) VARIANT_BOOL IAnalysisMgr::GetNasModeSolutionType ( );
__declspec(implementation_key(1469)) void IAnalysisMgr::PutNasModeSolutionType ( VARIANT_BOOL _val );
__declspec(implementation_key(1470)) int IAnalysisMgr::GetNasModeEstRoots ( );
__declspec(implementation_key(1471)) void IAnalysisMgr::PutNasModeEstRoots ( int _val );
__declspec(implementation_key(1472)) int IAnalysisMgr::GetNasModeDesiredRoots ( );
__declspec(implementation_key(1473)) void IAnalysisMgr::PutNasModeDesiredRoots ( int _val );
__declspec(implementation_key(1474)) int IAnalysisMgr::GetNasModeNormOpt ( );
__declspec(implementation_key(1475)) void IAnalysisMgr::PutNasModeNormOpt ( int _val );
__declspec(implementation_key(1476)) int IAnalysisMgr::GetNasModeNormNode ( );
__declspec(implementation_key(1477)) void IAnalysisMgr::PutNasModeNormNode ( int _val );
__declspec(implementation_key(1478)) int IAnalysisMgr::GetNasModeNormDOF ( );
__declspec(implementation_key(1479)) void IAnalysisMgr::PutNasModeNormDOF ( int _val );
__declspec(implementation_key(1480)) int IAnalysisMgr::GetNasModeMassForm ( );
__declspec(implementation_key(1481)) void IAnalysisMgr::PutNasModeMassForm ( int _val );
__declspec(implementation_key(1482)) VARIANT_BOOL IAnalysisMgr::GetNasModeXYOn ( );
__declspec(implementation_key(1483)) void IAnalysisMgr::PutNasModeXYOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1484)) int IAnalysisMgr::GetNasModeXYRefNode ( );
__declspec(implementation_key(1485)) void IAnalysisMgr::PutNasModeXYRefNode ( int _val );
__declspec(implementation_key(1486)) VARIANT_BOOL IAnalysisMgr::GetNasRandomOn ( );
__declspec(implementation_key(1487)) void IAnalysisMgr::PutNasRandomOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1488)) VARIANT_BOOL IAnalysisMgr::GetNasRandXYOn ( );
__declspec(implementation_key(1489)) void IAnalysisMgr::PutNasRandXYOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1490)) VARIANT_BOOL IAnalysisMgr::GetNasRandXYSummary ( );
__declspec(implementation_key(1491)) void IAnalysisMgr::PutNasRandXYSummary ( VARIANT_BOOL _val );
__declspec(implementation_key(1492)) int IAnalysisMgr::GetNasRandXYNodeGroup ( );
__declspec(implementation_key(1493)) void IAnalysisMgr::PutNasRandXYNodeGroup ( int _val );
__declspec(implementation_key(1494)) int IAnalysisMgr::GetNasRandXYElemGroup ( );
__declspec(implementation_key(1495)) void IAnalysisMgr::PutNasRandXYElemGroup ( int _val );
__declspec(implementation_key(1496)) VARIANT_BOOL IAnalysisMgr::GetNasGenSpecOn ( );
__declspec(implementation_key(1497)) void IAnalysisMgr::PutNasGenSpecOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1498)) VARIANT_BOOL IAnalysisMgr::GetNasGenSpecAbsolute ( );
__declspec(implementation_key(1499)) void IAnalysisMgr::PutNasGenSpecAbsolute ( VARIANT_BOOL _val );
__declspec(implementation_key(1500)) int IAnalysisMgr::GetNasGenSpecNodeGroup ( );
__declspec(implementation_key(1501)) void IAnalysisMgr::PutNasGenSpecNodeGroup ( int _val );
__declspec(implementation_key(1502)) VARIANT_BOOL IAnalysisMgr::GetNasAppSpecOn ( );
__declspec(implementation_key(1503)) void IAnalysisMgr::PutNasAppSpecOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1504)) int IAnalysisMgr::GetNasAppSpecType ( );
__declspec(implementation_key(1505)) void IAnalysisMgr::PutNasAppSpecType ( int _val );
__declspec(implementation_key(1506)) int IAnalysisMgr::GetNasAppSpecFunction ( );
__declspec(implementation_key(1507)) void IAnalysisMgr::PutNasAppSpecFunction ( int _val );
__declspec(implementation_key(1508)) double IAnalysisMgr::GetNasAppSpecScale ( );
__declspec(implementation_key(1509)) void IAnalysisMgr::PutNasAppSpecScale ( double _val );
__declspec(implementation_key(1510)) int IAnalysisMgr::GetNasAppSpecMethod ( );
__declspec(implementation_key(1511)) void IAnalysisMgr::PutNasAppSpecMethod ( int _val );
__declspec(implementation_key(1512)) double IAnalysisMgr::GetNasAppSpecClose ( );
__declspec(implementation_key(1513)) void IAnalysisMgr::PutNasAppSpecClose ( double _val );
__declspec(implementation_key(1514)) int IAnalysisMgr::GetNasAppSpecSuport ( );
__declspec(implementation_key(1515)) void IAnalysisMgr::PutNasAppSpecSuport ( int _val );
__declspec(implementation_key(1516)) int IAnalysisMgr::GetNasAppSpecDamp ( );
__declspec(implementation_key(1517)) void IAnalysisMgr::PutNasAppSpecDamp ( int _val );
__declspec(implementation_key(1518)) VARIANT_BOOL IAnalysisMgr::GetNasGCheckOn ( );
__declspec(implementation_key(1519)) void IAnalysisMgr::PutNasGCheckOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1520)) VARIANT_BOOL IAnalysisMgr::GetNasGCheckSummary ( );
__declspec(implementation_key(1521)) void IAnalysisMgr::PutNasGCheckSummary ( VARIANT_BOOL _val );
__declspec(implementation_key(1522)) int IAnalysisMgr::GetNasGCheckMsgLimit ( );
__declspec(implementation_key(1523)) void IAnalysisMgr::PutNasGCheckMsgLimit ( int _val );
__declspec(implementation_key(1524)) VARIANT_BOOL IAnalysisMgr::GetNasMCheckOn ( );
__declspec(implementation_key(1525)) void IAnalysisMgr::PutNasMCheckOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1526)) VARIANT_BOOL IAnalysisMgr::GetNasMCheckWtCG ( );
__declspec(implementation_key(1527)) void IAnalysisMgr::PutNasMCheckWtCG ( VARIANT_BOOL _val );
__declspec(implementation_key(1528)) int IAnalysisMgr::GetNasMCheckWtRefNode ( );
__declspec(implementation_key(1529)) void IAnalysisMgr::PutNasMCheckWtRefNode ( int _val );
__declspec(implementation_key(1530)) int IAnalysisMgr::GetNasMCheckWtUnits ( );
__declspec(implementation_key(1531)) void IAnalysisMgr::PutNasMCheckWtUnits ( int _val );
__declspec(implementation_key(1532)) int IAnalysisMgr::GetNasMCheckGrndRefNode ( );
__declspec(implementation_key(1533)) void IAnalysisMgr::PutNasMCheckGrndRefNode ( int _val );
__declspec(implementation_key(1534)) double IAnalysisMgr::GetNasMCheckMaxStrnEn ( );
__declspec(implementation_key(1535)) void IAnalysisMgr::PutNasMCheckMaxStrnEn ( double _val );
__declspec(implementation_key(1536)) VARIANT_BOOL IAnalysisMgr::GetNasMCheckDataRec ( );
__declspec(implementation_key(1537)) void IAnalysisMgr::PutNasMCheckDataRec ( VARIANT_BOOL _val );
__declspec(implementation_key(1538)) double IAnalysisMgr::GetNasMCheckDataTol ( );
__declspec(implementation_key(1539)) void IAnalysisMgr::PutNasMCheckDataTol ( double _val );
__declspec(implementation_key(1540)) VARIANT_BOOL IAnalysisMgr::GetAbaModOn ( );
__declspec(implementation_key(1541)) void IAnalysisMgr::PutAbaModOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1542)) VARIANT_BOOL IAnalysisMgr::GetAbaModTitleSetNames ( );
__declspec(implementation_key(1543)) void IAnalysisMgr::PutAbaModTitleSetNames ( VARIANT_BOOL _val );
__declspec(implementation_key(1544)) VARIANT_BOOL IAnalysisMgr::GetAbaModGroupsAsSets ( );
__declspec(implementation_key(1545)) void IAnalysisMgr::PutAbaModGroupsAsSets ( VARIANT_BOOL _val );
__declspec(implementation_key(1546)) VARIANT_BOOL IAnalysisMgr::GetAbaModSkipStandard ( );
__declspec(implementation_key(1547)) void IAnalysisMgr::PutAbaModSkipStandard ( VARIANT_BOOL _val );
__declspec(implementation_key(1548)) int IAnalysisMgr::GetAbaModVersion ( );
__declspec(implementation_key(1549)) void IAnalysisMgr::PutAbaModVersion ( int _val );
__declspec(implementation_key(1550)) int IAnalysisMgr::GetAbaModStartText ( );
__declspec(implementation_key(1551)) void IAnalysisMgr::PutAbaModStartText ( int _val );
__declspec(implementation_key(1552)) int IAnalysisMgr::GetAbaModEndText ( );
__declspec(implementation_key(1553)) void IAnalysisMgr::PutAbaModEndText ( int _val );
__declspec(implementation_key(1554)) VARIANT_BOOL IAnalysisMgr::GetAnsModOn ( );
__declspec(implementation_key(1555)) void IAnalysisMgr::PutAnsModOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1556)) VARIANT_BOOL IAnalysisMgr::GetAnsModTitleSetNames ( );
__declspec(implementation_key(1557)) void IAnalysisMgr::PutAnsModTitleSetNames ( VARIANT_BOOL _val );
__declspec(implementation_key(1558)) VARIANT_BOOL IAnalysisMgr::GetAnsModGroupsAsSets ( );
__declspec(implementation_key(1559)) void IAnalysisMgr::PutAnsModGroupsAsSets ( VARIANT_BOOL _val );
__declspec(implementation_key(1560)) VARIANT_BOOL IAnalysisMgr::GetAnsModSkipStandard ( );
__declspec(implementation_key(1561)) void IAnalysisMgr::PutAnsModSkipStandard ( VARIANT_BOOL _val );
__declspec(implementation_key(1562)) int IAnalysisMgr::GetAnsModStartText ( );
__declspec(implementation_key(1563)) void IAnalysisMgr::PutAnsModStartText ( int _val );
__declspec(implementation_key(1564)) int IAnalysisMgr::GetAnsModEndText ( );
__declspec(implementation_key(1565)) void IAnalysisMgr::PutAnsModEndText ( int _val );
__declspec(implementation_key(1566)) _bstr_t IAnalysisMgr::GetAnsModTitle ( );
__declspec(implementation_key(1567)) void IAnalysisMgr::PutAnsModTitle ( _bstr_t _val );
__declspec(implementation_key(1568)) VARIANT_BOOL IAnalysisMgr::GetAnsModWriteSolCmd ( );
__declspec(implementation_key(1569)) void IAnalysisMgr::PutAnsModWriteSolCmd ( VARIANT_BOOL _val );
__declspec(implementation_key(1570)) VARIANT_BOOL IAnalysisMgr::GetAnsModWriteIter ( );
__declspec(implementation_key(1571)) void IAnalysisMgr::PutAnsModWriteIter ( VARIANT_BOOL _val );
__declspec(implementation_key(1572)) VARIANT_BOOL IAnalysisMgr::GetAnsModWriteLargeDef ( );
__declspec(implementation_key(1573)) void IAnalysisMgr::PutAnsModWriteLargeDef ( VARIANT_BOOL _val );
__declspec(implementation_key(1574)) int IAnalysisMgr::GetAnsModMemory ( );
__declspec(implementation_key(1575)) void IAnalysisMgr::PutAnsModMemory ( int _val );
__declspec(implementation_key(1576)) int IAnalysisMgr::GetAnsModVersion ( );
__declspec(implementation_key(1577)) void IAnalysisMgr::PutAnsModVersion ( int _val );
__declspec(implementation_key(1578)) VARIANT_BOOL IAnalysisMgr::GetAnsRandOn ( );
__declspec(implementation_key(1579)) void IAnalysisMgr::PutAnsRandOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1580)) VARIANT_BOOL IAnalysisMgr::GetAnsRandDisp ( );
__declspec(implementation_key(1581)) void IAnalysisMgr::PutAnsRandDisp ( VARIANT_BOOL _val );
__declspec(implementation_key(1582)) VARIANT_BOOL IAnalysisMgr::GetAnsRandVel ( );
__declspec(implementation_key(1583)) void IAnalysisMgr::PutAnsRandVel ( VARIANT_BOOL _val );
__declspec(implementation_key(1584)) VARIANT_BOOL IAnalysisMgr::GetAnsRandAccel ( );
__declspec(implementation_key(1585)) void IAnalysisMgr::PutAnsRandAccel ( VARIANT_BOOL _val );
__declspec(implementation_key(1586)) VARIANT_BOOL IAnalysisMgr::GetAnsRandDispRelative ( );
__declspec(implementation_key(1587)) void IAnalysisMgr::PutAnsRandDispRelative ( VARIANT_BOOL _val );
__declspec(implementation_key(1588)) VARIANT_BOOL IAnalysisMgr::GetAnsRandVelRelative ( );
__declspec(implementation_key(1589)) void IAnalysisMgr::PutAnsRandVelRelative ( VARIANT_BOOL _val );
__declspec(implementation_key(1590)) VARIANT_BOOL IAnalysisMgr::GetAnsRandAccelRelative ( );
__declspec(implementation_key(1591)) void IAnalysisMgr::PutAnsRandAccelRelative ( VARIANT_BOOL _val );
__declspec(implementation_key(1592)) VARIANT_BOOL IAnalysisMgr::GetFStFilOn ( );
__declspec(implementation_key(1593)) void IAnalysisMgr::PutFStFilOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1594)) _bstr_t IAnalysisMgr::GetFStFilLogFile ( );
__declspec(implementation_key(1595)) void IAnalysisMgr::PutFStFilLogFile ( _bstr_t _val );
__declspec(implementation_key(1596)) VARIANT_BOOL IAnalysisMgr::GetFStFilKeepLogFile ( );
__declspec(implementation_key(1597)) void IAnalysisMgr::PutFStFilKeepLogFile ( VARIANT_BOOL _val );
__declspec(implementation_key(1598)) VARIANT_BOOL IAnalysisMgr::GetFStFilEchoLogFile ( );
__declspec(implementation_key(1599)) void IAnalysisMgr::PutFStFilEchoLogFile ( VARIANT_BOOL _val );
__declspec(implementation_key(1600)) _bstr_t IAnalysisMgr::GetFStFilHyper1 ( );
__declspec(implementation_key(1601)) void IAnalysisMgr::PutFStFilHyper1 ( _bstr_t _val );
__declspec(implementation_key(1602)) _bstr_t IAnalysisMgr::GetFStFilHyper2 ( );
__declspec(implementation_key(1603)) void IAnalysisMgr::PutFStFilHyper2 ( _bstr_t _val );
__declspec(implementation_key(1604)) VARIANT_BOOL IAnalysisMgr::GetFStFilKeepHyper ( );
__declspec(implementation_key(1605)) void IAnalysisMgr::PutFStFilKeepHyper ( VARIANT_BOOL _val );
__declspec(implementation_key(1606)) _bstr_t IAnalysisMgr::GetFStFilScratch1 ( );
__declspec(implementation_key(1607)) void IAnalysisMgr::PutFStFilScratch1 ( _bstr_t _val );
__declspec(implementation_key(1608)) _bstr_t IAnalysisMgr::GetFStFilScratch2 ( );
__declspec(implementation_key(1609)) void IAnalysisMgr::PutFStFilScratch2 ( _bstr_t _val );
__declspec(implementation_key(1610)) VARIANT_BOOL IAnalysisMgr::GetFStHeatOn ( );
__declspec(implementation_key(1611)) void IAnalysisMgr::PutFStHeatOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1612)) double IAnalysisMgr::GetFStHeatTempTol ( );
__declspec(implementation_key(1613)) void IAnalysisMgr::PutFStHeatTempTol ( double _val );
__declspec(implementation_key(1614)) int IAnalysisMgr::GetFStHeatConvergeType ( );
__declspec(implementation_key(1615)) void IAnalysisMgr::PutFStHeatConvergeType ( int _val );
__declspec(implementation_key(1616)) int IAnalysisMgr::GetFStHeatMaxIter ( );
__declspec(implementation_key(1617)) void IAnalysisMgr::PutFStHeatMaxIter ( int _val );
__declspec(implementation_key(1618)) VARIANT_BOOL IAnalysisMgr::GetFStDynOn ( );
__declspec(implementation_key(1619)) void IAnalysisMgr::PutFStDynOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1620)) int IAnalysisMgr::GetFStDynSolMethod ( );
__declspec(implementation_key(1621)) void IAnalysisMgr::PutFStDynSolMethod ( int _val );
__declspec(implementation_key(1622)) VARIANT_BOOL IAnalysisMgr::GetFStDynMassForm ( );
__declspec(implementation_key(1623)) void IAnalysisMgr::PutFStDynMassForm ( VARIANT_BOOL _val );
__declspec(implementation_key(1624)) VARIANT_BOOL IAnalysisMgr::GetFStDynModalDamp ( );
__declspec(implementation_key(1625)) void IAnalysisMgr::PutFStDynModalDamp ( VARIANT_BOOL _val );
__declspec(implementation_key(1626)) VARIANT_BOOL IAnalysisMgr::GetFStDynModalNorm ( );
__declspec(implementation_key(1627)) void IAnalysisMgr::PutFStDynModalNorm ( VARIANT_BOOL _val );
__declspec(implementation_key(1628)) int IAnalysisMgr::GetFStDynNumModes ( );
__declspec(implementation_key(1629)) void IAnalysisMgr::PutFStDynNumModes ( int _val );
__declspec(implementation_key(1630)) int IAnalysisMgr::GetFStDynRigidModes ( );
__declspec(implementation_key(1631)) void IAnalysisMgr::PutFStDynRigidModes ( int _val );
__declspec(implementation_key(1632)) int IAnalysisMgr::GetFStDynFreqMethod ( );
__declspec(implementation_key(1633)) void IAnalysisMgr::PutFStDynFreqMethod ( int _val );
__declspec(implementation_key(1634)) int IAnalysisMgr::GetFStDynMassDir ( );
__declspec(implementation_key(1635)) void IAnalysisMgr::PutFStDynMassDir ( int _val );
__declspec(implementation_key(1636)) double IAnalysisMgr::GetFStDynMassTol ( );
__declspec(implementation_key(1637)) void IAnalysisMgr::PutFStDynMassTol ( double _val );
__declspec(implementation_key(1638)) int IAnalysisMgr::GetFStDynIterVec ( );
__declspec(implementation_key(1639)) void IAnalysisMgr::PutFStDynIterVec ( int _val );
__declspec(implementation_key(1640)) int IAnalysisMgr::GetFStDynMaxIter ( );
__declspec(implementation_key(1641)) void IAnalysisMgr::PutFStDynMaxIter ( int _val );
__declspec(implementation_key(1642)) int IAnalysisMgr::GetFStDynSigDigits ( );
__declspec(implementation_key(1643)) void IAnalysisMgr::PutFStDynSigDigits ( int _val );
__declspec(implementation_key(1644)) VARIANT_BOOL IAnalysisMgr::GetFStSolOn ( );
__declspec(implementation_key(1645)) void IAnalysisMgr::PutFStSolOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1646)) VARIANT_BOOL IAnalysisMgr::GetFStSolIter ( );
__declspec(implementation_key(1647)) void IAnalysisMgr::PutFStSolIter ( VARIANT_BOOL _val );
__declspec(implementation_key(1648)) double IAnalysisMgr::GetFStSolIterConvTol ( );
__declspec(implementation_key(1649)) void IAnalysisMgr::PutFStSolIterConvTol ( double _val );
__declspec(implementation_key(1650)) int IAnalysisMgr::GetFStSolIterMaxIter ( );
__declspec(implementation_key(1651)) void IAnalysisMgr::PutFStSolIterMaxIter ( int _val );
__declspec(implementation_key(1652)) int IAnalysisMgr::GetFStSolMemIterMax ( );
__declspec(implementation_key(1653)) void IAnalysisMgr::PutFStSolMemIterMax ( int _val );
__declspec(implementation_key(1654)) int IAnalysisMgr::GetFStSolMemVirtMax ( );
__declspec(implementation_key(1655)) void IAnalysisMgr::PutFStSolMemVirtMax ( int _val );
__declspec(implementation_key(1656)) int IAnalysisMgr::GetFStSolMemAppPct ( );
__declspec(implementation_key(1657)) void IAnalysisMgr::PutFStSolMemAppPct ( int _val );
__declspec(implementation_key(1658)) int IAnalysisMgr::GetFStSolMemFortranPct ( );
__declspec(implementation_key(1659)) void IAnalysisMgr::PutFStSolMemFortranPct ( int _val );
__declspec(implementation_key(1660)) VARIANT_BOOL IAnalysisMgr::GetFStSolStressStiff ( );
__declspec(implementation_key(1661)) void IAnalysisMgr::PutFStSolStressStiff ( VARIANT_BOOL _val );
__declspec(implementation_key(1662)) VARIANT_BOOL IAnalysisMgr::GetFStSolSpinSoft ( );
__declspec(implementation_key(1663)) void IAnalysisMgr::PutFStSolSpinSoft ( VARIANT_BOOL _val );
__declspec(implementation_key(1664)) int IAnalysisMgr::GetFStSolStiffSoftLoad ( );
__declspec(implementation_key(1665)) void IAnalysisMgr::PutFStSolStiffSoftLoad ( int _val );
__declspec(implementation_key(1666)) int IAnalysisMgr::GetFStSolShellAuto ( );
__declspec(implementation_key(1667)) void IAnalysisMgr::PutFStSolShellAuto ( int _val );
__declspec(implementation_key(1668)) VARIANT_BOOL IAnalysisMgr::GetFStSolSingularity ( );
__declspec(implementation_key(1669)) void IAnalysisMgr::PutFStSolSingularity ( VARIANT_BOOL _val );
__declspec(implementation_key(1670)) VARIANT_BOOL IAnalysisMgr::GetFStSolVerification ( );
__declspec(implementation_key(1671)) void IAnalysisMgr::PutFStSolVerification ( VARIANT_BOOL _val );
__declspec(implementation_key(1672)) double IAnalysisMgr::GetFStSolShellAutoAng ( );
__declspec(implementation_key(1673)) void IAnalysisMgr::PutFStSolShellAutoAng ( double _val );
__declspec(implementation_key(1674)) double IAnalysisMgr::GetFStSolSingCriteria ( );
__declspec(implementation_key(1675)) void IAnalysisMgr::PutFStSolSingCriteria ( double _val );
__declspec(implementation_key(1676)) int IAnalysisMgr::GetFStSolNodeGroup ( );
__declspec(implementation_key(1677)) void IAnalysisMgr::PutFStSolNodeGroup ( int _val );
__declspec(implementation_key(1678)) int IAnalysisMgr::GetFStSolElemGroup ( );
__declspec(implementation_key(1679)) void IAnalysisMgr::PutFStSolElemGroup ( int _val );
__declspec(implementation_key(1680)) VARIANT_BOOL IAnalysisMgr::GetMarModOn ( );
__declspec(implementation_key(1681)) void IAnalysisMgr::PutMarModOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1682)) VARIANT_BOOL IAnalysisMgr::GetMarModSkipStandard ( );
__declspec(implementation_key(1683)) void IAnalysisMgr::PutMarModSkipStandard ( VARIANT_BOOL _val );
__declspec(implementation_key(1684)) int IAnalysisMgr::GetMarModStartText ( );
__declspec(implementation_key(1685)) void IAnalysisMgr::PutMarModStartText ( int _val );
__declspec(implementation_key(1686)) int IAnalysisMgr::GetMarModEndText ( );
__declspec(implementation_key(1687)) void IAnalysisMgr::PutMarModEndText ( int _val );
__declspec(implementation_key(1688)) _bstr_t IAnalysisMgr::GetMarModTitle ( );
__declspec(implementation_key(1689)) void IAnalysisMgr::PutMarModTitle ( _bstr_t _val );
__declspec(implementation_key(1690)) int IAnalysisMgr::GetMarModWorkSpVec ( );
__declspec(implementation_key(1691)) void IAnalysisMgr::PutMarModWorkSpVec ( int _val );
__declspec(implementation_key(1692)) int IAnalysisMgr::GetMarModMaxConstrain ( );
__declspec(implementation_key(1693)) void IAnalysisMgr::PutMarModMaxConstrain ( int _val );
__declspec(implementation_key(1694)) VARIANT_BOOL IAnalysisMgr::GetMarModFolOn ( );
__declspec(implementation_key(1695)) void IAnalysisMgr::PutMarModFolOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1696)) int IAnalysisMgr::GetMarModFolOpt ( );
__declspec(implementation_key(1697)) void IAnalysisMgr::PutMarModFolOpt ( int _val );
__declspec(implementation_key(1698)) VARIANT_BOOL IAnalysisMgr::GetMarModPlasOn ( );
__declspec(implementation_key(1699)) void IAnalysisMgr::PutMarModPlasOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1700)) int IAnalysisMgr::GetMarModPlasOpt ( );
__declspec(implementation_key(1701)) void IAnalysisMgr::PutMarModPlasOpt ( int _val );
__declspec(implementation_key(1702)) VARIANT_BOOL IAnalysisMgr::GetMarModElasOn ( );
__declspec(implementation_key(1703)) void IAnalysisMgr::PutMarModElasOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1704)) VARIANT_BOOL IAnalysisMgr::GetMarModElasTotal ( );
__declspec(implementation_key(1705)) void IAnalysisMgr::PutMarModElasTotal ( VARIANT_BOOL _val );
__declspec(implementation_key(1706)) VARIANT_BOOL IAnalysisMgr::GetMarModElasIs ( );
__declspec(implementation_key(1707)) void IAnalysisMgr::PutMarModElasIs ( VARIANT_BOOL _val );
__declspec(implementation_key(1708)) VARIANT_BOOL IAnalysisMgr::GetMarModConstDil ( );
__declspec(implementation_key(1709)) void IAnalysisMgr::PutMarModConstDil ( VARIANT_BOOL _val );
__declspec(implementation_key(1710)) VARIANT_BOOL IAnalysisMgr::GetMarModLgDisp ( );
__declspec(implementation_key(1711)) void IAnalysisMgr::PutMarModLgDisp ( VARIANT_BOOL _val );
__declspec(implementation_key(1712)) VARIANT_BOOL IAnalysisMgr::GetMarModUpdate ( );
__declspec(implementation_key(1713)) void IAnalysisMgr::PutMarModUpdate ( VARIANT_BOOL _val );
__declspec(implementation_key(1714)) VARIANT_BOOL IAnalysisMgr::GetMarModFinite ( );
__declspec(implementation_key(1715)) void IAnalysisMgr::PutMarModFinite ( VARIANT_BOOL _val );
__declspec(implementation_key(1716)) VARIANT_BOOL IAnalysisMgr::GetMarModEchoInput ( );
__declspec(implementation_key(1717)) void IAnalysisMgr::PutMarModEchoInput ( VARIANT_BOOL _val );
__declspec(implementation_key(1718)) VARIANT_BOOL IAnalysisMgr::GetMarModWriteGroupSet ( );
__declspec(implementation_key(1719)) void IAnalysisMgr::PutMarModWriteGroupSet ( VARIANT_BOOL _val );
__declspec(implementation_key(1720)) VARIANT_BOOL IAnalysisMgr::GetMarModExtInput ( );
__declspec(implementation_key(1721)) void IAnalysisMgr::PutMarModExtInput ( VARIANT_BOOL _val );
__declspec(implementation_key(1722)) VARIANT_BOOL IAnalysisMgr::GetMarModShlTrShear ( );
__declspec(implementation_key(1723)) void IAnalysisMgr::PutMarModShlTrShear ( VARIANT_BOOL _val );
__declspec(implementation_key(1724)) int IAnalysisMgr::GetMarModPltIntegPt ( );
__declspec(implementation_key(1725)) void IAnalysisMgr::PutMarModPltIntegPt ( int _val );
__declspec(implementation_key(1726)) VARIANT_BOOL IAnalysisMgr::GetMarModDistLoadOn ( );
__declspec(implementation_key(1727)) void IAnalysisMgr::PutMarModDistLoadOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1728)) int IAnalysisMgr::GetMarModDistLoadList ( );
__declspec(implementation_key(1729)) void IAnalysisMgr::PutMarModDistLoadList ( int _val );
__declspec(implementation_key(1730)) int IAnalysisMgr::GetMarModDistLoadElem ( );
__declspec(implementation_key(1731)) void IAnalysisMgr::PutMarModDistLoadElem ( int _val );
__declspec(implementation_key(1732)) int IAnalysisMgr::GetMarModDistLoadNode ( );
__declspec(implementation_key(1733)) void IAnalysisMgr::PutMarModDistLoadNode ( int _val );
__declspec(implementation_key(1734)) VARIANT_BOOL IAnalysisMgr::GetMarModTyingOn ( );
__declspec(implementation_key(1735)) void IAnalysisMgr::PutMarModTyingOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1736)) int IAnalysisMgr::GetMarModTyingCe ( );
__declspec(implementation_key(1737)) void IAnalysisMgr::PutMarModTyingCe ( int _val );
__declspec(implementation_key(1738)) int IAnalysisMgr::GetMarModTyingType ( );
__declspec(implementation_key(1739)) void IAnalysisMgr::PutMarModTyingType ( int _val );
__declspec(implementation_key(1740)) int IAnalysisMgr::GetMarModTyingServoNd ( );
__declspec(implementation_key(1741)) void IAnalysisMgr::PutMarModTyingServoNd ( int _val );
__declspec(implementation_key(1742)) int IAnalysisMgr::GetMarModTyingServoLk ( );
__declspec(implementation_key(1743)) void IAnalysisMgr::PutMarModTyingServoLk ( int _val );
__declspec(implementation_key(1744)) VARIANT_BOOL IAnalysisMgr::GetMarModOutOfCore ( );
__declspec(implementation_key(1745)) void IAnalysisMgr::PutMarModOutOfCore ( VARIANT_BOOL _val );
__declspec(implementation_key(1746)) int IAnalysisMgr::GetMarModCoreVal ( );
__declspec(implementation_key(1747)) void IAnalysisMgr::PutMarModCoreVal ( int _val );
__declspec(implementation_key(1748)) VARIANT_BOOL IAnalysisMgr::GetMarModProcessors ( );
__declspec(implementation_key(1749)) void IAnalysisMgr::PutMarModProcessors ( VARIANT_BOOL _val );
__declspec(implementation_key(1750)) int IAnalysisMgr::GetMarModNoCpu ( );
__declspec(implementation_key(1751)) void IAnalysisMgr::PutMarModNoCpu ( int _val );
__declspec(implementation_key(1752)) int IAnalysisMgr::GetMarModVecLength ( );
__declspec(implementation_key(1753)) void IAnalysisMgr::PutMarModVecLength ( int _val );
__declspec(implementation_key(1754)) VARIANT_BOOL IAnalysisMgr::GetMarModParallel ( );
__declspec(implementation_key(1755)) void IAnalysisMgr::PutMarModParallel ( VARIANT_BOOL _val );
__declspec(implementation_key(1756)) VARIANT_BOOL IAnalysisMgr::GetMarModBWOpt ( );
__declspec(implementation_key(1757)) void IAnalysisMgr::PutMarModBWOpt ( VARIANT_BOOL _val );
__declspec(implementation_key(1758)) VARIANT_BOOL IAnalysisMgr::GetNasBulkResVecOn ( );
__declspec(implementation_key(1759)) void IAnalysisMgr::PutNasBulkResVecOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1760)) VARIANT_BOOL IAnalysisMgr::GetNasBulkOgeom ( );
__declspec(implementation_key(1761)) void IAnalysisMgr::PutNasBulkOgeom ( VARIANT_BOOL _val );
__declspec(implementation_key(1762)) VARIANT_BOOL IAnalysisMgr::GetNasBulkSkipBeamShape ( );
__declspec(implementation_key(1763)) void IAnalysisMgr::PutNasBulkSkipBeamShape ( VARIANT_BOOL _val );
__declspec(implementation_key(1764)) int IAnalysisMgr::GetNasExecIterSolve2 ( );
__declspec(implementation_key(1765)) void IAnalysisMgr::PutNasExecIterSolve2 ( int _val );
__declspec(implementation_key(1766)) _variant_t IAnalysisMgr::GetvNasNonlinEpsFlag ( );
__declspec(implementation_key(1767)) void IAnalysisMgr::PutvNasNonlinEpsFlag ( const _variant_t & _val );
__declspec(implementation_key(1768)) _variant_t IAnalysisMgr::GetvNasNonlinEps ( );
__declspec(implementation_key(1769)) void IAnalysisMgr::PutvNasNonlinEps ( const _variant_t & _val );
__declspec(implementation_key(1770)) _variant_t IAnalysisMgr::GetvNasModeFreqRange ( );
__declspec(implementation_key(1771)) void IAnalysisMgr::PutvNasModeFreqRange ( const _variant_t & _val );
__declspec(implementation_key(1772)) _variant_t IAnalysisMgr::GetvNasModeXYRequest ( );
__declspec(implementation_key(1773)) void IAnalysisMgr::PutvNasModeXYRequest ( const _variant_t & _val );
__declspec(implementation_key(1774)) _variant_t IAnalysisMgr::GetvNasRandomRequest ( );
__declspec(implementation_key(1775)) void IAnalysisMgr::PutvNasRandomRequest ( const _variant_t & _val );
__declspec(implementation_key(1776)) _variant_t IAnalysisMgr::GetvNasRandXYRequest ( );
__declspec(implementation_key(1777)) void IAnalysisMgr::PutvNasRandXYRequest ( const _variant_t & _val );
__declspec(implementation_key(1778)) _variant_t IAnalysisMgr::GetvNasGenSpecRequest ( );
__declspec(implementation_key(1779)) void IAnalysisMgr::PutvNasGenSpecRequest ( const _variant_t & _val );
__declspec(implementation_key(1780)) _variant_t IAnalysisMgr::GetvNasGCheckTest ( );
__declspec(implementation_key(1781)) void IAnalysisMgr::PutvNasGCheckTest ( const _variant_t & _val );
__declspec(implementation_key(1782)) _variant_t IAnalysisMgr::GetvNasGCheckTol ( );
__declspec(implementation_key(1783)) void IAnalysisMgr::PutvNasGCheckTol ( const _variant_t & _val );
__declspec(implementation_key(1784)) _variant_t IAnalysisMgr::GetvNasGCheckMsg ( );
__declspec(implementation_key(1785)) void IAnalysisMgr::PutvNasGCheckMsg ( const _variant_t & _val );
__declspec(implementation_key(1786)) _variant_t IAnalysisMgr::GetvNasMCheckWtDOFSet ( );
__declspec(implementation_key(1787)) void IAnalysisMgr::PutvNasMCheckWtDOFSet ( const _variant_t & _val );
__declspec(implementation_key(1788)) _variant_t IAnalysisMgr::GetvNasMCheckGrndDOFSet ( );
__declspec(implementation_key(1789)) void IAnalysisMgr::PutvNasMCheckGrndDOFSet ( const _variant_t & _val );
__declspec(implementation_key(1790)) _variant_t IAnalysisMgr::GetvFStDynFreqRange ( );
__declspec(implementation_key(1791)) void IAnalysisMgr::PutvFStDynFreqRange ( const _variant_t & _val );
__declspec(implementation_key(1792)) VARIANT_BOOL IAnalysisMgr::GetNasBulkAutompc ( );
__declspec(implementation_key(1793)) void IAnalysisMgr::PutNasBulkAutompc ( VARIANT_BOOL _val );
__declspec(implementation_key(1794)) VARIANT_BOOL IAnalysisMgr::GetNasNXStratOn ( );
__declspec(implementation_key(1795)) void IAnalysisMgr::PutNasNXStratOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1796)) int IAnalysisMgr::GetNasNXStratSolver ( );
__declspec(implementation_key(1797)) void IAnalysisMgr::PutNasNXStratSolver ( int _val );
__declspec(implementation_key(1798)) int IAnalysisMgr::GetNasNXStratAuto ( );
__declspec(implementation_key(1799)) void IAnalysisMgr::PutNasNXStratAuto ( int _val );
__declspec(implementation_key(1800)) VARIANT_BOOL IAnalysisMgr::GetNasNXStratNposit ( );
__declspec(implementation_key(1801)) void IAnalysisMgr::PutNasNXStratNposit ( VARIANT_BOOL _val );
__declspec(implementation_key(1802)) VARIANT_BOOL IAnalysisMgr::GetNasNXStratMasstyp ( );
__declspec(implementation_key(1803)) void IAnalysisMgr::PutNasNXStratMasstyp ( VARIANT_BOOL _val );
__declspec(implementation_key(1804)) int IAnalysisMgr::GetNasNXStratTint ( );
__declspec(implementation_key(1805)) void IAnalysisMgr::PutNasNXStratTint ( int _val );
__declspec(implementation_key(1806)) VARIANT_BOOL IAnalysisMgr::GetNasNXStratMstab ( );
__declspec(implementation_key(1807)) void IAnalysisMgr::PutNasNXStratMstab ( VARIANT_BOOL _val );
__declspec(implementation_key(1808)) double IAnalysisMgr::GetNasNXStratMsfac ( );
__declspec(implementation_key(1809)) void IAnalysisMgr::PutNasNXStratMsfac ( double _val );
__declspec(implementation_key(1810)) double IAnalysisMgr::GetNasNXStratDtdelay ( );
__declspec(implementation_key(1811)) void IAnalysisMgr::PutNasNXStratDtdelay ( double _val );
__declspec(implementation_key(1812)) double IAnalysisMgr::GetNasNXStratSdofang ( );
__declspec(implementation_key(1813)) void IAnalysisMgr::PutNasNXStratSdofang ( double _val );
__declspec(implementation_key(1814)) VARIANT_BOOL IAnalysisMgr::GetNasNXStratUpform ( );
__declspec(implementation_key(1815)) void IAnalysisMgr::PutNasNXStratUpform ( VARIANT_BOOL _val );
__declspec(implementation_key(1816)) VARIANT_BOOL IAnalysisMgr::GetNasNXStratDispopt ( );
__declspec(implementation_key(1817)) void IAnalysisMgr::PutNasNXStratDispopt ( VARIANT_BOOL _val );
__declspec(implementation_key(1818)) VARIANT_BOOL IAnalysisMgr::GetNasNXStratLoadopt ( );
__declspec(implementation_key(1819)) void IAnalysisMgr::PutNasNXStratLoadopt ( VARIANT_BOOL _val );
__declspec(implementation_key(1820)) double IAnalysisMgr::GetNasNXStratAlpha ( );
__declspec(implementation_key(1821)) void IAnalysisMgr::PutNasNXStratAlpha ( double _val );
__declspec(implementation_key(1822)) double IAnalysisMgr::GetNasNXStratDelta ( );
__declspec(implementation_key(1823)) void IAnalysisMgr::PutNasNXStratDelta ( double _val );
__declspec(implementation_key(1824)) int IAnalysisMgr::GetNasNXStratItemax ( );
__declspec(implementation_key(1825)) void IAnalysisMgr::PutNasNXStratItemax ( int _val );
__declspec(implementation_key(1826)) double IAnalysisMgr::GetNasNXStratEpsia ( );
__declspec(implementation_key(1827)) void IAnalysisMgr::PutNasNXStratEpsia ( double _val );
__declspec(implementation_key(1828)) double IAnalysisMgr::GetNasNXStratEpsib ( );
__declspec(implementation_key(1829)) void IAnalysisMgr::PutNasNXStratEpsib ( double _val );
__declspec(implementation_key(1830)) double IAnalysisMgr::GetNasNXStratEpsii ( );
__declspec(implementation_key(1831)) void IAnalysisMgr::PutNasNXStratEpsii ( double _val );
__declspec(implementation_key(1832)) int IAnalysisMgr::GetNasNXStratLsearch ( );
__declspec(implementation_key(1833)) void IAnalysisMgr::PutNasNXStratLsearch ( int _val );
__declspec(implementation_key(1834)) int IAnalysisMgr::GetNasNXStratMaxite ( );
__declspec(implementation_key(1835)) void IAnalysisMgr::PutNasNXStratMaxite ( int _val );
__declspec(implementation_key(1836)) int IAnalysisMgr::GetNasNXStratConvcri ( );
__declspec(implementation_key(1837)) void IAnalysisMgr::PutNasNXStratConvcri ( int _val );
__declspec(implementation_key(1838)) double IAnalysisMgr::GetNasNXStratEtol ( );
__declspec(implementation_key(1839)) void IAnalysisMgr::PutNasNXStratEtol ( double _val );
__declspec(implementation_key(1840)) double IAnalysisMgr::GetNasNXStratRtol ( );
__declspec(implementation_key(1841)) void IAnalysisMgr::PutNasNXStratRtol ( double _val );
__declspec(implementation_key(1842)) double IAnalysisMgr::GetNasNXStratRnorm ( );
__declspec(implementation_key(1843)) void IAnalysisMgr::PutNasNXStratRnorm ( double _val );
__declspec(implementation_key(1844)) double IAnalysisMgr::GetNasNXStratRmnorm ( );
__declspec(implementation_key(1845)) void IAnalysisMgr::PutNasNXStratRmnorm ( double _val );
__declspec(implementation_key(1846)) double IAnalysisMgr::GetNasNXStratRctol ( );
__declspec(implementation_key(1847)) void IAnalysisMgr::PutNasNXStratRctol ( double _val );
__declspec(implementation_key(1848)) double IAnalysisMgr::GetNasNXStratDtol ( );
__declspec(implementation_key(1849)) void IAnalysisMgr::PutNasNXStratDtol ( double _val );
__declspec(implementation_key(1850)) double IAnalysisMgr::GetNasNXStratDnorm ( );
__declspec(implementation_key(1851)) void IAnalysisMgr::PutNasNXStratDnorm ( double _val );
__declspec(implementation_key(1852)) double IAnalysisMgr::GetNasNXStratDmnorm ( );
__declspec(implementation_key(1853)) void IAnalysisMgr::PutNasNXStratDmnorm ( double _val );
__declspec(implementation_key(1854)) double IAnalysisMgr::GetNasNXStratStol ( );
__declspec(implementation_key(1855)) void IAnalysisMgr::PutNasNXStratStol ( double _val );
__declspec(implementation_key(1856)) double IAnalysisMgr::GetNasNXStratRconsm ( );
__declspec(implementation_key(1857)) void IAnalysisMgr::PutNasNXStratRconsm ( double _val );
__declspec(implementation_key(1858)) double IAnalysisMgr::GetNasNXStratEnlsth ( );
__declspec(implementation_key(1859)) void IAnalysisMgr::PutNasNXStratEnlsth ( double _val );
__declspec(implementation_key(1860)) int IAnalysisMgr::GetNasNXStratAtssubd ( );
__declspec(implementation_key(1861)) void IAnalysisMgr::PutNasNXStratAtssubd ( int _val );
__declspec(implementation_key(1862)) double IAnalysisMgr::GetNasNXStratAtsmxdt ( );
__declspec(implementation_key(1863)) void IAnalysisMgr::PutNasNXStratAtsmxdt ( double _val );
__declspec(implementation_key(1864)) int IAnalysisMgr::GetNasNXStratAtsnext ( );
__declspec(implementation_key(1865)) void IAnalysisMgr::PutNasNXStratAtsnext ( int _val );
__declspec(implementation_key(1866)) double IAnalysisMgr::GetNasNXStratAtsdfac ( );
__declspec(implementation_key(1867)) void IAnalysisMgr::PutNasNXStratAtsdfac ( double _val );
__declspec(implementation_key(1868)) VARIANT_BOOL IAnalysisMgr::GetNasNXStratAtslows ( );
__declspec(implementation_key(1869)) void IAnalysisMgr::PutNasNXStratAtslows ( VARIANT_BOOL _val );
__declspec(implementation_key(1870)) double IAnalysisMgr::GetNasNXStratAtsdamp ( );
__declspec(implementation_key(1871)) void IAnalysisMgr::PutNasNXStratAtsdamp ( double _val );
__declspec(implementation_key(1872)) int IAnalysisMgr::GetNasNXStratLdcgrid ( );
__declspec(implementation_key(1873)) void IAnalysisMgr::PutNasNXStratLdcgrid ( int _val );
__declspec(implementation_key(1874)) int IAnalysisMgr::GetNasNXStratLdcdof ( );
__declspec(implementation_key(1875)) void IAnalysisMgr::PutNasNXStratLdcdof ( int _val );
__declspec(implementation_key(1876)) double IAnalysisMgr::GetNasNXStratLdcdisp ( );
__declspec(implementation_key(1877)) void IAnalysisMgr::PutNasNXStratLdcdisp ( double _val );
__declspec(implementation_key(1878)) double IAnalysisMgr::GetNasNXStratLdcimax ( );
__declspec(implementation_key(1879)) void IAnalysisMgr::PutNasNXStratLdcimax ( double _val );
__declspec(implementation_key(1880)) double IAnalysisMgr::GetNasNXStratLdcdmax ( );
__declspec(implementation_key(1881)) void IAnalysisMgr::PutNasNXStratLdcdmax ( double _val );
__declspec(implementation_key(1882)) VARIANT_BOOL IAnalysisMgr::GetNasNXStratLdccont ( );
__declspec(implementation_key(1883)) void IAnalysisMgr::PutNasNXStratLdccont ( VARIANT_BOOL _val );
__declspec(implementation_key(1884)) int IAnalysisMgr::GetNasNXStratLdcsubd ( );
__declspec(implementation_key(1885)) void IAnalysisMgr::PutNasNXStratLdcsubd ( int _val );
__declspec(implementation_key(1886)) int IAnalysisMgr::GetNasNXStratImpact ( );
__declspec(implementation_key(1887)) void IAnalysisMgr::PutNasNXStratImpact ( int _val );
__declspec(implementation_key(1888)) int IAnalysisMgr::GetNasNXStratNsupp ( );
__declspec(implementation_key(1889)) void IAnalysisMgr::PutNasNXStratNsupp ( int _val );
__declspec(implementation_key(1890)) double IAnalysisMgr::GetNasNXStratTstart ( );
__declspec(implementation_key(1891)) void IAnalysisMgr::PutNasNXStratTstart ( double _val );
__declspec(implementation_key(1892)) int IAnalysisMgr::GetNasNXStratIrint ( );
__declspec(implementation_key(1893)) void IAnalysisMgr::PutNasNXStratIrint ( int _val );
__declspec(implementation_key(1894)) int IAnalysisMgr::GetNasNXStratNsubgrp ( );
__declspec(implementation_key(1895)) void IAnalysisMgr::PutNasNXStratNsubgrp ( int _val );
__declspec(implementation_key(1896)) VARIANT_BOOL IAnalysisMgr::GetNasNXStratElcv ( );
__declspec(implementation_key(1897)) void IAnalysisMgr::PutNasNXStratElcv ( VARIANT_BOOL _val );
__declspec(implementation_key(1898)) int IAnalysisMgr::GetNasNXStratEqrbar ( );
__declspec(implementation_key(1899)) void IAnalysisMgr::PutNasNXStratEqrbar ( int _val );
__declspec(implementation_key(1900)) int IAnalysisMgr::GetNasNXStratEqrbe2 ( );
__declspec(implementation_key(1901)) void IAnalysisMgr::PutNasNXStratEqrbe2 ( int _val );
__declspec(implementation_key(1902)) double IAnalysisMgr::GetNasNXStratSpringk ( );
__declspec(implementation_key(1903)) void IAnalysisMgr::PutNasNXStratSpringk ( double _val );
__declspec(implementation_key(1904)) double IAnalysisMgr::GetNasNXStratBeame ( );
__declspec(implementation_key(1905)) void IAnalysisMgr::PutNasNXStratBeame ( double _val );
__declspec(implementation_key(1906)) double IAnalysisMgr::GetNasNXStratBeama ( );
__declspec(implementation_key(1907)) void IAnalysisMgr::PutNasNXStratBeama ( double _val );
__declspec(implementation_key(1908)) double IAnalysisMgr::GetNasNXStratRblcrit ( );
__declspec(implementation_key(1909)) void IAnalysisMgr::PutNasNXStratRblcrit ( double _val );
__declspec(implementation_key(1910)) int IAnalysisMgr::GetNasNXStratXstep ( );
__declspec(implementation_key(1911)) void IAnalysisMgr::PutNasNXStratXstep ( int _val );
__declspec(implementation_key(1912)) int IAnalysisMgr::GetNasNXStratXdtcal ( );
__declspec(implementation_key(1913)) void IAnalysisMgr::PutNasNXStratXdtcal ( int _val );
__declspec(implementation_key(1914)) double IAnalysisMgr::GetNasNXStratXdtfac ( );
__declspec(implementation_key(1915)) void IAnalysisMgr::PutNasNXStratXdtfac ( double _val );
__declspec(implementation_key(1916)) double IAnalysisMgr::GetNasNXStratXmscale ( );
__declspec(implementation_key(1917)) void IAnalysisMgr::PutNasNXStratXmscale ( double _val );
__declspec(implementation_key(1918)) double IAnalysisMgr::GetNasNXStratXdtmin1 ( );
__declspec(implementation_key(1919)) void IAnalysisMgr::PutNasNXStratXdtmin1 ( double _val );
__declspec(implementation_key(1920)) double IAnalysisMgr::GetNasNXStratXdtmin2 ( );
__declspec(implementation_key(1921)) void IAnalysisMgr::PutNasNXStratXdtmin2 ( double _val );
__declspec(implementation_key(1922)) int IAnalysisMgr::GetNasNXStratIcmode ( );
__declspec(implementation_key(1923)) void IAnalysisMgr::PutNasNXStratIcmode ( int _val );
__declspec(implementation_key(1924)) int IAnalysisMgr::GetNasNXStratUlform ( );
__declspec(implementation_key(1925)) void IAnalysisMgr::PutNasNXStratUlform ( int _val );
__declspec(implementation_key(1926)) _variant_t IAnalysisMgr::GetNasNXStratTimeSteps ( );
__declspec(implementation_key(1927)) void IAnalysisMgr::PutNasNXStratTimeSteps ( const _variant_t & _val );
__declspec(implementation_key(1928)) _variant_t IAnalysisMgr::GetNasNXStratTimeIncrement ( );
__declspec(implementation_key(1929)) void IAnalysisMgr::PutNasNXStratTimeIncrement ( const _variant_t & _val );
__declspec(implementation_key(1930)) _variant_t IAnalysisMgr::GetNasNXStratSkipFactor ( );
__declspec(implementation_key(1931)) void IAnalysisMgr::PutNasNXStratSkipFactor ( const _variant_t & _val );
__declspec(implementation_key(1932)) int IAnalysisMgr::GetNasNXStratCstype ( );
__declspec(implementation_key(1933)) void IAnalysisMgr::PutNasNXStratCstype ( int _val );
__declspec(implementation_key(1934)) VARIANT_BOOL IAnalysisMgr::GetDynModOn ( );
__declspec(implementation_key(1935)) void IAnalysisMgr::PutDynModOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1936)) VARIANT_BOOL IAnalysisMgr::GetDynModExportRigidNodes ( );
__declspec(implementation_key(1937)) void IAnalysisMgr::PutDynModExportRigidNodes ( VARIANT_BOOL _val );
__declspec(implementation_key(1938)) VARIANT_BOOL IAnalysisMgr::GetDynModMatlBasedParts ( );
__declspec(implementation_key(1939)) void IAnalysisMgr::PutDynModMatlBasedParts ( VARIANT_BOOL _val );
__declspec(implementation_key(1940)) VARIANT_BOOL IAnalysisMgr::GetDynModGroupsAsSets ( );
__declspec(implementation_key(1941)) void IAnalysisMgr::PutDynModGroupsAsSets ( VARIANT_BOOL _val );
__declspec(implementation_key(1942)) VARIANT_BOOL IAnalysisMgr::GetDynModSkipStandard ( );
__declspec(implementation_key(1943)) void IAnalysisMgr::PutDynModSkipStandard ( VARIANT_BOOL _val );
__declspec(implementation_key(1944)) int IAnalysisMgr::GetDynModStartText ( );
__declspec(implementation_key(1945)) void IAnalysisMgr::PutDynModStartText ( int _val );
__declspec(implementation_key(1946)) int IAnalysisMgr::GetDynModEndText ( );
__declspec(implementation_key(1947)) void IAnalysisMgr::PutDynModEndText ( int _val );
__declspec(implementation_key(1948)) int IAnalysisMgr::GetNasBulkAutospcType ( );
__declspec(implementation_key(1949)) void IAnalysisMgr::PutNasBulkAutospcType ( int _val );
__declspec(implementation_key(1950)) int IAnalysisMgr::GetNasExecMemory ( );
__declspec(implementation_key(1951)) void IAnalysisMgr::PutNasExecMemory ( int _val );
__declspec(implementation_key(1952)) VARIANT_BOOL IAnalysisMgr::GetNasExecExtendedMessages ( );
__declspec(implementation_key(1953)) void IAnalysisMgr::PutNasExecExtendedMessages ( VARIANT_BOOL _val );
__declspec(implementation_key(1954)) _bstr_t IAnalysisMgr::GetNasExecSystemCell ( );
__declspec(implementation_key(1955)) void IAnalysisMgr::PutNasExecSystemCell ( _bstr_t _val );
__declspec(implementation_key(1956)) _bstr_t IAnalysisMgr::GetNasExecScratchDir1 ( );
__declspec(implementation_key(1957)) void IAnalysisMgr::PutNasExecScratchDir1 ( _bstr_t _val );
__declspec(implementation_key(1958)) _bstr_t IAnalysisMgr::GetNasExecScratchDir2 ( );
__declspec(implementation_key(1959)) void IAnalysisMgr::PutNasExecScratchDir2 ( _bstr_t _val );
__declspec(implementation_key(1960)) int IAnalysisMgr::GetNasExecScratchSize1 ( );
__declspec(implementation_key(1961)) void IAnalysisMgr::PutNasExecScratchSize1 ( int _val );
__declspec(implementation_key(1962)) int IAnalysisMgr::GetNasExecScratchSize2 ( );
__declspec(implementation_key(1963)) void IAnalysisMgr::PutNasExecScratchSize2 ( int _val );
__declspec(implementation_key(1964)) VARIANT_BOOL IAnalysisMgr::GetNasBulkRigidThermalExp ( );
__declspec(implementation_key(1965)) void IAnalysisMgr::PutNasBulkRigidThermalExp ( VARIANT_BOOL _val );
__declspec(implementation_key(1966)) VARIANT_BOOL IAnalysisMgr::GetNasBulkSrcomps ( );
__declspec(implementation_key(1967)) void IAnalysisMgr::PutNasBulkSrcomps ( VARIANT_BOOL _val );
__declspec(implementation_key(1968)) VARIANT_BOOL IAnalysisMgr::GetNasBulkNofisr ( );
__declspec(implementation_key(1969)) void IAnalysisMgr::PutNasBulkNofisr ( VARIANT_BOOL _val );
__declspec(implementation_key(1970)) VARIANT_BOOL IAnalysisMgr::GetNasBulkLgstrn ( );
__declspec(implementation_key(1971)) void IAnalysisMgr::PutNasBulkLgstrn ( VARIANT_BOOL _val );
__declspec(implementation_key(1972)) VARIANT_BOOL IAnalysisMgr::GetNasModesSkipEigr ( );
__declspec(implementation_key(1973)) void IAnalysisMgr::PutNasModesSkipEigr ( VARIANT_BOOL _val );
__declspec(implementation_key(1974)) _variant_t IAnalysisMgr::GetvNasModeImagFreqRange ( );
__declspec(implementation_key(1975)) void IAnalysisMgr::PutvNasModeImagFreqRange ( const _variant_t & _val );
__declspec(implementation_key(1976)) double IAnalysisMgr::GetNasModesComplexConverge ( );
__declspec(implementation_key(1977)) void IAnalysisMgr::PutNasModesComplexConverge ( double _val );
__declspec(implementation_key(1978)) double IAnalysisMgr::GetNasModesComplexRegionWidth ( );
__declspec(implementation_key(1979)) void IAnalysisMgr::PutNasModesComplexRegionWidth ( double _val );
__declspec(implementation_key(1980)) VARIANT_BOOL IAnalysisMgr::GetNasNXStratElrescs ( );
__declspec(implementation_key(1981)) void IAnalysisMgr::PutNasNXStratElrescs ( VARIANT_BOOL _val );
__declspec(implementation_key(1982)) VARIANT_BOOL IAnalysisMgr::GetNasDdamOn ( );
__declspec(implementation_key(1983)) void IAnalysisMgr::PutNasDdamOn ( VARIANT_BOOL _val );
__declspec(implementation_key(1984)) VARIANT_BOOL IAnalysisMgr::GetNasDdamEnabled ( );
__declspec(implementation_key(1985)) void IAnalysisMgr::PutNasDdamEnabled ( VARIANT_BOOL _val );
__declspec(implementation_key(1986)) VARIANT_BOOL IAnalysisMgr::GetNasDdamIncludePath ( );
__declspec(implementation_key(1987)) void IAnalysisMgr::PutNasDdamIncludePath ( VARIANT_BOOL _val );
__declspec(implementation_key(1988)) VARIANT_BOOL IAnalysisMgr::GetNasDdamIsDDAM ( );
__declspec(implementation_key(1989)) void IAnalysisMgr::PutNasDdamIsDDAM ( VARIANT_BOOL _val );
__declspec(implementation_key(1990)) int IAnalysisMgr::GetNasDdamUseBuiltInCoeff ( );
__declspec(implementation_key(1991)) void IAnalysisMgr::PutNasDdamUseBuiltInCoeff ( int _val );
__declspec(implementation_key(1992)) int IAnalysisMgr::GetNasDdamEquationType ( );
__declspec(implementation_key(1993)) void IAnalysisMgr::PutNasDdamEquationType ( int _val );
__declspec(implementation_key(1994)) int IAnalysisMgr::GetNasDdamSurfaceShip ( );
__declspec(implementation_key(1995)) void IAnalysisMgr::PutNasDdamSurfaceShip ( int _val );
__declspec(implementation_key(1996)) int IAnalysisMgr::GetNasDdamEquipmentLocation ( );
__declspec(implementation_key(1997)) void IAnalysisMgr::PutNasDdamEquipmentLocation ( int _val );
__declspec(implementation_key(1998)) int IAnalysisMgr::GetNasDdamElasticPlastic ( );
__declspec(implementation_key(1999)) void IAnalysisMgr::PutNasDdamElasticPlastic ( int _val );
__declspec(implementation_key(2000)) int IAnalysisMgr::GetNasDdamForeAftDirection ( );
__declspec(implementation_key(2001)) void IAnalysisMgr::PutNasDdamForeAftDirection ( int _val );
__declspec(implementation_key(2002)) int IAnalysisMgr::GetNasDdamVerticalDirection ( );
__declspec(implementation_key(2003)) void IAnalysisMgr::PutNasDdamVerticalDirection ( int _val );
__declspec(implementation_key(2004)) int IAnalysisMgr::GetNasDdamDirectionSequence ( );
__declspec(implementation_key(2005)) void IAnalysisMgr::PutNasDdamDirectionSequence ( int _val );
__declspec(implementation_key(2006)) double IAnalysisMgr::GetNasDdamMassToWeight ( );
__declspec(implementation_key(2007)) void IAnalysisMgr::PutNasDdamMassToWeight ( double _val );
__declspec(implementation_key(2008)) double IAnalysisMgr::GetNasDdamWeightCutoffPct ( );
__declspec(implementation_key(2009)) void IAnalysisMgr::PutNasDdamWeightCutoffPct ( double _val );
__declspec(implementation_key(2010)) double IAnalysisMgr::GetNasDdamGCutoff ( );
__declspec(implementation_key(2011)) void IAnalysisMgr::PutNasDdamGCutoff ( double _val );
__declspec(implementation_key(2012)) _bstr_t IAnalysisMgr::GetNasDdamSpecCoeffFile ( );
__declspec(implementation_key(2013)) void IAnalysisMgr::PutNasDdamSpecCoeffFile ( _bstr_t _val );
__declspec(implementation_key(2014)) _variant_t IAnalysisMgr::GetvNasDdamCoeffOn ( );
__declspec(implementation_key(2015)) void IAnalysisMgr::PutvNasDdamCoeffOn ( const _variant_t & _val );
__declspec(implementation_key(2016)) _variant_t IAnalysisMgr::GetvNasDdamCoeffVal ( );
__declspec(implementation_key(2017)) void IAnalysisMgr::PutvNasDdamCoeffVal ( const _variant_t & _val );
__declspec(implementation_key(2018)) VARIANT_BOOL IAnalysisMgr::GetNasRotorOn ( );
__declspec(implementation_key(2019)) void IAnalysisMgr::PutNasRotorOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2020)) VARIANT_BOOL IAnalysisMgr::GetNasRotorEnabled ( );
__declspec(implementation_key(2021)) void IAnalysisMgr::PutNasRotorEnabled ( VARIANT_BOOL _val );
__declspec(implementation_key(2022)) VARIANT_BOOL IAnalysisMgr::GetNasRotorIncludePath ( );
__declspec(implementation_key(2023)) void IAnalysisMgr::PutNasRotorIncludePath ( VARIANT_BOOL _val );
__declspec(implementation_key(2024)) VARIANT_BOOL IAnalysisMgr::GetNasRotorSingleRotor ( );
__declspec(implementation_key(2025)) void IAnalysisMgr::PutNasRotorSingleRotor ( VARIANT_BOOL _val );
__declspec(implementation_key(2026)) VARIANT_BOOL IAnalysisMgr::GetNasRotorFixedRefSys ( );
__declspec(implementation_key(2027)) void IAnalysisMgr::PutNasRotorFixedRefSys ( VARIANT_BOOL _val );
__declspec(implementation_key(2028)) VARIANT_BOOL IAnalysisMgr::GetNasRotorAsyncResponse ( );
__declspec(implementation_key(2029)) void IAnalysisMgr::PutNasRotorAsyncResponse ( VARIANT_BOOL _val );
__declspec(implementation_key(2030)) VARIANT_BOOL IAnalysisMgr::GetNasRotorSteinerInertia ( );
__declspec(implementation_key(2031)) void IAnalysisMgr::PutNasRotorSteinerInertia ( VARIANT_BOOL _val );
__declspec(implementation_key(2032)) VARIANT_BOOL IAnalysisMgr::GetNasRotorForceExcitation ( );
__declspec(implementation_key(2033)) void IAnalysisMgr::PutNasRotorForceExcitation ( VARIANT_BOOL _val );
__declspec(implementation_key(2034)) VARIANT_BOOL IAnalysisMgr::GetNasRotorDoCSV ( );
__declspec(implementation_key(2035)) void IAnalysisMgr::PutNasRotorDoCSV ( VARIANT_BOOL _val );
__declspec(implementation_key(2036)) VARIANT_BOOL IAnalysisMgr::GetNasRotorDoGPF ( );
__declspec(implementation_key(2037)) void IAnalysisMgr::PutNasRotorDoGPF ( VARIANT_BOOL _val );
__declspec(implementation_key(2038)) int IAnalysisMgr::GetNasRotorInputUnits ( );
__declspec(implementation_key(2039)) void IAnalysisMgr::PutNasRotorInputUnits ( int _val );
__declspec(implementation_key(2040)) int IAnalysisMgr::GetNasRotorOutputUnits ( );
__declspec(implementation_key(2041)) void IAnalysisMgr::PutNasRotorOutputUnits ( int _val );
__declspec(implementation_key(2042)) int IAnalysisMgr::GetNasRotorPrintedOutput ( );
__declspec(implementation_key(2043)) void IAnalysisMgr::PutNasRotorPrintedOutput ( int _val );
__declspec(implementation_key(2044)) int IAnalysisMgr::GetNasRotorSpeedNumSteps ( );
__declspec(implementation_key(2045)) void IAnalysisMgr::PutNasRotorSpeedNumSteps ( int _val );
__declspec(implementation_key(2046)) double IAnalysisMgr::GetNasRotorComplexModeOutput ( );
__declspec(implementation_key(2047)) void IAnalysisMgr::PutNasRotorComplexModeOutput ( double _val );
__declspec(implementation_key(2048)) double IAnalysisMgr::GetNasRotorWhirlThreshold ( );
__declspec(implementation_key(2049)) void IAnalysisMgr::PutNasRotorWhirlThreshold ( double _val );
__declspec(implementation_key(2050)) double IAnalysisMgr::GetNasRotorExcitationOrder ( );
__declspec(implementation_key(2051)) void IAnalysisMgr::PutNasRotorExcitationOrder ( double _val );
__declspec(implementation_key(2052)) double IAnalysisMgr::GetNasRotorSpeedStart ( );
__declspec(implementation_key(2053)) void IAnalysisMgr::PutNasRotorSpeedStart ( double _val );
__declspec(implementation_key(2054)) double IAnalysisMgr::GetNasRotorSpeedStep ( );
__declspec(implementation_key(2055)) void IAnalysisMgr::PutNasRotorSpeedStep ( double _val );
__declspec(implementation_key(2056)) _bstr_t IAnalysisMgr::GetNasRotorModeSelection ( );
__declspec(implementation_key(2057)) void IAnalysisMgr::PutNasRotorModeSelection ( _bstr_t _val );
__declspec(implementation_key(2058)) int IAnalysisMgr::GetNasNXStratCtdisp ( );
__declspec(implementation_key(2059)) void IAnalysisMgr::PutNasNXStratCtdisp ( int _val );
__declspec(implementation_key(2060)) int IAnalysisMgr::GetNasNXStratCtdamp ( );
__declspec(implementation_key(2061)) void IAnalysisMgr::PutNasNXStratCtdamp ( int _val );
__declspec(implementation_key(2062)) double IAnalysisMgr::GetNasNXStratCtdampN ( );
__declspec(implementation_key(2063)) void IAnalysisMgr::PutNasNXStratCtdampN ( double _val );
__declspec(implementation_key(2064)) double IAnalysisMgr::GetNasNXStratCtdampT ( );
__declspec(implementation_key(2065)) void IAnalysisMgr::PutNasNXStratCtdampT ( double _val );
__declspec(implementation_key(2066)) int IAnalysisMgr::GetNasBulkInrelVal ( );
__declspec(implementation_key(2067)) void IAnalysisMgr::PutNasBulkInrelVal ( int _val );
__declspec(implementation_key(2068)) VARIANT_BOOL IAnalysisMgr::GetNasBulkGapsAsContact ( );
__declspec(implementation_key(2069)) void IAnalysisMgr::PutNasBulkGapsAsContact ( VARIANT_BOOL _val );
__declspec(implementation_key(2070)) double IAnalysisMgr::GetNasNXStratMaxDisp ( );
__declspec(implementation_key(2071)) void IAnalysisMgr::PutNasNXStratMaxDisp ( double _val );
__declspec(implementation_key(2072)) int IAnalysisMgr::GetNasNXStratBoltstp ( );
__declspec(implementation_key(2073)) void IAnalysisMgr::PutNasNXStratBoltstp ( int _val );
__declspec(implementation_key(2074)) VARIANT_BOOL IAnalysisMgr::GetNasBulkBoltFact ( );
__declspec(implementation_key(2075)) void IAnalysisMgr::PutNasBulkBoltFact ( VARIANT_BOOL _val );
__declspec(implementation_key(2076)) double IAnalysisMgr::GetNasBulkBoltFactVal ( );
__declspec(implementation_key(2077)) void IAnalysisMgr::PutNasBulkBoltFactVal ( double _val );
__declspec(implementation_key(2078)) VARIANT_BOOL IAnalysisMgr::GetNasNXStratCvssval ( );
__declspec(implementation_key(2079)) void IAnalysisMgr::PutNasNXStratCvssval ( VARIANT_BOOL _val );
__declspec(implementation_key(2080)) VARIANT_BOOL IAnalysisMgr::GetNasNXStratXtcurve ( );
__declspec(implementation_key(2081)) void IAnalysisMgr::PutNasNXStratXtcurve ( VARIANT_BOOL _val );
__declspec(implementation_key(2082)) VARIANT_BOOL IAnalysisMgr::GetNasNXStratRtalg ( );
__declspec(implementation_key(2083)) void IAnalysisMgr::PutNasNXStratRtalg ( VARIANT_BOOL _val );
__declspec(implementation_key(2084)) VARIANT_BOOL IAnalysisMgr::GetNasNXStratTnslcf ( );
__declspec(implementation_key(2085)) void IAnalysisMgr::PutNasNXStratTnslcf ( VARIANT_BOOL _val );
__declspec(implementation_key(2086)) double IAnalysisMgr::GetNasNXStratDrillkf ( );
__declspec(implementation_key(2087)) void IAnalysisMgr::PutNasNXStratDrillkf ( double _val );
__declspec(implementation_key(2088)) double IAnalysisMgr::GetNasNXStratLslower ( );
__declspec(implementation_key(2089)) void IAnalysisMgr::PutNasNXStratLslower ( double _val );
__declspec(implementation_key(2090)) double IAnalysisMgr::GetNasNXStratLsupper ( );
__declspec(implementation_key(2091)) void IAnalysisMgr::PutNasNXStratLsupper ( double _val );
__declspec(implementation_key(2092)) VARIANT_BOOL IAnalysisMgr::GetNasExecSolutionMonitor ( );
__declspec(implementation_key(2093)) void IAnalysisMgr::PutNasExecSolutionMonitor ( VARIANT_BOOL _val );
__declspec(implementation_key(2094)) VARIANT_BOOL IAnalysisMgr::GetNasBulkDynLdAsLOADSET ( );
__declspec(implementation_key(2095)) void IAnalysisMgr::PutNasBulkDynLdAsLOADSET ( VARIANT_BOOL _val );
__declspec(implementation_key(2096)) VARIANT_BOOL IAnalysisMgr::GetNasBulkResViner ( );
__declspec(implementation_key(2097)) void IAnalysisMgr::PutNasBulkResViner ( VARIANT_BOOL _val );
__declspec(implementation_key(2098)) VARIANT_BOOL IAnalysisMgr::GetNasGCheckNone ( );
__declspec(implementation_key(2099)) void IAnalysisMgr::PutNasGCheckNone ( VARIANT_BOOL _val );
__declspec(implementation_key(2100)) VARIANT_BOOL IAnalysisMgr::GetNasBulkWriteAllLoadBCSets ( );
__declspec(implementation_key(2101)) void IAnalysisMgr::PutNasBulkWriteAllLoadBCSets ( VARIANT_BOOL _val );
__declspec(implementation_key(2102)) VARIANT_BOOL IAnalysisMgr::GetNasDynOn ( );
__declspec(implementation_key(2103)) void IAnalysisMgr::PutNasDynOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2104)) VARIANT_BOOL IAnalysisMgr::GetNasDynUseLoadSet ( );
__declspec(implementation_key(2105)) void IAnalysisMgr::PutNasDynUseLoadSet ( VARIANT_BOOL _val );
__declspec(implementation_key(2106)) double IAnalysisMgr::GetNasDynDampOverall ( );
__declspec(implementation_key(2107)) void IAnalysisMgr::PutNasDynDampOverall ( double _val );
__declspec(implementation_key(2108)) double IAnalysisMgr::GetNasDynDampW3 ( );
__declspec(implementation_key(2109)) void IAnalysisMgr::PutNasDynDampW3 ( double _val );
__declspec(implementation_key(2110)) double IAnalysisMgr::GetNasDynDampW4 ( );
__declspec(implementation_key(2111)) void IAnalysisMgr::PutNasDynDampW4 ( double _val );
__declspec(implementation_key(2112)) _variant_t IAnalysisMgr::GetvNasDynKeepFreq ( );
__declspec(implementation_key(2113)) void IAnalysisMgr::PutvNasDynKeepFreq ( const _variant_t & _val );
__declspec(implementation_key(2114)) double IAnalysisMgr::GetNasDynTranDT ( );
__declspec(implementation_key(2115)) void IAnalysisMgr::PutNasDynTranDT ( double _val );
__declspec(implementation_key(2116)) int IAnalysisMgr::GetNasDynFreqTbl ( );
__declspec(implementation_key(2117)) void IAnalysisMgr::PutNasDynFreqTbl ( int _val );
__declspec(implementation_key(2118)) int IAnalysisMgr::GetNasDynDampModalTbl ( );
__declspec(implementation_key(2119)) void IAnalysisMgr::PutNasDynDampModalTbl ( int _val );
__declspec(implementation_key(2120)) int IAnalysisMgr::GetNasDynKeepModes ( );
__declspec(implementation_key(2121)) void IAnalysisMgr::PutNasDynKeepModes ( int _val );
__declspec(implementation_key(2122)) int IAnalysisMgr::GetNasDynTranTimeSteps ( );
__declspec(implementation_key(2123)) void IAnalysisMgr::PutNasDynTranTimeSteps ( int _val );
__declspec(implementation_key(2124)) int IAnalysisMgr::GetNasDynTransOutInt ( );
__declspec(implementation_key(2125)) void IAnalysisMgr::PutNasDynTransOutInt ( int _val );
__declspec(implementation_key(2126)) VARIANT_BOOL IAnalysisMgr::GetNasDynDampModalMethod ( );
__declspec(implementation_key(2127)) void IAnalysisMgr::PutNasDynDampModalMethod ( VARIANT_BOOL _val );
__declspec(implementation_key(2128)) int IAnalysisMgr::GetNasDynRespSpect ( );
__declspec(implementation_key(2129)) void IAnalysisMgr::PutNasDynRespSpect ( int _val );
__declspec(implementation_key(2130)) int IAnalysisMgr::GetNasDynFreqID ( );
__declspec(implementation_key(2131)) void IAnalysisMgr::PutNasDynFreqID ( int _val );
__declspec(implementation_key(2132)) double IAnalysisMgr::GetNasModeDampOverall ( );
__declspec(implementation_key(2133)) void IAnalysisMgr::PutNasModeDampOverall ( double _val );
__declspec(implementation_key(2134)) VARIANT_BOOL IAnalysisMgr::GetNasBulkEnfmotn ( );
__declspec(implementation_key(2135)) void IAnalysisMgr::PutNasBulkEnfmotn ( VARIANT_BOOL _val );
__declspec(implementation_key(2136)) int IAnalysisMgr::GetNasBulkEnfmotnOpt ( );
__declspec(implementation_key(2137)) void IAnalysisMgr::PutNasBulkEnfmotnOpt ( int _val );
__declspec(implementation_key(2138)) VARIANT_BOOL IAnalysisMgr::GetNasDynFzero ( );
__declspec(implementation_key(2139)) void IAnalysisMgr::PutNasDynFzero ( VARIANT_BOOL _val );
__declspec(implementation_key(2140)) double IAnalysisMgr::GetNasDynFzeroVal ( );
__declspec(implementation_key(2141)) void IAnalysisMgr::PutNasDynFzeroVal ( double _val );
__declspec(implementation_key(2142)) VARIANT_BOOL IAnalysisMgr::GetNasDynWmodal ( );
__declspec(implementation_key(2143)) void IAnalysisMgr::PutNasDynWmodal ( VARIANT_BOOL _val );
__declspec(implementation_key(2144)) double IAnalysisMgr::GetNasDdamForceConversion ( );
__declspec(implementation_key(2145)) void IAnalysisMgr::PutNasDdamForceConversion ( double _val );
__declspec(implementation_key(2146)) double IAnalysisMgr::GetNasDdamAccelConversion ( );
__declspec(implementation_key(2147)) void IAnalysisMgr::PutNasDdamAccelConversion ( double _val );
__declspec(implementation_key(2148)) double IAnalysisMgr::GetNasNXStratAtsmass ( );
__declspec(implementation_key(2149)) void IAnalysisMgr::PutNasNXStratAtsmass ( double _val );
__declspec(implementation_key(2150)) int IAnalysisMgr::GetNasNXStratModexNew ( );
__declspec(implementation_key(2151)) void IAnalysisMgr::PutNasNXStratModexNew ( int _val );
__declspec(implementation_key(2152)) VARIANT_BOOL IAnalysisMgr::GetNasBulkCntAset ( );
__declspec(implementation_key(2153)) void IAnalysisMgr::PutNasBulkCntAset ( VARIANT_BOOL _val );
__declspec(implementation_key(2154)) VARIANT_BOOL IAnalysisMgr::GetNasAeroOn ( );
__declspec(implementation_key(2155)) void IAnalysisMgr::PutNasAeroOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2156)) int IAnalysisMgr::GetNasAeroCsID ( );
__declspec(implementation_key(2157)) void IAnalysisMgr::PutNasAeroCsID ( int _val );
__declspec(implementation_key(2158)) int IAnalysisMgr::GetNasAeroRefCsID ( );
__declspec(implementation_key(2159)) void IAnalysisMgr::PutNasAeroRefCsID ( int _val );
__declspec(implementation_key(2160)) double IAnalysisMgr::GetNasAeroRefLength ( );
__declspec(implementation_key(2161)) void IAnalysisMgr::PutNasAeroRefLength ( double _val );
__declspec(implementation_key(2162)) double IAnalysisMgr::GetNasAeroRefSpan ( );
__declspec(implementation_key(2163)) void IAnalysisMgr::PutNasAeroRefSpan ( double _val );
__declspec(implementation_key(2164)) double IAnalysisMgr::GetNasAeroRefArea ( );
__declspec(implementation_key(2165)) void IAnalysisMgr::PutNasAeroRefArea ( double _val );
__declspec(implementation_key(2166)) int IAnalysisMgr::GetNasAeroSymXY ( );
__declspec(implementation_key(2167)) void IAnalysisMgr::PutNasAeroSymXY ( int _val );
__declspec(implementation_key(2168)) int IAnalysisMgr::GetNasAeroSymxz ( );
__declspec(implementation_key(2169)) void IAnalysisMgr::PutNasAeroSymxz ( int _val );
__declspec(implementation_key(2170)) double IAnalysisMgr::GetNasAeroVelo ( );
__declspec(implementation_key(2171)) void IAnalysisMgr::PutNasAeroVelo ( double _val );
__declspec(implementation_key(2172)) double IAnalysisMgr::GetNasAeroRefDens ( );
__declspec(implementation_key(2173)) void IAnalysisMgr::PutNasAeroRefDens ( double _val );
__declspec(implementation_key(2174)) int IAnalysisMgr::GetNasAeroMkFuID ( );
__declspec(implementation_key(2175)) void IAnalysisMgr::PutNasAeroMkFuID ( int _val );
__declspec(implementation_key(2176)) VARIANT_BOOL IAnalysisMgr::GetNasAeroAeunit ( );
__declspec(implementation_key(2177)) void IAnalysisMgr::PutNasAeroAeunit ( VARIANT_BOOL _val );
__declspec(implementation_key(2178)) double IAnalysisMgr::GetNasAeroAeunitVal ( );
__declspec(implementation_key(2179)) void IAnalysisMgr::PutNasAeroAeunitVal ( double _val );
__declspec(implementation_key(2180)) _variant_t IAnalysisMgr::GetvNasAeroFreqKeep ( );
__declspec(implementation_key(2181)) void IAnalysisMgr::PutvNasAeroFreqKeep ( const _variant_t & _val );
__declspec(implementation_key(2182)) int IAnalysisMgr::GetNasAeroModesKeep ( );
__declspec(implementation_key(2183)) void IAnalysisMgr::PutNasAeroModesKeep ( int _val );
__declspec(implementation_key(2184)) VARIANT_BOOL IAnalysisMgr::GetNasAerobPARAMfzero ( );
__declspec(implementation_key(2185)) void IAnalysisMgr::PutNasAerobPARAMfzero ( VARIANT_BOOL _val );
__declspec(implementation_key(2186)) double IAnalysisMgr::GetNasAerodPARAMfzero ( );
__declspec(implementation_key(2187)) void IAnalysisMgr::PutNasAerodPARAMfzero ( double _val );
__declspec(implementation_key(2188)) int IAnalysisMgr::GetNasAeroDampMethod ( );
__declspec(implementation_key(2189)) void IAnalysisMgr::PutNasAeroDampMethod ( int _val );
__declspec(implementation_key(2190)) VARIANT_BOOL IAnalysisMgr::GetNasExtSEOutOn ( );
__declspec(implementation_key(2191)) void IAnalysisMgr::PutNasExtSEOutOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2192)) int IAnalysisMgr::GetNasExtSEOutExtID ( );
__declspec(implementation_key(2193)) void IAnalysisMgr::PutNasExtSEOutExtID ( int _val );
__declspec(implementation_key(2194)) VARIANT_BOOL IAnalysisMgr::GetNasExtSEOutMatStiffness ( );
__declspec(implementation_key(2195)) void IAnalysisMgr::PutNasExtSEOutMatStiffness ( VARIANT_BOOL _val );
__declspec(implementation_key(2196)) VARIANT_BOOL IAnalysisMgr::GetNasExtSEOutMatMass ( );
__declspec(implementation_key(2197)) void IAnalysisMgr::PutNasExtSEOutMatMass ( VARIANT_BOOL _val );
__declspec(implementation_key(2198)) VARIANT_BOOL IAnalysisMgr::GetNasExtSEOutMatK4damp ( );
__declspec(implementation_key(2199)) void IAnalysisMgr::PutNasExtSEOutMatK4damp ( VARIANT_BOOL _val );
__declspec(implementation_key(2200)) VARIANT_BOOL IAnalysisMgr::GetNasExtSEOutMatLoads ( );
__declspec(implementation_key(2201)) void IAnalysisMgr::PutNasExtSEOutMatLoads ( VARIANT_BOOL _val );
__declspec(implementation_key(2202)) enum zAnalysisExtSEOutTo IAnalysisMgr::GetNasExtSEOutTo ( );
__declspec(implementation_key(2203)) void IAnalysisMgr::PutNasExtSEOutTo ( enum zAnalysisExtSEOutTo _val );
__declspec(implementation_key(2204)) int IAnalysisMgr::GetNasExtSEOutUnitID ( );
__declspec(implementation_key(2205)) void IAnalysisMgr::PutNasExtSEOutUnitID ( int _val );
__declspec(implementation_key(2206)) _bstr_t IAnalysisMgr::GetNasExtSEOutAssignTitle ( );
__declspec(implementation_key(2207)) void IAnalysisMgr::PutNasExtSEOutAssignTitle ( _bstr_t _val );
__declspec(implementation_key(2208)) VARIANT_BOOL IAnalysisMgr::GetNasExtSEOutOptGeom ( );
__declspec(implementation_key(2209)) void IAnalysisMgr::PutNasExtSEOutOptGeom ( VARIANT_BOOL _val );
__declspec(implementation_key(2210)) VARIANT_BOOL IAnalysisMgr::GetNasExtSEOutOptAsmbulk ( );
__declspec(implementation_key(2211)) void IAnalysisMgr::PutNasExtSEOutOptAsmbulk ( VARIANT_BOOL _val );
__declspec(implementation_key(2212)) VARIANT_BOOL IAnalysisMgr::GetNasExtSEOutOptExtbulk ( );
__declspec(implementation_key(2213)) void IAnalysisMgr::PutNasExtSEOutOptExtbulk ( VARIANT_BOOL _val );
__declspec(implementation_key(2214)) VARIANT_BOOL IAnalysisMgr::GetNasBulkSecomb ( );
__declspec(implementation_key(2215)) void IAnalysisMgr::PutNasBulkSecomb ( VARIANT_BOOL _val );
__declspec(implementation_key(2216)) VARIANT_BOOL IAnalysisMgr::GetNasExecAllowDuplicateNodes ( );
__declspec(implementation_key(2217)) void IAnalysisMgr::PutNasExecAllowDuplicateNodes ( VARIANT_BOOL _val );
__declspec(implementation_key(2218)) VARIANT_BOOL IAnalysisMgr::GetNasExecWriteSERefPath ( );
__declspec(implementation_key(2219)) void IAnalysisMgr::PutNasExecWriteSERefPath ( VARIANT_BOOL _val );
__declspec(implementation_key(2220)) VARIANT_BOOL IAnalysisMgr::GetAnsModSkipPreprocessCMD ( );
__declspec(implementation_key(2221)) void IAnalysisMgr::PutAnsModSkipPreprocessCMD ( VARIANT_BOOL _val );
__declspec(implementation_key(2222)) VARIANT_BOOL IAnalysisMgr::GetNasBulkPARAMBailout ( );
__declspec(implementation_key(2223)) void IAnalysisMgr::PutNasBulkPARAMBailout ( VARIANT_BOOL _val );
__declspec(implementation_key(2224)) double IAnalysisMgr::GetNasExecDuplicateTolerance ( );
__declspec(implementation_key(2225)) void IAnalysisMgr::PutNasExecDuplicateTolerance ( double _val );
__declspec(implementation_key(2226)) VARIANT_BOOL IAnalysisMgr::GetNasExecRestartReadOnly ( );
__declspec(implementation_key(2227)) void IAnalysisMgr::PutNasExecRestartReadOnly ( VARIANT_BOOL _val );
__declspec(implementation_key(2228)) int IAnalysisMgr::GetNasExecRestartVersion ( );
__declspec(implementation_key(2229)) void IAnalysisMgr::PutNasExecRestartVersion ( int _val );
__declspec(implementation_key(2230)) int IAnalysisMgr::GetNasExecRestartSubcase ( );
__declspec(implementation_key(2231)) void IAnalysisMgr::PutNasExecRestartSubcase ( int _val );
__declspec(implementation_key(2232)) enum zAnalysisType IAnalysisMgr::GetNasOptimAnalysisType ( );
__declspec(implementation_key(2233)) void IAnalysisMgr::PutNasOptimAnalysisType ( enum zAnalysisType _val );
__declspec(implementation_key(2234)) VARIANT_BOOL IAnalysisMgr::GetNasOptimTrackModes ( );
__declspec(implementation_key(2235)) void IAnalysisMgr::PutNasOptimTrackModes ( VARIANT_BOOL _val );
__declspec(implementation_key(2236)) VARIANT_BOOL IAnalysisMgr::GetNasNonlinKDAMP ( );
__declspec(implementation_key(2237)) void IAnalysisMgr::PutNasNonlinKDAMP ( VARIANT_BOOL _val );
__declspec(implementation_key(2238)) int IAnalysisMgr::GetNasNonlinKUPDATE ( );
__declspec(implementation_key(2239)) void IAnalysisMgr::PutNasNonlinKUPDATE ( int _val );
__declspec(implementation_key(2240)) _bstr_t IAnalysisMgr::GetNasExecAnalyzeFilename ( );
__declspec(implementation_key(2241)) void IAnalysisMgr::PutNasExecAnalyzeFilename ( _bstr_t _val );
__declspec(implementation_key(2242)) _variant_t IAnalysisMgr::GetvNasGCheckTest2 ( );
__declspec(implementation_key(2243)) void IAnalysisMgr::PutvNasGCheckTest2 ( const _variant_t & _val );
__declspec(implementation_key(2244)) _variant_t IAnalysisMgr::GetvNasGCheckTol2 ( );
__declspec(implementation_key(2245)) void IAnalysisMgr::PutvNasGCheckTol2 ( const _variant_t & _val );
__declspec(implementation_key(2246)) _variant_t IAnalysisMgr::GetvNasGCheckMsg2 ( );
__declspec(implementation_key(2247)) void IAnalysisMgr::PutvNasGCheckMsg2 ( const _variant_t & _val );
__declspec(implementation_key(2248)) enum zAnalysisAssignForm IAnalysisMgr::GetNasExtSEOutAssignForm ( );
__declspec(implementation_key(2249)) void IAnalysisMgr::PutNasExtSEOutAssignForm ( enum zAnalysisAssignForm _val );
__declspec(implementation_key(2250)) VARIANT_BOOL IAnalysisMgr::GetNasMscCtOn ( );
__declspec(implementation_key(2251)) void IAnalysisMgr::PutNasMscCtOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2252)) VARIANT_BOOL IAnalysisMgr::GetNasMscCtEnable ( );
__declspec(implementation_key(2253)) void IAnalysisMgr::PutNasMscCtEnable ( VARIANT_BOOL _val );
__declspec(implementation_key(2254)) double IAnalysisMgr::GetNasMscCtDDULMT ( );
__declspec(implementation_key(2255)) void IAnalysisMgr::PutNasMscCtDDULMT ( double _val );
__declspec(implementation_key(2256)) double IAnalysisMgr::GetNasMscCtRVCNST ( );
__declspec(implementation_key(2257)) void IAnalysisMgr::PutNasMscCtRVCNST ( double _val );
__declspec(implementation_key(2258)) double IAnalysisMgr::GetNasMscCtSLDLMT ( );
__declspec(implementation_key(2259)) void IAnalysisMgr::PutNasMscCtSLDLMT ( double _val );
__declspec(implementation_key(2260)) VARIANT_BOOL IAnalysisMgr::GetNasMscCtTAUGMNT ( );
__declspec(implementation_key(2261)) void IAnalysisMgr::PutNasMscCtTAUGMNT ( VARIANT_BOOL _val );
__declspec(implementation_key(2262)) int IAnalysisMgr::GetNasMscCtAUGMENT ( );
__declspec(implementation_key(2263)) void IAnalysisMgr::PutNasMscCtAUGMENT ( int _val );
__declspec(implementation_key(2264)) VARIANT_BOOL IAnalysisMgr::GetNasMscCtBEAMB ( );
__declspec(implementation_key(2265)) void IAnalysisMgr::PutNasMscCtBEAMB ( VARIANT_BOOL _val );
__declspec(implementation_key(2266)) VARIANT_BOOL IAnalysisMgr::GetNasMscCtERRBAS ( );
__declspec(implementation_key(2267)) void IAnalysisMgr::PutNasMscCtERRBAS ( VARIANT_BOOL _val );
__declspec(implementation_key(2268)) int IAnalysisMgr::GetNasMscCtFTYPE ( );
__declspec(implementation_key(2269)) void IAnalysisMgr::PutNasMscCtFTYPE ( int _val );
__declspec(implementation_key(2270)) int IAnalysisMgr::GetNasMscCtIBSEP ( );
__declspec(implementation_key(2271)) void IAnalysisMgr::PutNasMscCtIBSEP ( int _val );
__declspec(implementation_key(2272)) int IAnalysisMgr::GetNasMscCtICSEP ( );
__declspec(implementation_key(2273)) void IAnalysisMgr::PutNasMscCtICSEP ( int _val );
__declspec(implementation_key(2274)) int IAnalysisMgr::GetNasMscCtMAXSEP ( );
__declspec(implementation_key(2275)) void IAnalysisMgr::PutNasMscCtMAXSEP ( int _val );
__declspec(implementation_key(2276)) int IAnalysisMgr::GetNasMscCtMETHOD ( );
__declspec(implementation_key(2277)) void IAnalysisMgr::PutNasMscCtMETHOD ( int _val );
__declspec(implementation_key(2278)) VARIANT_BOOL IAnalysisMgr::GetNasMscCtNLGLUE ( );
__declspec(implementation_key(2279)) void IAnalysisMgr::PutNasMscCtNLGLUE ( VARIANT_BOOL _val );
__declspec(implementation_key(2280)) int IAnalysisMgr::GetNasMscCtNODSEP ( );
__declspec(implementation_key(2281)) void IAnalysisMgr::PutNasMscCtNODSEP ( int _val );
__declspec(implementation_key(2282)) VARIANT_BOOL IAnalysisMgr::GetNasMscCtSEGSYM ( );
__declspec(implementation_key(2283)) void IAnalysisMgr::PutNasMscCtSEGSYM ( VARIANT_BOOL _val );
__declspec(implementation_key(2284)) double IAnalysisMgr::GetNasMscCtAUGDIST ( );
__declspec(implementation_key(2285)) void IAnalysisMgr::PutNasMscCtAUGDIST ( double _val );
__declspec(implementation_key(2286)) double IAnalysisMgr::GetNasMscCtBIAS ( );
__declspec(implementation_key(2287)) void IAnalysisMgr::PutNasMscCtBIAS ( double _val );
__declspec(implementation_key(2288)) double IAnalysisMgr::GetNasMscCtERROR ( );
__declspec(implementation_key(2289)) void IAnalysisMgr::PutNasMscCtERROR ( double _val );
__declspec(implementation_key(2290)) double IAnalysisMgr::GetNasMscCtFNTOL ( );
__declspec(implementation_key(2291)) void IAnalysisMgr::PutNasMscCtFNTOL ( double _val );
__declspec(implementation_key(2292)) double IAnalysisMgr::GetNasMscCtPENALT ( );
__declspec(implementation_key(2293)) void IAnalysisMgr::PutNasMscCtPENALT ( double _val );
__declspec(implementation_key(2294)) double IAnalysisMgr::GetNasMscCtSTKSLP ( );
__declspec(implementation_key(2295)) void IAnalysisMgr::PutNasMscCtSTKSLP ( double _val );
__declspec(implementation_key(2296)) double IAnalysisMgr::GetNasMscCtTPENALT ( );
__declspec(implementation_key(2297)) void IAnalysisMgr::PutNasMscCtTPENALT ( double _val );
__declspec(implementation_key(2298)) VARIANT_BOOL IAnalysisMgr::GetNasBulkMgrid ( );
__declspec(implementation_key(2299)) void IAnalysisMgr::PutNasBulkMgrid ( VARIANT_BOOL _val );
__declspec(implementation_key(2300)) VARIANT_BOOL IAnalysisMgr::GetNasBulkSwpangle ( );
__declspec(implementation_key(2301)) void IAnalysisMgr::PutNasBulkSwpangle ( VARIANT_BOOL _val );
__declspec(implementation_key(2302)) VARIANT_BOOL IAnalysisMgr::GetNasBulkAlpha1 ( );
__declspec(implementation_key(2303)) void IAnalysisMgr::PutNasBulkAlpha1 ( VARIANT_BOOL _val );
__declspec(implementation_key(2304)) VARIANT_BOOL IAnalysisMgr::GetNasBulkAlpha2 ( );
__declspec(implementation_key(2305)) void IAnalysisMgr::PutNasBulkAlpha2 ( VARIANT_BOOL _val );
__declspec(implementation_key(2306)) double IAnalysisMgr::GetNasBulkSwpangleVal ( );
__declspec(implementation_key(2307)) void IAnalysisMgr::PutNasBulkSwpangleVal ( double _val );
__declspec(implementation_key(2308)) int IAnalysisMgr::GetNasBulkMdofVal ( );
__declspec(implementation_key(2309)) void IAnalysisMgr::PutNasBulkMdofVal ( int _val );
__declspec(implementation_key(2310)) int IAnalysisMgr::GetNasBulkMgridID ( );
__declspec(implementation_key(2311)) void IAnalysisMgr::PutNasBulkMgridID ( int _val );
__declspec(implementation_key(2312)) _variant_t IAnalysisMgr::GetvNasBulkAlpha1Val ( );
__declspec(implementation_key(2313)) void IAnalysisMgr::PutvNasBulkAlpha1Val ( const _variant_t & _val );
__declspec(implementation_key(2314)) _variant_t IAnalysisMgr::GetvNasBulkAlpha2Val ( );
__declspec(implementation_key(2315)) void IAnalysisMgr::PutvNasBulkAlpha2Val ( const _variant_t & _val );
__declspec(implementation_key(2316)) VARIANT_BOOL IAnalysisMgr::GetNasAerobOPPHIPA ( );
__declspec(implementation_key(2317)) void IAnalysisMgr::PutNasAerobOPPHIPA ( VARIANT_BOOL _val );
__declspec(implementation_key(2318)) VARIANT_BOOL IAnalysisMgr::GetNasNXStratBeamalg ( );
__declspec(implementation_key(2319)) void IAnalysisMgr::PutNasNXStratBeamalg ( VARIANT_BOOL _val );
__declspec(implementation_key(2320)) VARIANT_BOOL IAnalysisMgr::GetNasExecGPU ( );
__declspec(implementation_key(2321)) void IAnalysisMgr::PutNasExecGPU ( VARIANT_BOOL _val );
__declspec(implementation_key(2322)) VARIANT_BOOL IAnalysisMgr::GetNasBulkEndTextOutsideBulk ( );
__declspec(implementation_key(2323)) void IAnalysisMgr::PutNasBulkEndTextOutsideBulk ( VARIANT_BOOL _val );
__declspec(implementation_key(2324)) int IAnalysisMgr::GetNasExecGPUOpt ( );
__declspec(implementation_key(2325)) void IAnalysisMgr::PutNasExecGPUOpt ( int _val );
__declspec(implementation_key(2326)) enum zLinkedSolver IAnalysisMgr::GetLinkedSolverOption ( );
__declspec(implementation_key(2327)) void IAnalysisMgr::PutLinkedSolverOption ( enum zLinkedSolver _val );
__declspec(implementation_key(2328)) int IAnalysisMgr::GetNasNXStratPlasalg ( );
__declspec(implementation_key(2329)) void IAnalysisMgr::PutNasNXStratPlasalg ( int _val );
__declspec(implementation_key(2330)) _bstr_t IAnalysisMgr::GetNasExecUserCmdLine ( );
__declspec(implementation_key(2331)) void IAnalysisMgr::PutNasExecUserCmdLine ( _bstr_t _val );
__declspec(implementation_key(2332)) VARIANT_BOOL IAnalysisMgr::GetNasRandCorrOn ( );
__declspec(implementation_key(2333)) void IAnalysisMgr::PutNasRandCorrOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2334)) int IAnalysisMgr::GetNasRandCorrLagInterval ( );
__declspec(implementation_key(2335)) void IAnalysisMgr::PutNasRandCorrLagInterval ( int _val );
__declspec(implementation_key(2336)) double IAnalysisMgr::GetNasRandCorrLagStart ( );
__declspec(implementation_key(2337)) void IAnalysisMgr::PutNasRandCorrLagStart ( double _val );
__declspec(implementation_key(2338)) double IAnalysisMgr::GetNasRandCorrLagMax ( );
__declspec(implementation_key(2339)) void IAnalysisMgr::PutNasRandCorrLagMax ( double _val );
__declspec(implementation_key(2340)) _variant_t IAnalysisMgr::GetvNasRandXYRequest2 ( );
__declspec(implementation_key(2341)) void IAnalysisMgr::PutvNasRandXYRequest2 ( const _variant_t & _val );
__declspec(implementation_key(2342)) VARIANT_BOOL IAnalysisMgr::GetNasRandXYAuto ( );
__declspec(implementation_key(2343)) void IAnalysisMgr::PutNasRandXYAuto ( VARIANT_BOOL _val );
__declspec(implementation_key(2344)) VARIANT_BOOL IAnalysisMgr::GetNasRandXYPsdf ( );
__declspec(implementation_key(2345)) void IAnalysisMgr::PutNasRandXYPsdf ( VARIANT_BOOL _val );
__declspec(implementation_key(2346)) VARIANT_BOOL IAnalysisMgr::GetNasNonlinAdapt ( );
__declspec(implementation_key(2347)) void IAnalysisMgr::PutNasNonlinAdapt ( VARIANT_BOOL _val );
__declspec(implementation_key(2348)) _bstr_t IAnalysisMgr::GetCaseTitle ( );
__declspec(implementation_key(2349)) void IAnalysisMgr::PutCaseTitle ( _bstr_t _val );
__declspec(implementation_key(2350)) _bstr_t IAnalysisMgr::GetEcho ( );
__declspec(implementation_key(2351)) void IAnalysisMgr::PutEcho ( _bstr_t _val );
__declspec(implementation_key(2352)) VARIANT_BOOL IAnalysisMgr::GetSkipStandard ( );
__declspec(implementation_key(2353)) void IAnalysisMgr::PutSkipStandard ( VARIANT_BOOL _val );
__declspec(implementation_key(2354)) int IAnalysisMgr::GetStartText ( );
__declspec(implementation_key(2355)) void IAnalysisMgr::PutStartText ( int _val );
__declspec(implementation_key(2356)) int IAnalysisMgr::GetEndText ( );
__declspec(implementation_key(2357)) void IAnalysisMgr::PutEndText ( int _val );
__declspec(implementation_key(2358)) int IAnalysisMgr::GetDestination ( );
__declspec(implementation_key(2359)) void IAnalysisMgr::PutDestination ( int _val );
__declspec(implementation_key(2360)) int IAnalysisMgr::GetImaginary ( );
__declspec(implementation_key(2361)) void IAnalysisMgr::PutImaginary ( int _val );
__declspec(implementation_key(2362)) int IAnalysisMgr::GetCornerOutput ( );
__declspec(implementation_key(2363)) void IAnalysisMgr::PutCornerOutput ( int _val );
__declspec(implementation_key(2364)) int IAnalysisMgr::GetIntegrationOutput ( );
__declspec(implementation_key(2365)) void IAnalysisMgr::PutIntegrationOutput ( int _val );
__declspec(implementation_key(2366)) VARIANT_BOOL IAnalysisMgr::GetAbaHistOn ( );
__declspec(implementation_key(2367)) void IAnalysisMgr::PutAbaHistOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2368)) double IAnalysisMgr::GetAbaHistTimePeriod ( );
__declspec(implementation_key(2369)) void IAnalysisMgr::PutAbaHistTimePeriod ( double _val );
__declspec(implementation_key(2370)) double IAnalysisMgr::GetAbaHistInitTimeInc ( );
__declspec(implementation_key(2371)) void IAnalysisMgr::PutAbaHistInitTimeInc ( double _val );
__declspec(implementation_key(2372)) double IAnalysisMgr::GetAbaHistMinTimeInc ( );
__declspec(implementation_key(2373)) void IAnalysisMgr::PutAbaHistMinTimeInc ( double _val );
__declspec(implementation_key(2374)) double IAnalysisMgr::GetAbaHistMaxTimeInc ( );
__declspec(implementation_key(2375)) void IAnalysisMgr::PutAbaHistMaxTimeInc ( double _val );
__declspec(implementation_key(2376)) int IAnalysisMgr::GetAbaHistEigenvectors ( );
__declspec(implementation_key(2377)) void IAnalysisMgr::PutAbaHistEigenvectors ( int _val );
__declspec(implementation_key(2378)) double IAnalysisMgr::GetAbaHistMinFreq ( );
__declspec(implementation_key(2379)) void IAnalysisMgr::PutAbaHistMinFreq ( double _val );
__declspec(implementation_key(2380)) double IAnalysisMgr::GetAbaHistMaxFreq ( );
__declspec(implementation_key(2381)) void IAnalysisMgr::PutAbaHistMaxFreq ( double _val );
__declspec(implementation_key(2382)) double IAnalysisMgr::GetAbaHistShiftFreq ( );
__declspec(implementation_key(2383)) void IAnalysisMgr::PutAbaHistShiftFreq ( double _val );
__declspec(implementation_key(2384)) double IAnalysisMgr::GetAbaHistScaleFactor ( );
__declspec(implementation_key(2385)) void IAnalysisMgr::PutAbaHistScaleFactor ( double _val );
__declspec(implementation_key(2386)) int IAnalysisMgr::GetAbaHistOutInterval ( );
__declspec(implementation_key(2387)) void IAnalysisMgr::PutAbaHistOutInterval ( int _val );
__declspec(implementation_key(2388)) VARIANT_BOOL IAnalysisMgr::GetAbaHistNonlinGeom ( );
__declspec(implementation_key(2389)) void IAnalysisMgr::PutAbaHistNonlinGeom ( VARIANT_BOOL _val );
__declspec(implementation_key(2390)) VARIANT_BOOL IAnalysisMgr::GetAbaHistLinearPert ( );
__declspec(implementation_key(2391)) void IAnalysisMgr::PutAbaHistLinearPert ( VARIANT_BOOL _val );
__declspec(implementation_key(2392)) VARIANT_BOOL IAnalysisMgr::GetAbaHistAutoContact ( );
__declspec(implementation_key(2393)) void IAnalysisMgr::PutAbaHistAutoContact ( VARIANT_BOOL _val );
__declspec(implementation_key(2394)) VARIANT_BOOL IAnalysisMgr::GetAbaHistStabilize ( );
__declspec(implementation_key(2395)) void IAnalysisMgr::PutAbaHistStabilize ( VARIANT_BOOL _val );
__declspec(implementation_key(2396)) VARIANT_BOOL IAnalysisMgr::GetAbaHistOutZeroInc ( );
__declspec(implementation_key(2397)) void IAnalysisMgr::PutAbaHistOutZeroInc ( VARIANT_BOOL _val );
__declspec(implementation_key(2398)) int IAnalysisMgr::GetAbaHistStepAmp ( );
__declspec(implementation_key(2399)) void IAnalysisMgr::PutAbaHistStepAmp ( int _val );
__declspec(implementation_key(2400)) int IAnalysisMgr::GetAbaHistStepLoad ( );
__declspec(implementation_key(2401)) void IAnalysisMgr::PutAbaHistStepLoad ( int _val );
__declspec(implementation_key(2402)) int IAnalysisMgr::GetAbaHistStepConstr ( );
__declspec(implementation_key(2403)) void IAnalysisMgr::PutAbaHistStepConstr ( int _val );
__declspec(implementation_key(2404)) enum zAnalysisType IAnalysisMgr::GetAbaHistAnalysisType ( );
__declspec(implementation_key(2405)) void IAnalysisMgr::PutAbaHistAnalysisType ( enum zAnalysisType _val );
__declspec(implementation_key(2406)) VARIANT_BOOL IAnalysisMgr::GetAnsDOFOn ( );
__declspec(implementation_key(2407)) void IAnalysisMgr::PutAnsDOFOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2408)) VARIANT_BOOL IAnalysisMgr::GetAnsDOFDoSet ( );
__declspec(implementation_key(2409)) void IAnalysisMgr::PutAnsDOFDoSet ( VARIANT_BOOL _val );
__declspec(implementation_key(2410)) VARIANT_BOOL IAnalysisMgr::GetAnsDOFAutomatic ( );
__declspec(implementation_key(2411)) void IAnalysisMgr::PutAnsDOFAutomatic ( VARIANT_BOOL _val );
__declspec(implementation_key(2412)) VARIANT_BOOL IAnalysisMgr::GetAnsDOFNoRotation ( );
__declspec(implementation_key(2413)) void IAnalysisMgr::PutAnsDOFNoRotation ( VARIANT_BOOL _val );
__declspec(implementation_key(2414)) int IAnalysisMgr::GetAnsDOFSetID ( );
__declspec(implementation_key(2415)) void IAnalysisMgr::PutAnsDOFSetID ( int _val );
__declspec(implementation_key(2416)) int IAnalysisMgr::GetAnsDOFNumber ( );
__declspec(implementation_key(2417)) void IAnalysisMgr::PutAnsDOFNumber ( int _val );
__declspec(implementation_key(2418)) VARIANT_BOOL IAnalysisMgr::GetAnsModesOn ( );
__declspec(implementation_key(2419)) void IAnalysisMgr::PutAnsModesOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2420)) int IAnalysisMgr::GetAnsModesNumModes ( );
__declspec(implementation_key(2421)) void IAnalysisMgr::PutAnsModesNumModes ( int _val );
__declspec(implementation_key(2422)) double IAnalysisMgr::GetAnsModesMinFreq ( );
__declspec(implementation_key(2423)) void IAnalysisMgr::PutAnsModesMinFreq ( double _val );
__declspec(implementation_key(2424)) double IAnalysisMgr::GetAnsModesMaxFreq ( );
__declspec(implementation_key(2425)) void IAnalysisMgr::PutAnsModesMaxFreq ( double _val );
__declspec(implementation_key(2426)) double IAnalysisMgr::GetAnsModesModalMethod ( );
__declspec(implementation_key(2427)) void IAnalysisMgr::PutAnsModesModalMethod ( double _val );
__declspec(implementation_key(2428)) VARIANT_BOOL IAnalysisMgr::GetAnsModesElemResults ( );
__declspec(implementation_key(2429)) void IAnalysisMgr::PutAnsModesElemResults ( VARIANT_BOOL _val );
__declspec(implementation_key(2430)) VARIANT_BOOL IAnalysisMgr::GetAnsHeatOn ( );
__declspec(implementation_key(2431)) void IAnalysisMgr::PutAnsHeatOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2432)) double IAnalysisMgr::GetAnsHeatEndTime ( );
__declspec(implementation_key(2433)) void IAnalysisMgr::PutAnsHeatEndTime ( double _val );
__declspec(implementation_key(2434)) double IAnalysisMgr::GetAnsHeatTimeStep ( );
__declspec(implementation_key(2435)) void IAnalysisMgr::PutAnsHeatTimeStep ( double _val );
__declspec(implementation_key(2436)) int IAnalysisMgr::GetAnsHeatOutputFreq ( );
__declspec(implementation_key(2437)) void IAnalysisMgr::PutAnsHeatOutputFreq ( int _val );
__declspec(implementation_key(2438)) VARIANT_BOOL IAnalysisMgr::GetMarHistOn ( );
__declspec(implementation_key(2439)) void IAnalysisMgr::PutMarHistOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2440)) int IAnalysisMgr::GetMarHistContactProp ( );
__declspec(implementation_key(2441)) void IAnalysisMgr::PutMarHistContactProp ( int _val );
__declspec(implementation_key(2442)) int IAnalysisMgr::GetMarHistCtrlMethod ( );
__declspec(implementation_key(2443)) void IAnalysisMgr::PutMarHistCtrlMethod ( int _val );
__declspec(implementation_key(2444)) int IAnalysisMgr::GetMarHistSolverMeth ( );
__declspec(implementation_key(2445)) void IAnalysisMgr::PutMarHistSolverMeth ( int _val );
__declspec(implementation_key(2446)) int IAnalysisMgr::GetMarHistCtrlMaxStep ( );
__declspec(implementation_key(2447)) void IAnalysisMgr::PutMarHistCtrlMaxStep ( int _val );
__declspec(implementation_key(2448)) int IAnalysisMgr::GetMarHistCtrlMaxRecycle ( );
__declspec(implementation_key(2449)) void IAnalysisMgr::PutMarHistCtrlMaxRecycle ( int _val );
__declspec(implementation_key(2450)) int IAnalysisMgr::GetMarHistCtrlMinRecycle ( );
__declspec(implementation_key(2451)) void IAnalysisMgr::PutMarHistCtrlMinRecycle ( int _val );
__declspec(implementation_key(2452)) double IAnalysisMgr::GetMarHistMaxResidual ( );
__declspec(implementation_key(2453)) void IAnalysisMgr::PutMarHistMaxResidual ( double _val );
__declspec(implementation_key(2454)) int IAnalysisMgr::GetMarHistConvergeMeth ( );
__declspec(implementation_key(2455)) void IAnalysisMgr::PutMarHistConvergeMeth ( int _val );
__declspec(implementation_key(2456)) VARIANT_BOOL IAnalysisMgr::GetMarHistNonPosDefinite ( );
__declspec(implementation_key(2457)) void IAnalysisMgr::PutMarHistNonPosDefinite ( VARIANT_BOOL _val );
__declspec(implementation_key(2458)) VARIANT_BOOL IAnalysisMgr::GetMarHistNonSymmetric ( );
__declspec(implementation_key(2459)) void IAnalysisMgr::PutMarHistNonSymmetric ( VARIANT_BOOL _val );
__declspec(implementation_key(2460)) double IAnalysisMgr::GetMarHistModalMinFreq ( );
__declspec(implementation_key(2461)) void IAnalysisMgr::PutMarHistModalMinFreq ( double _val );
__declspec(implementation_key(2462)) double IAnalysisMgr::GetMarHistModalMaxFreq ( );
__declspec(implementation_key(2463)) void IAnalysisMgr::PutMarHistModalMaxFreq ( double _val );
__declspec(implementation_key(2464)) int IAnalysisMgr::GetMarHistModalEigen ( );
__declspec(implementation_key(2465)) void IAnalysisMgr::PutMarHistModalEigen ( int _val );
__declspec(implementation_key(2466)) int IAnalysisMgr::GetMarHistChecking ( );
__declspec(implementation_key(2467)) void IAnalysisMgr::PutMarHistChecking ( int _val );
__declspec(implementation_key(2468)) VARIANT_BOOL IAnalysisMgr::GetMarHistAutoSwitch ( );
__declspec(implementation_key(2469)) void IAnalysisMgr::PutMarHistAutoSwitch ( VARIANT_BOOL _val );
__declspec(implementation_key(2470)) enum zAnalysisType IAnalysisMgr::GetMarHistAnalCaseSol ( );
__declspec(implementation_key(2471)) void IAnalysisMgr::PutMarHistAnalCaseSol ( enum zAnalysisType _val );
__declspec(implementation_key(2472)) int IAnalysisMgr::GetMarHistBuckleNumModes ( );
__declspec(implementation_key(2473)) void IAnalysisMgr::PutMarHistBuckleNumModes ( int _val );
__declspec(implementation_key(2474)) int IAnalysisMgr::GetMarHistBucklePosEigen ( );
__declspec(implementation_key(2475)) void IAnalysisMgr::PutMarHistBucklePosEigen ( int _val );
__declspec(implementation_key(2476)) VARIANT_BOOL IAnalysisMgr::GetMarIncOn ( );
__declspec(implementation_key(2477)) void IAnalysisMgr::PutMarIncOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2478)) int IAnalysisMgr::GetMarIncArcLenMeth ( );
__declspec(implementation_key(2479)) void IAnalysisMgr::PutMarIncArcLenMeth ( int _val );
__declspec(implementation_key(2480)) double IAnalysisMgr::GetMarIncTimePeriod ( );
__declspec(implementation_key(2481)) void IAnalysisMgr::PutMarIncTimePeriod ( double _val );
__declspec(implementation_key(2482)) double IAnalysisMgr::GetMarIncInitTimeInc ( );
__declspec(implementation_key(2483)) void IAnalysisMgr::PutMarIncInitTimeInc ( double _val );
__declspec(implementation_key(2484)) double IAnalysisMgr::GetMarIncMinTimeInc ( );
__declspec(implementation_key(2485)) void IAnalysisMgr::PutMarIncMinTimeInc ( double _val );
__declspec(implementation_key(2486)) double IAnalysisMgr::GetMarIncMaxTimeInc ( );
__declspec(implementation_key(2487)) void IAnalysisMgr::PutMarIncMaxTimeInc ( double _val );
__declspec(implementation_key(2488)) double IAnalysisMgr::GetMarIncScaleFact ( );
__declspec(implementation_key(2489)) void IAnalysisMgr::PutMarIncScaleFact ( double _val );
__declspec(implementation_key(2490)) int IAnalysisMgr::GetMarIncMaxStep ( );
__declspec(implementation_key(2491)) void IAnalysisMgr::PutMarIncMaxStep ( int _val );
__declspec(implementation_key(2492)) int IAnalysisMgr::GetMarIncNumOutInc ( );
__declspec(implementation_key(2493)) void IAnalysisMgr::PutMarIncNumOutInc ( int _val );
__declspec(implementation_key(2494)) VARIANT_BOOL IAnalysisMgr::GetMarIncQuasiStatDamp ( );
__declspec(implementation_key(2495)) void IAnalysisMgr::PutMarIncQuasiStatDamp ( VARIANT_BOOL _val );
__declspec(implementation_key(2496)) double IAnalysisMgr::GetMarIncFracFirst ( );
__declspec(implementation_key(2497)) void IAnalysisMgr::PutMarIncFracFirst ( double _val );
__declspec(implementation_key(2498)) int IAnalysisMgr::GetMarIncMaxNumInc ( );
__declspec(implementation_key(2499)) void IAnalysisMgr::PutMarIncMaxNumInc ( int _val );
__declspec(implementation_key(2500)) int IAnalysisMgr::GetMarIncCtrlMaxRecycle ( );
__declspec(implementation_key(2501)) void IAnalysisMgr::PutMarIncCtrlMaxRecycle ( int _val );
__declspec(implementation_key(2502)) double IAnalysisMgr::GetMarIncMaxFracForAll ( );
__declspec(implementation_key(2503)) void IAnalysisMgr::PutMarIncMaxFracForAll ( double _val );
__declspec(implementation_key(2504)) double IAnalysisMgr::GetMarIncTotalTime ( );
__declspec(implementation_key(2505)) void IAnalysisMgr::PutMarIncTotalTime ( double _val );
__declspec(implementation_key(2506)) VARIANT_BOOL IAnalysisMgr::GetMarCtblOn ( );
__declspec(implementation_key(2507)) void IAnalysisMgr::PutMarCtblOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2508)) VARIANT_BOOL IAnalysisMgr::GetMarCtblWrite ( );
__declspec(implementation_key(2509)) void IAnalysisMgr::PutMarCtblWrite ( VARIANT_BOOL _val );
__declspec(implementation_key(2510)) VARIANT_BOOL IAnalysisMgr::GetNasOmodesOn ( );
__declspec(implementation_key(2511)) void IAnalysisMgr::PutNasOmodesOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2512)) _bstr_t IAnalysisMgr::GetNasOmodes ( );
__declspec(implementation_key(2513)) void IAnalysisMgr::PutNasOmodes ( _bstr_t _val );
__declspec(implementation_key(2514)) _variant_t IAnalysisMgr::GetvBCSet ( );
__declspec(implementation_key(2515)) void IAnalysisMgr::PutvBCSet ( const _variant_t & _val );
__declspec(implementation_key(2516)) _variant_t IAnalysisMgr::GetvOutput ( );
__declspec(implementation_key(2517)) void IAnalysisMgr::PutvOutput ( const _variant_t & _val );
__declspec(implementation_key(2518)) int IAnalysisMgr::GetCaseType ( );
__declspec(implementation_key(2519)) void IAnalysisMgr::PutCaseType ( int _val );
__declspec(implementation_key(2520)) VARIANT_BOOL IAnalysisMgr::GetDynHistOn ( );
__declspec(implementation_key(2521)) void IAnalysisMgr::PutDynHistOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2522)) int IAnalysisMgr::GetDynHistBodyLoadGrp ( );
__declspec(implementation_key(2523)) void IAnalysisMgr::PutDynHistBodyLoadGrp ( int _val );
__declspec(implementation_key(2524)) VARIANT_BOOL IAnalysisMgr::GetDynHistMassDampOn ( );
__declspec(implementation_key(2525)) void IAnalysisMgr::PutDynHistMassDampOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2526)) double IAnalysisMgr::GetDynHistMsssDamp ( );
__declspec(implementation_key(2527)) void IAnalysisMgr::PutDynHistMsssDamp ( double _val );
__declspec(implementation_key(2528)) VARIANT_BOOL IAnalysisMgr::GetDynHistImplicit ( );
__declspec(implementation_key(2529)) void IAnalysisMgr::PutDynHistImplicit ( VARIANT_BOOL _val );
__declspec(implementation_key(2530)) VARIANT_BOOL IAnalysisMgr::GetDynHistSpringback ( );
__declspec(implementation_key(2531)) void IAnalysisMgr::PutDynHistSpringback ( VARIANT_BOOL _val );
__declspec(implementation_key(2532)) VARIANT_BOOL IAnalysisMgr::GetDynHistStrainOutput ( );
__declspec(implementation_key(2533)) void IAnalysisMgr::PutDynHistStrainOutput ( VARIANT_BOOL _val );
__declspec(implementation_key(2534)) double IAnalysisMgr::GetDynHistTotalTime ( );
__declspec(implementation_key(2535)) void IAnalysisMgr::PutDynHistTotalTime ( double _val );
__declspec(implementation_key(2536)) double IAnalysisMgr::GetDynHistTimeHistOuput ( );
__declspec(implementation_key(2537)) void IAnalysisMgr::PutDynHistTimeHistOuput ( double _val );
__declspec(implementation_key(2538)) double IAnalysisMgr::GetDynHistPrintHistOutput ( );
__declspec(implementation_key(2539)) void IAnalysisMgr::PutDynHistPrintHistOutput ( double _val );
__declspec(implementation_key(2540)) int IAnalysisMgr::GetDynHistPlateIntgPts ( );
__declspec(implementation_key(2541)) void IAnalysisMgr::PutDynHistPlateIntgPts ( int _val );
__declspec(implementation_key(2542)) int IAnalysisMgr::GetDynHistGroupHistId ( );
__declspec(implementation_key(2543)) void IAnalysisMgr::PutDynHistGroupHistId ( int _val );
__declspec(implementation_key(2544)) VARIANT_BOOL IAnalysisMgr::GetNasCnlOn ( );
__declspec(implementation_key(2545)) void IAnalysisMgr::PutNasCnlOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2546)) VARIANT_BOOL IAnalysisMgr::GetNasCnlUseLoadSet ( );
__declspec(implementation_key(2547)) void IAnalysisMgr::PutNasCnlUseLoadSet ( VARIANT_BOOL _val );
__declspec(implementation_key(2548)) int IAnalysisMgr::GetNasCnlIncrements ( );
__declspec(implementation_key(2549)) void IAnalysisMgr::PutNasCnlIncrements ( int _val );
__declspec(implementation_key(2550)) double IAnalysisMgr::GetNasCnlTime_Increment ( );
__declspec(implementation_key(2551)) void IAnalysisMgr::PutNasCnlTime_Increment ( double _val );
__declspec(implementation_key(2552)) int IAnalysisMgr::GetNasCnlMaxIter ( );
__declspec(implementation_key(2553)) void IAnalysisMgr::PutNasCnlMaxIter ( int _val );
__declspec(implementation_key(2554)) _variant_t IAnalysisMgr::GetvNasCnlConvergenceFlags ( );
__declspec(implementation_key(2555)) void IAnalysisMgr::PutvNasCnlConvergenceFlags ( const _variant_t & _val );
__declspec(implementation_key(2556)) _variant_t IAnalysisMgr::GetvNasCnlConvergenceValue ( );
__declspec(implementation_key(2557)) void IAnalysisMgr::PutvNasCnlConvergenceValue ( const _variant_t & _val );
__declspec(implementation_key(2558)) int IAnalysisMgr::GetNasCnlCtiffnessMethod ( );
__declspec(implementation_key(2559)) void IAnalysisMgr::PutNasCnlCtiffnessMethod ( int _val );
__declspec(implementation_key(2560)) int IAnalysisMgr::GetNasCnlKstep ( );
__declspec(implementation_key(2561)) void IAnalysisMgr::PutNasCnlKstep ( int _val );
__declspec(implementation_key(2562)) int IAnalysisMgr::GetNasCnlIntermediateOutput ( );
__declspec(implementation_key(2563)) void IAnalysisMgr::PutNasCnlIntermediateOutput ( int _val );
__declspec(implementation_key(2564)) int IAnalysisMgr::GetNasCnlOutputInterval ( );
__declspec(implementation_key(2565)) void IAnalysisMgr::PutNasCnlOutputInterval ( int _val );
__declspec(implementation_key(2566)) int IAnalysisMgr::GetNasCnlSolutionStrategy ( );
__declspec(implementation_key(2567)) void IAnalysisMgr::PutNasCnlSolutionStrategy ( int _val );
__declspec(implementation_key(2568)) int IAnalysisMgr::GetNasCnlSolutionOverrides ( );
__declspec(implementation_key(2569)) void IAnalysisMgr::PutNasCnlSolutionOverrides ( int _val );
__declspec(implementation_key(2570)) VARIANT_BOOL IAnalysisMgr::GetNasCnlModnewtonLineSearch ( );
__declspec(implementation_key(2571)) void IAnalysisMgr::PutNasCnlModnewtonLineSearch ( VARIANT_BOOL _val );
__declspec(implementation_key(2572)) VARIANT_BOOL IAnalysisMgr::GetNasCnlModnewtonQuasiNewton ( );
__declspec(implementation_key(2573)) void IAnalysisMgr::PutNasCnlModnewtonQuasiNewton ( VARIANT_BOOL _val );
__declspec(implementation_key(2574)) VARIANT_BOOL IAnalysisMgr::GetNasCnlModnewtonBisection ( );
__declspec(implementation_key(2575)) void IAnalysisMgr::PutNasCnlModnewtonBisection ( VARIANT_BOOL _val );
__declspec(implementation_key(2576)) int IAnalysisMgr::GetNasCnlArcConstraintType ( );
__declspec(implementation_key(2577)) void IAnalysisMgr::PutNasCnlArcConstraintType ( int _val );
__declspec(implementation_key(2578)) double IAnalysisMgr::GetNasCnlArcMinAdjust ( );
__declspec(implementation_key(2579)) void IAnalysisMgr::PutNasCnlArcMinAdjust ( double _val );
__declspec(implementation_key(2580)) double IAnalysisMgr::GetNasCnlArcMaxAdjust ( );
__declspec(implementation_key(2581)) void IAnalysisMgr::PutNasCnlArcMaxAdjust ( double _val );
__declspec(implementation_key(2582)) double IAnalysisMgr::GetNasCnlArcLoadScale ( );
__declspec(implementation_key(2583)) void IAnalysisMgr::PutNasCnlArcLoadScale ( double _val );
__declspec(implementation_key(2584)) int IAnalysisMgr::GetNasCnlArcDesiredIter ( );
__declspec(implementation_key(2585)) void IAnalysisMgr::PutNasCnlArcDesiredIter ( int _val );
__declspec(implementation_key(2586)) int IAnalysisMgr::GetNasCnlArcMaxSteps ( );
__declspec(implementation_key(2587)) void IAnalysisMgr::PutNasCnlArcMaxSteps ( int _val );
__declspec(implementation_key(2588)) int IAnalysisMgr::GetNasCnlTimeSkipAdjust ( );
__declspec(implementation_key(2589)) void IAnalysisMgr::PutNasCnlTimeSkipAdjust ( int _val );
__declspec(implementation_key(2590)) int IAnalysisMgr::GetNasCnlDominantPeriodSteps ( );
__declspec(implementation_key(2591)) void IAnalysisMgr::PutNasCnlDominantPeriodSteps ( int _val );
__declspec(implementation_key(2592)) double IAnalysisMgr::GetNasCnlBoundsRb ( );
__declspec(implementation_key(2593)) void IAnalysisMgr::PutNasCnlBoundsRb ( double _val );
__declspec(implementation_key(2594)) double IAnalysisMgr::GetNasCnlStabilityTolerance ( );
__declspec(implementation_key(2595)) void IAnalysisMgr::PutNasCnlStabilityTolerance ( double _val );
__declspec(implementation_key(2596)) int IAnalysisMgr::GetNasCnlDivergenceLimit ( );
__declspec(implementation_key(2597)) void IAnalysisMgr::PutNasCnlDivergenceLimit ( int _val );
__declspec(implementation_key(2598)) int IAnalysisMgr::GetNasCnlQuasiNewtonVectors ( );
__declspec(implementation_key(2599)) void IAnalysisMgr::PutNasCnlQuasiNewtonVectors ( int _val );
__declspec(implementation_key(2600)) int IAnalysisMgr::GetNasCnlMaxLineSearch ( );
__declspec(implementation_key(2601)) void IAnalysisMgr::PutNasCnlMaxLineSearch ( int _val );
__declspec(implementation_key(2602)) double IAnalysisMgr::GetNasCnlLineSearchTolerance ( );
__declspec(implementation_key(2603)) void IAnalysisMgr::PutNasCnlLineSearchTolerance ( double _val );
__declspec(implementation_key(2604)) int IAnalysisMgr::GetNasCnlMaxBisections ( );
__declspec(implementation_key(2605)) void IAnalysisMgr::PutNasCnlMaxBisections ( int _val );
__declspec(implementation_key(2606)) double IAnalysisMgr::GetNasCnlMaxRotation ( );
__declspec(implementation_key(2607)) void IAnalysisMgr::PutNasCnlMaxRotation ( double _val );
__declspec(implementation_key(2608)) double IAnalysisMgr::GetNasCnlFstress ( );
__declspec(implementation_key(2609)) void IAnalysisMgr::PutNasCnlFstress ( double _val );
__declspec(implementation_key(2610)) double IAnalysisMgr::GetNasCnlMaxAdjust ( );
__declspec(implementation_key(2611)) void IAnalysisMgr::PutNasCnlMaxAdjust ( double _val );
__declspec(implementation_key(2612)) VARIANT_BOOL IAnalysisMgr::GetNasCnlCreep ( );
__declspec(implementation_key(2613)) void IAnalysisMgr::PutNasCnlCreep ( VARIANT_BOOL _val );
__declspec(implementation_key(2614)) VARIANT_BOOL IAnalysisMgr::GetNasCnlSkipNLPARM ( );
__declspec(implementation_key(2615)) void IAnalysisMgr::PutNasCnlSkipNLPARM ( VARIANT_BOOL _val );
__declspec(implementation_key(2616)) VARIANT_BOOL IAnalysisMgr::GetNasCaeOn ( );
__declspec(implementation_key(2617)) void IAnalysisMgr::PutNasCaeOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2618)) double IAnalysisMgr::GetNasCaeMachNumber ( );
__declspec(implementation_key(2619)) void IAnalysisMgr::PutNasCaeMachNumber ( double _val );
__declspec(implementation_key(2620)) double IAnalysisMgr::GetNasCaeDynPressure ( );
__declspec(implementation_key(2621)) void IAnalysisMgr::PutNasCaeDynPressure ( double _val );
__declspec(implementation_key(2622)) VARIANT_BOOL IAnalysisMgr::GetNasCaeRigidTrim ( );
__declspec(implementation_key(2623)) void IAnalysisMgr::PutNasCaeRigidTrim ( VARIANT_BOOL _val );
__declspec(implementation_key(2624)) VARIANT_BOOL IAnalysisMgr::GetNasCaeWrtieTrim ( );
__declspec(implementation_key(2625)) void IAnalysisMgr::PutNasCaeWrtieTrim ( VARIANT_BOOL _val );
__declspec(implementation_key(2626)) VARIANT_BOOL IAnalysisMgr::GetNasCflOn ( );
__declspec(implementation_key(2627)) void IAnalysisMgr::PutNasCflOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2628)) int IAnalysisMgr::GetNasCflMethod ( );
__declspec(implementation_key(2629)) void IAnalysisMgr::PutNasCflMethod ( int _val );
__declspec(implementation_key(2630)) int IAnalysisMgr::GetNasCflDenID ( );
__declspec(implementation_key(2631)) void IAnalysisMgr::PutNasCflDenID ( int _val );
__declspec(implementation_key(2632)) int IAnalysisMgr::GetNasCflMachFactID ( );
__declspec(implementation_key(2633)) void IAnalysisMgr::PutNasCflMachFactID ( int _val );
__declspec(implementation_key(2634)) int IAnalysisMgr::GetNasCflRfreqFactID ( );
__declspec(implementation_key(2635)) void IAnalysisMgr::PutNasCflRfreqFactID ( int _val );
__declspec(implementation_key(2636)) int IAnalysisMgr::GetNasCflFliMethod ( );
__declspec(implementation_key(2637)) void IAnalysisMgr::PutNasCflFliMethod ( int _val );
__declspec(implementation_key(2638)) int IAnalysisMgr::GetNasCflEig ( );
__declspec(implementation_key(2639)) void IAnalysisMgr::PutNasCflEig ( int _val );
__declspec(implementation_key(2640)) double IAnalysisMgr::GetNasCflEps ( );
__declspec(implementation_key(2641)) void IAnalysisMgr::PutNasCflEps ( double _val );
__declspec(implementation_key(2642)) VARIANT_BOOL IAnalysisMgr::GetNasCflWriteFlutter ( );
__declspec(implementation_key(2643)) void IAnalysisMgr::PutNasCflWriteFlutter ( VARIANT_BOOL _val );
__declspec(implementation_key(2644)) int IAnalysisMgr::GetNasCflSdampID ( );
__declspec(implementation_key(2645)) void IAnalysisMgr::PutNasCflSdampID ( int _val );
__declspec(implementation_key(2646)) int IAnalysisMgr::GetNasSELoad ( );
__declspec(implementation_key(2647)) void IAnalysisMgr::PutNasSELoad ( int _val );
__declspec(implementation_key(2648)) VARIANT_BOOL IAnalysisMgr::GetNasCnlkDAMP ( );
__declspec(implementation_key(2649)) void IAnalysisMgr::PutNasCnlkDAMP ( VARIANT_BOOL _val );
__declspec(implementation_key(2650)) int IAnalysisMgr::GetNasCnlkUPDATE ( );
__declspec(implementation_key(2651)) void IAnalysisMgr::PutNasCnlkUPDATE ( int _val );
__declspec(implementation_key(2652)) VARIANT_BOOL IAnalysisMgr::GetNasRelEMotion ( );
__declspec(implementation_key(2653)) void IAnalysisMgr::PutNasRelEMotion ( VARIANT_BOOL _val );
__declspec(implementation_key(2654)) int IAnalysisMgr::GetNasCnlStiffnessMethod ( );
__declspec(implementation_key(2655)) void IAnalysisMgr::PutNasCnlStiffnessMethod ( int _val );
__declspec(implementation_key(2656)) _bstr_t IAnalysisMgr::GetCaseLabel ( );
__declspec(implementation_key(2657)) void IAnalysisMgr::PutCaseLabel ( _bstr_t _val );
__declspec(implementation_key(2658)) int IAnalysisMgr::GetContactOption ( );
__declspec(implementation_key(2659)) void IAnalysisMgr::PutContactOption ( int _val );
__declspec(implementation_key(2660)) int IAnalysisMgr::GetContactSetType ( );
__declspec(implementation_key(2661)) void IAnalysisMgr::PutContactSetType ( int _val );
__declspec(implementation_key(2662)) _variant_t IAnalysisMgr::GetvMSCNasCnlConvergenceFlags ( );
__declspec(implementation_key(2663)) void IAnalysisMgr::PutvMSCNasCnlConvergenceFlags ( const _variant_t & _val );
__declspec(implementation_key(2664)) VARIANT_BOOL IAnalysisMgr::GetNasCurvatureStrain ( );
__declspec(implementation_key(2665)) void IAnalysisMgr::PutNasCurvatureStrain ( VARIANT_BOOL _val );
__declspec(implementation_key(2666)) VARIANT_BOOL IAnalysisMgr::GetAnsCmlOn ( );
__declspec(implementation_key(2667)) void IAnalysisMgr::PutAnsCmlOn ( VARIANT_BOOL _val );
__declspec(implementation_key(2668)) int IAnalysisMgr::GetAnsCmlVersion ( );
__declspec(implementation_key(2669)) void IAnalysisMgr::PutAnsCmlVersion ( int _val );
__declspec(implementation_key(2670)) int IAnalysisMgr::GetAnsCmlPid ( );
__declspec(implementation_key(2671)) void IAnalysisMgr::PutAnsCmlPid ( int _val );
__declspec(implementation_key(2672)) _bstr_t IAnalysisMgr::GetAnsCmlProd ( );
__declspec(implementation_key(2673)) void IAnalysisMgr::PutAnsCmlProd ( _bstr_t _val );
__declspec(implementation_key(2674)) VARIANT_BOOL IAnalysisMgr::GetAnsCmlList ( );
__declspec(implementation_key(2675)) void IAnalysisMgr::PutAnsCmlList ( VARIANT_BOOL _val );
__declspec(implementation_key(2676)) _bstr_t IAnalysisMgr::GetAnsCmlJobname ( );
__declspec(implementation_key(2677)) void IAnalysisMgr::PutAnsCmlJobname ( _bstr_t _val );
__declspec(implementation_key(2678)) _bstr_t IAnalysisMgr::GetAnsCmlDir ( );
__declspec(implementation_key(2679)) void IAnalysisMgr::PutAnsCmlDir ( _bstr_t _val );
__declspec(implementation_key(2680)) int IAnalysisMgr::GetAnsCmlDBmem ( );
__declspec(implementation_key(2681)) void IAnalysisMgr::PutAnsCmlDBmem ( int _val );
__declspec(implementation_key(2682)) int IAnalysisMgr::GetAnsCmlWSmem ( );
__declspec(implementation_key(2683)) void IAnalysisMgr::PutAnsCmlWSmem ( int _val );
__declspec(implementation_key(2684)) _bstr_t IAnalysisMgr::GetAnsCmlUser ( );
__declspec(implementation_key(2685)) void IAnalysisMgr::PutAnsCmlUser ( _bstr_t _val );
__declspec(implementation_key(2686)) int IAnalysisMgr::GetID ( );
__declspec(implementation_key(2687)) void IAnalysisMgr::PutID ( int _val );
__declspec(implementation_key(2688)) int IAnalysisMgr::GetsetID ( );
__declspec(implementation_key(2689)) void IAnalysisMgr::PutsetID ( int _val );
__declspec(implementation_key(2690)) int IAnalysisMgr::GetActive ( );
__declspec(implementation_key(2691)) void IAnalysisMgr::PutActive ( int _val );
__declspec(implementation_key(2692)) int IBCEqn::Getdof ( int nVectorIndex );
__declspec(implementation_key(2693)) void IBCEqn::Putdof ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(2694)) int IBCEqn::GetNode ( int nVectorIndex );
__declspec(implementation_key(2695)) void IBCEqn::PutNode ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(2696)) double IBCEqn::Getcoefficient ( int nVectorIndex );
__declspec(implementation_key(2697)) void IBCEqn::Putcoefficient ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(2698)) enum zReturnCode IBCEqn::Put ( int entID );
__declspec(implementation_key(2699)) enum zReturnCode IBCEqn::Delete ( int entID );
__declspec(implementation_key(2700)) enum zReturnCode IBCEqn::GetAll ( int nID, int nSetID, int * pnDefID, int * pnCount, VARIANT * pvNode, VARIANT * pvDof, VARIANT * pvCoeff, enum zColor * peColor, int * pnLayer );
__declspec(implementation_key(2701)) enum zReturnCode IBCEqn::PutAll ( int nID, int nSetID, int nDefID, int nCount, const _variant_t & vnode, const _variant_t & vdof, const _variant_t & vCoeff, enum zColor eColor, int nlayer );
__declspec(implementation_key(2702)) enum zReturnCode IBCEqn::NextSet ( );
__declspec(implementation_key(2703)) enum zReturnCode IBCEqn::PrevSet ( );
__declspec(implementation_key(2704)) enum zReturnCode IBCEqn::NextEmptySet ( );
__declspec(implementation_key(2705)) enum zReturnCode IBCEqn::PrevEmptySet ( );
__declspec(implementation_key(2706)) enum zReturnCode IBCEqn::Get ( int ID );
__declspec(implementation_key(2707)) enum zReturnCode IBCEqn::Exist ( int ID );
__declspec(implementation_key(2708)) enum zReturnCode IBCEqn::Deletable ( int ID );
__declspec(implementation_key(2709)) enum zReturnCode IBCEqn::Reset ( );
__declspec(implementation_key(2710)) enum zReturnCode IBCEqn::Next ( );
__declspec(implementation_key(2711)) enum zReturnCode IBCEqn::Prev ( );
__declspec(implementation_key(2712)) enum zReturnCode IBCEqn::First ( );
__declspec(implementation_key(2713)) enum zReturnCode IBCEqn::Last ( );
__declspec(implementation_key(2714)) int IBCEqn::NextID ( );
__declspec(implementation_key(2715)) int IBCEqn::PrevID ( );
__declspec(implementation_key(2716)) int IBCEqn::NextEmptyID ( );
__declspec(implementation_key(2717)) int IBCEqn::PrevEmptyID ( );
__declspec(implementation_key(2718)) enum zReturnCode IBCEqn::GetLibrary ( int ID );
__declspec(implementation_key(2719)) enum zReturnCode IBCEqn::PutLibrary ( );
__declspec(implementation_key(2720)) enum zReturnCode IBCEqn::DeleteLibrary ( int ID );
__declspec(implementation_key(2721)) enum zReturnCode IBCEqn::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(2722)) enum zReturnCode IBCEqn::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(2723)) int IBCEqn::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(2724)) enum zReturnCode IBCEqn::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(2725)) enum zReturnCode IBCEqn::NextInSet ( int nSetID );
__declspec(implementation_key(2726)) enum zReturnCode IBCEqn::FirstInSet ( int nSetID );
__declspec(implementation_key(2727)) int IBCEqn::CountSet ( );
__declspec(implementation_key(2728)) enum zReturnCode IBCEqn::NextExistingInSet ( int nSetID );
__declspec(implementation_key(2729)) enum zReturnCode IBCEqn::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(2730)) int IBCEqn::Getlayer ( );
__declspec(implementation_key(2731)) void IBCEqn::Putlayer ( int _val );
__declspec(implementation_key(2732)) enum zColor IBCEqn::Getcolor ( );
__declspec(implementation_key(2733)) void IBCEqn::Putcolor ( enum zColor _val );
__declspec(implementation_key(2734)) int IBCEqn::GetCount ( );
__declspec(implementation_key(2735)) void IBCEqn::PutCount ( int _val );
__declspec(implementation_key(2736)) _variant_t IBCEqn::Getvdof ( );
__declspec(implementation_key(2737)) void IBCEqn::Putvdof ( const _variant_t & _val );
__declspec(implementation_key(2738)) _variant_t IBCEqn::Getvnode ( );
__declspec(implementation_key(2739)) void IBCEqn::Putvnode ( const _variant_t & _val );
__declspec(implementation_key(2740)) _variant_t IBCEqn::Getvcoefficient ( );
__declspec(implementation_key(2741)) void IBCEqn::Putvcoefficient ( const _variant_t & _val );
__declspec(implementation_key(2742)) int IBCEqn::GetBCDefinitionID ( );
__declspec(implementation_key(2743)) void IBCEqn::PutBCDefinitionID ( int _val );
__declspec(implementation_key(2744)) int IBCEqn::GetID ( );
__declspec(implementation_key(2745)) void IBCEqn::PutID ( int _val );
__declspec(implementation_key(2746)) int IBCEqn::GetsetID ( );
__declspec(implementation_key(2747)) void IBCEqn::PutsetID ( int _val );
__declspec(implementation_key(2748)) int IBCEqn::GetActive ( );
__declspec(implementation_key(2749)) void IBCEqn::PutActive ( int _val );
__declspec(implementation_key(2750)) VARIANT_BOOL IBCGeom::Getdof ( int nVectorIndex );
__declspec(implementation_key(2751)) void IBCGeom::Putdof ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(2752)) double IBCGeom::Getdirection ( int nVectorIndex );
__declspec(implementation_key(2753)) void IBCGeom::Putdirection ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(2754)) enum zReturnCode IBCGeom::GetSearch ( enum zDataType geomTYPE, int geomID );
__declspec(implementation_key(2755)) enum zReturnCode IBCGeom::Put ( int entID );
__declspec(implementation_key(2756)) enum zReturnCode IBCGeom::Delete ( int entID );
__declspec(implementation_key(2757)) enum zReturnCode IBCGeom::SetSurfSliding ( int surfID );
__declspec(implementation_key(2758)) enum zReturnCode IBCGeom::SetSurfNormal ( int surfID );
__declspec(implementation_key(2759)) enum zReturnCode IBCGeom::SetSurfDirection ( int surfID, double x, double y, double z );
__declspec(implementation_key(2760)) enum zReturnCode IBCGeom::SetCylinder ( int surfID, VARIANT_BOOL radius, VARIANT_BOOL rotation, VARIANT_BOOL sliding );
__declspec(implementation_key(2761)) enum zReturnCode IBCGeom::SetFixed ( enum zDataType geomTYPE, int geomID );
__declspec(implementation_key(2762)) enum zReturnCode IBCGeom::SetPinned ( enum zDataType geomTYPE, int geomID );
__declspec(implementation_key(2763)) enum zReturnCode IBCGeom::SetNoRotation ( enum zDataType geomTYPE, int geomID );
__declspec(implementation_key(2764)) enum zReturnCode IBCGeom::SetArbitrary ( enum zDataType geomTYPE, int geomID, int csysID, VARIANT_BOOL bDOF1, VARIANT_BOOL bDOF2, VARIANT_BOOL bDOF3, VARIANT_BOOL bDOF4, VARIANT_BOOL bDOF5, VARIANT_BOOL bDOF6 );
__declspec(implementation_key(2765)) enum zReturnCode IBCGeom::NextSet ( );
__declspec(implementation_key(2766)) enum zReturnCode IBCGeom::PrevSet ( );
__declspec(implementation_key(2767)) enum zReturnCode IBCGeom::NextEmptySet ( );
__declspec(implementation_key(2768)) enum zReturnCode IBCGeom::PrevEmptySet ( );
__declspec(implementation_key(2769)) enum zReturnCode IBCGeom::Get ( int ID );
__declspec(implementation_key(2770)) enum zReturnCode IBCGeom::Exist ( int ID );
__declspec(implementation_key(2771)) enum zReturnCode IBCGeom::Deletable ( int ID );
__declspec(implementation_key(2772)) enum zReturnCode IBCGeom::Reset ( );
__declspec(implementation_key(2773)) enum zReturnCode IBCGeom::Next ( );
__declspec(implementation_key(2774)) enum zReturnCode IBCGeom::Prev ( );
__declspec(implementation_key(2775)) enum zReturnCode IBCGeom::First ( );
__declspec(implementation_key(2776)) enum zReturnCode IBCGeom::Last ( );
__declspec(implementation_key(2777)) int IBCGeom::NextID ( );
__declspec(implementation_key(2778)) int IBCGeom::PrevID ( );
__declspec(implementation_key(2779)) int IBCGeom::NextEmptyID ( );
__declspec(implementation_key(2780)) int IBCGeom::PrevEmptyID ( );
__declspec(implementation_key(2781)) enum zReturnCode IBCGeom::GetLibrary ( int ID );
__declspec(implementation_key(2782)) enum zReturnCode IBCGeom::PutLibrary ( );
__declspec(implementation_key(2783)) enum zReturnCode IBCGeom::DeleteLibrary ( int ID );
__declspec(implementation_key(2784)) enum zReturnCode IBCGeom::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(2785)) enum zReturnCode IBCGeom::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(2786)) int IBCGeom::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(2787)) enum zReturnCode IBCGeom::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(2788)) enum zReturnCode IBCGeom::NextInSet ( int nSetID );
__declspec(implementation_key(2789)) enum zReturnCode IBCGeom::FirstInSet ( int nSetID );
__declspec(implementation_key(2790)) int IBCGeom::CountSet ( );
__declspec(implementation_key(2791)) enum zReturnCode IBCGeom::NextExistingInSet ( int nSetID );
__declspec(implementation_key(2792)) enum zReturnCode IBCGeom::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(2793)) int IBCGeom::Getlayer ( );
__declspec(implementation_key(2794)) void IBCGeom::Putlayer ( int _val );
__declspec(implementation_key(2795)) enum zColor IBCGeom::Getcolor ( );
__declspec(implementation_key(2796)) void IBCGeom::Putcolor ( enum zColor _val );
__declspec(implementation_key(2797)) VARIANT_BOOL IBCGeom::Getexpanded ( );
__declspec(implementation_key(2798)) void IBCGeom::Putexpanded ( VARIANT_BOOL _val );
__declspec(implementation_key(2799)) int IBCGeom::GetgeomID ( );
__declspec(implementation_key(2800)) void IBCGeom::PutgeomID ( int _val );
__declspec(implementation_key(2801)) enum zDataType IBCGeom::GetgeomTYPE ( );
__declspec(implementation_key(2802)) void IBCGeom::PutgeomTYPE ( enum zDataType _val );
__declspec(implementation_key(2803)) enum zBCGeomType IBCGeom::Gettype ( );
__declspec(implementation_key(2804)) void IBCGeom::Puttype ( enum zBCGeomType _val );
__declspec(implementation_key(2805)) int IBCGeom::GetoutCSys ( );
__declspec(implementation_key(2806)) void IBCGeom::PutoutCSys ( int _val );
__declspec(implementation_key(2807)) _variant_t IBCGeom::Getdofvec ( );
__declspec(implementation_key(2808)) void IBCGeom::Putdofvec ( const _variant_t & _val );
__declspec(implementation_key(2809)) _variant_t IBCGeom::Getvdof ( );
__declspec(implementation_key(2810)) void IBCGeom::Putvdof ( const _variant_t & _val );
__declspec(implementation_key(2811)) _variant_t IBCGeom::Getvdirection ( );
__declspec(implementation_key(2812)) void IBCGeom::Putvdirection ( const _variant_t & _val );
__declspec(implementation_key(2813)) int IBCGeom::GetBCDefinitionID ( );
__declspec(implementation_key(2814)) void IBCGeom::PutBCDefinitionID ( int _val );
__declspec(implementation_key(2815)) int IBCGeom::GetID ( );
__declspec(implementation_key(2816)) void IBCGeom::PutID ( int _val );
__declspec(implementation_key(2817)) int IBCGeom::GetsetID ( );
__declspec(implementation_key(2818)) void IBCGeom::PutsetID ( int _val );
__declspec(implementation_key(2819)) int IBCGeom::GetActive ( );
__declspec(implementation_key(2820)) void IBCGeom::PutActive ( int _val );
__declspec(implementation_key(2821)) VARIANT_BOOL IBCNode::Getdof ( int nVectorIndex );
__declspec(implementation_key(2822)) void IBCNode::Putdof ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(2823)) double IBCNode::Getvalue ( int nVectorIndex );
__declspec(implementation_key(2824)) void IBCNode::Putvalue ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(2825)) enum zReturnCode IBCNode::Put ( int entID );
__declspec(implementation_key(2826)) enum zReturnCode IBCNode::Delete ( int entID );
__declspec(implementation_key(2827)) enum zReturnCode IBCNode::AddArray ( int Count, VARIANT_BOOL doDOF, const _variant_t & NodeID, const _variant_t & dof );
__declspec(implementation_key(2828)) enum zReturnCode IBCNode::Add ( int setID, VARIANT_BOOL bDOF1, VARIANT_BOOL bDOF2, VARIANT_BOOL bDOF3, VARIANT_BOOL bDOF4, VARIANT_BOOL bDOF5, VARIANT_BOOL bDOF6 );
__declspec(implementation_key(2829)) enum zReturnCode IBCNode::AddNonZero ( int setID, VARIANT_BOOL bDOF1, double dVal1, VARIANT_BOOL bDOF2, double dVal2, VARIANT_BOOL bDOF3, double dVal3, VARIANT_BOOL bDOF4, double dVal4, VARIANT_BOOL bDOF5, double dVal5, VARIANT_BOOL bDOF6, double dVal6 );
__declspec(implementation_key(2830)) enum zReturnCode IBCNode::NextSet ( );
__declspec(implementation_key(2831)) enum zReturnCode IBCNode::PrevSet ( );
__declspec(implementation_key(2832)) enum zReturnCode IBCNode::NextEmptySet ( );
__declspec(implementation_key(2833)) enum zReturnCode IBCNode::PrevEmptySet ( );
__declspec(implementation_key(2834)) enum zReturnCode IBCNode::Get ( int ID );
__declspec(implementation_key(2835)) enum zReturnCode IBCNode::Exist ( int ID );
__declspec(implementation_key(2836)) enum zReturnCode IBCNode::Deletable ( int ID );
__declspec(implementation_key(2837)) enum zReturnCode IBCNode::Reset ( );
__declspec(implementation_key(2838)) enum zReturnCode IBCNode::Next ( );
__declspec(implementation_key(2839)) enum zReturnCode IBCNode::Prev ( );
__declspec(implementation_key(2840)) enum zReturnCode IBCNode::First ( );
__declspec(implementation_key(2841)) enum zReturnCode IBCNode::Last ( );
__declspec(implementation_key(2842)) int IBCNode::NextID ( );
__declspec(implementation_key(2843)) int IBCNode::PrevID ( );
__declspec(implementation_key(2844)) int IBCNode::NextEmptyID ( );
__declspec(implementation_key(2845)) int IBCNode::PrevEmptyID ( );
__declspec(implementation_key(2846)) enum zReturnCode IBCNode::GetLibrary ( int ID );
__declspec(implementation_key(2847)) enum zReturnCode IBCNode::PutLibrary ( );
__declspec(implementation_key(2848)) enum zReturnCode IBCNode::DeleteLibrary ( int ID );
__declspec(implementation_key(2849)) enum zReturnCode IBCNode::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(2850)) enum zReturnCode IBCNode::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(2851)) int IBCNode::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(2852)) enum zReturnCode IBCNode::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(2853)) enum zReturnCode IBCNode::NextInSet ( int nSetID );
__declspec(implementation_key(2854)) enum zReturnCode IBCNode::FirstInSet ( int nSetID );
__declspec(implementation_key(2855)) int IBCNode::CountSet ( );
__declspec(implementation_key(2856)) enum zReturnCode IBCNode::NextExistingInSet ( int nSetID );
__declspec(implementation_key(2857)) enum zReturnCode IBCNode::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(2858)) int IBCNode::Getlayer ( );
__declspec(implementation_key(2859)) void IBCNode::Putlayer ( int _val );
__declspec(implementation_key(2860)) enum zColor IBCNode::Getcolor ( );
__declspec(implementation_key(2861)) void IBCNode::Putcolor ( enum zColor _val );
__declspec(implementation_key(2862)) VARIANT_BOOL IBCNode::Getexpanded ( );
__declspec(implementation_key(2863)) void IBCNode::Putexpanded ( VARIANT_BOOL _val );
__declspec(implementation_key(2864)) _variant_t IBCNode::Getdofvec ( );
__declspec(implementation_key(2865)) void IBCNode::Putdofvec ( const _variant_t & _val );
__declspec(implementation_key(2866)) _variant_t IBCNode::Getvdof ( );
__declspec(implementation_key(2867)) void IBCNode::Putvdof ( const _variant_t & _val );
__declspec(implementation_key(2868)) int IBCNode::GetBCDefinitionID ( );
__declspec(implementation_key(2869)) void IBCNode::PutBCDefinitionID ( int _val );
__declspec(implementation_key(2870)) VARIANT_BOOL IBCNode::GetNonZeroConstraint ( );
__declspec(implementation_key(2871)) void IBCNode::PutNonZeroConstraint ( VARIANT_BOOL _val );
__declspec(implementation_key(2872)) _variant_t IBCNode::Getvvalue ( );
__declspec(implementation_key(2873)) void IBCNode::Putvvalue ( const _variant_t & _val );
__declspec(implementation_key(2874)) int IBCNode::GetID ( );
__declspec(implementation_key(2875)) void IBCNode::PutID ( int _val );
__declspec(implementation_key(2876)) int IBCNode::GetsetID ( );
__declspec(implementation_key(2877)) void IBCNode::PutsetID ( int _val );
__declspec(implementation_key(2878)) int IBCNode::GetActive ( );
__declspec(implementation_key(2879)) void IBCNode::PutActive ( int _val );
__declspec(implementation_key(2880)) enum zReturnCode IBCSet::Expand ( );
__declspec(implementation_key(2881)) enum zReturnCode IBCSet::Compress ( );
__declspec(implementation_key(2882)) enum zReturnCode IBCSet::Get ( int entID );
__declspec(implementation_key(2883)) enum zReturnCode IBCSet::ResetNextBC ( enum zDataType enDataType, VARIANT_BOOL bOtherBCOnly, VARIANT_BOOL bIncludeExpanded );
__declspec(implementation_key(2884)) enum zReturnCode IBCSet::NextBC ( IDispatch * * pDispatch );
__declspec(implementation_key(2885)) enum zReturnCode IBCSet::ResetNextBCDef ( VARIANT_BOOL bAllDataTypes, enum zDataType enDataType );
__declspec(implementation_key(2886)) enum zReturnCode IBCSet::NextBCDef ( IDispatch * * pDispatch );
__declspec(implementation_key(2887)) enum zReturnCode IBCSet::Put ( int entID );
__declspec(implementation_key(2888)) enum zReturnCode IBCSet::GetCombination ( int * nCombo, VARIANT * nSetID );
__declspec(implementation_key(2889)) enum zReturnCode IBCSet::PutCombination ( int nCombo, const _variant_t & nSetID );
__declspec(implementation_key(2890)) enum zReturnCode IBCSet::NextSet ( );
__declspec(implementation_key(2891)) enum zReturnCode IBCSet::PrevSet ( );
__declspec(implementation_key(2892)) enum zReturnCode IBCSet::NextEmptySet ( );
__declspec(implementation_key(2893)) enum zReturnCode IBCSet::PrevEmptySet ( );
__declspec(implementation_key(2894)) enum zReturnCode IBCSet::Exist ( int ID );
__declspec(implementation_key(2895)) enum zReturnCode IBCSet::Deletable ( int ID );
__declspec(implementation_key(2896)) enum zReturnCode IBCSet::Delete ( int ID );
__declspec(implementation_key(2897)) enum zReturnCode IBCSet::Reset ( );
__declspec(implementation_key(2898)) enum zReturnCode IBCSet::Next ( );
__declspec(implementation_key(2899)) enum zReturnCode IBCSet::Prev ( );
__declspec(implementation_key(2900)) enum zReturnCode IBCSet::First ( );
__declspec(implementation_key(2901)) enum zReturnCode IBCSet::Last ( );
__declspec(implementation_key(2902)) int IBCSet::NextID ( );
__declspec(implementation_key(2903)) int IBCSet::PrevID ( );
__declspec(implementation_key(2904)) int IBCSet::NextEmptyID ( );
__declspec(implementation_key(2905)) int IBCSet::PrevEmptyID ( );
__declspec(implementation_key(2906)) enum zReturnCode IBCSet::GetLibrary ( int ID );
__declspec(implementation_key(2907)) enum zReturnCode IBCSet::PutLibrary ( );
__declspec(implementation_key(2908)) enum zReturnCode IBCSet::DeleteLibrary ( int ID );
__declspec(implementation_key(2909)) enum zReturnCode IBCSet::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(2910)) enum zReturnCode IBCSet::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(2911)) int IBCSet::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(2912)) enum zReturnCode IBCSet::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(2913)) enum zReturnCode IBCSet::NextInSet ( int nSetID );
__declspec(implementation_key(2914)) enum zReturnCode IBCSet::FirstInSet ( int nSetID );
__declspec(implementation_key(2915)) int IBCSet::CountSet ( );
__declspec(implementation_key(2916)) enum zReturnCode IBCSet::NextExistingInSet ( int nSetID );
__declspec(implementation_key(2917)) enum zReturnCode IBCSet::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(2918)) _bstr_t IBCSet::Gettitle ( );
__declspec(implementation_key(2919)) void IBCSet::Puttitle ( _bstr_t _val );
__declspec(implementation_key(2920)) VARIANT_BOOL IBCSet::GetIsCombination ( );
__declspec(implementation_key(2921)) void IBCSet::PutIsCombination ( VARIANT_BOOL _val );
__declspec(implementation_key(2922)) int IBCSet::GetID ( );
__declspec(implementation_key(2923)) void IBCSet::PutID ( int _val );
__declspec(implementation_key(2924)) int IBCSet::GetsetID ( );
__declspec(implementation_key(2925)) void IBCSet::PutsetID ( int _val );
__declspec(implementation_key(2926)) int IBCSet::GetActive ( );
__declspec(implementation_key(2927)) void IBCSet::PutActive ( int _val );
__declspec(implementation_key(2928)) double IContact::Getbox ( int nRowIndex, int nColIndex );
__declspec(implementation_key(2929)) void IContact::Putbox ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(2930)) enum zReturnCode IContact::Get ( int entID );
__declspec(implementation_key(2931)) enum zReturnCode IContact::Put ( int entID );
__declspec(implementation_key(2932)) enum zReturnCode IContact::GetContactList ( int * listcount, VARIANT * listTYPE, VARIANT * entityID, VARIANT * faceID, VARIANT * expanded );
__declspec(implementation_key(2933)) enum zReturnCode IContact::PutContactList ( int listcount, const _variant_t & listTYPE, const _variant_t & entityID, const _variant_t & faceID, const _variant_t & expanded );
__declspec(implementation_key(2934)) enum zReturnCode IContact::Expand ( );
__declspec(implementation_key(2935)) enum zReturnCode IContact::Compress ( );
__declspec(implementation_key(2936)) enum zReturnCode IContact::AddContact ( enum zDataType entityTYPE, int entityID, int faceID );
__declspec(implementation_key(2937)) enum zReturnCode IContact::SetOutputType ( enum zDataType entityTYPE );
__declspec(implementation_key(2938)) enum zReturnCode IContact::SetOffset ( double offset );
__declspec(implementation_key(2939)) enum zReturnCode IContact::GetOffset ( double * offset );
__declspec(implementation_key(2940)) enum zReturnCode IContact::SetRigidType ( VARIANT_BOOL isRigid );
__declspec(implementation_key(2941)) enum zReturnCode IContact::IsRigidType ( );
__declspec(implementation_key(2942)) enum zReturnCode IContact::clear ( );
__declspec(implementation_key(2943)) ISortSetPtr IContact::GetEntities ( enum zDataType entityTYPE, VARIANT_BOOL bGetExpanded );
__declspec(implementation_key(2944)) enum zReturnCode IContact::Enable ( VARIANT_BOOL bEnable );
__declspec(implementation_key(2945)) enum zReturnCode IContact::IsEnabled ( );
__declspec(implementation_key(2946)) enum zReturnCode IContact::Reverse ( );
__declspec(implementation_key(2947)) enum zReturnCode IContact::BoundingBox ( VARIANT * box );
__declspec(implementation_key(2948)) enum zReturnCode IContact::IsEmpty ( );
__declspec(implementation_key(2949)) enum zReturnCode IContact::BoundingBoxInCSys ( int nCSysID, VARIANT * box );
__declspec(implementation_key(2950)) ISetPtr IContact::GetEntitySet ( enum zDataType entityTYPE, VARIANT_BOOL bGetExpanded );
__declspec(implementation_key(2951)) enum zReturnCode IContact::NextSet ( );
__declspec(implementation_key(2952)) enum zReturnCode IContact::PrevSet ( );
__declspec(implementation_key(2953)) enum zReturnCode IContact::NextEmptySet ( );
__declspec(implementation_key(2954)) enum zReturnCode IContact::PrevEmptySet ( );
__declspec(implementation_key(2955)) enum zReturnCode IContact::Exist ( int ID );
__declspec(implementation_key(2956)) enum zReturnCode IContact::Deletable ( int ID );
__declspec(implementation_key(2957)) enum zReturnCode IContact::Delete ( int ID );
__declspec(implementation_key(2958)) enum zReturnCode IContact::Reset ( );
__declspec(implementation_key(2959)) enum zReturnCode IContact::Next ( );
__declspec(implementation_key(2960)) enum zReturnCode IContact::Prev ( );
__declspec(implementation_key(2961)) enum zReturnCode IContact::First ( );
__declspec(implementation_key(2962)) enum zReturnCode IContact::Last ( );
__declspec(implementation_key(2963)) int IContact::NextID ( );
__declspec(implementation_key(2964)) int IContact::PrevID ( );
__declspec(implementation_key(2965)) int IContact::NextEmptyID ( );
__declspec(implementation_key(2966)) int IContact::PrevEmptyID ( );
__declspec(implementation_key(2967)) enum zReturnCode IContact::GetLibrary ( int ID );
__declspec(implementation_key(2968)) enum zReturnCode IContact::PutLibrary ( );
__declspec(implementation_key(2969)) enum zReturnCode IContact::DeleteLibrary ( int ID );
__declspec(implementation_key(2970)) enum zReturnCode IContact::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(2971)) enum zReturnCode IContact::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(2972)) int IContact::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(2973)) enum zReturnCode IContact::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(2974)) enum zReturnCode IContact::NextInSet ( int nSetID );
__declspec(implementation_key(2975)) enum zReturnCode IContact::FirstInSet ( int nSetID );
__declspec(implementation_key(2976)) int IContact::CountSet ( );
__declspec(implementation_key(2977)) enum zReturnCode IContact::NextExistingInSet ( int nSetID );
__declspec(implementation_key(2978)) enum zReturnCode IContact::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(2979)) _bstr_t IContact::Gettitle ( );
__declspec(implementation_key(2980)) void IContact::Puttitle ( _bstr_t _val );
__declspec(implementation_key(2981)) enum zColor IContact::Getcolor ( );
__declspec(implementation_key(2982)) void IContact::Putcolor ( enum zColor _val );
__declspec(implementation_key(2983)) int IContact::Getlayer ( );
__declspec(implementation_key(2984)) void IContact::Putlayer ( int _val );
__declspec(implementation_key(2985)) int IContact::GetrefNode ( );
__declspec(implementation_key(2986)) void IContact::PutrefNode ( int _val );
__declspec(implementation_key(2987)) enum zDataType IContact::GetOutput ( );
__declspec(implementation_key(2988)) void IContact::PutOutput ( enum zDataType _val );
__declspec(implementation_key(2989)) VARIANT_BOOL IContact::Getrigid ( );
__declspec(implementation_key(2990)) void IContact::Putrigid ( VARIANT_BOOL _val );
__declspec(implementation_key(2991)) _variant_t IContact::Getvbox ( );
__declspec(implementation_key(2992)) void IContact::Putvbox ( const _variant_t & _val );
__declspec(implementation_key(2993)) int IContact::GetCount ( );
__declspec(implementation_key(2994)) void IContact::PutCount ( int _val );
__declspec(implementation_key(2995)) enum zConnectionRegionType IContact::Gettype ( );
__declspec(implementation_key(2996)) void IContact::Puttype ( enum zConnectionRegionType _val );
__declspec(implementation_key(2997)) int IContact::GetrefCSys ( );
__declspec(implementation_key(2998)) void IContact::PutrefCSys ( int _val );
__declspec(implementation_key(2999)) int IContact::GetRotorLoadSet ( );
__declspec(implementation_key(3000)) void IContact::PutRotorLoadSet ( int _val );
__declspec(implementation_key(3001)) double IContact::Getoffset ( );
__declspec(implementation_key(3002)) void IContact::Putoffset ( double _val );
__declspec(implementation_key(3003)) VARIANT_BOOL IContact::GetFluidZFreeOn ( );
__declspec(implementation_key(3004)) void IContact::PutFluidZFreeOn ( VARIANT_BOOL _val );
__declspec(implementation_key(3005)) double IContact::GetFluidZFree ( );
__declspec(implementation_key(3006)) void IContact::PutFluidZFree ( double _val );
__declspec(implementation_key(3007)) double IContact::GetFluidDensity ( );
__declspec(implementation_key(3008)) void IContact::PutFluidDensity ( double _val );
__declspec(implementation_key(3009)) int IContact::GetFluidXZSymmetry ( );
__declspec(implementation_key(3010)) void IContact::PutFluidXZSymmetry ( int _val );
__declspec(implementation_key(3011)) int IContact::GetFluidYZSymmetry ( );
__declspec(implementation_key(3012)) void IContact::PutFluidYZSymmetry ( int _val );
__declspec(implementation_key(3013)) double IContact::GetFluidCharLength ( );
__declspec(implementation_key(3014)) void IContact::PutFluidCharLength ( double _val );
__declspec(implementation_key(3015)) double IContact::GetFluidExactIntegFact ( );
__declspec(implementation_key(3016)) void IContact::PutFluidExactIntegFact ( double _val );
__declspec(implementation_key(3017)) double IContact::GetRotorOverallDamp ( );
__declspec(implementation_key(3018)) void IContact::PutRotorOverallDamp ( double _val );
__declspec(implementation_key(3019)) double IContact::GetRotorMatlDamp ( );
__declspec(implementation_key(3020)) void IContact::PutRotorMatlDamp ( double _val );
__declspec(implementation_key(3021)) double IContact::GetRotorSpeed ( );
__declspec(implementation_key(3022)) void IContact::PutRotorSpeed ( double _val );
__declspec(implementation_key(3023)) int IContact::GetBoltDir ( );
__declspec(implementation_key(3024)) void IContact::PutBoltDir ( int _val );
__declspec(implementation_key(3025)) int IContact::GetBoltType ( );
__declspec(implementation_key(3026)) void IContact::PutBoltType ( int _val );
__declspec(implementation_key(3027)) int IContact::GetMassType ( );
__declspec(implementation_key(3028)) void IContact::PutMassType ( int _val );
__declspec(implementation_key(3029)) double IContact::GetMassNSM ( );
__declspec(implementation_key(3030)) void IContact::PutMassNSM ( double _val );
__declspec(implementation_key(3031)) int IContact::GetID ( );
__declspec(implementation_key(3032)) void IContact::PutID ( int _val );
__declspec(implementation_key(3033)) int IContact::GetsetID ( );
__declspec(implementation_key(3034)) void IContact::PutsetID ( int _val );
__declspec(implementation_key(3035)) int IContact::GetActive ( );
__declspec(implementation_key(3036)) void IContact::PutActive ( int _val );
__declspec(implementation_key(3037)) enum zReturnCode ICSys::XYPoints ( const _variant_t & origin, const _variant_t & xaxis, const _variant_t & xyplane );
__declspec(implementation_key(3038)) enum zReturnCode ICSys::Put ( int entID );
__declspec(implementation_key(3039)) int ICSys::NextEmptyID ( );
__declspec(implementation_key(3040)) int ICSys::PrevEmptyID ( );
__declspec(implementation_key(3041)) enum zReturnCode ICSys::Axis ( int nCSysType, int nAxisDir, const _variant_t & origin, const _variant_t & Axis );
__declspec(implementation_key(3042)) enum zReturnCode ICSys::TwoAxes ( int nCSysType, int nNormalAxisDir, const _variant_t & origin, const _variant_t & axis1, const _variant_t & axis2 );
__declspec(implementation_key(3043)) enum zReturnCode ICSys::Get ( int entID );
__declspec(implementation_key(3044)) enum zReturnCode ICSys::NextSet ( );
__declspec(implementation_key(3045)) enum zReturnCode ICSys::PrevSet ( );
__declspec(implementation_key(3046)) enum zReturnCode ICSys::NextEmptySet ( );
__declspec(implementation_key(3047)) enum zReturnCode ICSys::PrevEmptySet ( );
__declspec(implementation_key(3048)) enum zReturnCode ICSys::Exist ( int ID );
__declspec(implementation_key(3049)) enum zReturnCode ICSys::Deletable ( int ID );
__declspec(implementation_key(3050)) enum zReturnCode ICSys::Delete ( int ID );
__declspec(implementation_key(3051)) enum zReturnCode ICSys::Reset ( );
__declspec(implementation_key(3052)) enum zReturnCode ICSys::Next ( );
__declspec(implementation_key(3053)) enum zReturnCode ICSys::Prev ( );
__declspec(implementation_key(3054)) enum zReturnCode ICSys::First ( );
__declspec(implementation_key(3055)) enum zReturnCode ICSys::Last ( );
__declspec(implementation_key(3056)) int ICSys::NextID ( );
__declspec(implementation_key(3057)) int ICSys::PrevID ( );
__declspec(implementation_key(3058)) enum zReturnCode ICSys::GetLibrary ( int ID );
__declspec(implementation_key(3059)) enum zReturnCode ICSys::PutLibrary ( );
__declspec(implementation_key(3060)) enum zReturnCode ICSys::DeleteLibrary ( int ID );
__declspec(implementation_key(3061)) enum zReturnCode ICSys::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3062)) enum zReturnCode ICSys::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3063)) int ICSys::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(3064)) enum zReturnCode ICSys::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(3065)) enum zReturnCode ICSys::NextInSet ( int nSetID );
__declspec(implementation_key(3066)) enum zReturnCode ICSys::FirstInSet ( int nSetID );
__declspec(implementation_key(3067)) int ICSys::CountSet ( );
__declspec(implementation_key(3068)) enum zReturnCode ICSys::NextExistingInSet ( int nSetID );
__declspec(implementation_key(3069)) enum zReturnCode ICSys::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(3070)) int ICSys::GetdefCSys ( );
__declspec(implementation_key(3071)) void ICSys::PutdefCSys ( int _val );
__declspec(implementation_key(3072)) enum zCSysType ICSys::Gettype ( );
__declspec(implementation_key(3073)) void ICSys::Puttype ( enum zCSysType _val );
__declspec(implementation_key(3074)) int ICSys::Getlayer ( );
__declspec(implementation_key(3075)) void ICSys::Putlayer ( int _val );
__declspec(implementation_key(3076)) enum zColor ICSys::Getcolor ( );
__declspec(implementation_key(3077)) void ICSys::Putcolor ( enum zColor _val );
__declspec(implementation_key(3078)) double ICSys::Getx ( );
__declspec(implementation_key(3079)) void ICSys::Putx ( double _val );
__declspec(implementation_key(3080)) double ICSys::Gety ( );
__declspec(implementation_key(3081)) void ICSys::Puty ( double _val );
__declspec(implementation_key(3082)) double ICSys::Getz ( );
__declspec(implementation_key(3083)) void ICSys::Putz ( double _val );
__declspec(implementation_key(3084)) double ICSys::Getrotx ( );
__declspec(implementation_key(3085)) void ICSys::Putrotx ( double _val );
__declspec(implementation_key(3086)) double ICSys::Getroty ( );
__declspec(implementation_key(3087)) void ICSys::Putroty ( double _val );
__declspec(implementation_key(3088)) double ICSys::Getrotz ( );
__declspec(implementation_key(3089)) void ICSys::Putrotz ( double _val );
__declspec(implementation_key(3090)) _bstr_t ICSys::Gettitle ( );
__declspec(implementation_key(3091)) void ICSys::Puttitle ( _bstr_t _val );
__declspec(implementation_key(3092)) _variant_t ICSys::Getorigin ( );
__declspec(implementation_key(3093)) void ICSys::Putorigin ( const _variant_t & _val );
__declspec(implementation_key(3094)) _variant_t ICSys::Getrotation ( );
__declspec(implementation_key(3095)) void ICSys::Putrotation ( const _variant_t & _val );
__declspec(implementation_key(3096)) _variant_t ICSys::Getmatrix ( );
__declspec(implementation_key(3097)) void ICSys::Putmatrix ( const _variant_t & _val );
__declspec(implementation_key(3098)) int ICSys::GetID ( );
__declspec(implementation_key(3099)) void ICSys::PutID ( int _val );
__declspec(implementation_key(3100)) int ICSys::GetsetID ( );
__declspec(implementation_key(3101)) void ICSys::PutsetID ( int _val );
__declspec(implementation_key(3102)) int ICSys::GetActive ( );
__declspec(implementation_key(3103)) void ICSys::PutActive ( int _val );
__declspec(implementation_key(3104)) int ICurve::GetStdPoint ( int nVectorIndex );
__declspec(implementation_key(3105)) void ICurve::PutStdPoint ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(3106)) double ICurve::GetattrOrient ( int nVectorIndex );
__declspec(implementation_key(3107)) void ICurve::PutattrOrient ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(3108)) int ICurve::GetBSplinePoint ( int nVectorIndex );
__declspec(implementation_key(3109)) void ICurve::PutBSplinePoint ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(3110)) double ICurve::GetBSplineKnot ( int nVectorIndex );
__declspec(implementation_key(3111)) void ICurve::PutBSplineKnot ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(3112)) double ICurve::GetBSplineWeight ( int nVectorIndex );
__declspec(implementation_key(3113)) void ICurve::PutBSplineWeight ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(3114)) int ICurve::GetMeshElem ( int nVectorIndex );
__declspec(implementation_key(3115)) void ICurve::PutMeshElem ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(3116)) double ICurve::GetMeshBias ( int nVectorIndex );
__declspec(implementation_key(3117)) void ICurve::PutMeshBias ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(3118)) double ICurve::GetMeshMaxParam ( int nVectorIndex );
__declspec(implementation_key(3119)) void ICurve::PutMeshMaxParam ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(3120)) VARIANT_BOOL ICurve::GetLengthSpacing ( int nVectorIndex );
__declspec(implementation_key(3121)) void ICurve::PutLengthSpacing ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(3122)) VARIANT_BOOL ICurve::GetCenterBias ( int nVectorIndex );
__declspec(implementation_key(3123)) void ICurve::PutCenterBias ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(3124)) VARIANT_BOOL ICurve::GetGeometricBias ( int nVectorIndex );
__declspec(implementation_key(3125)) void ICurve::PutGeometricBias ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(3126)) double ICurve::GetattrOffset ( int nRowIndex, int nColIndex );
__declspec(implementation_key(3127)) void ICurve::PutattrOffset ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(3128)) int ICurve::GetattrRelease ( int nRowIndex, int nColIndex );
__declspec(implementation_key(3129)) void ICurve::PutattrRelease ( int nRowIndex, int nColIndex, int _arg3 );
__declspec(implementation_key(3130)) enum zReturnCode ICurve::Get ( int entID );
__declspec(implementation_key(3131)) enum zReturnCode ICurve::Put ( int entID );
__declspec(implementation_key(3132)) enum zReturnCode ICurve::Reverse ( );
__declspec(implementation_key(3133)) enum zReturnCode ICurve::EndPoints ( int * startPt, int * endPt );
__declspec(implementation_key(3134)) enum zReturnCode ICurve::ArcCircleInfo ( VARIANT * center, VARIANT * normal, VARIANT * startloc, VARIANT * endloc, double * angle, double * radius );
__declspec(implementation_key(3135)) enum zReturnCode ICurve::ParamToXYZ ( double s, VARIANT * xyz );
__declspec(implementation_key(3136)) enum zReturnCode ICurve::XYZToParam ( const _variant_t & xyz, double * s );
__declspec(implementation_key(3137)) enum zReturnCode ICurve::Project ( const _variant_t & fromxyz, VARIANT * toxyz );
__declspec(implementation_key(3138)) enum zReturnCode ICurve::Tangent ( VARIANT_BOOL outward, const _variant_t & fromxyz, VARIANT * Tangent );
__declspec(implementation_key(3139)) double ICurve::Length ( );
__declspec(implementation_key(3140)) double ICurve::PartialLength ( double s0, double s1 );
__declspec(implementation_key(3141)) double ICurve::ParamAtLength ( VARIANT_BOOL fromstart, double Length );
__declspec(implementation_key(3142)) enum zReturnCode ICurve::MeshParam ( int * numParam, VARIANT * MeshParam );
__declspec(implementation_key(3143)) enum zReturnCode ICurve::AddMeshLoc ( double s, int NumElem, int spacing, int biasMethod, double bias, int biasLoc );
__declspec(implementation_key(3144)) enum zReturnCode ICurve::AddMeshLocXYZ ( const _variant_t & xyz, int NumElem, int spacing, int biasMethod, double bias, int biasLoc );
__declspec(implementation_key(3145)) enum zReturnCode ICurve::Nodes ( VARIANT_BOOL getBoundary, VARIANT_BOOL getInterior, int * numNodes, VARIANT * NodeID );
__declspec(implementation_key(3146)) enum zReturnCode ICurve::Elements ( int * numElems, VARIANT * elemID );
__declspec(implementation_key(3147)) enum zReturnCode ICurve::ElementsWithFaces ( int * numElems, VARIANT * elemID );
__declspec(implementation_key(3148)) enum zReturnCode ICurve::BoundingBox ( VARIANT * box );
__declspec(implementation_key(3149)) enum zReturnCode ICurve::GetMeshLoc ( int * numLoc, VARIANT * MeshParam );
__declspec(implementation_key(3150)) enum zReturnCode ICurve::GetMeshLocXYZ ( int * numLoc, VARIANT * meshXYZ );
__declspec(implementation_key(3151)) enum zReturnCode ICurve::IsSmoothEdge ( double dAngle, int * nConvexityType );
__declspec(implementation_key(3152)) enum zReturnCode ICurve::Surfaces ( enum zCombinedMode nCombinedMode, int * numSurfaces, VARIANT * surfaceID );
__declspec(implementation_key(3153)) enum zReturnCode ICurve::SurfacesAsSet ( enum zCombinedMode nCombinedMode, int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(3154)) enum zReturnCode ICurve::ElementsAsSet ( int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(3155)) enum zReturnCode ICurve::NodesAsSet ( VARIANT_BOOL getBoundary, VARIANT_BOOL getInterior, int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(3156)) enum zReturnCode ICurve::normal ( const _variant_t & xyz, VARIANT * vNormal );
__declspec(implementation_key(3157)) enum zReturnCode ICurve::IsCombinedCurve ( );
__declspec(implementation_key(3158)) enum zReturnCode ICurve::GetCombinedCurves ( int * nNumCurves, VARIANT * curveID );
__declspec(implementation_key(3159)) enum zReturnCode ICurve::CombineCurves ( int nNumCurves, const _variant_t & curveID );
__declspec(implementation_key(3160)) enum zReturnCode ICurve::CombinedCurvesAsSet ( int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(3161)) enum zReturnCode ICurve::Facets ( int * numPoints, VARIANT * xyzPoint );
__declspec(implementation_key(3162)) double ICurve::PartialLengthXYZ ( const _variant_t & xyz0, const _variant_t & xyz1 );
__declspec(implementation_key(3163)) double ICurve::PartialLengthNode ( int nNode0, int nNode1 );
__declspec(implementation_key(3164)) enum zReturnCode ICurve::IsStraight ( );
__declspec(implementation_key(3165)) enum zReturnCode ICurve::IsNonManifold ( );
__declspec(implementation_key(3166)) enum zReturnCode ICurve::IsSmooth ( double dAngle );
__declspec(implementation_key(3167)) enum zReturnCode ICurve::TangentAtEnds ( VARIANT_BOOL outward, VARIANT * pvEnd1Tan, VARIANT * pvEnd2Tan );
__declspec(implementation_key(3168)) enum zReturnCode ICurve::CurvatureAcrossEdge ( double * pdMinVal, double * pdMaxVal, double * pdAngleBetweenNormals );
__declspec(implementation_key(3169)) enum zReturnCode ICurve::ClosestPointToSurface ( int nSurfaceID, double * pdX, double * pdY, double * pdZ, double * pdDistance, double * pdAngleOfTangentToSurfNormal );
__declspec(implementation_key(3170)) enum zReturnCode ICurve::MinRadius ( double * pdMinRadius );
__declspec(implementation_key(3171)) enum zReturnCode ICurve::ParamOnCombinedCurve ( double s, int * curveID );
__declspec(implementation_key(3172)) enum zReturnCode ICurve::IsSuppressed ( );
__declspec(implementation_key(3173)) enum zReturnCode ICurve::ClearMeshLoc ( );
__declspec(implementation_key(3174)) enum zReturnCode ICurve::HasMeshSize ( );
__declspec(implementation_key(3175)) enum zReturnCode ICurve::SetSimpleMeshLoc ( int NumElem, int spacing, int biasMethod, double bias, int biasLoc );
__declspec(implementation_key(3176)) enum zReturnCode ICurve::MeshCount ( int * NumElem, VARIANT_BOOL * CustomSize );
__declspec(implementation_key(3177)) enum zReturnCode ICurve::CommonPoint ( int nOtherCurveID, int * nCommonPoint, VARIANT_BOOL * bMultipleCommon );
__declspec(implementation_key(3178)) enum zReturnCode ICurve::PointsAsSet ( int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(3179)) enum zReturnCode ICurve::ProjectToClosest ( VARIANT_BOOL bExtendCurve, const _variant_t & vOrig, VARIANT * vProj );
__declspec(implementation_key(3180)) enum zReturnCode ICurve::ProjectAlongVector ( const _variant_t & vAlong, const _variant_t & vOrig, VARIANT * vProj );
__declspec(implementation_key(3181)) enum zReturnCode ICurve::IsArc ( );
__declspec(implementation_key(3182)) enum zReturnCode ICurve::ClosestPointToCurve ( int nCurveID, double * pdX, double * pdY, double * pdZ, double * pdDistance, double * pdAngleOfTangents );
__declspec(implementation_key(3183)) enum zReturnCode ICurve::IsGeneral ( );
__declspec(implementation_key(3184)) enum zReturnCode ICurve::Solid ( int * pnSolidID );
__declspec(implementation_key(3185)) enum zReturnCode ICurve::Midpoint ( VARIANT * Midpoint );
__declspec(implementation_key(3186)) enum zReturnCode ICurve::center ( VARIANT * center );
__declspec(implementation_key(3187)) double ICurve::GetPrecision ( );
__declspec(implementation_key(3188)) enum zReturnCode ICurve::ResetPrecision ( );
__declspec(implementation_key(3189)) enum zReturnCode ICurve::IsMergeable ( );
__declspec(implementation_key(3190)) enum zReturnCode ICurve::BoundingBoxInCSys ( int nCSysID, VARIANT * box );
__declspec(implementation_key(3191)) enum zReturnCode ICurve::NextSet ( );
__declspec(implementation_key(3192)) enum zReturnCode ICurve::PrevSet ( );
__declspec(implementation_key(3193)) enum zReturnCode ICurve::NextEmptySet ( );
__declspec(implementation_key(3194)) enum zReturnCode ICurve::PrevEmptySet ( );
__declspec(implementation_key(3195)) enum zReturnCode ICurve::Exist ( int ID );
__declspec(implementation_key(3196)) enum zReturnCode ICurve::Deletable ( int ID );
__declspec(implementation_key(3197)) enum zReturnCode ICurve::Delete ( int ID );
__declspec(implementation_key(3198)) enum zReturnCode ICurve::Reset ( );
__declspec(implementation_key(3199)) enum zReturnCode ICurve::Next ( );
__declspec(implementation_key(3200)) enum zReturnCode ICurve::Prev ( );
__declspec(implementation_key(3201)) enum zReturnCode ICurve::First ( );
__declspec(implementation_key(3202)) enum zReturnCode ICurve::Last ( );
__declspec(implementation_key(3203)) int ICurve::NextID ( );
__declspec(implementation_key(3204)) int ICurve::PrevID ( );
__declspec(implementation_key(3205)) int ICurve::NextEmptyID ( );
__declspec(implementation_key(3206)) int ICurve::PrevEmptyID ( );
__declspec(implementation_key(3207)) enum zReturnCode ICurve::GetLibrary ( int ID );
__declspec(implementation_key(3208)) enum zReturnCode ICurve::PutLibrary ( );
__declspec(implementation_key(3209)) enum zReturnCode ICurve::DeleteLibrary ( int ID );
__declspec(implementation_key(3210)) enum zReturnCode ICurve::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3211)) enum zReturnCode ICurve::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3212)) int ICurve::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(3213)) enum zReturnCode ICurve::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(3214)) enum zReturnCode ICurve::NextInSet ( int nSetID );
__declspec(implementation_key(3215)) enum zReturnCode ICurve::FirstInSet ( int nSetID );
__declspec(implementation_key(3216)) int ICurve::CountSet ( );
__declspec(implementation_key(3217)) enum zReturnCode ICurve::NextExistingInSet ( int nSetID );
__declspec(implementation_key(3218)) enum zReturnCode ICurve::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(3219)) enum zCurveType ICurve::Gettype ( );
__declspec(implementation_key(3220)) void ICurve::Puttype ( enum zCurveType _val );
__declspec(implementation_key(3221)) int ICurve::GetattrPID ( );
__declspec(implementation_key(3222)) void ICurve::PutattrPID ( int _val );
__declspec(implementation_key(3223)) enum zCurveOrientType ICurve::GetattrOrientType ( );
__declspec(implementation_key(3224)) void ICurve::PutattrOrientType ( enum zCurveOrientType _val );
__declspec(implementation_key(3225)) enum zCurveOffsetType ICurve::GetattrOffsetType ( );
__declspec(implementation_key(3226)) void ICurve::PutattrOffsetType ( enum zCurveOffsetType _val );
__declspec(implementation_key(3227)) enum zColor ICurve::Getcolor ( );
__declspec(implementation_key(3228)) void ICurve::Putcolor ( enum zColor _val );
__declspec(implementation_key(3229)) int ICurve::Getlayer ( );
__declspec(implementation_key(3230)) void ICurve::Putlayer ( int _val );
__declspec(implementation_key(3231)) int ICurve::GetAddress ( );
__declspec(implementation_key(3232)) void ICurve::PutAddress ( int _val );
__declspec(implementation_key(3233)) int ICurve::GetEngine ( );
__declspec(implementation_key(3234)) void ICurve::PutEngine ( int _val );
__declspec(implementation_key(3235)) VARIANT_BOOL ICurve::GetSuppressed ( );
__declspec(implementation_key(3236)) void ICurve::PutSuppressed ( VARIANT_BOOL _val );
__declspec(implementation_key(3237)) int ICurve::GetBSplineOrder ( );
__declspec(implementation_key(3238)) void ICurve::PutBSplineOrder ( int _val );
__declspec(implementation_key(3239)) int ICurve::GetBSplineNumPoints ( );
__declspec(implementation_key(3240)) void ICurve::PutBSplineNumPoints ( int _val );
__declspec(implementation_key(3241)) double ICurve::GetBSplineT0 ( );
__declspec(implementation_key(3242)) void ICurve::PutBSplineT0 ( double _val );
__declspec(implementation_key(3243)) double ICurve::GetBSplineT1 ( );
__declspec(implementation_key(3244)) void ICurve::PutBSplineT1 ( double _val );
__declspec(implementation_key(3245)) VARIANT_BOOL ICurve::GetBSplinePlanar ( );
__declspec(implementation_key(3246)) void ICurve::PutBSplinePlanar ( VARIANT_BOOL _val );
__declspec(implementation_key(3247)) VARIANT_BOOL ICurve::GetBSplineClosed ( );
__declspec(implementation_key(3248)) void ICurve::PutBSplineClosed ( VARIANT_BOOL _val );
__declspec(implementation_key(3249)) VARIANT_BOOL ICurve::GetBSplineRational ( );
__declspec(implementation_key(3250)) void ICurve::PutBSplineRational ( VARIANT_BOOL _val );
__declspec(implementation_key(3251)) VARIANT_BOOL ICurve::GetBSplinePeriodic ( );
__declspec(implementation_key(3252)) void ICurve::PutBSplinePeriodic ( VARIANT_BOOL _val );
__declspec(implementation_key(3253)) VARIANT_BOOL ICurve::GetHasCustomMesh ( );
__declspec(implementation_key(3254)) void ICurve::PutHasCustomMesh ( VARIANT_BOOL _val );
__declspec(implementation_key(3255)) _variant_t ICurve::GetvStdPoint ( );
__declspec(implementation_key(3256)) void ICurve::PutvStdPoint ( const _variant_t & _val );
__declspec(implementation_key(3257)) _variant_t ICurve::GetvattrOrient ( );
__declspec(implementation_key(3258)) void ICurve::PutvattrOrient ( const _variant_t & _val );
__declspec(implementation_key(3259)) _variant_t ICurve::GetvBSplinePoint ( );
__declspec(implementation_key(3260)) void ICurve::PutvBSplinePoint ( const _variant_t & _val );
__declspec(implementation_key(3261)) _variant_t ICurve::GetvBSplineKnot ( );
__declspec(implementation_key(3262)) void ICurve::PutvBSplineKnot ( const _variant_t & _val );
__declspec(implementation_key(3263)) _variant_t ICurve::GetvBSplineWeight ( );
__declspec(implementation_key(3264)) void ICurve::PutvBSplineWeight ( const _variant_t & _val );
__declspec(implementation_key(3265)) _variant_t ICurve::GetvMeshElem ( );
__declspec(implementation_key(3266)) void ICurve::PutvMeshElem ( const _variant_t & _val );
__declspec(implementation_key(3267)) _variant_t ICurve::GetvMeshBias ( );
__declspec(implementation_key(3268)) void ICurve::PutvMeshBias ( const _variant_t & _val );
__declspec(implementation_key(3269)) _variant_t ICurve::GetvMeshMaxParam ( );
__declspec(implementation_key(3270)) void ICurve::PutvMeshMaxParam ( const _variant_t & _val );
__declspec(implementation_key(3271)) _variant_t ICurve::GetvLengthSpacing ( );
__declspec(implementation_key(3272)) void ICurve::PutvLengthSpacing ( const _variant_t & _val );
__declspec(implementation_key(3273)) _variant_t ICurve::GetvCenterBias ( );
__declspec(implementation_key(3274)) void ICurve::PutvCenterBias ( const _variant_t & _val );
__declspec(implementation_key(3275)) _variant_t ICurve::GetvGeometricBias ( );
__declspec(implementation_key(3276)) void ICurve::PutvGeometricBias ( const _variant_t & _val );
__declspec(implementation_key(3277)) _variant_t ICurve::GetvattrOffset ( );
__declspec(implementation_key(3278)) void ICurve::PutvattrOffset ( const _variant_t & _val );
__declspec(implementation_key(3279)) _variant_t ICurve::GetvattrRelease ( );
__declspec(implementation_key(3280)) void ICurve::PutvattrRelease ( const _variant_t & _val );
__declspec(implementation_key(3281)) int ICurve::GetInternalToBoundary ( );
__declspec(implementation_key(3282)) void ICurve::PutInternalToBoundary ( int _val );
__declspec(implementation_key(3283)) int ICurve::GetInCombinedCurve ( );
__declspec(implementation_key(3284)) void ICurve::PutInCombinedCurve ( int _val );
__declspec(implementation_key(3285)) double ICurve::GetScaleFactor ( );
__declspec(implementation_key(3286)) void ICurve::PutScaleFactor ( double _val );
__declspec(implementation_key(3287)) int ICurve::GetID ( );
__declspec(implementation_key(3288)) void ICurve::PutID ( int _val );
__declspec(implementation_key(3289)) int ICurve::GetsetID ( );
__declspec(implementation_key(3290)) void ICurve::PutsetID ( int _val );
__declspec(implementation_key(3291)) int ICurve::GetActive ( );
__declspec(implementation_key(3292)) void ICurve::PutActive ( int _val );
__declspec(implementation_key(3293)) enum zReturnCode IUserData::Get ( int entID );
__declspec(implementation_key(3294)) enum zReturnCode IUserData::GetTitle ( _bstr_t title );
__declspec(implementation_key(3295)) enum zReturnCode IUserData::Put ( int entID );
__declspec(implementation_key(3296)) enum zReturnCode IUserData::PutTitle ( _bstr_t title );
__declspec(implementation_key(3297)) enum zReturnCode IUserData::Delete ( int entID );
__declspec(implementation_key(3298)) enum zReturnCode IUserData::DeleteTitle ( _bstr_t title );
__declspec(implementation_key(3299)) enum zReturnCode IUserData::WriteDouble ( double val );
__declspec(implementation_key(3300)) enum zReturnCode IUserData::WriteDoubleArray ( int num, const _variant_t & val );
__declspec(implementation_key(3301)) enum zReturnCode IUserData::WriteFloat ( float val );
__declspec(implementation_key(3302)) enum zReturnCode IUserData::WriteLong ( int val );
__declspec(implementation_key(3303)) enum zReturnCode IUserData::WriteLongArray ( int num, const _variant_t & val );
__declspec(implementation_key(3304)) enum zReturnCode IUserData::WriteShort ( short val );
__declspec(implementation_key(3305)) enum zReturnCode IUserData::WriteBool ( VARIANT_BOOL val );
__declspec(implementation_key(3306)) enum zReturnCode IUserData::WriteBoolArray ( int num, const _variant_t & val );
__declspec(implementation_key(3307)) enum zReturnCode IUserData::WriteString ( _bstr_t val );
__declspec(implementation_key(3308)) enum zReturnCode IUserData::ReadDouble ( double * val );
__declspec(implementation_key(3309)) enum zReturnCode IUserData::ReadDoubleArray ( int * num, VARIANT * val );
__declspec(implementation_key(3310)) enum zReturnCode IUserData::ReadFloat ( float * val );
__declspec(implementation_key(3311)) enum zReturnCode IUserData::ReadLong ( int * val );
__declspec(implementation_key(3312)) enum zReturnCode IUserData::ReadLongArray ( int * num, VARIANT * val );
__declspec(implementation_key(3313)) enum zReturnCode IUserData::ReadShort ( short * val );
__declspec(implementation_key(3314)) enum zReturnCode IUserData::ReadBool ( VARIANT_BOOL * val );
__declspec(implementation_key(3315)) enum zReturnCode IUserData::ReadBoolArray ( int * num, VARIANT * val );
__declspec(implementation_key(3316)) enum zReturnCode IUserData::ReadString ( BSTR * val );
__declspec(implementation_key(3317)) int IUserData::Position ( );
__declspec(implementation_key(3318)) enum zReturnCode IUserData::AtEOF ( );
__declspec(implementation_key(3319)) enum zReturnCode IUserData::Jump ( int jumpto );
__declspec(implementation_key(3320)) enum zReturnCode IUserData::Truncate ( int fsize );
__declspec(implementation_key(3321)) enum zReturnCode IUserData::clear ( );
__declspec(implementation_key(3322)) enum zReturnCode IUserData::NextSet ( );
__declspec(implementation_key(3323)) enum zReturnCode IUserData::PrevSet ( );
__declspec(implementation_key(3324)) enum zReturnCode IUserData::NextEmptySet ( );
__declspec(implementation_key(3325)) enum zReturnCode IUserData::PrevEmptySet ( );
__declspec(implementation_key(3326)) enum zReturnCode IUserData::Exist ( int ID );
__declspec(implementation_key(3327)) enum zReturnCode IUserData::Deletable ( int ID );
__declspec(implementation_key(3328)) enum zReturnCode IUserData::Reset ( );
__declspec(implementation_key(3329)) enum zReturnCode IUserData::Next ( );
__declspec(implementation_key(3330)) enum zReturnCode IUserData::Prev ( );
__declspec(implementation_key(3331)) enum zReturnCode IUserData::First ( );
__declspec(implementation_key(3332)) enum zReturnCode IUserData::Last ( );
__declspec(implementation_key(3333)) _bstr_t IUserData::Gettitle ( );
__declspec(implementation_key(3334)) void IUserData::Puttitle ( _bstr_t _val );
__declspec(implementation_key(3335)) int IUserData::GetSize ( );
__declspec(implementation_key(3336)) void IUserData::PutSize ( int _val );
__declspec(implementation_key(3337)) int IUserData::GetID ( );
__declspec(implementation_key(3338)) void IUserData::PutID ( int _val );
__declspec(implementation_key(3339)) int IUserData::GetsetID ( );
__declspec(implementation_key(3340)) void IUserData::PutsetID ( int _val );
__declspec(implementation_key(3341)) double ILayup::Getthickness ( int nVectorIndex );
__declspec(implementation_key(3342)) void ILayup::Putthickness ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(3343)) double ILayup::Getangle ( int nVectorIndex );
__declspec(implementation_key(3344)) void ILayup::Putangle ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(3345)) int ILayup::GetmatlID ( int nVectorIndex );
__declspec(implementation_key(3346)) void ILayup::PutmatlID ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(3347)) int ILayup::Getglobalply ( int nVectorIndex );
__declspec(implementation_key(3348)) void ILayup::Putglobalply ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(3349)) double ILayup::GetAMatrix ( int nRowIndex, int nColIndex );
__declspec(implementation_key(3350)) void ILayup::PutAMatrix ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(3351)) double ILayup::GetBMatrix ( int nRowIndex, int nColIndex );
__declspec(implementation_key(3352)) void ILayup::PutBMatrix ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(3353)) double ILayup::GetDMatrix ( int nRowIndex, int nColIndex );
__declspec(implementation_key(3354)) void ILayup::PutDMatrix ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(3355)) double ILayup::GetAInvMatrix ( int nRowIndex, int nColIndex );
__declspec(implementation_key(3356)) void ILayup::PutAInvMatrix ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(3357)) double ILayup::GetBInvMatrix ( int nRowIndex, int nColIndex );
__declspec(implementation_key(3358)) void ILayup::PutBInvMatrix ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(3359)) double ILayup::GetDInvMatrix ( int nRowIndex, int nColIndex );
__declspec(implementation_key(3360)) void ILayup::PutDInvMatrix ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(3361)) double ILayup::GetInPlaneProp ( int nVectorIndex );
__declspec(implementation_key(3362)) void ILayup::PutInPlaneProp ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(3363)) double ILayup::GetBendingProp ( int nVectorIndex );
__declspec(implementation_key(3364)) void ILayup::PutBendingProp ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(3365)) enum zReturnCode ILayup::InsertPly ( int nPlyID, int nMatlID, double dThickness, double dAngle, int nGlobalPly );
__declspec(implementation_key(3366)) enum zReturnCode ILayup::AddPly ( int nMatlID, double dThickness, double dAngle, int nGlobalPly );
__declspec(implementation_key(3367)) enum zReturnCode ILayup::DeletePly ( int nPlyID );
__declspec(implementation_key(3368)) enum zReturnCode ILayup::clear ( );
__declspec(implementation_key(3369)) enum zReturnCode ILayup::Compute ( VARIANT_BOOL dynamic );
__declspec(implementation_key(3370)) enum zReturnCode ILayup::HasGlobalPly ( int nGlobalPlyID, int * nPlyNum );
__declspec(implementation_key(3371)) enum zReturnCode ILayup::HasMaterial ( int nMatlID );
__declspec(implementation_key(3372)) enum zReturnCode ILayup::TotalThickness ( double * dThickness );
__declspec(implementation_key(3373)) enum zReturnCode ILayup::GetPly ( int nPlyID, int * nMatlID, double * dThickness, double * dAngle, int * nGlobalPly );
__declspec(implementation_key(3374)) enum zReturnCode ILayup::SetPly ( int nPlyID, int nMatlID, double dThickness, double dAngle, int nGlobalPly );
__declspec(implementation_key(3375)) enum zReturnCode ILayup::GetAllPly ( int * nNumPly, VARIANT * nMatlID, VARIANT * dThickness, VARIANT * dAngle, VARIANT * nGlobalPly );
__declspec(implementation_key(3376)) enum zReturnCode ILayup::SetAllPly ( int nNumPly, const _variant_t & nMatlID, const _variant_t & dThickness, const _variant_t & dAngle, const _variant_t & nGlobalPly );
__declspec(implementation_key(3377)) enum zReturnCode ILayup::Compute2 ( int nOption );
__declspec(implementation_key(3378)) enum zReturnCode ILayup::Get ( int entID );
__declspec(implementation_key(3379)) enum zReturnCode ILayup::Put ( int entID );
__declspec(implementation_key(3380)) enum zReturnCode ILayup::GetLibrary ( int ID );
__declspec(implementation_key(3381)) enum zReturnCode ILayup::PutLibrary ( );
__declspec(implementation_key(3382)) enum zReturnCode ILayup::HasFullGlobalPly ( );
__declspec(implementation_key(3383)) enum zReturnCode ILayup::NextSet ( );
__declspec(implementation_key(3384)) enum zReturnCode ILayup::PrevSet ( );
__declspec(implementation_key(3385)) enum zReturnCode ILayup::NextEmptySet ( );
__declspec(implementation_key(3386)) enum zReturnCode ILayup::PrevEmptySet ( );
__declspec(implementation_key(3387)) enum zReturnCode ILayup::Exist ( int ID );
__declspec(implementation_key(3388)) enum zReturnCode ILayup::Deletable ( int ID );
__declspec(implementation_key(3389)) enum zReturnCode ILayup::Delete ( int ID );
__declspec(implementation_key(3390)) enum zReturnCode ILayup::Reset ( );
__declspec(implementation_key(3391)) enum zReturnCode ILayup::Next ( );
__declspec(implementation_key(3392)) enum zReturnCode ILayup::Prev ( );
__declspec(implementation_key(3393)) enum zReturnCode ILayup::First ( );
__declspec(implementation_key(3394)) enum zReturnCode ILayup::Last ( );
__declspec(implementation_key(3395)) int ILayup::NextID ( );
__declspec(implementation_key(3396)) int ILayup::PrevID ( );
__declspec(implementation_key(3397)) int ILayup::NextEmptyID ( );
__declspec(implementation_key(3398)) int ILayup::PrevEmptyID ( );
__declspec(implementation_key(3399)) enum zReturnCode ILayup::DeleteLibrary ( int ID );
__declspec(implementation_key(3400)) enum zReturnCode ILayup::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3401)) enum zReturnCode ILayup::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3402)) int ILayup::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(3403)) enum zReturnCode ILayup::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(3404)) enum zReturnCode ILayup::NextInSet ( int nSetID );
__declspec(implementation_key(3405)) enum zReturnCode ILayup::FirstInSet ( int nSetID );
__declspec(implementation_key(3406)) int ILayup::CountSet ( );
__declspec(implementation_key(3407)) enum zReturnCode ILayup::NextExistingInSet ( int nSetID );
__declspec(implementation_key(3408)) enum zReturnCode ILayup::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(3409)) _bstr_t ILayup::Gettitle ( );
__declspec(implementation_key(3410)) void ILayup::Puttitle ( _bstr_t _val );
__declspec(implementation_key(3411)) int ILayup::GetNumberOfPlys ( );
__declspec(implementation_key(3412)) void ILayup::PutNumberOfPlys ( int _val );
__declspec(implementation_key(3413)) _variant_t ILayup::Getvthickness ( );
__declspec(implementation_key(3414)) void ILayup::Putvthickness ( const _variant_t & _val );
__declspec(implementation_key(3415)) _variant_t ILayup::Getvangle ( );
__declspec(implementation_key(3416)) void ILayup::Putvangle ( const _variant_t & _val );
__declspec(implementation_key(3417)) _variant_t ILayup::GetvmatlID ( );
__declspec(implementation_key(3418)) void ILayup::PutvmatlID ( const _variant_t & _val );
__declspec(implementation_key(3419)) _variant_t ILayup::Getvglobalply ( );
__declspec(implementation_key(3420)) void ILayup::Putvglobalply ( const _variant_t & _val );
__declspec(implementation_key(3421)) double ILayup::GetLayupThickness ( );
__declspec(implementation_key(3422)) void ILayup::PutLayupThickness ( double _val );
__declspec(implementation_key(3423)) _variant_t ILayup::GetvInPlaneProp ( );
__declspec(implementation_key(3424)) void ILayup::PutvInPlaneProp ( const _variant_t & _val );
__declspec(implementation_key(3425)) _variant_t ILayup::GetvBendingProp ( );
__declspec(implementation_key(3426)) void ILayup::PutvBendingProp ( const _variant_t & _val );
__declspec(implementation_key(3427)) _variant_t ILayup::GetvAMatrix ( );
__declspec(implementation_key(3428)) void ILayup::PutvAMatrix ( const _variant_t & _val );
__declspec(implementation_key(3429)) _variant_t ILayup::GetvBMatrix ( );
__declspec(implementation_key(3430)) void ILayup::PutvBMatrix ( const _variant_t & _val );
__declspec(implementation_key(3431)) _variant_t ILayup::GetvDMatrix ( );
__declspec(implementation_key(3432)) void ILayup::PutvDMatrix ( const _variant_t & _val );
__declspec(implementation_key(3433)) _variant_t ILayup::GetvAInvMatrix ( );
__declspec(implementation_key(3434)) void ILayup::PutvAInvMatrix ( const _variant_t & _val );
__declspec(implementation_key(3435)) _variant_t ILayup::GetvBInvMatrix ( );
__declspec(implementation_key(3436)) void ILayup::PutvBInvMatrix ( const _variant_t & _val );
__declspec(implementation_key(3437)) _variant_t ILayup::GetvDInvMatrix ( );
__declspec(implementation_key(3438)) void ILayup::PutvDInvMatrix ( const _variant_t & _val );
__declspec(implementation_key(3439)) int ILayup::GetID ( );
__declspec(implementation_key(3440)) void ILayup::PutID ( int _val );
__declspec(implementation_key(3441)) int ILayup::GetsetID ( );
__declspec(implementation_key(3442)) void ILayup::PutsetID ( int _val );
__declspec(implementation_key(3443)) int ILayup::GetActive ( );
__declspec(implementation_key(3444)) void ILayup::PutActive ( int _val );
__declspec(implementation_key(3445)) VARIANT_BOOL IMatl::GetbVal ( int nVectorIndex );
__declspec(implementation_key(3446)) void IMatl::PutbVal ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(3447)) double IMatl::Getmval ( int nVectorIndex );
__declspec(implementation_key(3448)) void IMatl::Putmval ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(3449)) int IMatl::Getival ( int nVectorIndex );
__declspec(implementation_key(3450)) void IMatl::Putival ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(3451)) int IMatl::Getfval ( int nVectorIndex );
__declspec(implementation_key(3452)) void IMatl::Putfval ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(3453)) int IMatl::Gettval ( int nVectorIndex );
__declspec(implementation_key(3454)) void IMatl::Puttval ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(3455)) enum zReturnCode IMatl::Get ( int entID );
__declspec(implementation_key(3456)) enum zReturnCode IMatl::Put ( int entID );
__declspec(implementation_key(3457)) enum zReturnCode IMatl::AutoComplete ( );
__declspec(implementation_key(3458)) enum zReturnCode IMatl::AreDuplicate ( int nMatl1, int nMatl2, VARIANT_BOOL ignoretitle );
__declspec(implementation_key(3459)) enum zReturnCode IMatl::GetValueArray ( int numValue, const _variant_t & nMatlID, const _variant_t & nMatlIndex, VARIANT * dValue );
__declspec(implementation_key(3460)) enum zReturnCode IMatl::PutValueArray ( int numValue, const _variant_t & nMatlID, const _variant_t & nMatlIndex, const _variant_t & dValue );
__declspec(implementation_key(3461)) enum zReturnCode IMatl::PutValue ( int nMatlSetID, int nMatlIndex, double dValue );
__declspec(implementation_key(3462)) enum zReturnCode IMatl::CopyArray ( VARIANT_BOOL bUpdateReferences, VARIANT_BOOL bCopyToStartID, int nCopyToStartID, int numID, const _variant_t & nOrigID, VARIANT * pnNewID );
__declspec(implementation_key(3463)) enum zReturnCode IMatl::GetLibraryOfType ( int libINDEX, enum zMaterialType libTYPE );
__declspec(implementation_key(3464)) enum zReturnCode IMatl::GetLibrary ( int ID );
__declspec(implementation_key(3465)) enum zReturnCode IMatl::NextSet ( );
__declspec(implementation_key(3466)) enum zReturnCode IMatl::PrevSet ( );
__declspec(implementation_key(3467)) enum zReturnCode IMatl::NextEmptySet ( );
__declspec(implementation_key(3468)) enum zReturnCode IMatl::PrevEmptySet ( );
__declspec(implementation_key(3469)) enum zReturnCode IMatl::Exist ( int ID );
__declspec(implementation_key(3470)) enum zReturnCode IMatl::Deletable ( int ID );
__declspec(implementation_key(3471)) enum zReturnCode IMatl::Delete ( int ID );
__declspec(implementation_key(3472)) enum zReturnCode IMatl::Reset ( );
__declspec(implementation_key(3473)) enum zReturnCode IMatl::Next ( );
__declspec(implementation_key(3474)) enum zReturnCode IMatl::Prev ( );
__declspec(implementation_key(3475)) enum zReturnCode IMatl::First ( );
__declspec(implementation_key(3476)) enum zReturnCode IMatl::Last ( );
__declspec(implementation_key(3477)) int IMatl::NextID ( );
__declspec(implementation_key(3478)) int IMatl::PrevID ( );
__declspec(implementation_key(3479)) int IMatl::NextEmptyID ( );
__declspec(implementation_key(3480)) int IMatl::PrevEmptyID ( );
__declspec(implementation_key(3481)) enum zReturnCode IMatl::PutLibrary ( );
__declspec(implementation_key(3482)) enum zReturnCode IMatl::DeleteLibrary ( int ID );
__declspec(implementation_key(3483)) enum zReturnCode IMatl::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3484)) enum zReturnCode IMatl::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3485)) int IMatl::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(3486)) enum zReturnCode IMatl::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(3487)) enum zReturnCode IMatl::NextInSet ( int nSetID );
__declspec(implementation_key(3488)) enum zReturnCode IMatl::FirstInSet ( int nSetID );
__declspec(implementation_key(3489)) int IMatl::CountSet ( );
__declspec(implementation_key(3490)) enum zReturnCode IMatl::NextExistingInSet ( int nSetID );
__declspec(implementation_key(3491)) enum zReturnCode IMatl::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(3492)) int IMatl::Getlayer ( );
__declspec(implementation_key(3493)) void IMatl::Putlayer ( int _val );
__declspec(implementation_key(3494)) enum zColor IMatl::Getcolor ( );
__declspec(implementation_key(3495)) void IMatl::Putcolor ( enum zColor _val );
__declspec(implementation_key(3496)) enum zMaterialType IMatl::Gettype ( );
__declspec(implementation_key(3497)) void IMatl::Puttype ( enum zMaterialType _val );
__declspec(implementation_key(3498)) int IMatl::Getsubtype ( );
__declspec(implementation_key(3499)) void IMatl::Putsubtype ( int _val );
__declspec(implementation_key(3500)) _bstr_t IMatl::Gettitle ( );
__declspec(implementation_key(3501)) void IMatl::Puttitle ( _bstr_t _val );
__declspec(implementation_key(3502)) double IMatl::GetEx ( );
__declspec(implementation_key(3503)) void IMatl::PutEx ( double _val );
__declspec(implementation_key(3504)) double IMatl::GetEy ( );
__declspec(implementation_key(3505)) void IMatl::PutEy ( double _val );
__declspec(implementation_key(3506)) double IMatl::GetEz ( );
__declspec(implementation_key(3507)) void IMatl::PutEz ( double _val );
__declspec(implementation_key(3508)) double IMatl::GetGx ( );
__declspec(implementation_key(3509)) void IMatl::PutGx ( double _val );
__declspec(implementation_key(3510)) double IMatl::GetGy ( );
__declspec(implementation_key(3511)) void IMatl::PutGy ( double _val );
__declspec(implementation_key(3512)) double IMatl::GetGz ( );
__declspec(implementation_key(3513)) void IMatl::PutGz ( double _val );
__declspec(implementation_key(3514)) double IMatl::GetNuxy ( );
__declspec(implementation_key(3515)) void IMatl::PutNuxy ( double _val );
__declspec(implementation_key(3516)) double IMatl::GetNuyz ( );
__declspec(implementation_key(3517)) void IMatl::PutNuyz ( double _val );
__declspec(implementation_key(3518)) double IMatl::GetNuxz ( );
__declspec(implementation_key(3519)) void IMatl::PutNuxz ( double _val );
__declspec(implementation_key(3520)) double IMatl::GetAlphaxx ( );
__declspec(implementation_key(3521)) void IMatl::PutAlphaxx ( double _val );
__declspec(implementation_key(3522)) double IMatl::GetAlphayy ( );
__declspec(implementation_key(3523)) void IMatl::PutAlphayy ( double _val );
__declspec(implementation_key(3524)) double IMatl::GetAlphazz ( );
__declspec(implementation_key(3525)) void IMatl::PutAlphazz ( double _val );
__declspec(implementation_key(3526)) double IMatl::GetAlphaxy ( );
__declspec(implementation_key(3527)) void IMatl::PutAlphaxy ( double _val );
__declspec(implementation_key(3528)) double IMatl::GetAlphayz ( );
__declspec(implementation_key(3529)) void IMatl::PutAlphayz ( double _val );
__declspec(implementation_key(3530)) double IMatl::GetAlphazx ( );
__declspec(implementation_key(3531)) void IMatl::PutAlphazx ( double _val );
__declspec(implementation_key(3532)) double IMatl::GetKxx ( );
__declspec(implementation_key(3533)) void IMatl::PutKxx ( double _val );
__declspec(implementation_key(3534)) double IMatl::GetKyy ( );
__declspec(implementation_key(3535)) void IMatl::PutKyy ( double _val );
__declspec(implementation_key(3536)) double IMatl::GetKzz ( );
__declspec(implementation_key(3537)) void IMatl::PutKzz ( double _val );
__declspec(implementation_key(3538)) double IMatl::GetKxy ( );
__declspec(implementation_key(3539)) void IMatl::PutKxy ( double _val );
__declspec(implementation_key(3540)) double IMatl::GetKyz ( );
__declspec(implementation_key(3541)) void IMatl::PutKyz ( double _val );
__declspec(implementation_key(3542)) double IMatl::GetKzx ( );
__declspec(implementation_key(3543)) void IMatl::PutKzx ( double _val );
__declspec(implementation_key(3544)) double IMatl::GetCp ( );
__declspec(implementation_key(3545)) void IMatl::PutCp ( double _val );
__declspec(implementation_key(3546)) double IMatl::GetDensity ( );
__declspec(implementation_key(3547)) void IMatl::PutDensity ( double _val );
__declspec(implementation_key(3548)) double IMatl::GetDamping ( );
__declspec(implementation_key(3549)) void IMatl::PutDamping ( double _val );
__declspec(implementation_key(3550)) double IMatl::GetRefTemp ( );
__declspec(implementation_key(3551)) void IMatl::PutRefTemp ( double _val );
__declspec(implementation_key(3552)) double IMatl::GetTensionLimit1 ( );
__declspec(implementation_key(3553)) void IMatl::PutTensionLimit1 ( double _val );
__declspec(implementation_key(3554)) double IMatl::GetTensionLimit2 ( );
__declspec(implementation_key(3555)) void IMatl::PutTensionLimit2 ( double _val );
__declspec(implementation_key(3556)) double IMatl::GetCompressionLimit1 ( );
__declspec(implementation_key(3557)) void IMatl::PutCompressionLimit1 ( double _val );
__declspec(implementation_key(3558)) double IMatl::GetCompressionLimit2 ( );
__declspec(implementation_key(3559)) void IMatl::PutCompressionLimit2 ( double _val );
__declspec(implementation_key(3560)) double IMatl::GetShearLimit ( );
__declspec(implementation_key(3561)) void IMatl::PutShearLimit ( double _val );
__declspec(implementation_key(3562)) double IMatl::GetTsaiWu ( );
__declspec(implementation_key(3563)) void IMatl::PutTsaiWu ( double _val );
__declspec(implementation_key(3564)) _variant_t IMatl::Getmmat ( );
__declspec(implementation_key(3565)) void IMatl::Putmmat ( const _variant_t & _val );
__declspec(implementation_key(3566)) _variant_t IMatl::Getimat ( );
__declspec(implementation_key(3567)) void IMatl::Putimat ( const _variant_t & _val );
__declspec(implementation_key(3568)) _variant_t IMatl::Getfmat ( );
__declspec(implementation_key(3569)) void IMatl::Putfmat ( const _variant_t & _val );
__declspec(implementation_key(3570)) _variant_t IMatl::Gettmat ( );
__declspec(implementation_key(3571)) void IMatl::Puttmat ( const _variant_t & _val );
__declspec(implementation_key(3572)) _variant_t IMatl::Getvbval ( );
__declspec(implementation_key(3573)) void IMatl::Putvbval ( const _variant_t & _val );
__declspec(implementation_key(3574)) _variant_t IMatl::Getvmval ( );
__declspec(implementation_key(3575)) void IMatl::Putvmval ( const _variant_t & _val );
__declspec(implementation_key(3576)) _variant_t IMatl::Getvival ( );
__declspec(implementation_key(3577)) void IMatl::Putvival ( const _variant_t & _val );
__declspec(implementation_key(3578)) _variant_t IMatl::Getvfval ( );
__declspec(implementation_key(3579)) void IMatl::Putvfval ( const _variant_t & _val );
__declspec(implementation_key(3580)) _variant_t IMatl::Getvtval ( );
__declspec(implementation_key(3581)) void IMatl::Putvtval ( const _variant_t & _val );
__declspec(implementation_key(3582)) int IMatl::GetID ( );
__declspec(implementation_key(3583)) void IMatl::PutID ( int _val );
__declspec(implementation_key(3584)) int IMatl::GetsetID ( );
__declspec(implementation_key(3585)) void IMatl::PutsetID ( int _val );
__declspec(implementation_key(3586)) int IMatl::GetActive ( );
__declspec(implementation_key(3587)) void IMatl::PutActive ( int _val );
__declspec(implementation_key(3588)) VARIANT_BOOL IProp::Getflag ( int nVectorIndex );
__declspec(implementation_key(3589)) void IProp::Putflag ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(3590)) int IProp::GetflagI ( int nVectorIndex );
__declspec(implementation_key(3591)) void IProp::PutflagI ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(3592)) double IProp::Getpval ( int nVectorIndex );
__declspec(implementation_key(3593)) void IProp::Putpval ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(3594)) int IProp::GetExtraMatlID ( int nVectorIndex );
__declspec(implementation_key(3595)) void IProp::PutExtraMatlID ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(3596)) enum zReturnCode IProp::Get ( int entID );
__declspec(implementation_key(3597)) enum zReturnCode IProp::Put ( int entID );
__declspec(implementation_key(3598)) enum zReturnCode IProp::ComputeShape ( VARIANT_BOOL shear_center_offset, VARIANT_BOOL Warping, VARIANT_BOOL stress_recovery );
__declspec(implementation_key(3599)) IMatlPtr IProp::Matl ( );
__declspec(implementation_key(3600)) ILayupPtr IProp::Layup ( );
__declspec(implementation_key(3601)) enum zReturnCode IProp::thickness ( double * dAvgOrAtC1, double * dAtC2, double * dAtC3, double * dAtC4 );
__declspec(implementation_key(3602)) enum zReturnCode IProp::Area ( double * dAreaA, double * dAreaB );
__declspec(implementation_key(3603)) enum zReturnCode IProp::Inertia ( double * dI1A, double * dI2A, double * dI12A, double * dJA, double * dI1B, double * dI2B, double * dI12B, double * dJB );
__declspec(implementation_key(3604)) enum zReturnCode IProp::ComputeStdShape ( enum zShapeStandard shapeID, const _variant_t & dimensions, enum zShapeOrient sOrient, enum zShapeEvaluator EvalMethod, VARIANT_BOOL shear_center_offset, VARIANT_BOOL Warping, VARIANT_BOOL stress_recovery );
__declspec(implementation_key(3605)) enum zReturnCode IProp::ComputeGeneralShape ( int surfaceID, const _variant_t & vecDIR, enum zShapeOrient sOrient, enum zShapeEvaluator EvalMethod, VARIANT_BOOL shear_center_offset, VARIANT_BOOL Warping, VARIANT_BOOL stress_recovery );
__declspec(implementation_key(3606)) enum zReturnCode IProp::AreDuplicate ( int nProp1, int nProp2, VARIANT_BOOL ignoretitle );
__declspec(implementation_key(3607)) enum zReturnCode IProp::GetValueArray ( int numValue, const _variant_t & nPropID, const _variant_t & nPropIndex, VARIANT * dValue );
__declspec(implementation_key(3608)) enum zReturnCode IProp::PutValueArray ( int numValue, const _variant_t & nPropID, const _variant_t & nPropIndex, const _variant_t & dValue );
__declspec(implementation_key(3609)) enum zReturnCode IProp::PutValue ( int nPropSetID, int nPropIndex, double dValue );
__declspec(implementation_key(3610)) enum zReturnCode IProp::CopyArray ( VARIANT_BOOL bUpdateReferences, VARIANT_BOOL bCopyToStartID, int nCopyToStartID, int numID, const _variant_t & nOrigID, VARIANT * pnNewID );
__declspec(implementation_key(3611)) enum zReturnCode IProp::GetLibraryOfType ( int libINDEX, enum zElementType libTYPE );
__declspec(implementation_key(3612)) enum zReturnCode IProp::NextSet ( );
__declspec(implementation_key(3613)) enum zReturnCode IProp::PrevSet ( );
__declspec(implementation_key(3614)) enum zReturnCode IProp::NextEmptySet ( );
__declspec(implementation_key(3615)) enum zReturnCode IProp::PrevEmptySet ( );
__declspec(implementation_key(3616)) enum zReturnCode IProp::Exist ( int ID );
__declspec(implementation_key(3617)) enum zReturnCode IProp::Deletable ( int ID );
__declspec(implementation_key(3618)) enum zReturnCode IProp::Delete ( int ID );
__declspec(implementation_key(3619)) enum zReturnCode IProp::Reset ( );
__declspec(implementation_key(3620)) enum zReturnCode IProp::Next ( );
__declspec(implementation_key(3621)) enum zReturnCode IProp::Prev ( );
__declspec(implementation_key(3622)) enum zReturnCode IProp::First ( );
__declspec(implementation_key(3623)) enum zReturnCode IProp::Last ( );
__declspec(implementation_key(3624)) int IProp::NextID ( );
__declspec(implementation_key(3625)) int IProp::PrevID ( );
__declspec(implementation_key(3626)) int IProp::NextEmptyID ( );
__declspec(implementation_key(3627)) int IProp::PrevEmptyID ( );
__declspec(implementation_key(3628)) enum zReturnCode IProp::GetLibrary ( int ID );
__declspec(implementation_key(3629)) enum zReturnCode IProp::PutLibrary ( );
__declspec(implementation_key(3630)) enum zReturnCode IProp::DeleteLibrary ( int ID );
__declspec(implementation_key(3631)) enum zReturnCode IProp::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3632)) enum zReturnCode IProp::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3633)) int IProp::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(3634)) enum zReturnCode IProp::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(3635)) enum zReturnCode IProp::NextInSet ( int nSetID );
__declspec(implementation_key(3636)) enum zReturnCode IProp::FirstInSet ( int nSetID );
__declspec(implementation_key(3637)) int IProp::CountSet ( );
__declspec(implementation_key(3638)) enum zReturnCode IProp::NextExistingInSet ( int nSetID );
__declspec(implementation_key(3639)) enum zReturnCode IProp::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(3640)) int IProp::Getlayer ( );
__declspec(implementation_key(3641)) void IProp::Putlayer ( int _val );
__declspec(implementation_key(3642)) enum zColor IProp::Getcolor ( );
__declspec(implementation_key(3643)) void IProp::Putcolor ( enum zColor _val );
__declspec(implementation_key(3644)) int IProp::GetmatlID ( );
__declspec(implementation_key(3645)) void IProp::PutmatlID ( int _val );
__declspec(implementation_key(3646)) enum zElementType IProp::Gettype ( );
__declspec(implementation_key(3647)) void IProp::Puttype ( enum zElementType _val );
__declspec(implementation_key(3648)) int IProp::GetrefCS ( );
__declspec(implementation_key(3649)) void IProp::PutrefCS ( int _val );
__declspec(implementation_key(3650)) _bstr_t IProp::Gettitle ( );
__declspec(implementation_key(3651)) void IProp::Puttitle ( _bstr_t _val );
__declspec(implementation_key(3652)) _variant_t IProp::Getextramat ( );
__declspec(implementation_key(3653)) void IProp::Putextramat ( const _variant_t & _val );
__declspec(implementation_key(3654)) _variant_t IProp::Getpmat ( );
__declspec(implementation_key(3655)) void IProp::Putpmat ( const _variant_t & _val );
__declspec(implementation_key(3656)) _variant_t IProp::Getoutline ( );
__declspec(implementation_key(3657)) void IProp::Putoutline ( const _variant_t & _val );
__declspec(implementation_key(3658)) int IProp::GetnumOutline ( );
__declspec(implementation_key(3659)) void IProp::PutnumOutline ( int _val );
__declspec(implementation_key(3660)) _variant_t IProp::Getvflag ( );
__declspec(implementation_key(3661)) void IProp::Putvflag ( const _variant_t & _val );
__declspec(implementation_key(3662)) _variant_t IProp::GetvflagI ( );
__declspec(implementation_key(3663)) void IProp::PutvflagI ( const _variant_t & _val );
__declspec(implementation_key(3664)) _variant_t IProp::Getvpval ( );
__declspec(implementation_key(3665)) void IProp::Putvpval ( const _variant_t & _val );
__declspec(implementation_key(3666)) _variant_t IProp::GetvExtraMatlID ( );
__declspec(implementation_key(3667)) void IProp::PutvExtraMatlID ( const _variant_t & _val );
__declspec(implementation_key(3668)) int IProp::GetlayupID ( );
__declspec(implementation_key(3669)) void IProp::PutlayupID ( int _val );
__declspec(implementation_key(3670)) int IProp::Getcbush ( );
__declspec(implementation_key(3671)) void IProp::Putcbush ( int _val );
__declspec(implementation_key(3672)) int IProp::GetID ( );
__declspec(implementation_key(3673)) void IProp::PutID ( int _val );
__declspec(implementation_key(3674)) int IProp::GetsetID ( );
__declspec(implementation_key(3675)) void IProp::PutsetID ( int _val );
__declspec(implementation_key(3676)) int IProp::GetActive ( );
__declspec(implementation_key(3677)) void IProp::PutActive ( int _val );
__declspec(implementation_key(3678)) int IElem::Getformulation ( int nVectorIndex );
__declspec(implementation_key(3679)) void IElem::Putformulation ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(3680)) int IElem::GetContact ( int nVectorIndex );
__declspec(implementation_key(3681)) void IElem::PutContact ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(3682)) int IElem::GetNode ( int nVectorIndex );
__declspec(implementation_key(3683)) void IElem::PutNode ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(3684)) double IElem::Getorient ( int nVectorIndex );
__declspec(implementation_key(3685)) void IElem::Putorient ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(3686)) double IElem::Getoffset ( int nRowIndex, int nColIndex );
__declspec(implementation_key(3687)) void IElem::Putoffset ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(3688)) VARIANT_BOOL IElem::Getrelease ( int nRowIndex, int nColIndex );
__declspec(implementation_key(3689)) void IElem::Putrelease ( int nRowIndex, int nColIndex, VARIANT_BOOL _arg3 );
__declspec(implementation_key(3690)) int IElem::GetconnectTYPE ( int nVectorIndex );
__declspec(implementation_key(3691)) void IElem::PutconnectTYPE ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(3692)) int IElem::GetconnectSEG ( int nVectorIndex );
__declspec(implementation_key(3693)) void IElem::PutconnectSEG ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(3694)) int IElem::GetWarping ( int nVectorIndex );
__declspec(implementation_key(3695)) void IElem::PutWarping ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(3696)) enum zReturnCode IElem::Get ( int entID );
__declspec(implementation_key(3697)) enum zReturnCode IElem::Put ( int entID );
__declspec(implementation_key(3698)) enum zReturnCode IElem::GetNodeList ( int listINDEX, int * nodecount, VARIANT * Node, VARIANT * face, VARIANT * weight, VARIANT * dof );
__declspec(implementation_key(3699)) enum zReturnCode IElem::PutNodeList ( int listINDEX, int nodecount, const _variant_t & Node, const _variant_t & face, const _variant_t & weight, const _variant_t & dof );
__declspec(implementation_key(3700)) enum zReturnCode IElem::GetAllArray ( int setID, int * NumElem, VARIANT * entID, VARIANT * propID, VARIANT * elemTYPE, VARIANT * topology, VARIANT * layer, VARIANT * color, VARIANT * formulation, VARIANT * orient, VARIANT * offset, VARIANT * release, VARIANT * orientSET, VARIANT * orientID, VARIANT * Nodes, VARIANT * connectTYPE, VARIANT * connectSEG );
__declspec(implementation_key(3701)) enum zReturnCode IElem::PutAllArray ( int NumElem, const _variant_t & entID, const _variant_t & propID, const _variant_t & elemTYPE, const _variant_t & topology, const _variant_t & layer, const _variant_t & color, const _variant_t & formulation, const _variant_t & orient, const _variant_t & offset, const _variant_t & release, const _variant_t & orientSET, const _variant_t & orientID, const _variant_t & Nodes, const _variant_t & connectTYPE, const _variant_t & connectSEG );
__declspec(implementation_key(3702)) IPropPtr IElem::Prop ( );
__declspec(implementation_key(3703)) IMatlPtr IElem::Matl ( );
__declspec(implementation_key(3704)) enum zReturnCode IElem::GetFaceCentroid ( int nFace, VARIANT * cgXYZ );
__declspec(implementation_key(3705)) enum zReturnCode IElem::GetFaceNormal ( int nFace, VARIANT * normalXYZ );
__declspec(implementation_key(3706)) enum zReturnCode IElem::GetFaceArea ( int nFace, double * dArea );
__declspec(implementation_key(3707)) enum zReturnCode IElem::ClearNodeList ( int listINDEX );
__declspec(implementation_key(3708)) enum zReturnCode IElem::GetCentroid ( VARIANT * cgXYZ );
__declspec(implementation_key(3709)) enum zReturnCode IElem::GetEdgeNodes ( int nEdge, int * n1, int * n2, int * nmid );
__declspec(implementation_key(3710)) enum zReturnCode IElem::GetFaceNodes ( int nFace, VARIANT * Nodes );
__declspec(implementation_key(3711)) enum zReturnCode IElem::IsParabolic ( );
__declspec(implementation_key(3712)) enum zReturnCode IElem::thickness ( double * dAvg, double * dAtC1, double * dAtC2, double * dAtC3, double * dAtC4 );
__declspec(implementation_key(3713)) enum zReturnCode IElem::Area ( double * dAreaA, double * dAreaB );
__declspec(implementation_key(3714)) enum zReturnCode IElem::Inertia ( double * dI1A, double * dI2A, double * dI12A, double * dJA, double * dI1B, double * dI2B, double * dI12B, double * dJB );
__declspec(implementation_key(3715)) enum zReturnCode IElem::Length ( double * dLength );
__declspec(implementation_key(3716)) enum zReturnCode IElem::GetMinMaxEdgeLength ( double * dMinLen, double * dMaxLen );
__declspec(implementation_key(3717)) enum zReturnCode IElem::SetPlateThickness ( double dAtC1, double dAtC2, double dAtC3, double dAtC4 );
__declspec(implementation_key(3718)) enum zReturnCode IElem::GetAllArray2 ( int setID, int * NumElem, VARIANT * entID, VARIANT * Exist, VARIANT * propID, VARIANT * elemTYPE, VARIANT * topology, VARIANT * layer, VARIANT * color, VARIANT * formulation, VARIANT * orient, VARIANT * offset, VARIANT * release, VARIANT * orientSET, VARIANT * orientID, VARIANT * Nodes, VARIANT * connectTYPE, VARIANT * connectSEG );
__declspec(implementation_key(3719)) enum zReturnCode IElem::GetSpringOrient ( enum zSpringOrient * enOrient, int * nOrient, double * dVec1, double * dVec2, double * dVec3 );
__declspec(implementation_key(3720)) enum zReturnCode IElem::SetSpringOrient ( enum zSpringOrient enOrient, int nOrient, double dVec1, double dVec2, double dVec3 );
__declspec(implementation_key(3721)) enum zReturnCode IElem::GetSpringOffset ( enum zSpringOffset * enOffset, double * dVec1, double * dVec2, double * dVec3 );
__declspec(implementation_key(3722)) enum zReturnCode IElem::SetSpringOffset ( enum zSpringOffset enOffset, double dVec1, double dVec2, double dVec3 );
__declspec(implementation_key(3723)) enum zReturnCode IElem::GetAllArray3 ( int setID, int * NumElem, VARIANT * entID, VARIANT * Exist, VARIANT * propID, VARIANT * elemTYPE, VARIANT * topology, VARIANT * layer, VARIANT * color, VARIANT * formulation, VARIANT * orient, VARIANT * offset, VARIANT * release, VARIANT * orientSET, VARIANT * orientID, VARIANT * Nodes, VARIANT * connectTYPE, VARIANT * connectSEG, VARIANT * MaterialOrientType, VARIANT * MaterialCSys, VARIANT * warpingID, VARIANT * SpringLocation );
__declspec(implementation_key(3724)) enum zReturnCode IElem::GetFaceNodes2 ( VARIANT_BOOL bCornerPressureOrder, int nFace, VARIANT * Nodes );
__declspec(implementation_key(3725)) enum zReturnCode IElem::GetGeomPropArray ( int setID, int * NumElem, VARIANT * entID, VARIANT * propID, VARIANT * matlID, VARIANT * elemTYPE, VARIANT * topology, VARIANT * vCG, VARIANT * Length, VARIANT * Area, VARIANT * volume );
__declspec(implementation_key(3726)) enum zReturnCode IElem::ElementHasThickness ( );
__declspec(implementation_key(3727)) enum zReturnCode IElem::NextSet ( );
__declspec(implementation_key(3728)) enum zReturnCode IElem::PrevSet ( );
__declspec(implementation_key(3729)) enum zReturnCode IElem::NextEmptySet ( );
__declspec(implementation_key(3730)) enum zReturnCode IElem::PrevEmptySet ( );
__declspec(implementation_key(3731)) enum zReturnCode IElem::Exist ( int ID );
__declspec(implementation_key(3732)) enum zReturnCode IElem::Deletable ( int ID );
__declspec(implementation_key(3733)) enum zReturnCode IElem::Delete ( int ID );
__declspec(implementation_key(3734)) enum zReturnCode IElem::Reset ( );
__declspec(implementation_key(3735)) enum zReturnCode IElem::Next ( );
__declspec(implementation_key(3736)) enum zReturnCode IElem::Prev ( );
__declspec(implementation_key(3737)) enum zReturnCode IElem::First ( );
__declspec(implementation_key(3738)) enum zReturnCode IElem::Last ( );
__declspec(implementation_key(3739)) int IElem::NextID ( );
__declspec(implementation_key(3740)) int IElem::PrevID ( );
__declspec(implementation_key(3741)) int IElem::NextEmptyID ( );
__declspec(implementation_key(3742)) int IElem::PrevEmptyID ( );
__declspec(implementation_key(3743)) enum zReturnCode IElem::GetLibrary ( int ID );
__declspec(implementation_key(3744)) enum zReturnCode IElem::PutLibrary ( );
__declspec(implementation_key(3745)) enum zReturnCode IElem::DeleteLibrary ( int ID );
__declspec(implementation_key(3746)) enum zReturnCode IElem::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3747)) enum zReturnCode IElem::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3748)) int IElem::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(3749)) enum zReturnCode IElem::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(3750)) enum zReturnCode IElem::NextInSet ( int nSetID );
__declspec(implementation_key(3751)) enum zReturnCode IElem::FirstInSet ( int nSetID );
__declspec(implementation_key(3752)) int IElem::CountSet ( );
__declspec(implementation_key(3753)) enum zReturnCode IElem::NextExistingInSet ( int nSetID );
__declspec(implementation_key(3754)) enum zReturnCode IElem::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(3755)) enum zColor IElem::Getcolor ( );
__declspec(implementation_key(3756)) void IElem::Putcolor ( enum zColor _val );
__declspec(implementation_key(3757)) int IElem::GetpropID ( );
__declspec(implementation_key(3758)) void IElem::PutpropID ( int _val );
__declspec(implementation_key(3759)) enum zElementType IElem::Gettype ( );
__declspec(implementation_key(3760)) void IElem::Puttype ( enum zElementType _val );
__declspec(implementation_key(3761)) enum zTopologyType IElem::Gettopology ( );
__declspec(implementation_key(3762)) void IElem::Puttopology ( enum zTopologyType _val );
__declspec(implementation_key(3763)) int IElem::Getlayer ( );
__declspec(implementation_key(3764)) void IElem::Putlayer ( int _val );
__declspec(implementation_key(3765)) int IElem::GetorientID ( );
__declspec(implementation_key(3766)) void IElem::PutorientID ( int _val );
__declspec(implementation_key(3767)) VARIANT_BOOL IElem::GetMaterialAngleFlag ( );
__declspec(implementation_key(3768)) void IElem::PutMaterialAngleFlag ( VARIANT_BOOL _val );
__declspec(implementation_key(3769)) int IElem::GetgeomID ( );
__declspec(implementation_key(3770)) void IElem::PutgeomID ( int _val );
__declspec(implementation_key(3771)) VARIANT_BOOL IElem::GetRigidInterpolate ( );
__declspec(implementation_key(3772)) void IElem::PutRigidInterpolate ( VARIANT_BOOL _val );
__declspec(implementation_key(3773)) double IElem::GetPlateOffset ( );
__declspec(implementation_key(3774)) void IElem::PutPlateOffset ( double _val );
__declspec(implementation_key(3775)) double IElem::GetMaterialAngle ( );
__declspec(implementation_key(3776)) void IElem::PutMaterialAngle ( double _val );
__declspec(implementation_key(3777)) _variant_t IElem::GetNodes ( );
__declspec(implementation_key(3778)) void IElem::PutNodes ( const _variant_t & _val );
__declspec(implementation_key(3779)) _variant_t IElem::Getvformulation ( );
__declspec(implementation_key(3780)) void IElem::Putvformulation ( const _variant_t & _val );
__declspec(implementation_key(3781)) _variant_t IElem::Getvcontact ( );
__declspec(implementation_key(3782)) void IElem::Putvcontact ( const _variant_t & _val );
__declspec(implementation_key(3783)) _variant_t IElem::Getvnode ( );
__declspec(implementation_key(3784)) void IElem::Putvnode ( const _variant_t & _val );
__declspec(implementation_key(3785)) _variant_t IElem::Getvorient ( );
__declspec(implementation_key(3786)) void IElem::Putvorient ( const _variant_t & _val );
__declspec(implementation_key(3787)) _variant_t IElem::Getvoffset ( );
__declspec(implementation_key(3788)) void IElem::Putvoffset ( const _variant_t & _val );
__declspec(implementation_key(3789)) _variant_t IElem::Getvrelease ( );
__declspec(implementation_key(3790)) void IElem::Putvrelease ( const _variant_t & _val );
__declspec(implementation_key(3791)) _variant_t IElem::GetvconnectTYPE ( );
__declspec(implementation_key(3792)) void IElem::PutvconnectTYPE ( const _variant_t & _val );
__declspec(implementation_key(3793)) _variant_t IElem::GetvconnectSEG ( );
__declspec(implementation_key(3794)) void IElem::PutvconnectSEG ( const _variant_t & _val );
__declspec(implementation_key(3795)) double IElem::GetRigidThermalExpansion ( );
__declspec(implementation_key(3796)) void IElem::PutRigidThermalExpansion ( double _val );
__declspec(implementation_key(3797)) double IElem::GetRigidInterpolationFactor ( );
__declspec(implementation_key(3798)) void IElem::PutRigidInterpolationFactor ( double _val );
__declspec(implementation_key(3799)) int IElem::GetMaterialOrientType ( );
__declspec(implementation_key(3800)) void IElem::PutMaterialOrientType ( int _val );
__declspec(implementation_key(3801)) int IElem::GetMaterialCSys ( );
__declspec(implementation_key(3802)) void IElem::PutMaterialCSys ( int _val );
__declspec(implementation_key(3803)) VARIANT_BOOL IElem::GetSpringUseLocation ( );
__declspec(implementation_key(3804)) void IElem::PutSpringUseLocation ( VARIANT_BOOL _val );
__declspec(implementation_key(3805)) double IElem::GetSpringLocation ( );
__declspec(implementation_key(3806)) void IElem::PutSpringLocation ( double _val );
__declspec(implementation_key(3807)) VARIANT_BOOL IElem::GetSpringUsePropLocation ( );
__declspec(implementation_key(3808)) void IElem::PutSpringUsePropLocation ( VARIANT_BOOL _val );
__declspec(implementation_key(3809)) VARIANT_BOOL IElem::GetSpringUseCID ( );
__declspec(implementation_key(3810)) void IElem::PutSpringUseCID ( VARIANT_BOOL _val );
__declspec(implementation_key(3811)) VARIANT_BOOL IElem::GetSpringNoOrient ( );
__declspec(implementation_key(3812)) void IElem::PutSpringNoOrient ( VARIANT_BOOL _val );
__declspec(implementation_key(3813)) int IElem::GetSpringCID ( );
__declspec(implementation_key(3814)) void IElem::PutSpringCID ( int _val );
__declspec(implementation_key(3815)) VARIANT_BOOL IElem::GetSpringUsePropCID ( );
__declspec(implementation_key(3816)) void IElem::PutSpringUsePropCID ( VARIANT_BOOL _val );
__declspec(implementation_key(3817)) _variant_t IElem::Getvwarping ( );
__declspec(implementation_key(3818)) void IElem::Putvwarping ( const _variant_t & _val );
__declspec(implementation_key(3819)) int IElem::GetID ( );
__declspec(implementation_key(3820)) void IElem::PutID ( int _val );
__declspec(implementation_key(3821)) int IElem::GetsetID ( );
__declspec(implementation_key(3822)) void IElem::PutsetID ( int _val );
__declspec(implementation_key(3823)) int IElem::GetActive ( );
__declspec(implementation_key(3824)) void IElem::PutActive ( int _val );
__declspec(implementation_key(3825)) enum zReturnCode IFunction::Get ( int entID );
__declspec(implementation_key(3826)) enum zReturnCode IFunction::Put ( int entID );
__declspec(implementation_key(3827)) enum zReturnCode IFunction::GetFunctionList ( int * listcount, VARIANT * x, VARIANT * y );
__declspec(implementation_key(3828)) enum zReturnCode IFunction::PutFunctionList ( int listcount, const _variant_t & x, const _variant_t & y );
__declspec(implementation_key(3829)) enum zReturnCode IFunction::GetValue ( int nMethod, double x, double * y );
__declspec(implementation_key(3830)) enum zReturnCode IFunction::GetLibrary ( int ID );
__declspec(implementation_key(3831)) enum zReturnCode IFunction::PutLibrary ( );
__declspec(implementation_key(3832)) enum zReturnCode IFunction::NextSet ( );
__declspec(implementation_key(3833)) enum zReturnCode IFunction::PrevSet ( );
__declspec(implementation_key(3834)) enum zReturnCode IFunction::NextEmptySet ( );
__declspec(implementation_key(3835)) enum zReturnCode IFunction::PrevEmptySet ( );
__declspec(implementation_key(3836)) enum zReturnCode IFunction::Exist ( int ID );
__declspec(implementation_key(3837)) enum zReturnCode IFunction::Deletable ( int ID );
__declspec(implementation_key(3838)) enum zReturnCode IFunction::Delete ( int ID );
__declspec(implementation_key(3839)) enum zReturnCode IFunction::Reset ( );
__declspec(implementation_key(3840)) enum zReturnCode IFunction::Next ( );
__declspec(implementation_key(3841)) enum zReturnCode IFunction::Prev ( );
__declspec(implementation_key(3842)) enum zReturnCode IFunction::First ( );
__declspec(implementation_key(3843)) enum zReturnCode IFunction::Last ( );
__declspec(implementation_key(3844)) int IFunction::NextID ( );
__declspec(implementation_key(3845)) int IFunction::PrevID ( );
__declspec(implementation_key(3846)) int IFunction::NextEmptyID ( );
__declspec(implementation_key(3847)) int IFunction::PrevEmptyID ( );
__declspec(implementation_key(3848)) enum zReturnCode IFunction::DeleteLibrary ( int ID );
__declspec(implementation_key(3849)) enum zReturnCode IFunction::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3850)) enum zReturnCode IFunction::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3851)) int IFunction::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(3852)) enum zReturnCode IFunction::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(3853)) enum zReturnCode IFunction::NextInSet ( int nSetID );
__declspec(implementation_key(3854)) enum zReturnCode IFunction::FirstInSet ( int nSetID );
__declspec(implementation_key(3855)) int IFunction::CountSet ( );
__declspec(implementation_key(3856)) enum zReturnCode IFunction::NextExistingInSet ( int nSetID );
__declspec(implementation_key(3857)) enum zReturnCode IFunction::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(3858)) _bstr_t IFunction::Gettitle ( );
__declspec(implementation_key(3859)) void IFunction::Puttitle ( _bstr_t _val );
__declspec(implementation_key(3860)) enum zFunctionType IFunction::Gettype ( );
__declspec(implementation_key(3861)) void IFunction::Puttype ( enum zFunctionType _val );
__declspec(implementation_key(3862)) int IFunction::GetID ( );
__declspec(implementation_key(3863)) void IFunction::PutID ( int _val );
__declspec(implementation_key(3864)) int IFunction::GetsetID ( );
__declspec(implementation_key(3865)) void IFunction::PutsetID ( int _val );
__declspec(implementation_key(3866)) int IFunction::GetActive ( );
__declspec(implementation_key(3867)) void IFunction::PutActive ( int _val );
__declspec(implementation_key(3868)) VARIANT_BOOL IGroup::GetPlaneClipNeg ( int nVectorIndex );
__declspec(implementation_key(3869)) void IGroup::PutPlaneClipNeg ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(3870)) VARIANT_BOOL IGroup::GetPlaneClipOn ( int nVectorIndex );
__declspec(implementation_key(3871)) void IGroup::PutPlaneClipOn ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(3872)) double IGroup::GetPlaneClipBase ( int nRowIndex, int nColIndex );
__declspec(implementation_key(3873)) void IGroup::PutPlaneClipBase ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(3874)) double IGroup::GetPlaneClipDir ( int nRowIndex, int nColIndex );
__declspec(implementation_key(3875)) void IGroup::PutPlaneClipDir ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(3876)) enum zReturnCode IGroup::RangeReset ( );
__declspec(implementation_key(3877)) enum zReturnCode IGroup::RangeGetAll ( enum zGroupDefinitionType rangeType, int * rangeCount, VARIANT * startID, VARIANT * stopID, VARIANT * increment, VARIANT * inClude );
__declspec(implementation_key(3878)) enum zReturnCode IGroup::RangeNext ( enum zGroupDefinitionType rangeType, int * startID, int * stopID, int * increment, int * inClude );
__declspec(implementation_key(3879)) enum zReturnCode IGroup::RangeAdd ( enum zGroupDefinitionType rangeType, int startID, int stopID, int increment, int inClude );
__declspec(implementation_key(3880)) enum zReturnCode IGroup::RangeDelete ( enum zGroupDefinitionType rangeType );
__declspec(implementation_key(3881)) enum zReturnCode IGroup::RangeDeleteAll ( enum zGroupDefinitionType rangeType );
__declspec(implementation_key(3882)) enum zReturnCode IGroup::SetAdd ( enum zDataType entityTYPE, int setID );
__declspec(implementation_key(3883)) ISetPtr IGroup::List ( enum zGroupDataType listTYPE );
__declspec(implementation_key(3884)) enum zReturnCode IGroup::SelectModel ( );
__declspec(implementation_key(3885)) enum zReturnCode IGroup::SelectMesh ( int elemSET );
__declspec(implementation_key(3886)) enum zReturnCode IGroup::SelectContact ( int contactSET );
__declspec(implementation_key(3887)) enum zReturnCode IGroup::Get ( int entID );
__declspec(implementation_key(3888)) enum zReturnCode IGroup::Put ( int entID );
__declspec(implementation_key(3889)) enum zReturnCode IGroup::SetAddOpt ( enum zDataType entityTYPE, int setID, int addOpt );
__declspec(implementation_key(3890)) ISetPtr IGroup::Range ( enum zGroupDefinitionType rangeType );
__declspec(implementation_key(3891)) enum zReturnCode IGroup::SelectAllOnLayer ( int startLayer, int endLayer );
__declspec(implementation_key(3892)) enum zReturnCode IGroup::Add ( enum zDataType entityTYPE, int nEntityID );
__declspec(implementation_key(3893)) ISetPtr IGroup::ReferencedGroups ( );
__declspec(implementation_key(3894)) enum zReturnCode IGroup::GetList ( enum zGroupDataType listTYPE, int setID );
__declspec(implementation_key(3895)) enum zReturnCode IGroup::HasList ( enum zGroupDataType listTYPE );
__declspec(implementation_key(3896)) int IGroup::CountList ( enum zGroupDataType listTYPE );
__declspec(implementation_key(3897)) enum zReturnCode IGroup::Add2 ( enum zGroupDataType entityTYPE, int nEntityID );
__declspec(implementation_key(3898)) enum zReturnCode IGroup::SetAdd2 ( enum zGroupDataType entityTYPE, int setID );
__declspec(implementation_key(3899)) enum zReturnCode IGroup::SetAddOpt2 ( enum zGroupDataType entityTYPE, int setID, int addOpt );
__declspec(implementation_key(3900)) enum zReturnCode IGroup::AddRelated ( );
__declspec(implementation_key(3901)) enum zReturnCode IGroup::addOpt ( enum zDataType entityTYPE, int nEntityID, int addOpt );
__declspec(implementation_key(3902)) enum zReturnCode IGroup::AddOpt2 ( enum zGroupDataType entityTYPE, int nEntityID, int addOpt );
__declspec(implementation_key(3903)) enum zReturnCode IGroup::NextSet ( );
__declspec(implementation_key(3904)) enum zReturnCode IGroup::PrevSet ( );
__declspec(implementation_key(3905)) enum zReturnCode IGroup::NextEmptySet ( );
__declspec(implementation_key(3906)) enum zReturnCode IGroup::PrevEmptySet ( );
__declspec(implementation_key(3907)) enum zReturnCode IGroup::Exist ( int ID );
__declspec(implementation_key(3908)) enum zReturnCode IGroup::Deletable ( int ID );
__declspec(implementation_key(3909)) enum zReturnCode IGroup::Delete ( int ID );
__declspec(implementation_key(3910)) enum zReturnCode IGroup::Reset ( );
__declspec(implementation_key(3911)) enum zReturnCode IGroup::Next ( );
__declspec(implementation_key(3912)) enum zReturnCode IGroup::Prev ( );
__declspec(implementation_key(3913)) enum zReturnCode IGroup::First ( );
__declspec(implementation_key(3914)) enum zReturnCode IGroup::Last ( );
__declspec(implementation_key(3915)) int IGroup::NextID ( );
__declspec(implementation_key(3916)) int IGroup::PrevID ( );
__declspec(implementation_key(3917)) int IGroup::NextEmptyID ( );
__declspec(implementation_key(3918)) int IGroup::PrevEmptyID ( );
__declspec(implementation_key(3919)) enum zReturnCode IGroup::GetLibrary ( int ID );
__declspec(implementation_key(3920)) enum zReturnCode IGroup::PutLibrary ( );
__declspec(implementation_key(3921)) enum zReturnCode IGroup::DeleteLibrary ( int ID );
__declspec(implementation_key(3922)) enum zReturnCode IGroup::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3923)) enum zReturnCode IGroup::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3924)) int IGroup::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(3925)) enum zReturnCode IGroup::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(3926)) enum zReturnCode IGroup::NextInSet ( int nSetID );
__declspec(implementation_key(3927)) enum zReturnCode IGroup::FirstInSet ( int nSetID );
__declspec(implementation_key(3928)) int IGroup::CountSet ( );
__declspec(implementation_key(3929)) enum zReturnCode IGroup::NextExistingInSet ( int nSetID );
__declspec(implementation_key(3930)) enum zReturnCode IGroup::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(3931)) int IGroup::GetLayerMode ( );
__declspec(implementation_key(3932)) void IGroup::PutLayerMode ( int _val );
__declspec(implementation_key(3933)) int IGroup::GetLayerMin ( );
__declspec(implementation_key(3934)) void IGroup::PutLayerMin ( int _val );
__declspec(implementation_key(3935)) int IGroup::GetLayerMax ( );
__declspec(implementation_key(3936)) void IGroup::PutLayerMax ( int _val );
__declspec(implementation_key(3937)) int IGroup::GetCoordClipOn ( );
__declspec(implementation_key(3938)) void IGroup::PutCoordClipOn ( int _val );
__declspec(implementation_key(3939)) int IGroup::GetCoordClipMode ( );
__declspec(implementation_key(3940)) void IGroup::PutCoordClipMode ( int _val );
__declspec(implementation_key(3941)) double IGroup::GetCoordClipMin ( );
__declspec(implementation_key(3942)) void IGroup::PutCoordClipMin ( double _val );
__declspec(implementation_key(3943)) double IGroup::GetCoordClipMax ( );
__declspec(implementation_key(3944)) void IGroup::PutCoordClipMax ( double _val );
__declspec(implementation_key(3945)) int IGroup::GetCoordClipCSys ( );
__declspec(implementation_key(3946)) void IGroup::PutCoordClipCSys ( int _val );
__declspec(implementation_key(3947)) int IGroup::GetCoordClipDir ( );
__declspec(implementation_key(3948)) void IGroup::PutCoordClipDir ( int _val );
__declspec(implementation_key(3949)) int IGroup::GetPlaneClipMode ( );
__declspec(implementation_key(3950)) void IGroup::PutPlaneClipMode ( int _val );
__declspec(implementation_key(3951)) VARIANT_BOOL IGroup::GetPlaneClipInside ( );
__declspec(implementation_key(3952)) void IGroup::PutPlaneClipInside ( VARIANT_BOOL _val );
__declspec(implementation_key(3953)) VARIANT_BOOL IGroup::GetNeedEval ( );
__declspec(implementation_key(3954)) void IGroup::PutNeedEval ( VARIANT_BOOL _val );
__declspec(implementation_key(3955)) VARIANT_BOOL IGroup::GetCondense ( );
__declspec(implementation_key(3956)) void IGroup::PutCondense ( VARIANT_BOOL _val );
__declspec(implementation_key(3957)) VARIANT_BOOL IGroup::GetEvalAlways ( );
__declspec(implementation_key(3958)) void IGroup::PutEvalAlways ( VARIANT_BOOL _val );
__declspec(implementation_key(3959)) _bstr_t IGroup::Gettitle ( );
__declspec(implementation_key(3960)) void IGroup::Puttitle ( _bstr_t _val );
__declspec(implementation_key(3961)) VARIANT_BOOL IGroup::Getrenumber ( );
__declspec(implementation_key(3962)) void IGroup::Putrenumber ( VARIANT_BOOL _val );
__declspec(implementation_key(3963)) _variant_t IGroup::GetvPlaneClipNeg ( );
__declspec(implementation_key(3964)) void IGroup::PutvPlaneClipNeg ( const _variant_t & _val );
__declspec(implementation_key(3965)) _variant_t IGroup::GetvPlaneClipOn ( );
__declspec(implementation_key(3966)) void IGroup::PutvPlaneClipOn ( const _variant_t & _val );
__declspec(implementation_key(3967)) _variant_t IGroup::GetvPlaneClipBase ( );
__declspec(implementation_key(3968)) void IGroup::PutvPlaneClipBase ( const _variant_t & _val );
__declspec(implementation_key(3969)) _variant_t IGroup::GetvPlaneClipDir ( );
__declspec(implementation_key(3970)) void IGroup::PutvPlaneClipDir ( const _variant_t & _val );
__declspec(implementation_key(3971)) int IGroup::GetID ( );
__declspec(implementation_key(3972)) void IGroup::PutID ( int _val );
__declspec(implementation_key(3973)) int IGroup::GetsetID ( );
__declspec(implementation_key(3974)) void IGroup::PutsetID ( int _val );
__declspec(implementation_key(3975)) int IGroup::GetActive ( );
__declspec(implementation_key(3976)) void IGroup::PutActive ( int _val );
__declspec(implementation_key(3977)) enum zReturnCode ILayer::NextSet ( );
__declspec(implementation_key(3978)) enum zReturnCode ILayer::PrevSet ( );
__declspec(implementation_key(3979)) enum zReturnCode ILayer::NextEmptySet ( );
__declspec(implementation_key(3980)) enum zReturnCode ILayer::PrevEmptySet ( );
__declspec(implementation_key(3981)) enum zReturnCode ILayer::Get ( int ID );
__declspec(implementation_key(3982)) enum zReturnCode ILayer::Put ( int ID );
__declspec(implementation_key(3983)) enum zReturnCode ILayer::Exist ( int ID );
__declspec(implementation_key(3984)) enum zReturnCode ILayer::Deletable ( int ID );
__declspec(implementation_key(3985)) enum zReturnCode ILayer::Delete ( int ID );
__declspec(implementation_key(3986)) enum zReturnCode ILayer::Reset ( );
__declspec(implementation_key(3987)) enum zReturnCode ILayer::Next ( );
__declspec(implementation_key(3988)) enum zReturnCode ILayer::Prev ( );
__declspec(implementation_key(3989)) enum zReturnCode ILayer::First ( );
__declspec(implementation_key(3990)) enum zReturnCode ILayer::Last ( );
__declspec(implementation_key(3991)) int ILayer::NextID ( );
__declspec(implementation_key(3992)) int ILayer::PrevID ( );
__declspec(implementation_key(3993)) int ILayer::NextEmptyID ( );
__declspec(implementation_key(3994)) int ILayer::PrevEmptyID ( );
__declspec(implementation_key(3995)) enum zReturnCode ILayer::GetLibrary ( int ID );
__declspec(implementation_key(3996)) enum zReturnCode ILayer::PutLibrary ( );
__declspec(implementation_key(3997)) enum zReturnCode ILayer::DeleteLibrary ( int ID );
__declspec(implementation_key(3998)) enum zReturnCode ILayer::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(3999)) enum zReturnCode ILayer::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4000)) int ILayer::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(4001)) enum zReturnCode ILayer::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(4002)) enum zReturnCode ILayer::NextInSet ( int nSetID );
__declspec(implementation_key(4003)) enum zReturnCode ILayer::FirstInSet ( int nSetID );
__declspec(implementation_key(4004)) int ILayer::CountSet ( );
__declspec(implementation_key(4005)) enum zReturnCode ILayer::NextExistingInSet ( int nSetID );
__declspec(implementation_key(4006)) enum zReturnCode ILayer::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(4007)) _bstr_t ILayer::Gettitle ( );
__declspec(implementation_key(4008)) void ILayer::Puttitle ( _bstr_t _val );
__declspec(implementation_key(4009)) enum zColor ILayer::Getcolor ( );
__declspec(implementation_key(4010)) void ILayer::Putcolor ( enum zColor _val );
__declspec(implementation_key(4011)) int ILayer::GetID ( );
__declspec(implementation_key(4012)) void ILayer::PutID ( int _val );
__declspec(implementation_key(4013)) int ILayer::GetsetID ( );
__declspec(implementation_key(4014)) void ILayer::PutsetID ( int _val );
__declspec(implementation_key(4015)) int ILayer::GetActive ( );
__declspec(implementation_key(4016)) void ILayer::PutActive ( int _val );
__declspec(implementation_key(4017)) enum zReturnCode ILoadETemp::Put ( int entID );
__declspec(implementation_key(4018)) enum zReturnCode ILoadETemp::Delete ( int entID );
__declspec(implementation_key(4019)) enum zReturnCode ILoadETemp::AddArray ( int Count, VARIANT_BOOL doValues, VARIANT_BOOL doFunctions, const _variant_t & elemID, const _variant_t & values, const _variant_t & FunctionID );
__declspec(implementation_key(4020)) enum zReturnCode ILoadETemp::NextSet ( );
__declspec(implementation_key(4021)) enum zReturnCode ILoadETemp::PrevSet ( );
__declspec(implementation_key(4022)) enum zReturnCode ILoadETemp::NextEmptySet ( );
__declspec(implementation_key(4023)) enum zReturnCode ILoadETemp::PrevEmptySet ( );
__declspec(implementation_key(4024)) enum zReturnCode ILoadETemp::Get ( int ID );
__declspec(implementation_key(4025)) enum zReturnCode ILoadETemp::Exist ( int ID );
__declspec(implementation_key(4026)) enum zReturnCode ILoadETemp::Deletable ( int ID );
__declspec(implementation_key(4027)) enum zReturnCode ILoadETemp::Reset ( );
__declspec(implementation_key(4028)) enum zReturnCode ILoadETemp::Next ( );
__declspec(implementation_key(4029)) enum zReturnCode ILoadETemp::Prev ( );
__declspec(implementation_key(4030)) enum zReturnCode ILoadETemp::First ( );
__declspec(implementation_key(4031)) enum zReturnCode ILoadETemp::Last ( );
__declspec(implementation_key(4032)) int ILoadETemp::NextID ( );
__declspec(implementation_key(4033)) int ILoadETemp::PrevID ( );
__declspec(implementation_key(4034)) int ILoadETemp::NextEmptyID ( );
__declspec(implementation_key(4035)) int ILoadETemp::PrevEmptyID ( );
__declspec(implementation_key(4036)) enum zReturnCode ILoadETemp::GetLibrary ( int ID );
__declspec(implementation_key(4037)) enum zReturnCode ILoadETemp::PutLibrary ( );
__declspec(implementation_key(4038)) enum zReturnCode ILoadETemp::DeleteLibrary ( int ID );
__declspec(implementation_key(4039)) enum zReturnCode ILoadETemp::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4040)) enum zReturnCode ILoadETemp::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4041)) int ILoadETemp::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(4042)) enum zReturnCode ILoadETemp::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(4043)) enum zReturnCode ILoadETemp::NextInSet ( int nSetID );
__declspec(implementation_key(4044)) enum zReturnCode ILoadETemp::FirstInSet ( int nSetID );
__declspec(implementation_key(4045)) int ILoadETemp::CountSet ( );
__declspec(implementation_key(4046)) enum zReturnCode ILoadETemp::NextExistingInSet ( int nSetID );
__declspec(implementation_key(4047)) enum zReturnCode ILoadETemp::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(4048)) double ILoadETemp::Gettemp ( );
__declspec(implementation_key(4049)) void ILoadETemp::Puttemp ( double _val );
__declspec(implementation_key(4050)) double ILoadETemp::Getphase ( );
__declspec(implementation_key(4051)) void ILoadETemp::Putphase ( double _val );
__declspec(implementation_key(4052)) int ILoadETemp::GetFunction ( );
__declspec(implementation_key(4053)) void ILoadETemp::PutFunction ( int _val );
__declspec(implementation_key(4054)) int ILoadETemp::Getlayer ( );
__declspec(implementation_key(4055)) void ILoadETemp::Putlayer ( int _val );
__declspec(implementation_key(4056)) enum zColor ILoadETemp::Getcolor ( );
__declspec(implementation_key(4057)) void ILoadETemp::Putcolor ( enum zColor _val );
__declspec(implementation_key(4058)) VARIANT_BOOL ILoadETemp::Getexpanded ( );
__declspec(implementation_key(4059)) void ILoadETemp::Putexpanded ( VARIANT_BOOL _val );
__declspec(implementation_key(4060)) int ILoadETemp::GetLoadDefinitionID ( );
__declspec(implementation_key(4061)) void ILoadETemp::PutLoadDefinitionID ( int _val );
__declspec(implementation_key(4062)) double ILoadETemp::Getgradient ( );
__declspec(implementation_key(4063)) void ILoadETemp::Putgradient ( double _val );
__declspec(implementation_key(4064)) int ILoadETemp::GetID ( );
__declspec(implementation_key(4065)) void ILoadETemp::PutID ( int _val );
__declspec(implementation_key(4066)) int ILoadETemp::GetsetID ( );
__declspec(implementation_key(4067)) void ILoadETemp::PutsetID ( int _val );
__declspec(implementation_key(4068)) int ILoadETemp::GetActive ( );
__declspec(implementation_key(4069)) void ILoadETemp::PutActive ( int _val );
__declspec(implementation_key(4070)) double ILoadGeom::Getdirbase ( int nVectorIndex );
__declspec(implementation_key(4071)) void ILoadGeom::Putdirbase ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(4072)) double ILoadGeom::Getdirection ( int nVectorIndex );
__declspec(implementation_key(4073)) void ILoadGeom::Putdirection ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(4074)) double ILoadGeom::Getvarvalue ( int nVectorIndex );
__declspec(implementation_key(4075)) void ILoadGeom::Putvarvalue ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(4076)) int ILoadGeom::GetaddlID ( int nVectorIndex );
__declspec(implementation_key(4077)) void ILoadGeom::PutaddlID ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(4078)) int ILoadGeom::Getdof ( int nVectorIndex );
__declspec(implementation_key(4079)) void ILoadGeom::Putdof ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(4080)) VARIANT_BOOL ILoadGeom::Getflag ( int nVectorIndex );
__declspec(implementation_key(4081)) void ILoadGeom::Putflag ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(4082)) double ILoadGeom::Getload ( int nVectorIndex );
__declspec(implementation_key(4083)) void ILoadGeom::Putload ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(4084)) double ILoadGeom::Getfluxdir ( int nVectorIndex );
__declspec(implementation_key(4085)) void ILoadGeom::Putfluxdir ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(4086)) int ILoadGeom::GetFunction ( int nVectorIndex );
__declspec(implementation_key(4087)) void ILoadGeom::PutFunction ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(4088)) double ILoadGeom::Getvarlocate ( int nRowIndex, int nColIndex );
__declspec(implementation_key(4089)) void ILoadGeom::Putvarlocate ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(4090)) int ILoadGeom::GetDataSurface ( int nVectorIndex );
__declspec(implementation_key(4091)) void ILoadGeom::PutDataSurface ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(4092)) enum zReturnCode ILoadGeom::Put ( int entID );
__declspec(implementation_key(4093)) enum zReturnCode ILoadGeom::Delete ( int entID );
__declspec(implementation_key(4094)) enum zReturnCode ILoadGeom::GetSearch ( enum zLoadType loadType, int geomID );
__declspec(implementation_key(4095)) enum zReturnCode ILoadGeom::NextSet ( );
__declspec(implementation_key(4096)) enum zReturnCode ILoadGeom::PrevSet ( );
__declspec(implementation_key(4097)) enum zReturnCode ILoadGeom::NextEmptySet ( );
__declspec(implementation_key(4098)) enum zReturnCode ILoadGeom::PrevEmptySet ( );
__declspec(implementation_key(4099)) enum zReturnCode ILoadGeom::Get ( int ID );
__declspec(implementation_key(4100)) enum zReturnCode ILoadGeom::Exist ( int ID );
__declspec(implementation_key(4101)) enum zReturnCode ILoadGeom::Deletable ( int ID );
__declspec(implementation_key(4102)) enum zReturnCode ILoadGeom::Reset ( );
__declspec(implementation_key(4103)) enum zReturnCode ILoadGeom::Next ( );
__declspec(implementation_key(4104)) enum zReturnCode ILoadGeom::Prev ( );
__declspec(implementation_key(4105)) enum zReturnCode ILoadGeom::First ( );
__declspec(implementation_key(4106)) enum zReturnCode ILoadGeom::Last ( );
__declspec(implementation_key(4107)) int ILoadGeom::NextID ( );
__declspec(implementation_key(4108)) int ILoadGeom::PrevID ( );
__declspec(implementation_key(4109)) int ILoadGeom::NextEmptyID ( );
__declspec(implementation_key(4110)) int ILoadGeom::PrevEmptyID ( );
__declspec(implementation_key(4111)) enum zReturnCode ILoadGeom::GetLibrary ( int ID );
__declspec(implementation_key(4112)) enum zReturnCode ILoadGeom::PutLibrary ( );
__declspec(implementation_key(4113)) enum zReturnCode ILoadGeom::DeleteLibrary ( int ID );
__declspec(implementation_key(4114)) enum zReturnCode ILoadGeom::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4115)) enum zReturnCode ILoadGeom::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4116)) int ILoadGeom::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(4117)) enum zReturnCode ILoadGeom::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(4118)) enum zReturnCode ILoadGeom::NextInSet ( int nSetID );
__declspec(implementation_key(4119)) enum zReturnCode ILoadGeom::FirstInSet ( int nSetID );
__declspec(implementation_key(4120)) int ILoadGeom::CountSet ( );
__declspec(implementation_key(4121)) enum zReturnCode ILoadGeom::NextExistingInSet ( int nSetID );
__declspec(implementation_key(4122)) enum zReturnCode ILoadGeom::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(4123)) enum zLoadDirection ILoadGeom::Getdirmode ( );
__declspec(implementation_key(4124)) void ILoadGeom::Putdirmode ( enum zLoadDirection _val );
__declspec(implementation_key(4125)) int ILoadGeom::GetdirID ( );
__declspec(implementation_key(4126)) void ILoadGeom::PutdirID ( int _val );
__declspec(implementation_key(4127)) enum zLoadVariation ILoadGeom::Getvariation ( );
__declspec(implementation_key(4128)) void ILoadGeom::Putvariation ( enum zLoadVariation _val );
__declspec(implementation_key(4129)) _bstr_t ILoadGeom::Getvarname ( );
__declspec(implementation_key(4130)) void ILoadGeom::Putvarname ( _bstr_t _val );
__declspec(implementation_key(4131)) _bstr_t ILoadGeom::Getvareqn ( );
__declspec(implementation_key(4132)) void ILoadGeom::Putvareqn ( _bstr_t _val );
__declspec(implementation_key(4133)) int ILoadGeom::Getvarfunction ( );
__declspec(implementation_key(4134)) void ILoadGeom::Putvarfunction ( int _val );
__declspec(implementation_key(4135)) VARIANT_BOOL ILoadGeom::Getmidside ( );
__declspec(implementation_key(4136)) void ILoadGeom::Putmidside ( VARIANT_BOOL _val );
__declspec(implementation_key(4137)) int ILoadGeom::GetgeomID ( );
__declspec(implementation_key(4138)) void ILoadGeom::PutgeomID ( int _val );
__declspec(implementation_key(4139)) int ILoadGeom::GetCSys ( );
__declspec(implementation_key(4140)) void ILoadGeom::PutCSys ( int _val );
__declspec(implementation_key(4141)) enum zLoadType ILoadGeom::Gettype ( );
__declspec(implementation_key(4142)) void ILoadGeom::Puttype ( enum zLoadType _val );
__declspec(implementation_key(4143)) int ILoadGeom::Getsubtype ( );
__declspec(implementation_key(4144)) void ILoadGeom::Putsubtype ( int _val );
__declspec(implementation_key(4145)) int ILoadGeom::Getlayer ( );
__declspec(implementation_key(4146)) void ILoadGeom::Putlayer ( int _val );
__declspec(implementation_key(4147)) int ILoadGeom::GetLoadDefinitionID ( );
__declspec(implementation_key(4148)) void ILoadGeom::PutLoadDefinitionID ( int _val );
__declspec(implementation_key(4149)) enum zColor ILoadGeom::Getcolor ( );
__declspec(implementation_key(4150)) void ILoadGeom::Putcolor ( enum zColor _val );
__declspec(implementation_key(4151)) VARIANT_BOOL ILoadGeom::Getexpanded ( );
__declspec(implementation_key(4152)) void ILoadGeom::Putexpanded ( VARIANT_BOOL _val );
__declspec(implementation_key(4153)) int ILoadGeom::GetFaceNumber ( );
__declspec(implementation_key(4154)) void ILoadGeom::PutFaceNumber ( int _val );
__declspec(implementation_key(4155)) VARIANT_BOOL ILoadGeom::GetXOn ( );
__declspec(implementation_key(4156)) void ILoadGeom::PutXOn ( VARIANT_BOOL _val );
__declspec(implementation_key(4157)) VARIANT_BOOL ILoadGeom::GetYOn ( );
__declspec(implementation_key(4158)) void ILoadGeom::PutYOn ( VARIANT_BOOL _val );
__declspec(implementation_key(4159)) VARIANT_BOOL ILoadGeom::GetZOn ( );
__declspec(implementation_key(4160)) void ILoadGeom::PutZOn ( VARIANT_BOOL _val );
__declspec(implementation_key(4161)) double ILoadGeom::Getx ( );
__declspec(implementation_key(4162)) void ILoadGeom::Putx ( double _val );
__declspec(implementation_key(4163)) double ILoadGeom::Gety ( );
__declspec(implementation_key(4164)) void ILoadGeom::Puty ( double _val );
__declspec(implementation_key(4165)) double ILoadGeom::Getz ( );
__declspec(implementation_key(4166)) void ILoadGeom::Putz ( double _val );
__declspec(implementation_key(4167)) double ILoadGeom::Gettemp ( );
__declspec(implementation_key(4168)) void ILoadGeom::Puttemp ( double _val );
__declspec(implementation_key(4169)) double ILoadGeom::Getphase ( );
__declspec(implementation_key(4170)) void ILoadGeom::Putphase ( double _val );
__declspec(implementation_key(4171)) int ILoadGeom::GetLoadFunction ( );
__declspec(implementation_key(4172)) void ILoadGeom::PutLoadFunction ( int _val );
__declspec(implementation_key(4173)) int ILoadGeom::GetTempVsTime ( );
__declspec(implementation_key(4174)) void ILoadGeom::PutTempVsTime ( int _val );
__declspec(implementation_key(4175)) int ILoadGeom::GetPhaseVsFreq ( );
__declspec(implementation_key(4176)) void ILoadGeom::PutPhaseVsFreq ( int _val );
__declspec(implementation_key(4177)) double ILoadGeom::GetLoadValue ( );
__declspec(implementation_key(4178)) void ILoadGeom::PutLoadValue ( double _val );
__declspec(implementation_key(4179)) VARIANT_BOOL ILoadGeom::GetCornerPressure ( );
__declspec(implementation_key(4180)) void ILoadGeom::PutCornerPressure ( VARIANT_BOOL _val );
__declspec(implementation_key(4181)) double ILoadGeom::GetPressure ( );
__declspec(implementation_key(4182)) void ILoadGeom::PutPressure ( double _val );
__declspec(implementation_key(4183)) double ILoadGeom::GetHeatGen ( );
__declspec(implementation_key(4184)) void ILoadGeom::PutHeatGen ( double _val );
__declspec(implementation_key(4185)) double ILoadGeom::GetHeatFlux ( );
__declspec(implementation_key(4186)) void ILoadGeom::PutHeatFlux ( double _val );
__declspec(implementation_key(4187)) double ILoadGeom::GetAbsorptivity ( );
__declspec(implementation_key(4188)) void ILoadGeom::PutAbsorptivity ( double _val );
__declspec(implementation_key(4189)) int ILoadGeom::GetAbsorptivityVsTemp ( );
__declspec(implementation_key(4190)) void ILoadGeom::PutAbsorptivityVsTemp ( int _val );
__declspec(implementation_key(4191)) VARIANT_BOOL ILoadGeom::GetVectorFlux ( );
__declspec(implementation_key(4192)) void ILoadGeom::PutVectorFlux ( VARIANT_BOOL _val );
__declspec(implementation_key(4193)) double ILoadGeom::GetFluidValue ( );
__declspec(implementation_key(4194)) void ILoadGeom::PutFluidValue ( double _val );
__declspec(implementation_key(4195)) VARIANT_BOOL ILoadGeom::GetPeriodicMaster ( );
__declspec(implementation_key(4196)) void ILoadGeom::PutPeriodicMaster ( VARIANT_BOOL _val );
__declspec(implementation_key(4197)) VARIANT_BOOL ILoadGeom::GetPeriodicDirection ( );
__declspec(implementation_key(4198)) void ILoadGeom::PutPeriodicDirection ( VARIANT_BOOL _val );
__declspec(implementation_key(4199)) double ILoadGeom::GetConvectionCoeff ( );
__declspec(implementation_key(4200)) void ILoadGeom::PutConvectionCoeff ( double _val );
__declspec(implementation_key(4201)) VARIANT_BOOL ILoadGeom::GetForcedConvection ( );
__declspec(implementation_key(4202)) void ILoadGeom::PutForcedConvection ( VARIANT_BOOL _val );
__declspec(implementation_key(4203)) VARIANT_BOOL ILoadGeom::GetFCDisableAdvection ( );
__declspec(implementation_key(4204)) void ILoadGeom::PutFCDisableAdvection ( VARIANT_BOOL _val );
__declspec(implementation_key(4205)) VARIANT_BOOL ILoadGeom::GetFCDisableConvection ( );
__declspec(implementation_key(4206)) void ILoadGeom::PutFCDisableConvection ( VARIANT_BOOL _val );
__declspec(implementation_key(4207)) double ILoadGeom::GetFlowRate ( );
__declspec(implementation_key(4208)) void ILoadGeom::PutFlowRate ( double _val );
__declspec(implementation_key(4209)) double ILoadGeom::GetFlowDiameter ( );
__declspec(implementation_key(4210)) void ILoadGeom::PutFlowDiameter ( double _val );
__declspec(implementation_key(4211)) double ILoadGeom::GetFlowAreaFactor ( );
__declspec(implementation_key(4212)) void ILoadGeom::PutFlowAreaFactor ( double _val );
__declspec(implementation_key(4213)) double ILoadGeom::GetEmissivity ( );
__declspec(implementation_key(4214)) void ILoadGeom::PutEmissivity ( double _val );
__declspec(implementation_key(4215)) int ILoadGeom::GetEmissivityFunc ( );
__declspec(implementation_key(4216)) void ILoadGeom::PutEmissivityFunc ( int _val );
__declspec(implementation_key(4217)) double ILoadGeom::GetViewFactor ( );
__declspec(implementation_key(4218)) void ILoadGeom::PutViewFactor ( double _val );
__declspec(implementation_key(4219)) int ILoadGeom::GetViewFactorVsTime ( );
__declspec(implementation_key(4220)) void ILoadGeom::PutViewFactorVsTime ( int _val );
__declspec(implementation_key(4221)) VARIANT_BOOL ILoadGeom::GetEnclosureRadiation ( );
__declspec(implementation_key(4222)) void ILoadGeom::PutEnclosureRadiation ( VARIANT_BOOL _val );
__declspec(implementation_key(4223)) VARIANT_BOOL ILoadGeom::GetCanShade ( );
__declspec(implementation_key(4224)) void ILoadGeom::PutCanShade ( VARIANT_BOOL _val );
__declspec(implementation_key(4225)) VARIANT_BOOL ILoadGeom::GetCanBeShaded ( );
__declspec(implementation_key(4226)) void ILoadGeom::PutCanBeShaded ( VARIANT_BOOL _val );
__declspec(implementation_key(4227)) int ILoadGeom::GetCavityNumber ( );
__declspec(implementation_key(4228)) void ILoadGeom::PutCavityNumber ( int _val );
__declspec(implementation_key(4229)) _variant_t ILoadGeom::Getvdirbase ( );
__declspec(implementation_key(4230)) void ILoadGeom::Putvdirbase ( const _variant_t & _val );
__declspec(implementation_key(4231)) _variant_t ILoadGeom::Getvdirection ( );
__declspec(implementation_key(4232)) void ILoadGeom::Putvdirection ( const _variant_t & _val );
__declspec(implementation_key(4233)) _variant_t ILoadGeom::Getvvarvalue ( );
__declspec(implementation_key(4234)) void ILoadGeom::Putvvarvalue ( const _variant_t & _val );
__declspec(implementation_key(4235)) _variant_t ILoadGeom::GetvaddlID ( );
__declspec(implementation_key(4236)) void ILoadGeom::PutvaddlID ( const _variant_t & _val );
__declspec(implementation_key(4237)) _variant_t ILoadGeom::Getvdof ( );
__declspec(implementation_key(4238)) void ILoadGeom::Putvdof ( const _variant_t & _val );
__declspec(implementation_key(4239)) _variant_t ILoadGeom::Getvflag ( );
__declspec(implementation_key(4240)) void ILoadGeom::Putvflag ( const _variant_t & _val );
__declspec(implementation_key(4241)) _variant_t ILoadGeom::Getvload ( );
__declspec(implementation_key(4242)) void ILoadGeom::Putvload ( const _variant_t & _val );
__declspec(implementation_key(4243)) _variant_t ILoadGeom::Getvfluxdir ( );
__declspec(implementation_key(4244)) void ILoadGeom::Putvfluxdir ( const _variant_t & _val );
__declspec(implementation_key(4245)) _variant_t ILoadGeom::Getvfunction ( );
__declspec(implementation_key(4246)) void ILoadGeom::Putvfunction ( const _variant_t & _val );
__declspec(implementation_key(4247)) _variant_t ILoadGeom::Getvvarlocate ( );
__declspec(implementation_key(4248)) void ILoadGeom::Putvvarlocate ( const _variant_t & _val );
__declspec(implementation_key(4249)) enum zDataType ILoadGeom::GetgeomTYPE ( );
__declspec(implementation_key(4250)) void ILoadGeom::PutgeomTYPE ( enum zDataType _val );
__declspec(implementation_key(4251)) _variant_t ILoadGeom::GetvDataSurface ( );
__declspec(implementation_key(4252)) void ILoadGeom::PutvDataSurface ( const _variant_t & _val );
__declspec(implementation_key(4253)) int ILoadGeom::GetID ( );
__declspec(implementation_key(4254)) void ILoadGeom::PutID ( int _val );
__declspec(implementation_key(4255)) int ILoadGeom::GetsetID ( );
__declspec(implementation_key(4256)) void ILoadGeom::PutsetID ( int _val );
__declspec(implementation_key(4257)) int ILoadGeom::GetActive ( );
__declspec(implementation_key(4258)) void ILoadGeom::PutActive ( int _val );
__declspec(implementation_key(4259)) int ILoadMesh::GetaddlID ( int nVectorIndex );
__declspec(implementation_key(4260)) void ILoadMesh::PutaddlID ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(4261)) int ILoadMesh::Getdof ( int nVectorIndex );
__declspec(implementation_key(4262)) void ILoadMesh::Putdof ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(4263)) VARIANT_BOOL ILoadMesh::Getflag ( int nVectorIndex );
__declspec(implementation_key(4264)) void ILoadMesh::Putflag ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(4265)) double ILoadMesh::Getload ( int nVectorIndex );
__declspec(implementation_key(4266)) void ILoadMesh::Putload ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(4267)) double ILoadMesh::Getfluxdir ( int nVectorIndex );
__declspec(implementation_key(4268)) void ILoadMesh::Putfluxdir ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(4269)) int ILoadMesh::GetFunction ( int nVectorIndex );
__declspec(implementation_key(4270)) void ILoadMesh::PutFunction ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(4271)) enum zReturnCode ILoadMesh::Put ( int entID );
__declspec(implementation_key(4272)) enum zReturnCode ILoadMesh::Delete ( int entID );
__declspec(implementation_key(4273)) enum zReturnCode ILoadMesh::GetSearch ( enum zLoadType loadType, int meshID, int faceID );
__declspec(implementation_key(4274)) enum zReturnCode ILoadMesh::AddArray ( int Count, VARIANT_BOOL doDOF, VARIANT_BOOL doValues, VARIANT_BOOL doFunctions, const _variant_t & NodeElemID, const _variant_t & dof, const _variant_t & values, const _variant_t & FunctionID );
__declspec(implementation_key(4275)) enum zReturnCode ILoadMesh::Add ( int setID, enum zLoadType loadType, int nCSys, const _variant_t & dof, const _variant_t & values, const _variant_t & FunctionID );
__declspec(implementation_key(4276)) enum zReturnCode ILoadMesh::NextSet ( );
__declspec(implementation_key(4277)) enum zReturnCode ILoadMesh::PrevSet ( );
__declspec(implementation_key(4278)) enum zReturnCode ILoadMesh::NextEmptySet ( );
__declspec(implementation_key(4279)) enum zReturnCode ILoadMesh::PrevEmptySet ( );
__declspec(implementation_key(4280)) enum zReturnCode ILoadMesh::Get ( int ID );
__declspec(implementation_key(4281)) enum zReturnCode ILoadMesh::Exist ( int ID );
__declspec(implementation_key(4282)) enum zReturnCode ILoadMesh::Deletable ( int ID );
__declspec(implementation_key(4283)) enum zReturnCode ILoadMesh::Reset ( );
__declspec(implementation_key(4284)) enum zReturnCode ILoadMesh::Next ( );
__declspec(implementation_key(4285)) enum zReturnCode ILoadMesh::Prev ( );
__declspec(implementation_key(4286)) enum zReturnCode ILoadMesh::First ( );
__declspec(implementation_key(4287)) enum zReturnCode ILoadMesh::Last ( );
__declspec(implementation_key(4288)) int ILoadMesh::NextID ( );
__declspec(implementation_key(4289)) int ILoadMesh::PrevID ( );
__declspec(implementation_key(4290)) int ILoadMesh::NextEmptyID ( );
__declspec(implementation_key(4291)) int ILoadMesh::PrevEmptyID ( );
__declspec(implementation_key(4292)) enum zReturnCode ILoadMesh::GetLibrary ( int ID );
__declspec(implementation_key(4293)) enum zReturnCode ILoadMesh::PutLibrary ( );
__declspec(implementation_key(4294)) enum zReturnCode ILoadMesh::DeleteLibrary ( int ID );
__declspec(implementation_key(4295)) enum zReturnCode ILoadMesh::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4296)) enum zReturnCode ILoadMesh::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4297)) int ILoadMesh::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(4298)) enum zReturnCode ILoadMesh::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(4299)) enum zReturnCode ILoadMesh::NextInSet ( int nSetID );
__declspec(implementation_key(4300)) enum zReturnCode ILoadMesh::FirstInSet ( int nSetID );
__declspec(implementation_key(4301)) int ILoadMesh::CountSet ( );
__declspec(implementation_key(4302)) enum zReturnCode ILoadMesh::NextExistingInSet ( int nSetID );
__declspec(implementation_key(4303)) enum zReturnCode ILoadMesh::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(4304)) int ILoadMesh::GetmeshID ( );
__declspec(implementation_key(4305)) void ILoadMesh::PutmeshID ( int _val );
__declspec(implementation_key(4306)) int ILoadMesh::GetCSys ( );
__declspec(implementation_key(4307)) void ILoadMesh::PutCSys ( int _val );
__declspec(implementation_key(4308)) enum zLoadType ILoadMesh::Gettype ( );
__declspec(implementation_key(4309)) void ILoadMesh::Puttype ( enum zLoadType _val );
__declspec(implementation_key(4310)) int ILoadMesh::Getsubtype ( );
__declspec(implementation_key(4311)) void ILoadMesh::Putsubtype ( int _val );
__declspec(implementation_key(4312)) int ILoadMesh::Getlayer ( );
__declspec(implementation_key(4313)) void ILoadMesh::Putlayer ( int _val );
__declspec(implementation_key(4314)) int ILoadMesh::GetLoadDefinitionID ( );
__declspec(implementation_key(4315)) void ILoadMesh::PutLoadDefinitionID ( int _val );
__declspec(implementation_key(4316)) enum zColor ILoadMesh::Getcolor ( );
__declspec(implementation_key(4317)) void ILoadMesh::Putcolor ( enum zColor _val );
__declspec(implementation_key(4318)) VARIANT_BOOL ILoadMesh::Getexpanded ( );
__declspec(implementation_key(4319)) void ILoadMesh::Putexpanded ( VARIANT_BOOL _val );
__declspec(implementation_key(4320)) int ILoadMesh::GetFaceNumber ( );
__declspec(implementation_key(4321)) void ILoadMesh::PutFaceNumber ( int _val );
__declspec(implementation_key(4322)) VARIANT_BOOL ILoadMesh::GetXOn ( );
__declspec(implementation_key(4323)) void ILoadMesh::PutXOn ( VARIANT_BOOL _val );
__declspec(implementation_key(4324)) VARIANT_BOOL ILoadMesh::GetYOn ( );
__declspec(implementation_key(4325)) void ILoadMesh::PutYOn ( VARIANT_BOOL _val );
__declspec(implementation_key(4326)) VARIANT_BOOL ILoadMesh::GetZOn ( );
__declspec(implementation_key(4327)) void ILoadMesh::PutZOn ( VARIANT_BOOL _val );
__declspec(implementation_key(4328)) double ILoadMesh::Getx ( );
__declspec(implementation_key(4329)) void ILoadMesh::Putx ( double _val );
__declspec(implementation_key(4330)) double ILoadMesh::Gety ( );
__declspec(implementation_key(4331)) void ILoadMesh::Puty ( double _val );
__declspec(implementation_key(4332)) double ILoadMesh::Getz ( );
__declspec(implementation_key(4333)) void ILoadMesh::Putz ( double _val );
__declspec(implementation_key(4334)) double ILoadMesh::Gettemp ( );
__declspec(implementation_key(4335)) void ILoadMesh::Puttemp ( double _val );
__declspec(implementation_key(4336)) double ILoadMesh::Getphase ( );
__declspec(implementation_key(4337)) void ILoadMesh::Putphase ( double _val );
__declspec(implementation_key(4338)) int ILoadMesh::GetLoadFunction ( );
__declspec(implementation_key(4339)) void ILoadMesh::PutLoadFunction ( int _val );
__declspec(implementation_key(4340)) int ILoadMesh::GetTempVsTime ( );
__declspec(implementation_key(4341)) void ILoadMesh::PutTempVsTime ( int _val );
__declspec(implementation_key(4342)) int ILoadMesh::GetPhaseVsFreq ( );
__declspec(implementation_key(4343)) void ILoadMesh::PutPhaseVsFreq ( int _val );
__declspec(implementation_key(4344)) double ILoadMesh::GetLoadValue ( );
__declspec(implementation_key(4345)) void ILoadMesh::PutLoadValue ( double _val );
__declspec(implementation_key(4346)) VARIANT_BOOL ILoadMesh::GetCornerPressure ( );
__declspec(implementation_key(4347)) void ILoadMesh::PutCornerPressure ( VARIANT_BOOL _val );
__declspec(implementation_key(4348)) double ILoadMesh::GetPressure ( );
__declspec(implementation_key(4349)) void ILoadMesh::PutPressure ( double _val );
__declspec(implementation_key(4350)) double ILoadMesh::GetHeatGen ( );
__declspec(implementation_key(4351)) void ILoadMesh::PutHeatGen ( double _val );
__declspec(implementation_key(4352)) double ILoadMesh::GetHeatFlux ( );
__declspec(implementation_key(4353)) void ILoadMesh::PutHeatFlux ( double _val );
__declspec(implementation_key(4354)) double ILoadMesh::GetAbsorptivity ( );
__declspec(implementation_key(4355)) void ILoadMesh::PutAbsorptivity ( double _val );
__declspec(implementation_key(4356)) int ILoadMesh::GetAbsorptivityVsTemp ( );
__declspec(implementation_key(4357)) void ILoadMesh::PutAbsorptivityVsTemp ( int _val );
__declspec(implementation_key(4358)) VARIANT_BOOL ILoadMesh::GetVectorFlux ( );
__declspec(implementation_key(4359)) void ILoadMesh::PutVectorFlux ( VARIANT_BOOL _val );
__declspec(implementation_key(4360)) double ILoadMesh::GetFluidValue ( );
__declspec(implementation_key(4361)) void ILoadMesh::PutFluidValue ( double _val );
__declspec(implementation_key(4362)) VARIANT_BOOL ILoadMesh::GetPeriodicMaster ( );
__declspec(implementation_key(4363)) void ILoadMesh::PutPeriodicMaster ( VARIANT_BOOL _val );
__declspec(implementation_key(4364)) VARIANT_BOOL ILoadMesh::GetPeriodicDirection ( );
__declspec(implementation_key(4365)) void ILoadMesh::PutPeriodicDirection ( VARIANT_BOOL _val );
__declspec(implementation_key(4366)) double ILoadMesh::GetConvectionCoeff ( );
__declspec(implementation_key(4367)) void ILoadMesh::PutConvectionCoeff ( double _val );
__declspec(implementation_key(4368)) VARIANT_BOOL ILoadMesh::GetForcedConvection ( );
__declspec(implementation_key(4369)) void ILoadMesh::PutForcedConvection ( VARIANT_BOOL _val );
__declspec(implementation_key(4370)) VARIANT_BOOL ILoadMesh::GetFCDisableAdvection ( );
__declspec(implementation_key(4371)) void ILoadMesh::PutFCDisableAdvection ( VARIANT_BOOL _val );
__declspec(implementation_key(4372)) VARIANT_BOOL ILoadMesh::GetFCDisableConvection ( );
__declspec(implementation_key(4373)) void ILoadMesh::PutFCDisableConvection ( VARIANT_BOOL _val );
__declspec(implementation_key(4374)) double ILoadMesh::GetFlowRate ( );
__declspec(implementation_key(4375)) void ILoadMesh::PutFlowRate ( double _val );
__declspec(implementation_key(4376)) double ILoadMesh::GetFlowDiameter ( );
__declspec(implementation_key(4377)) void ILoadMesh::PutFlowDiameter ( double _val );
__declspec(implementation_key(4378)) double ILoadMesh::GetFlowAreaFactor ( );
__declspec(implementation_key(4379)) void ILoadMesh::PutFlowAreaFactor ( double _val );
__declspec(implementation_key(4380)) double ILoadMesh::GetEmissivity ( );
__declspec(implementation_key(4381)) void ILoadMesh::PutEmissivity ( double _val );
__declspec(implementation_key(4382)) int ILoadMesh::GetEmissivityFunc ( );
__declspec(implementation_key(4383)) void ILoadMesh::PutEmissivityFunc ( int _val );
__declspec(implementation_key(4384)) double ILoadMesh::GetViewFactor ( );
__declspec(implementation_key(4385)) void ILoadMesh::PutViewFactor ( double _val );
__declspec(implementation_key(4386)) int ILoadMesh::GetViewFactorVsTime ( );
__declspec(implementation_key(4387)) void ILoadMesh::PutViewFactorVsTime ( int _val );
__declspec(implementation_key(4388)) VARIANT_BOOL ILoadMesh::GetEnclosureRadiation ( );
__declspec(implementation_key(4389)) void ILoadMesh::PutEnclosureRadiation ( VARIANT_BOOL _val );
__declspec(implementation_key(4390)) VARIANT_BOOL ILoadMesh::GetCanShade ( );
__declspec(implementation_key(4391)) void ILoadMesh::PutCanShade ( VARIANT_BOOL _val );
__declspec(implementation_key(4392)) VARIANT_BOOL ILoadMesh::GetCanBeShaded ( );
__declspec(implementation_key(4393)) void ILoadMesh::PutCanBeShaded ( VARIANT_BOOL _val );
__declspec(implementation_key(4394)) int ILoadMesh::GetCavityNumber ( );
__declspec(implementation_key(4395)) void ILoadMesh::PutCavityNumber ( int _val );
__declspec(implementation_key(4396)) _variant_t ILoadMesh::GetvaddlID ( );
__declspec(implementation_key(4397)) void ILoadMesh::PutvaddlID ( const _variant_t & _val );
__declspec(implementation_key(4398)) _variant_t ILoadMesh::Getvdof ( );
__declspec(implementation_key(4399)) void ILoadMesh::Putvdof ( const _variant_t & _val );
__declspec(implementation_key(4400)) _variant_t ILoadMesh::Getvflag ( );
__declspec(implementation_key(4401)) void ILoadMesh::Putvflag ( const _variant_t & _val );
__declspec(implementation_key(4402)) _variant_t ILoadMesh::Getvload ( );
__declspec(implementation_key(4403)) void ILoadMesh::Putvload ( const _variant_t & _val );
__declspec(implementation_key(4404)) _variant_t ILoadMesh::Getvfluxdir ( );
__declspec(implementation_key(4405)) void ILoadMesh::Putvfluxdir ( const _variant_t & _val );
__declspec(implementation_key(4406)) _variant_t ILoadMesh::Getvfunction ( );
__declspec(implementation_key(4407)) void ILoadMesh::Putvfunction ( const _variant_t & _val );
__declspec(implementation_key(4408)) int ILoadMesh::GetID ( );
__declspec(implementation_key(4409)) void ILoadMesh::PutID ( int _val );
__declspec(implementation_key(4410)) int ILoadMesh::GetsetID ( );
__declspec(implementation_key(4411)) void ILoadMesh::PutsetID ( int _val );
__declspec(implementation_key(4412)) int ILoadMesh::GetActive ( );
__declspec(implementation_key(4413)) void ILoadMesh::PutActive ( int _val );
__declspec(implementation_key(4414)) enum zReturnCode ILoadNTemp::Put ( int entID );
__declspec(implementation_key(4415)) enum zReturnCode ILoadNTemp::Delete ( int entID );
__declspec(implementation_key(4416)) enum zReturnCode ILoadNTemp::AddArray ( int Count, VARIANT_BOOL doValues, VARIANT_BOOL doFunctions, const _variant_t & NodeID, const _variant_t & values, const _variant_t & FunctionID );
__declspec(implementation_key(4417)) enum zReturnCode ILoadNTemp::NextSet ( );
__declspec(implementation_key(4418)) enum zReturnCode ILoadNTemp::PrevSet ( );
__declspec(implementation_key(4419)) enum zReturnCode ILoadNTemp::NextEmptySet ( );
__declspec(implementation_key(4420)) enum zReturnCode ILoadNTemp::PrevEmptySet ( );
__declspec(implementation_key(4421)) enum zReturnCode ILoadNTemp::Get ( int ID );
__declspec(implementation_key(4422)) enum zReturnCode ILoadNTemp::Exist ( int ID );
__declspec(implementation_key(4423)) enum zReturnCode ILoadNTemp::Deletable ( int ID );
__declspec(implementation_key(4424)) enum zReturnCode ILoadNTemp::Reset ( );
__declspec(implementation_key(4425)) enum zReturnCode ILoadNTemp::Next ( );
__declspec(implementation_key(4426)) enum zReturnCode ILoadNTemp::Prev ( );
__declspec(implementation_key(4427)) enum zReturnCode ILoadNTemp::First ( );
__declspec(implementation_key(4428)) enum zReturnCode ILoadNTemp::Last ( );
__declspec(implementation_key(4429)) int ILoadNTemp::NextID ( );
__declspec(implementation_key(4430)) int ILoadNTemp::PrevID ( );
__declspec(implementation_key(4431)) int ILoadNTemp::NextEmptyID ( );
__declspec(implementation_key(4432)) int ILoadNTemp::PrevEmptyID ( );
__declspec(implementation_key(4433)) enum zReturnCode ILoadNTemp::GetLibrary ( int ID );
__declspec(implementation_key(4434)) enum zReturnCode ILoadNTemp::PutLibrary ( );
__declspec(implementation_key(4435)) enum zReturnCode ILoadNTemp::DeleteLibrary ( int ID );
__declspec(implementation_key(4436)) enum zReturnCode ILoadNTemp::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4437)) enum zReturnCode ILoadNTemp::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4438)) int ILoadNTemp::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(4439)) enum zReturnCode ILoadNTemp::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(4440)) enum zReturnCode ILoadNTemp::NextInSet ( int nSetID );
__declspec(implementation_key(4441)) enum zReturnCode ILoadNTemp::FirstInSet ( int nSetID );
__declspec(implementation_key(4442)) int ILoadNTemp::CountSet ( );
__declspec(implementation_key(4443)) enum zReturnCode ILoadNTemp::NextExistingInSet ( int nSetID );
__declspec(implementation_key(4444)) enum zReturnCode ILoadNTemp::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(4445)) double ILoadNTemp::Gettemp ( );
__declspec(implementation_key(4446)) void ILoadNTemp::Puttemp ( double _val );
__declspec(implementation_key(4447)) double ILoadNTemp::Getphase ( );
__declspec(implementation_key(4448)) void ILoadNTemp::Putphase ( double _val );
__declspec(implementation_key(4449)) int ILoadNTemp::GetFunction ( );
__declspec(implementation_key(4450)) void ILoadNTemp::PutFunction ( int _val );
__declspec(implementation_key(4451)) int ILoadNTemp::Getlayer ( );
__declspec(implementation_key(4452)) void ILoadNTemp::Putlayer ( int _val );
__declspec(implementation_key(4453)) enum zColor ILoadNTemp::Getcolor ( );
__declspec(implementation_key(4454)) void ILoadNTemp::Putcolor ( enum zColor _val );
__declspec(implementation_key(4455)) VARIANT_BOOL ILoadNTemp::Getexpanded ( );
__declspec(implementation_key(4456)) void ILoadNTemp::Putexpanded ( VARIANT_BOOL _val );
__declspec(implementation_key(4457)) int ILoadNTemp::GetLoadDefinitionID ( );
__declspec(implementation_key(4458)) void ILoadNTemp::PutLoadDefinitionID ( int _val );
__declspec(implementation_key(4459)) int ILoadNTemp::GetID ( );
__declspec(implementation_key(4460)) void ILoadNTemp::PutID ( int _val );
__declspec(implementation_key(4461)) int ILoadNTemp::GetsetID ( );
__declspec(implementation_key(4462)) void ILoadNTemp::PutsetID ( int _val );
__declspec(implementation_key(4463)) int ILoadNTemp::GetActive ( );
__declspec(implementation_key(4464)) void ILoadNTemp::PutActive ( int _val );
__declspec(implementation_key(4465)) VARIANT_BOOL ILoadSet::GetNLConvergenceFlag ( int nVectorIndex );
__declspec(implementation_key(4466)) void ILoadSet::PutNLConvergenceFlag ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(4467)) double ILoadSet::GetNLConvergenceVal ( int nVectorIndex );
__declspec(implementation_key(4468)) void ILoadSet::PutNLConvergenceVal ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(4469)) double ILoadSet::GetBodyAccel ( int nVectorIndex );
__declspec(implementation_key(4470)) void ILoadSet::PutBodyAccel ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(4471)) double ILoadSet::GetBodyVelocity ( int nVectorIndex );
__declspec(implementation_key(4472)) void ILoadSet::PutBodyVelocity ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(4473)) double ILoadSet::GetBodyOrigin ( int nVectorIndex );
__declspec(implementation_key(4474)) void ILoadSet::PutBodyOrigin ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(4475)) int ILoadSet::GetBodyAccelFunction ( int nVectorIndex );
__declspec(implementation_key(4476)) void ILoadSet::PutBodyAccelFunction ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(4477)) int ILoadSet::GetBodyVelocityFunction ( int nVectorIndex );
__declspec(implementation_key(4478)) void ILoadSet::PutBodyVelocityFunction ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(4479)) double ILoadSet::GetBodyVaryingAccel ( int nVectorIndex );
__declspec(implementation_key(4480)) void ILoadSet::PutBodyVaryingAccel ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(4481)) enum zReturnCode ILoadSet::Expand ( );
__declspec(implementation_key(4482)) enum zReturnCode ILoadSet::Compress ( );
__declspec(implementation_key(4483)) enum zReturnCode ILoadSet::Get ( int entID );
__declspec(implementation_key(4484)) enum zReturnCode ILoadSet::ResetNextLoad ( enum zDataType enDataType, VARIANT_BOOL bAllLoadTypes, enum zLoadType enLoadType, VARIANT_BOOL bOtherLoadsOnly, VARIANT_BOOL bIncludeExpanded );
__declspec(implementation_key(4485)) enum zReturnCode ILoadSet::NextLoad ( IDispatch * * pDispatch );
__declspec(implementation_key(4486)) enum zReturnCode ILoadSet::ResetNextLoadDef ( VARIANT_BOOL bAllDataTypes, enum zDataType enDataType, VARIANT_BOOL bAllLoadTypes, enum zLoadType enLoadType );
__declspec(implementation_key(4487)) enum zReturnCode ILoadSet::NextLoadDef ( IDispatch * * pDispatch );
__declspec(implementation_key(4488)) enum zReturnCode ILoadSet::Put ( int entID );
__declspec(implementation_key(4489)) enum zReturnCode ILoadSet::GetCombination ( double * dOverallScale, int * nCombo, VARIANT * dScale, VARIANT * nSetID );
__declspec(implementation_key(4490)) enum zReturnCode ILoadSet::PutCombination ( double dOverallScale, int nCombo, const _variant_t & dScale, const _variant_t & nSetID );
__declspec(implementation_key(4491)) enum zReturnCode ILoadSet::NextSet ( );
__declspec(implementation_key(4492)) enum zReturnCode ILoadSet::PrevSet ( );
__declspec(implementation_key(4493)) enum zReturnCode ILoadSet::NextEmptySet ( );
__declspec(implementation_key(4494)) enum zReturnCode ILoadSet::PrevEmptySet ( );
__declspec(implementation_key(4495)) enum zReturnCode ILoadSet::Exist ( int ID );
__declspec(implementation_key(4496)) enum zReturnCode ILoadSet::Deletable ( int ID );
__declspec(implementation_key(4497)) enum zReturnCode ILoadSet::Delete ( int ID );
__declspec(implementation_key(4498)) enum zReturnCode ILoadSet::Reset ( );
__declspec(implementation_key(4499)) enum zReturnCode ILoadSet::Next ( );
__declspec(implementation_key(4500)) enum zReturnCode ILoadSet::Prev ( );
__declspec(implementation_key(4501)) enum zReturnCode ILoadSet::First ( );
__declspec(implementation_key(4502)) enum zReturnCode ILoadSet::Last ( );
__declspec(implementation_key(4503)) int ILoadSet::NextID ( );
__declspec(implementation_key(4504)) int ILoadSet::PrevID ( );
__declspec(implementation_key(4505)) int ILoadSet::NextEmptyID ( );
__declspec(implementation_key(4506)) int ILoadSet::PrevEmptyID ( );
__declspec(implementation_key(4507)) enum zReturnCode ILoadSet::GetLibrary ( int ID );
__declspec(implementation_key(4508)) enum zReturnCode ILoadSet::PutLibrary ( );
__declspec(implementation_key(4509)) enum zReturnCode ILoadSet::DeleteLibrary ( int ID );
__declspec(implementation_key(4510)) enum zReturnCode ILoadSet::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4511)) enum zReturnCode ILoadSet::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4512)) int ILoadSet::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(4513)) enum zReturnCode ILoadSet::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(4514)) enum zReturnCode ILoadSet::NextInSet ( int nSetID );
__declspec(implementation_key(4515)) enum zReturnCode ILoadSet::FirstInSet ( int nSetID );
__declspec(implementation_key(4516)) int ILoadSet::CountSet ( );
__declspec(implementation_key(4517)) enum zReturnCode ILoadSet::NextExistingInSet ( int nSetID );
__declspec(implementation_key(4518)) enum zReturnCode ILoadSet::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(4519)) int ILoadSet::Getlayer ( );
__declspec(implementation_key(4520)) void ILoadSet::Putlayer ( int _val );
__declspec(implementation_key(4521)) double ILoadSet::GetBodyDefTemp ( );
__declspec(implementation_key(4522)) void ILoadSet::PutBodyDefTemp ( double _val );
__declspec(implementation_key(4523)) double ILoadSet::GetBodyRefTemp ( );
__declspec(implementation_key(4524)) void ILoadSet::PutBodyRefTemp ( double _val );
__declspec(implementation_key(4525)) VARIANT_BOOL ILoadSet::GetBodyDefTempOn ( );
__declspec(implementation_key(4526)) void ILoadSet::PutBodyDefTempOn ( VARIANT_BOOL _val );
__declspec(implementation_key(4527)) VARIANT_BOOL ILoadSet::GetBodyRefTempOn ( );
__declspec(implementation_key(4528)) void ILoadSet::PutBodyRefTempOn ( VARIANT_BOOL _val );
__declspec(implementation_key(4529)) VARIANT_BOOL ILoadSet::GetBodyAccelOn ( );
__declspec(implementation_key(4530)) void ILoadSet::PutBodyAccelOn ( VARIANT_BOOL _val );
__declspec(implementation_key(4531)) VARIANT_BOOL ILoadSet::GetBodyVelocityOn ( );
__declspec(implementation_key(4532)) void ILoadSet::PutBodyVelocityOn ( VARIANT_BOOL _val );
__declspec(implementation_key(4533)) double ILoadSet::GetStefanBoltzmann ( );
__declspec(implementation_key(4534)) void ILoadSet::PutStefanBoltzmann ( double _val );
__declspec(implementation_key(4535)) int ILoadSet::GetRadiationAmbientElem ( );
__declspec(implementation_key(4536)) void ILoadSet::PutRadiationAmbientElem ( int _val );
__declspec(implementation_key(4537)) double ILoadSet::GetTempOffset ( );
__declspec(implementation_key(4538)) void ILoadSet::PutTempOffset ( double _val );
__declspec(implementation_key(4539)) double ILoadSet::GetFreeConvExponent ( );
__declspec(implementation_key(4540)) void ILoadSet::PutFreeConvExponent ( double _val );
__declspec(implementation_key(4541)) VARIANT_BOOL ILoadSet::GetFreeConvAlternateForm ( );
__declspec(implementation_key(4542)) void ILoadSet::PutFreeConvAlternateForm ( VARIANT_BOOL _val );
__declspec(implementation_key(4543)) double ILoadSet::GetFCFluidConductivity ( );
__declspec(implementation_key(4544)) void ILoadSet::PutFCFluidConductivity ( double _val );
__declspec(implementation_key(4545)) double ILoadSet::GetFCFluidHeatCapacity ( );
__declspec(implementation_key(4546)) void ILoadSet::PutFCFluidHeatCapacity ( double _val );
__declspec(implementation_key(4547)) double ILoadSet::GetFCFluidViscosity ( );
__declspec(implementation_key(4548)) void ILoadSet::PutFCFluidViscosity ( double _val );
__declspec(implementation_key(4549)) double ILoadSet::GetFCFluidDensity ( );
__declspec(implementation_key(4550)) void ILoadSet::PutFCFluidDensity ( double _val );
__declspec(implementation_key(4551)) int ILoadSet::GetFCFluidConductivityFunc ( );
__declspec(implementation_key(4552)) void ILoadSet::PutFCFluidConductivityFunc ( int _val );
__declspec(implementation_key(4553)) int ILoadSet::GetFCFluidHeatCapacityFunc ( );
__declspec(implementation_key(4554)) void ILoadSet::PutFCFluidHeatCapacityFunc ( int _val );
__declspec(implementation_key(4555)) int ILoadSet::GetFCFluidViscosityFunc ( );
__declspec(implementation_key(4556)) void ILoadSet::PutFCFluidViscosityFunc ( int _val );
__declspec(implementation_key(4557)) int ILoadSet::GetFCFluidDensityFunc ( );
__declspec(implementation_key(4558)) void ILoadSet::PutFCFluidDensityFunc ( int _val );
__declspec(implementation_key(4559)) double ILoadSet::GetFCConstantCoeff ( );
__declspec(implementation_key(4560)) void ILoadSet::PutFCConstantCoeff ( double _val );
__declspec(implementation_key(4561)) double ILoadSet::GetFCReynoldsExp ( );
__declspec(implementation_key(4562)) void ILoadSet::PutFCReynoldsExp ( double _val );
__declspec(implementation_key(4563)) double ILoadSet::GetFCPrandtlIn ( );
__declspec(implementation_key(4564)) void ILoadSet::PutFCPrandtlIn ( double _val );
__declspec(implementation_key(4565)) double ILoadSet::GetFCPrandtlOut ( );
__declspec(implementation_key(4566)) void ILoadSet::PutFCPrandtlOut ( double _val );
__declspec(implementation_key(4567)) VARIANT_BOOL ILoadSet::GetFCAlternateForm ( );
__declspec(implementation_key(4568)) void ILoadSet::PutFCAlternateForm ( VARIANT_BOOL _val );
__declspec(implementation_key(4569)) VARIANT_BOOL ILoadSet::GetFCExcludeConvective ( );
__declspec(implementation_key(4570)) void ILoadSet::PutFCExcludeConvective ( VARIANT_BOOL _val );
__declspec(implementation_key(4571)) int ILoadSet::GetNLOn ( );
__declspec(implementation_key(4572)) void ILoadSet::PutNLOn ( int _val );
__declspec(implementation_key(4573)) int ILoadSet::GetNLIncrements ( );
__declspec(implementation_key(4574)) void ILoadSet::PutNLIncrements ( int _val );
__declspec(implementation_key(4575)) double ILoadSet::GetNLTimeIncrement ( );
__declspec(implementation_key(4576)) void ILoadSet::PutNLTimeIncrement ( double _val );
__declspec(implementation_key(4577)) int ILoadSet::GetNLMaxIterPerStep ( );
__declspec(implementation_key(4578)) void ILoadSet::PutNLMaxIterPerStep ( int _val );
__declspec(implementation_key(4579)) int ILoadSet::GetNLStiffnessMethod ( );
__declspec(implementation_key(4580)) void ILoadSet::PutNLStiffnessMethod ( int _val );
__declspec(implementation_key(4581)) int ILoadSet::GetNLStiffnessIter ( );
__declspec(implementation_key(4582)) void ILoadSet::PutNLStiffnessIter ( int _val );
__declspec(implementation_key(4583)) int ILoadSet::GetNLIntermediateOutput ( );
__declspec(implementation_key(4584)) void ILoadSet::PutNLIntermediateOutput ( int _val );
__declspec(implementation_key(4585)) int ILoadSet::GetNLOutputInterval ( );
__declspec(implementation_key(4586)) void ILoadSet::PutNLOutputInterval ( int _val );
__declspec(implementation_key(4587)) int ILoadSet::GetNLArcLengthMethod ( );
__declspec(implementation_key(4588)) void ILoadSet::PutNLArcLengthMethod ( int _val );
__declspec(implementation_key(4589)) int ILoadSet::GetNLSolutionOverride ( );
__declspec(implementation_key(4590)) void ILoadSet::PutNLSolutionOverride ( int _val );
__declspec(implementation_key(4591)) VARIANT_BOOL ILoadSet::GetNLNewtRaphLineSearch ( );
__declspec(implementation_key(4592)) void ILoadSet::PutNLNewtRaphLineSearch ( VARIANT_BOOL _val );
__declspec(implementation_key(4593)) VARIANT_BOOL ILoadSet::GetNLNewtRaphQuasiNewton ( );
__declspec(implementation_key(4594)) void ILoadSet::PutNLNewtRaphQuasiNewton ( VARIANT_BOOL _val );
__declspec(implementation_key(4595)) VARIANT_BOOL ILoadSet::GetNLNewtRaphBisection ( );
__declspec(implementation_key(4596)) void ILoadSet::PutNLNewtRaphBisection ( VARIANT_BOOL _val );
__declspec(implementation_key(4597)) double ILoadSet::GetNLArcScaleConstLoad ( );
__declspec(implementation_key(4598)) void ILoadSet::PutNLArcScaleConstLoad ( double _val );
__declspec(implementation_key(4599)) double ILoadSet::GetNLArcMinAdjust ( );
__declspec(implementation_key(4600)) void ILoadSet::PutNLArcMinAdjust ( double _val );
__declspec(implementation_key(4601)) double ILoadSet::GetNLArcMaxAdjust ( );
__declspec(implementation_key(4602)) void ILoadSet::PutNLArcMaxAdjust ( double _val );
__declspec(implementation_key(4603)) int ILoadSet::GetNLArcConstraintType ( );
__declspec(implementation_key(4604)) void ILoadSet::PutNLArcConstraintType ( int _val );
__declspec(implementation_key(4605)) int ILoadSet::GetNLArcDesiredIter ( );
__declspec(implementation_key(4606)) void ILoadSet::PutNLArcDesiredIter ( int _val );
__declspec(implementation_key(4607)) int ILoadSet::GetNLArcMaxIncrement ( );
__declspec(implementation_key(4608)) void ILoadSet::PutNLArcMaxIncrement ( int _val );
__declspec(implementation_key(4609)) int ILoadSet::GetNLMaxDivergeCond ( );
__declspec(implementation_key(4610)) void ILoadSet::PutNLMaxDivergeCond ( int _val );
__declspec(implementation_key(4611)) int ILoadSet::GetNLQuasiNewtonVec ( );
__declspec(implementation_key(4612)) void ILoadSet::PutNLQuasiNewtonVec ( int _val );
__declspec(implementation_key(4613)) int ILoadSet::GetNLMaxLineSearch ( );
__declspec(implementation_key(4614)) void ILoadSet::PutNLMaxLineSearch ( int _val );
__declspec(implementation_key(4615)) double ILoadSet::GetNLLineSearchTolerance ( );
__declspec(implementation_key(4616)) void ILoadSet::PutNLLineSearchTolerance ( double _val );
__declspec(implementation_key(4617)) int ILoadSet::GetNLMaxBisection ( );
__declspec(implementation_key(4618)) void ILoadSet::PutNLMaxBisection ( int _val );
__declspec(implementation_key(4619)) double ILoadSet::GetNLMaxRotation ( );
__declspec(implementation_key(4620)) void ILoadSet::PutNLMaxRotation ( double _val );
__declspec(implementation_key(4621)) double ILoadSet::GetNLStressFraction ( );
__declspec(implementation_key(4622)) void ILoadSet::PutNLStressFraction ( double _val );
__declspec(implementation_key(4623)) double ILoadSet::GetNLMaxAdjusted ( );
__declspec(implementation_key(4624)) void ILoadSet::PutNLMaxAdjusted ( double _val );
__declspec(implementation_key(4625)) int ILoadSet::GetNLTransStepSkipFactor ( );
__declspec(implementation_key(4626)) void ILoadSet::PutNLTransStepSkipFactor ( int _val );
__declspec(implementation_key(4627)) int ILoadSet::GetNLTransDominantSteps ( );
__declspec(implementation_key(4628)) void ILoadSet::PutNLTransDominantSteps ( int _val );
__declspec(implementation_key(4629)) double ILoadSet::GetNLTransBoundsMaintain ( );
__declspec(implementation_key(4630)) void ILoadSet::PutNLTransBoundsMaintain ( double _val );
__declspec(implementation_key(4631)) double ILoadSet::GetNLTransStabilityTol ( );
__declspec(implementation_key(4632)) void ILoadSet::PutNLTransStabilityTol ( double _val );
__declspec(implementation_key(4633)) double ILoadSet::GetDYNStructDamp ( );
__declspec(implementation_key(4634)) void ILoadSet::PutDYNStructDamp ( double _val );
__declspec(implementation_key(4635)) double ILoadSet::GetDYNSystemFreqDamp ( );
__declspec(implementation_key(4636)) void ILoadSet::PutDYNSystemFreqDamp ( double _val );
__declspec(implementation_key(4637)) double ILoadSet::GetDYNElemFreqDamp ( );
__declspec(implementation_key(4638)) void ILoadSet::PutDYNElemFreqDamp ( double _val );
__declspec(implementation_key(4639)) int ILoadSet::GetDYNOn ( );
__declspec(implementation_key(4640)) void ILoadSet::PutDYNOn ( int _val );
__declspec(implementation_key(4641)) int ILoadSet::GetDYNType ( );
__declspec(implementation_key(4642)) void ILoadSet::PutDYNType ( int _val );
__declspec(implementation_key(4643)) int ILoadSet::GetDYNModalMethod ( );
__declspec(implementation_key(4644)) void ILoadSet::PutDYNModalMethod ( int _val );
__declspec(implementation_key(4645)) int ILoadSet::GetDYNMassFormulation ( );
__declspec(implementation_key(4646)) void ILoadSet::PutDYNMassFormulation ( int _val );
__declspec(implementation_key(4647)) int ILoadSet::GetDYNDataRecovery ( );
__declspec(implementation_key(4648)) void ILoadSet::PutDYNDataRecovery ( int _val );
__declspec(implementation_key(4649)) int ILoadSet::GetDYNSolFreqType ( );
__declspec(implementation_key(4650)) void ILoadSet::PutDYNSolFreqType ( int _val );
__declspec(implementation_key(4651)) int ILoadSet::GetDYNPSDType ( );
__declspec(implementation_key(4652)) void ILoadSet::PutDYNPSDType ( int _val );
__declspec(implementation_key(4653)) int ILoadSet::GetDYNPSDInterp ( );
__declspec(implementation_key(4654)) void ILoadSet::PutDYNPSDInterp ( int _val );
__declspec(implementation_key(4655)) double ILoadSet::GetDYNSolFreqSpread ( );
__declspec(implementation_key(4656)) void ILoadSet::PutDYNSolFreqSpread ( double _val );
__declspec(implementation_key(4657)) int ILoadSet::GetDYNSolFreqNumFreq ( );
__declspec(implementation_key(4658)) void ILoadSet::PutDYNSolFreqNumFreq ( int _val );
__declspec(implementation_key(4659)) double ILoadSet::GetDYNSolFreqMin ( );
__declspec(implementation_key(4660)) void ILoadSet::PutDYNSolFreqMin ( double _val );
__declspec(implementation_key(4661)) double ILoadSet::GetDYNSolFreqMax ( );
__declspec(implementation_key(4662)) void ILoadSet::PutDYNSolFreqMax ( double _val );
__declspec(implementation_key(4663)) VARIANT_BOOL ILoadSet::GetDYNSolFreqLogInterp ( );
__declspec(implementation_key(4664)) void ILoadSet::PutDYNSolFreqLogInterp ( VARIANT_BOOL _val );
__declspec(implementation_key(4665)) int ILoadSet::GetDYNTransTimeSteps ( );
__declspec(implementation_key(4666)) void ILoadSet::PutDYNTransTimeSteps ( int _val );
__declspec(implementation_key(4667)) double ILoadSet::GetDYNTransTimePerStep ( );
__declspec(implementation_key(4668)) void ILoadSet::PutDYNTransTimePerStep ( double _val );
__declspec(implementation_key(4669)) int ILoadSet::GetDYNTransOutputInterval ( );
__declspec(implementation_key(4670)) void ILoadSet::PutDYNTransOutputInterval ( int _val );
__declspec(implementation_key(4671)) int ILoadSet::GetDYNFrequencyTable ( );
__declspec(implementation_key(4672)) void ILoadSet::PutDYNFrequencyTable ( int _val );
__declspec(implementation_key(4673)) int ILoadSet::GetDYNDampingTable ( );
__declspec(implementation_key(4674)) void ILoadSet::PutDYNDampingTable ( int _val );
__declspec(implementation_key(4675)) int ILoadSet::GetDYNRandomPSD ( );
__declspec(implementation_key(4676)) void ILoadSet::PutDYNRandomPSD ( int _val );
__declspec(implementation_key(4677)) int ILoadSet::GetDYNResponseModes ( );
__declspec(implementation_key(4678)) void ILoadSet::PutDYNResponseModes ( int _val );
__declspec(implementation_key(4679)) double ILoadSet::GetDYNResponseMinFreq ( );
__declspec(implementation_key(4680)) void ILoadSet::PutDYNResponseMinFreq ( double _val );
__declspec(implementation_key(4681)) double ILoadSet::GetDYNResponseMaxFreq ( );
__declspec(implementation_key(4682)) void ILoadSet::PutDYNResponseMaxFreq ( double _val );
__declspec(implementation_key(4683)) _bstr_t ILoadSet::Gettitle ( );
__declspec(implementation_key(4684)) void ILoadSet::Puttitle ( _bstr_t _val );
__declspec(implementation_key(4685)) int ILoadSet::GetDYNAddlFreqType ( );
__declspec(implementation_key(4686)) void ILoadSet::PutDYNAddlFreqType ( int _val );
__declspec(implementation_key(4687)) int ILoadSet::GetDYNAddlFreqNumFreq ( );
__declspec(implementation_key(4688)) void ILoadSet::PutDYNAddlFreqNumFreq ( int _val );
__declspec(implementation_key(4689)) double ILoadSet::GetDYNAddlFreqMin ( );
__declspec(implementation_key(4690)) void ILoadSet::PutDYNAddlFreqMin ( double _val );
__declspec(implementation_key(4691)) double ILoadSet::GetDYNAddlFreqMax ( );
__declspec(implementation_key(4692)) void ILoadSet::PutDYNAddlFreqMax ( double _val );
__declspec(implementation_key(4693)) VARIANT_BOOL ILoadSet::GetDYNAddlFreqLogInterp ( );
__declspec(implementation_key(4694)) void ILoadSet::PutDYNAddlFreqLogInterp ( VARIANT_BOOL _val );
__declspec(implementation_key(4695)) double ILoadSet::GetDYNAddlFreqSpread ( );
__declspec(implementation_key(4696)) void ILoadSet::PutDYNAddlFreqSpread ( double _val );
__declspec(implementation_key(4697)) _variant_t ILoadSet::GetvNLConvergenceFlag ( );
__declspec(implementation_key(4698)) void ILoadSet::PutvNLConvergenceFlag ( const _variant_t & _val );
__declspec(implementation_key(4699)) _variant_t ILoadSet::GetvNLConvergenceVal ( );
__declspec(implementation_key(4700)) void ILoadSet::PutvNLConvergenceVal ( const _variant_t & _val );
__declspec(implementation_key(4701)) _variant_t ILoadSet::GetvBodyAccel ( );
__declspec(implementation_key(4702)) void ILoadSet::PutvBodyAccel ( const _variant_t & _val );
__declspec(implementation_key(4703)) _variant_t ILoadSet::GetvBodyVelocity ( );
__declspec(implementation_key(4704)) void ILoadSet::PutvBodyVelocity ( const _variant_t & _val );
__declspec(implementation_key(4705)) _variant_t ILoadSet::GetvBodyOrigin ( );
__declspec(implementation_key(4706)) void ILoadSet::PutvBodyOrigin ( const _variant_t & _val );
__declspec(implementation_key(4707)) _variant_t ILoadSet::GetvBodyAccelFunction ( );
__declspec(implementation_key(4708)) void ILoadSet::PutvBodyAccelFunction ( const _variant_t & _val );
__declspec(implementation_key(4709)) _variant_t ILoadSet::GetvBodyVelocityFunction ( );
__declspec(implementation_key(4710)) void ILoadSet::PutvBodyVelocityFunction ( const _variant_t & _val );
__declspec(implementation_key(4711)) VARIANT_BOOL ILoadSet::GetIsCombination ( );
__declspec(implementation_key(4712)) void ILoadSet::PutIsCombination ( VARIANT_BOOL _val );
__declspec(implementation_key(4713)) double ILoadSet::GetCombinedScaleFactor ( );
__declspec(implementation_key(4714)) void ILoadSet::PutCombinedScaleFactor ( double _val );
__declspec(implementation_key(4715)) int ILoadSet::GetBodyLoadCSys ( );
__declspec(implementation_key(4716)) void ILoadSet::PutBodyLoadCSys ( int _val );
__declspec(implementation_key(4717)) VARIANT_BOOL ILoadSet::GetBodyVaryingAccelOn ( );
__declspec(implementation_key(4718)) void ILoadSet::PutBodyVaryingAccelOn ( VARIANT_BOOL _val );
__declspec(implementation_key(4719)) int ILoadSet::GetBodyVaryingAccelAxis ( );
__declspec(implementation_key(4720)) void ILoadSet::PutBodyVaryingAccelAxis ( int _val );
__declspec(implementation_key(4721)) int ILoadSet::GetBodyVaryingAccelFunction ( );
__declspec(implementation_key(4722)) void ILoadSet::PutBodyVaryingAccelFunction ( int _val );
__declspec(implementation_key(4723)) _variant_t ILoadSet::GetvBodyVaryingAccel ( );
__declspec(implementation_key(4724)) void ILoadSet::PutvBodyVaryingAccel ( const _variant_t & _val );
__declspec(implementation_key(4725)) double ILoadSet::GetRadViewFactorZTOL ( );
__declspec(implementation_key(4726)) void ILoadSet::PutRadViewFactorZTOL ( double _val );
__declspec(implementation_key(4727)) VARIANT_BOOL ILoadSet::GetbRadViewFactorZTOL ( );
__declspec(implementation_key(4728)) void ILoadSet::PutbRadViewFactorZTOL ( VARIANT_BOOL _val );
__declspec(implementation_key(4729)) int ILoadSet::GetID ( );
__declspec(implementation_key(4730)) void ILoadSet::PutID ( int _val );
__declspec(implementation_key(4731)) int ILoadSet::GetsetID ( );
__declspec(implementation_key(4732)) void ILoadSet::PutsetID ( int _val );
__declspec(implementation_key(4733)) int ILoadSet::GetActive ( );
__declspec(implementation_key(4734)) void ILoadSet::PutActive ( int _val );
__declspec(implementation_key(4735)) enum zReturnCode IOptim::NextSet ( );
__declspec(implementation_key(4736)) enum zReturnCode IOptim::PrevSet ( );
__declspec(implementation_key(4737)) enum zReturnCode IOptim::NextEmptySet ( );
__declspec(implementation_key(4738)) enum zReturnCode IOptim::PrevEmptySet ( );
__declspec(implementation_key(4739)) enum zReturnCode IOptim::Get ( int ID );
__declspec(implementation_key(4740)) enum zReturnCode IOptim::Put ( int ID );
__declspec(implementation_key(4741)) enum zReturnCode IOptim::Exist ( int ID );
__declspec(implementation_key(4742)) enum zReturnCode IOptim::Deletable ( int ID );
__declspec(implementation_key(4743)) enum zReturnCode IOptim::Delete ( int ID );
__declspec(implementation_key(4744)) enum zReturnCode IOptim::Reset ( );
__declspec(implementation_key(4745)) enum zReturnCode IOptim::Next ( );
__declspec(implementation_key(4746)) enum zReturnCode IOptim::Prev ( );
__declspec(implementation_key(4747)) enum zReturnCode IOptim::First ( );
__declspec(implementation_key(4748)) enum zReturnCode IOptim::Last ( );
__declspec(implementation_key(4749)) int IOptim::NextID ( );
__declspec(implementation_key(4750)) int IOptim::PrevID ( );
__declspec(implementation_key(4751)) int IOptim::NextEmptyID ( );
__declspec(implementation_key(4752)) int IOptim::PrevEmptyID ( );
__declspec(implementation_key(4753)) enum zReturnCode IOptim::GetLibrary ( int ID );
__declspec(implementation_key(4754)) enum zReturnCode IOptim::PutLibrary ( );
__declspec(implementation_key(4755)) enum zReturnCode IOptim::DeleteLibrary ( int ID );
__declspec(implementation_key(4756)) enum zReturnCode IOptim::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4757)) enum zReturnCode IOptim::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4758)) int IOptim::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(4759)) enum zReturnCode IOptim::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(4760)) enum zReturnCode IOptim::NextInSet ( int nSetID );
__declspec(implementation_key(4761)) enum zReturnCode IOptim::FirstInSet ( int nSetID );
__declspec(implementation_key(4762)) int IOptim::CountSet ( );
__declspec(implementation_key(4763)) enum zReturnCode IOptim::NextExistingInSet ( int nSetID );
__declspec(implementation_key(4764)) enum zReturnCode IOptim::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(4765)) enum zOptType IOptim::Gettype ( );
__declspec(implementation_key(4766)) void IOptim::Puttype ( enum zOptType _val );
__declspec(implementation_key(4767)) enum zOptGoal IOptim::Getgoal ( );
__declspec(implementation_key(4768)) void IOptim::Putgoal ( enum zOptGoal _val );
__declspec(implementation_key(4769)) enum zOptVary IOptim::Getvary ( );
__declspec(implementation_key(4770)) void IOptim::Putvary ( enum zOptVary _val );
__declspec(implementation_key(4771)) enum zOptLimit IOptim::Getlimit ( );
__declspec(implementation_key(4772)) void IOptim::Putlimit ( enum zOptLimit _val );
__declspec(implementation_key(4773)) int IOptim::Getcycles ( );
__declspec(implementation_key(4774)) void IOptim::Putcycles ( int _val );
__declspec(implementation_key(4775)) enum zDataType IOptim::GetvaryType ( );
__declspec(implementation_key(4776)) void IOptim::PutvaryType ( enum zDataType _val );
__declspec(implementation_key(4777)) int IOptim::GetvaryID ( );
__declspec(implementation_key(4778)) void IOptim::PutvaryID ( int _val );
__declspec(implementation_key(4779)) int IOptim::GetvaryExtraID ( );
__declspec(implementation_key(4780)) void IOptim::PutvaryExtraID ( int _val );
__declspec(implementation_key(4781)) VARIANT_BOOL IOptim::GetvaryPct ( );
__declspec(implementation_key(4782)) void IOptim::PutvaryPct ( VARIANT_BOOL _val );
__declspec(implementation_key(4783)) double IOptim::GetvaryMin ( );
__declspec(implementation_key(4784)) void IOptim::PutvaryMin ( double _val );
__declspec(implementation_key(4785)) double IOptim::GetvaryMax ( );
__declspec(implementation_key(4786)) void IOptim::PutvaryMax ( double _val );
__declspec(implementation_key(4787)) double IOptim::GetvaryDelta ( );
__declspec(implementation_key(4788)) void IOptim::PutvaryDelta ( double _val );
__declspec(implementation_key(4789)) enum zDataType IOptim::GetrespType ( );
__declspec(implementation_key(4790)) void IOptim::PutrespType ( enum zDataType _val );
__declspec(implementation_key(4791)) int IOptim::GetrespID ( );
__declspec(implementation_key(4792)) void IOptim::PutrespID ( int _val );
__declspec(implementation_key(4793)) double IOptim::GetrespMin ( );
__declspec(implementation_key(4794)) void IOptim::PutrespMin ( double _val );
__declspec(implementation_key(4795)) double IOptim::GetrespMax ( );
__declspec(implementation_key(4796)) void IOptim::PutrespMax ( double _val );
__declspec(implementation_key(4797)) int IOptim::GetID ( );
__declspec(implementation_key(4798)) void IOptim::PutID ( int _val );
__declspec(implementation_key(4799)) int IOptim::GetsetID ( );
__declspec(implementation_key(4800)) void IOptim::PutsetID ( int _val );
__declspec(implementation_key(4801)) int IOptim::GetActive ( );
__declspec(implementation_key(4802)) void IOptim::PutActive ( int _val );
__declspec(implementation_key(4803)) int IOutput::Getcomponent ( int nVectorIndex );
__declspec(implementation_key(4804)) void IOutput::Putcomponent ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(4805)) double IOutput::Getvalue ( int nVectorIndex );
__declspec(implementation_key(4806)) void IOutput::Putvalue ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(4807)) enum zReturnCode IOutput::Get ( int entID );
__declspec(implementation_key(4808)) enum zReturnCode IOutput::Put ( int entID );
__declspec(implementation_key(4809)) enum zReturnCode IOutput::GetOutputList ( int * listcount, VARIANT * ID, VARIANT * value );
__declspec(implementation_key(4810)) enum zReturnCode IOutput::GetScalarAtNode ( int * listcount, VARIANT * ID, VARIANT * value );
__declspec(implementation_key(4811)) enum zReturnCode IOutput::GetScalarAtElem ( int * listcount, VARIANT * ID, VARIANT * value );
__declspec(implementation_key(4812)) enum zReturnCode IOutput::PutOutputList ( int listcount, const _variant_t & ID, const _variant_t & value );
__declspec(implementation_key(4813)) enum zReturnCode IOutput::PutScalarAtNode ( int listcount, const _variant_t & ID, const _variant_t & value );
__declspec(implementation_key(4814)) enum zReturnCode IOutput::PutScalarAtElem ( int listcount, const _variant_t & ID, const _variant_t & value );
__declspec(implementation_key(4815)) enum zReturnCode IOutput::InitScalarAtNode ( int OutputSet, int Vec, _bstr_t title, enum zOutputType category, VARIANT_BOOL nonlinear );
__declspec(implementation_key(4816)) enum zReturnCode IOutput::InitVectorAtNode ( int OutputSet, int Vec, int VecX, int VecY, int VecZ, _bstr_t title, enum zOutputType category, VARIANT_BOOL nonlinear );
__declspec(implementation_key(4817)) enum zReturnCode IOutput::InitScalarAtElem ( int OutputSet, int Vec, _bstr_t title, enum zOutputType category, VARIANT_BOOL nonlinear );
__declspec(implementation_key(4818)) enum zReturnCode IOutput::InitElemWithCorner ( int OutputSet, int Vec, int Vec1, int Vec2, int Vec3, int Vec4, int Vec5, int Vec6, int Vec7, int Vec8, _bstr_t title, enum zOutputType category, VARIANT_BOOL nonlinear );
__declspec(implementation_key(4819)) enum zReturnCode IOutput::GetVectorAtNode ( int * listcount, VARIANT * ID, VARIANT * x, VARIANT * y, VARIANT * z );
__declspec(implementation_key(4820)) enum zReturnCode IOutput::PutVectorAtNode ( int listcount, const _variant_t & ID, const _variant_t & x, const _variant_t & y, const _variant_t & z );
__declspec(implementation_key(4821)) enum zReturnCode IOutput::GetElemWithCorner ( int * listcount, int * maxcorner, VARIANT * ID, VARIANT * centroid, VARIANT * c1, VARIANT * c2, VARIANT * c3, VARIANT * c4, VARIANT * c5, VARIANT * c6, VARIANT * c7, VARIANT * c8 );
__declspec(implementation_key(4822)) enum zReturnCode IOutput::PutElemWithCorner ( int listcount, int maxcorner, const _variant_t & ID, const _variant_t & centroid, const _variant_t & c1, const _variant_t & c2, const _variant_t & c3, const _variant_t & c4, const _variant_t & c5, const _variant_t & c6, const _variant_t & c7, const _variant_t & c8 );
__declspec(implementation_key(4823)) enum zReturnCode IOutput::GetOutputListAtID ( const _variant_t & ID, const _variant_t & defaultVal, VARIANT * value );
__declspec(implementation_key(4824)) enum zReturnCode IOutput::GetOutputListAtSet ( int idSET, const _variant_t & defaultVal, VARIANT * value );
__declspec(implementation_key(4825)) enum zReturnCode IOutput::GetScalarAtNodeSet ( int idSET, VARIANT * value );
__declspec(implementation_key(4826)) enum zReturnCode IOutput::GetVectorAtNodeSet ( int idSET, VARIANT * x, VARIANT * y, VARIANT * z );
__declspec(implementation_key(4827)) enum zReturnCode IOutput::GetScalarAtElemSet ( int idSET, VARIANT * value );
__declspec(implementation_key(4828)) enum zReturnCode IOutput::GetElemWithCornerSet ( int idSET, int * maxcorner, VARIANT * centroid, VARIANT * c1, VARIANT * c2, VARIANT * c3, VARIANT * c4, VARIANT * c5, VARIANT * c6, VARIANT * c7, VARIANT * c8 );
__declspec(implementation_key(4829)) enum zReturnCode IOutput::GetFromSet ( int setID, int entID );
__declspec(implementation_key(4830)) enum zReturnCode IOutput::FindMaxMin ( int idSET, VARIANT_BOOL bUseCornersOrComponents, int * minID, double * minVALUE, int * maxID, double * maxVALUE );
__declspec(implementation_key(4831)) enum zReturnCode IOutput::InitScalarAtBeam ( int OutputSet, int VecA, int VecB, _bstr_t title, int vecstyle, enum zOutputType category, VARIANT_BOOL nonlinear, VARIANT_BOOL add_endAB_titles );
__declspec(implementation_key(4832)) enum zReturnCode IOutput::PutScalarAtBeam ( int listcount, const _variant_t & ID, const _variant_t & ValA, const _variant_t & ValB );
__declspec(implementation_key(4833)) enum zReturnCode IOutput::GetVectorAtSingleNode ( int nNodeID, double * x, double * y, double * z );
__declspec(implementation_key(4834)) enum zReturnCode IOutput::NextSet ( );
__declspec(implementation_key(4835)) enum zReturnCode IOutput::PrevSet ( );
__declspec(implementation_key(4836)) enum zReturnCode IOutput::NextEmptySet ( );
__declspec(implementation_key(4837)) enum zReturnCode IOutput::PrevEmptySet ( );
__declspec(implementation_key(4838)) enum zReturnCode IOutput::Exist ( int ID );
__declspec(implementation_key(4839)) enum zReturnCode IOutput::Delete ( int ID );
__declspec(implementation_key(4840)) enum zReturnCode IOutput::Next ( );
__declspec(implementation_key(4841)) enum zReturnCode IOutput::Prev ( );
__declspec(implementation_key(4842)) int IOutput::NextID ( );
__declspec(implementation_key(4843)) int IOutput::PrevID ( );
__declspec(implementation_key(4844)) int IOutput::NextEmptyID ( );
__declspec(implementation_key(4845)) int IOutput::PrevEmptyID ( );
__declspec(implementation_key(4846)) int IOutput::CountSet ( );
__declspec(implementation_key(4847)) enum zReturnCode IOutput::NextInSet ( int nSetID );
__declspec(implementation_key(4848)) enum zReturnCode IOutput::GetModel ( __int64 * nModelID );
__declspec(implementation_key(4849)) enum zReturnCode IOutput::SetModel ( __int64 nModelID );
__declspec(implementation_key(4850)) enum zReturnCode IOutput::clear ( );
__declspec(implementation_key(4851)) enum zReturnCode IOutput::SetComplexOptions ( VARIANT_BOOL bExpandComplex, double dComplexPhase );
__declspec(implementation_key(4852)) enum zReturnCode IOutput::Deletable ( int ID );
__declspec(implementation_key(4853)) enum zReturnCode IOutput::Reset ( );
__declspec(implementation_key(4854)) enum zReturnCode IOutput::First ( );
__declspec(implementation_key(4855)) enum zReturnCode IOutput::Last ( );
__declspec(implementation_key(4856)) enum zReturnCode IOutput::GetLibrary ( int ID );
__declspec(implementation_key(4857)) enum zReturnCode IOutput::PutLibrary ( );
__declspec(implementation_key(4858)) enum zReturnCode IOutput::DeleteLibrary ( int ID );
__declspec(implementation_key(4859)) enum zReturnCode IOutput::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4860)) enum zReturnCode IOutput::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4861)) int IOutput::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(4862)) enum zReturnCode IOutput::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(4863)) enum zReturnCode IOutput::FirstInSet ( int nSetID );
__declspec(implementation_key(4864)) enum zReturnCode IOutput::NextExistingInSet ( int nSetID );
__declspec(implementation_key(4865)) enum zReturnCode IOutput::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(4866)) enum zOutputType IOutput::Getcategory ( );
__declspec(implementation_key(4867)) void IOutput::Putcategory ( enum zOutputType _val );
__declspec(implementation_key(4868)) enum zDataType IOutput::Getlocation ( );
__declspec(implementation_key(4869)) void IOutput::Putlocation ( enum zDataType _val );
__declspec(implementation_key(4870)) VARIANT_BOOL IOutput::Getnonlinear ( );
__declspec(implementation_key(4871)) void IOutput::Putnonlinear ( VARIANT_BOOL _val );
__declspec(implementation_key(4872)) int IOutput::Gethascomponent ( );
__declspec(implementation_key(4873)) void IOutput::Puthascomponent ( int _val );
__declspec(implementation_key(4874)) VARIANT_BOOL IOutput::Getcentroidtotal ( );
__declspec(implementation_key(4875)) void IOutput::Putcentroidtotal ( VARIANT_BOOL _val );
__declspec(implementation_key(4876)) double IOutput::Getmaxval ( );
__declspec(implementation_key(4877)) void IOutput::Putmaxval ( double _val );
__declspec(implementation_key(4878)) double IOutput::Getminval ( );
__declspec(implementation_key(4879)) void IOutput::Putminval ( double _val );
__declspec(implementation_key(4880)) double IOutput::Getabsmaxval ( );
__declspec(implementation_key(4881)) void IOutput::Putabsmaxval ( double _val );
__declspec(implementation_key(4882)) int IOutput::GetmaxvalID ( );
__declspec(implementation_key(4883)) void IOutput::PutmaxvalID ( int _val );
__declspec(implementation_key(4884)) int IOutput::GetminvalID ( );
__declspec(implementation_key(4885)) void IOutput::PutminvalID ( int _val );
__declspec(implementation_key(4886)) _bstr_t IOutput::Gettitle ( );
__declspec(implementation_key(4887)) void IOutput::Puttitle ( _bstr_t _val );
__declspec(implementation_key(4888)) _variant_t IOutput::Getvcomponent ( );
__declspec(implementation_key(4889)) void IOutput::Putvcomponent ( const _variant_t & _val );
__declspec(implementation_key(4890)) int IOutput::GetID ( );
__declspec(implementation_key(4891)) void IOutput::PutID ( int _val );
__declspec(implementation_key(4892)) int IOutput::GetsetID ( );
__declspec(implementation_key(4893)) void IOutput::PutsetID ( int _val );
__declspec(implementation_key(4894)) int IOutput::GetActive ( );
__declspec(implementation_key(4895)) void IOutput::PutActive ( int _val );
__declspec(implementation_key(4896)) VARIANT_BOOL IOutput::GetInitAsInteger ( );
__declspec(implementation_key(4897)) void IOutput::PutInitAsInteger ( VARIANT_BOOL _val );
__declspec(implementation_key(4898)) IOutputPtr IOutputSet::Vector ( int entID );
__declspec(implementation_key(4899)) int IOutputSet::OutputVectors ( int nVectorSetID );
__declspec(implementation_key(4900)) int IOutputSet::SetCombination ( enum zResultsProcessType enProcessType, int nNumFactors, const _variant_t & vnSetIDArray, const _variant_t & vdFactorArray );
__declspec(implementation_key(4901)) int IOutputSet::SetStudyCombination ( enum zResultsProcessType enProcessType, int nStudyID );
__declspec(implementation_key(4902)) int IOutputSet::ExpandCombination ( VARIANT_BOOL bSetTitles );
__declspec(implementation_key(4903)) enum zReturnCode IOutputSet::SetComplexOptions ( VARIANT_BOOL bExpandComplex, double dComplexPhase );
__declspec(implementation_key(4904)) enum zReturnCode IOutputSet::NextSet ( );
__declspec(implementation_key(4905)) enum zReturnCode IOutputSet::PrevSet ( );
__declspec(implementation_key(4906)) enum zReturnCode IOutputSet::NextEmptySet ( );
__declspec(implementation_key(4907)) enum zReturnCode IOutputSet::PrevEmptySet ( );
__declspec(implementation_key(4908)) enum zReturnCode IOutputSet::Exist ( int ID );
__declspec(implementation_key(4909)) enum zReturnCode IOutputSet::Deletable ( int ID );
__declspec(implementation_key(4910)) enum zReturnCode IOutputSet::Delete ( int ID );
__declspec(implementation_key(4911)) enum zReturnCode IOutputSet::Reset ( );
__declspec(implementation_key(4912)) enum zReturnCode IOutputSet::Next ( );
__declspec(implementation_key(4913)) enum zReturnCode IOutputSet::Prev ( );
__declspec(implementation_key(4914)) enum zReturnCode IOutputSet::First ( );
__declspec(implementation_key(4915)) enum zReturnCode IOutputSet::Last ( );
__declspec(implementation_key(4916)) int IOutputSet::NextID ( );
__declspec(implementation_key(4917)) int IOutputSet::PrevID ( );
__declspec(implementation_key(4918)) int IOutputSet::NextEmptyID ( );
__declspec(implementation_key(4919)) int IOutputSet::PrevEmptyID ( );
__declspec(implementation_key(4920)) enum zReturnCode IOutputSet::GetLibrary ( int ID );
__declspec(implementation_key(4921)) enum zReturnCode IOutputSet::PutLibrary ( );
__declspec(implementation_key(4922)) enum zReturnCode IOutputSet::DeleteLibrary ( int ID );
__declspec(implementation_key(4923)) enum zReturnCode IOutputSet::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4924)) enum zReturnCode IOutputSet::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4925)) int IOutputSet::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(4926)) enum zReturnCode IOutputSet::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(4927)) enum zReturnCode IOutputSet::NextInSet ( int nSetID );
__declspec(implementation_key(4928)) enum zReturnCode IOutputSet::FirstInSet ( int nSetID );
__declspec(implementation_key(4929)) int IOutputSet::CountSet ( );
__declspec(implementation_key(4930)) enum zReturnCode IOutputSet::NextExistingInSet ( int nSetID );
__declspec(implementation_key(4931)) enum zReturnCode IOutputSet::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(4932)) enum zReturnCode IOutputSet::Get ( int entID );
__declspec(implementation_key(4933)) enum zReturnCode IOutputSet::Put ( int entID );
__declspec(implementation_key(4934)) double IOutputSet::Getvalue ( );
__declspec(implementation_key(4935)) void IOutputSet::Putvalue ( double _val );
__declspec(implementation_key(4936)) enum zAnalysisProgram IOutputSet::Getprogram ( );
__declspec(implementation_key(4937)) void IOutputSet::Putprogram ( enum zAnalysisProgram _val );
__declspec(implementation_key(4938)) enum zAnalysisType IOutputSet::Getanalysis ( );
__declspec(implementation_key(4939)) void IOutputSet::Putanalysis ( enum zAnalysisType _val );
__declspec(implementation_key(4940)) _bstr_t IOutputSet::Gettitle ( );
__declspec(implementation_key(4941)) void IOutputSet::Puttitle ( _bstr_t _val );
__declspec(implementation_key(4942)) _bstr_t IOutputSet::Getnotes ( );
__declspec(implementation_key(4943)) void IOutputSet::Putnotes ( _bstr_t _val );
__declspec(implementation_key(4944)) int IOutputSet::Getstudy ( );
__declspec(implementation_key(4945)) void IOutputSet::Putstudy ( int _val );
__declspec(implementation_key(4946)) enum zResultsProcessType IOutputSet::Getcombination_type ( );
__declspec(implementation_key(4947)) void IOutputSet::Putcombination_type ( enum zResultsProcessType _val );
__declspec(implementation_key(4948)) int IOutputSet::Getnas_case ( );
__declspec(implementation_key(4949)) void IOutputSet::Putnas_case ( int _val );
__declspec(implementation_key(4950)) int IOutputSet::Getnas_revision ( );
__declspec(implementation_key(4951)) void IOutputSet::Putnas_revision ( int _val );
__declspec(implementation_key(4952)) int IOutputSet::GetID ( );
__declspec(implementation_key(4953)) void IOutputSet::PutID ( int _val );
__declspec(implementation_key(4954)) int IOutputSet::GetsetID ( );
__declspec(implementation_key(4955)) void IOutputSet::PutsetID ( int _val );
__declspec(implementation_key(4956)) int IOutputSet::GetActive ( );
__declspec(implementation_key(4957)) void IOutputSet::PutActive ( int _val );
__declspec(implementation_key(4958)) enum zReturnCode IPoint::Put ( int entID );
__declspec(implementation_key(4959)) enum zReturnCode IPoint::Nodes ( int * numNodes, VARIANT * NodeID );
__declspec(implementation_key(4960)) enum zReturnCode IPoint::NodesAsSet ( int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(4961)) enum zReturnCode IPoint::Curves ( enum zCombinedMode nCombinedMode, int * numCurves, VARIANT * curveID );
__declspec(implementation_key(4962)) enum zReturnCode IPoint::CurvesAsSet ( enum zCombinedMode nCombinedMode, int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(4963)) enum zReturnCode IPoint::SurfacesAsSet ( enum zCombinedMode nCombinedMode, int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(4964)) enum zReturnCode IPoint::GetClosest ( const _variant_t & vXYZ );
__declspec(implementation_key(4965)) enum zReturnCode IPoint::Solid ( int * pnSolidID );
__declspec(implementation_key(4966)) enum zReturnCode IPoint::NextSet ( );
__declspec(implementation_key(4967)) enum zReturnCode IPoint::PrevSet ( );
__declspec(implementation_key(4968)) enum zReturnCode IPoint::NextEmptySet ( );
__declspec(implementation_key(4969)) enum zReturnCode IPoint::PrevEmptySet ( );
__declspec(implementation_key(4970)) enum zReturnCode IPoint::Get ( int ID );
__declspec(implementation_key(4971)) enum zReturnCode IPoint::Exist ( int ID );
__declspec(implementation_key(4972)) enum zReturnCode IPoint::Deletable ( int ID );
__declspec(implementation_key(4973)) enum zReturnCode IPoint::Delete ( int ID );
__declspec(implementation_key(4974)) enum zReturnCode IPoint::Reset ( );
__declspec(implementation_key(4975)) enum zReturnCode IPoint::Next ( );
__declspec(implementation_key(4976)) enum zReturnCode IPoint::Prev ( );
__declspec(implementation_key(4977)) enum zReturnCode IPoint::First ( );
__declspec(implementation_key(4978)) enum zReturnCode IPoint::Last ( );
__declspec(implementation_key(4979)) int IPoint::NextID ( );
__declspec(implementation_key(4980)) int IPoint::PrevID ( );
__declspec(implementation_key(4981)) int IPoint::NextEmptyID ( );
__declspec(implementation_key(4982)) int IPoint::PrevEmptyID ( );
__declspec(implementation_key(4983)) enum zReturnCode IPoint::GetLibrary ( int ID );
__declspec(implementation_key(4984)) enum zReturnCode IPoint::PutLibrary ( );
__declspec(implementation_key(4985)) enum zReturnCode IPoint::DeleteLibrary ( int ID );
__declspec(implementation_key(4986)) enum zReturnCode IPoint::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4987)) enum zReturnCode IPoint::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(4988)) int IPoint::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(4989)) enum zReturnCode IPoint::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(4990)) enum zReturnCode IPoint::NextInSet ( int nSetID );
__declspec(implementation_key(4991)) enum zReturnCode IPoint::FirstInSet ( int nSetID );
__declspec(implementation_key(4992)) int IPoint::CountSet ( );
__declspec(implementation_key(4993)) enum zReturnCode IPoint::NextExistingInSet ( int nSetID );
__declspec(implementation_key(4994)) enum zReturnCode IPoint::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(4995)) double IPoint::Getx ( );
__declspec(implementation_key(4996)) void IPoint::Putx ( double _val );
__declspec(implementation_key(4997)) double IPoint::Gety ( );
__declspec(implementation_key(4998)) void IPoint::Puty ( double _val );
__declspec(implementation_key(4999)) double IPoint::Getz ( );
__declspec(implementation_key(5000)) void IPoint::Putz ( double _val );
__declspec(implementation_key(5001)) int IPoint::Getlayer ( );
__declspec(implementation_key(5002)) void IPoint::Putlayer ( int _val );
__declspec(implementation_key(5003)) enum zColor IPoint::Getcolor ( );
__declspec(implementation_key(5004)) void IPoint::Putcolor ( enum zColor _val );
__declspec(implementation_key(5005)) enum zPointType IPoint::Gettype ( );
__declspec(implementation_key(5006)) void IPoint::Puttype ( enum zPointType _val );
__declspec(implementation_key(5007)) int IPoint::GetdefCSys ( );
__declspec(implementation_key(5008)) void IPoint::PutdefCSys ( int _val );
__declspec(implementation_key(5009)) int IPoint::GetattrPID ( );
__declspec(implementation_key(5010)) void IPoint::PutattrPID ( int _val );
__declspec(implementation_key(5011)) int IPoint::GetEngine ( );
__declspec(implementation_key(5012)) void IPoint::PutEngine ( int _val );
__declspec(implementation_key(5013)) int IPoint::GetAddress ( );
__declspec(implementation_key(5014)) void IPoint::PutAddress ( int _val );
__declspec(implementation_key(5015)) double IPoint::GetMeshSize ( );
__declspec(implementation_key(5016)) void IPoint::PutMeshSize ( double _val );
__declspec(implementation_key(5017)) _variant_t IPoint::Getxyz ( );
__declspec(implementation_key(5018)) void IPoint::Putxyz ( const _variant_t & _val );
__declspec(implementation_key(5019)) int IPoint::GetInCombinedCurve ( );
__declspec(implementation_key(5020)) void IPoint::PutInCombinedCurve ( int _val );
__declspec(implementation_key(5021)) double IPoint::GetScaleFactor ( );
__declspec(implementation_key(5022)) void IPoint::PutScaleFactor ( double _val );
__declspec(implementation_key(5023)) int IPoint::GetID ( );
__declspec(implementation_key(5024)) void IPoint::PutID ( int _val );
__declspec(implementation_key(5025)) int IPoint::GetsetID ( );
__declspec(implementation_key(5026)) void IPoint::PutsetID ( int _val );
__declspec(implementation_key(5027)) int IPoint::GetActive ( );
__declspec(implementation_key(5028)) void IPoint::PutActive ( int _val );
__declspec(implementation_key(5029)) enum zReturnCode IReport::NextSet ( );
__declspec(implementation_key(5030)) enum zReturnCode IReport::PrevSet ( );
__declspec(implementation_key(5031)) enum zReturnCode IReport::NextEmptySet ( );
__declspec(implementation_key(5032)) enum zReturnCode IReport::PrevEmptySet ( );
__declspec(implementation_key(5033)) enum zReturnCode IReport::Get ( int ID );
__declspec(implementation_key(5034)) enum zReturnCode IReport::Put ( int ID );
__declspec(implementation_key(5035)) enum zReturnCode IReport::Exist ( int ID );
__declspec(implementation_key(5036)) enum zReturnCode IReport::Deletable ( int ID );
__declspec(implementation_key(5037)) enum zReturnCode IReport::Delete ( int ID );
__declspec(implementation_key(5038)) enum zReturnCode IReport::Reset ( );
__declspec(implementation_key(5039)) enum zReturnCode IReport::Next ( );
__declspec(implementation_key(5040)) enum zReturnCode IReport::Prev ( );
__declspec(implementation_key(5041)) enum zReturnCode IReport::First ( );
__declspec(implementation_key(5042)) enum zReturnCode IReport::Last ( );
__declspec(implementation_key(5043)) int IReport::NextID ( );
__declspec(implementation_key(5044)) int IReport::PrevID ( );
__declspec(implementation_key(5045)) int IReport::NextEmptyID ( );
__declspec(implementation_key(5046)) int IReport::PrevEmptyID ( );
__declspec(implementation_key(5047)) enum zReturnCode IReport::GetLibrary ( int ID );
__declspec(implementation_key(5048)) enum zReturnCode IReport::PutLibrary ( );
__declspec(implementation_key(5049)) enum zReturnCode IReport::DeleteLibrary ( int ID );
__declspec(implementation_key(5050)) enum zReturnCode IReport::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5051)) enum zReturnCode IReport::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5052)) int IReport::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(5053)) enum zReturnCode IReport::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(5054)) enum zReturnCode IReport::NextInSet ( int nSetID );
__declspec(implementation_key(5055)) enum zReturnCode IReport::FirstInSet ( int nSetID );
__declspec(implementation_key(5056)) int IReport::CountSet ( );
__declspec(implementation_key(5057)) enum zReturnCode IReport::NextExistingInSet ( int nSetID );
__declspec(implementation_key(5058)) enum zReturnCode IReport::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(5059)) _bstr_t IReport::Gettitle ( );
__declspec(implementation_key(5060)) void IReport::Puttitle ( _bstr_t _val );
__declspec(implementation_key(5061)) enum zDataType IReport::GetdataType ( );
__declspec(implementation_key(5062)) void IReport::PutdataType ( enum zDataType _val );
__declspec(implementation_key(5063)) VARIANT_BOOL IReport::GetCenterHeader1 ( );
__declspec(implementation_key(5064)) void IReport::PutCenterHeader1 ( VARIANT_BOOL _val );
__declspec(implementation_key(5065)) VARIANT_BOOL IReport::GetCenterHeader2 ( );
__declspec(implementation_key(5066)) void IReport::PutCenterHeader2 ( VARIANT_BOOL _val );
__declspec(implementation_key(5067)) VARIANT_BOOL IReport::GetDbSpHeader1 ( );
__declspec(implementation_key(5068)) void IReport::PutDbSpHeader1 ( VARIANT_BOOL _val );
__declspec(implementation_key(5069)) VARIANT_BOOL IReport::GetDbSpHeader2 ( );
__declspec(implementation_key(5070)) void IReport::PutDbSpHeader2 ( VARIANT_BOOL _val );
__declspec(implementation_key(5071)) _bstr_t IReport::GetHeader1 ( );
__declspec(implementation_key(5072)) void IReport::PutHeader1 ( _bstr_t _val );
__declspec(implementation_key(5073)) _bstr_t IReport::GetHeader2 ( );
__declspec(implementation_key(5074)) void IReport::PutHeader2 ( _bstr_t _val );
__declspec(implementation_key(5075)) _bstr_t IReport::GetColumnHeader ( );
__declspec(implementation_key(5076)) void IReport::PutColumnHeader ( _bstr_t _val );
__declspec(implementation_key(5077)) _bstr_t IReport::GetData1 ( );
__declspec(implementation_key(5078)) void IReport::PutData1 ( _bstr_t _val );
__declspec(implementation_key(5079)) _bstr_t IReport::GetData2 ( );
__declspec(implementation_key(5080)) void IReport::PutData2 ( _bstr_t _val );
__declspec(implementation_key(5081)) _bstr_t IReport::GetData3 ( );
__declspec(implementation_key(5082)) void IReport::PutData3 ( _bstr_t _val );
__declspec(implementation_key(5083)) _bstr_t IReport::GetData4 ( );
__declspec(implementation_key(5084)) void IReport::PutData4 ( _bstr_t _val );
__declspec(implementation_key(5085)) int IReport::GetID ( );
__declspec(implementation_key(5086)) void IReport::PutID ( int _val );
__declspec(implementation_key(5087)) int IReport::GetsetID ( );
__declspec(implementation_key(5088)) void IReport::PutsetID ( int _val );
__declspec(implementation_key(5089)) int IReport::GetActive ( );
__declspec(implementation_key(5090)) void IReport::PutActive ( int _val );
__declspec(implementation_key(5091)) int ISolid::GetVolSurface ( int nVectorIndex );
__declspec(implementation_key(5092)) void ISolid::PutVolSurface ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5093)) VARIANT_BOOL ISolid::GetVolReverse ( int nRowIndex, int nColIndex );
__declspec(implementation_key(5094)) void ISolid::PutVolReverse ( int nRowIndex, int nColIndex, VARIANT_BOOL _arg3 );
__declspec(implementation_key(5095)) enum zReturnCode ISolid::Curves ( enum zCombinedMode nCombinedMode, int * numCurves, VARIANT * curveID );
__declspec(implementation_key(5096)) enum zReturnCode ISolid::Surfaces ( enum zCombinedMode nCombinedMode, int * numSurfs, VARIANT * surfaceID );
__declspec(implementation_key(5097)) enum zReturnCode ISolid::MassProp ( double * Area, double * volume, VARIANT * cg, VARIANT * Inertia );
__declspec(implementation_key(5098)) enum zReturnCode ISolid::Export ( _bstr_t fName );
__declspec(implementation_key(5099)) enum zReturnCode ISolid::IsSolid ( );
__declspec(implementation_key(5100)) enum zReturnCode ISolid::IsSheet ( );
__declspec(implementation_key(5101)) enum zReturnCode ISolid::IsWire ( );
__declspec(implementation_key(5102)) enum zReturnCode ISolid::Facets ( int * numFacets, VARIANT * xyzFacet );
__declspec(implementation_key(5103)) enum zReturnCode ISolid::Get ( int entID );
__declspec(implementation_key(5104)) enum zReturnCode ISolid::Put ( int entID );
__declspec(implementation_key(5105)) enum zReturnCode ISolid::Nodes ( VARIANT_BOOL getBoundary, VARIANT_BOOL getInterior, int * numNodes, VARIANT * NodeID );
__declspec(implementation_key(5106)) enum zReturnCode ISolid::Elements ( int * numElems, VARIANT * elemID );
__declspec(implementation_key(5107)) enum zReturnCode ISolid::BoundingBox ( VARIANT * box );
__declspec(implementation_key(5108)) enum zReturnCode ISolid::CurvesAsSet ( enum zCombinedMode nCombinedMode, int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(5109)) enum zReturnCode ISolid::SurfacesAsSet ( enum zCombinedMode nCombinedMode, int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(5110)) enum zReturnCode ISolid::ElementsAsSet ( int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(5111)) enum zReturnCode ISolid::NodesAsSet ( VARIANT_BOOL getBoundary, VARIANT_BOOL getInterior, int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(5112)) enum zReturnCode ISolid::IsGeneral ( );
__declspec(implementation_key(5113)) enum zReturnCode ISolid::FreeCurvesAsSet ( enum zCombinedMode nCombinedMode, int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(5114)) enum zReturnCode ISolid::Points ( int * numPoints, VARIANT * pointID );
__declspec(implementation_key(5115)) enum zReturnCode ISolid::PointsAsSet ( int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(5116)) enum zReturnCode ISolid::ElementsAsSet2 ( VARIANT_BOOL bInSolid, VARIANT_BOOL bOnSurfaces, VARIANT_BOOL bOnCurves, VARIANT_BOOL bOnPoints, int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(5117)) enum zReturnCode ISolid::SheetFacesAsSet ( int nSetID, int nInsideSolidSetID );
__declspec(implementation_key(5118)) enum zReturnCode ISolid::WireCurvesAsSet ( int nSetID, int nInsideSolidSetID );
__declspec(implementation_key(5119)) enum zReturnCode ISolid::Delete ( int ID );
__declspec(implementation_key(5120)) enum zReturnCode ISolid::Inside ( const _variant_t & vXYZ, int * nInsideCode );
__declspec(implementation_key(5121)) enum zReturnCode ISolid::NextSet ( );
__declspec(implementation_key(5122)) enum zReturnCode ISolid::PrevSet ( );
__declspec(implementation_key(5123)) enum zReturnCode ISolid::NextEmptySet ( );
__declspec(implementation_key(5124)) enum zReturnCode ISolid::PrevEmptySet ( );
__declspec(implementation_key(5125)) enum zReturnCode ISolid::Exist ( int ID );
__declspec(implementation_key(5126)) enum zReturnCode ISolid::Deletable ( int ID );
__declspec(implementation_key(5127)) enum zReturnCode ISolid::Reset ( );
__declspec(implementation_key(5128)) enum zReturnCode ISolid::Next ( );
__declspec(implementation_key(5129)) enum zReturnCode ISolid::Prev ( );
__declspec(implementation_key(5130)) enum zReturnCode ISolid::First ( );
__declspec(implementation_key(5131)) enum zReturnCode ISolid::Last ( );
__declspec(implementation_key(5132)) int ISolid::NextID ( );
__declspec(implementation_key(5133)) int ISolid::PrevID ( );
__declspec(implementation_key(5134)) int ISolid::NextEmptyID ( );
__declspec(implementation_key(5135)) int ISolid::PrevEmptyID ( );
__declspec(implementation_key(5136)) enum zReturnCode ISolid::GetLibrary ( int ID );
__declspec(implementation_key(5137)) enum zReturnCode ISolid::PutLibrary ( );
__declspec(implementation_key(5138)) enum zReturnCode ISolid::DeleteLibrary ( int ID );
__declspec(implementation_key(5139)) enum zReturnCode ISolid::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5140)) enum zReturnCode ISolid::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5141)) int ISolid::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(5142)) enum zReturnCode ISolid::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(5143)) enum zReturnCode ISolid::NextInSet ( int nSetID );
__declspec(implementation_key(5144)) enum zReturnCode ISolid::FirstInSet ( int nSetID );
__declspec(implementation_key(5145)) int ISolid::CountSet ( );
__declspec(implementation_key(5146)) enum zReturnCode ISolid::NextExistingInSet ( int nSetID );
__declspec(implementation_key(5147)) enum zReturnCode ISolid::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(5148)) enum zDataType ISolid::Gettype ( );
__declspec(implementation_key(5149)) void ISolid::Puttype ( enum zDataType _val );
__declspec(implementation_key(5150)) int ISolid::GetattrPID ( );
__declspec(implementation_key(5151)) void ISolid::PutattrPID ( int _val );
__declspec(implementation_key(5152)) enum zColor ISolid::GetVolColor ( );
__declspec(implementation_key(5153)) void ISolid::PutVolColor ( enum zColor _val );
__declspec(implementation_key(5154)) int ISolid::GetVolLayer ( );
__declspec(implementation_key(5155)) void ISolid::PutVolLayer ( int _val );
__declspec(implementation_key(5156)) enum zVolumeType ISolid::GetVolType ( );
__declspec(implementation_key(5157)) void ISolid::PutVolType ( enum zVolumeType _val );
__declspec(implementation_key(5158)) enum zColor ISolid::Getcolor ( );
__declspec(implementation_key(5159)) void ISolid::Putcolor ( enum zColor _val );
__declspec(implementation_key(5160)) int ISolid::Getlayer ( );
__declspec(implementation_key(5161)) void ISolid::Putlayer ( int _val );
__declspec(implementation_key(5162)) int ISolid::GetAddress ( );
__declspec(implementation_key(5163)) void ISolid::PutAddress ( int _val );
__declspec(implementation_key(5164)) int ISolid::GetEngine ( );
__declspec(implementation_key(5165)) void ISolid::PutEngine ( int _val );
__declspec(implementation_key(5166)) _bstr_t ISolid::Gettitle ( );
__declspec(implementation_key(5167)) void ISolid::Puttitle ( _bstr_t _val );
__declspec(implementation_key(5168)) _variant_t ISolid::GetvVolSurface ( );
__declspec(implementation_key(5169)) void ISolid::PutvVolSurface ( const _variant_t & _val );
__declspec(implementation_key(5170)) _variant_t ISolid::GetvVolReverse ( );
__declspec(implementation_key(5171)) void ISolid::PutvVolReverse ( const _variant_t & _val );
__declspec(implementation_key(5172)) double ISolid::GetScaleFactor ( );
__declspec(implementation_key(5173)) void ISolid::PutScaleFactor ( double _val );
__declspec(implementation_key(5174)) int ISolid::GetID ( );
__declspec(implementation_key(5175)) void ISolid::PutID ( int _val );
__declspec(implementation_key(5176)) int ISolid::GetsetID ( );
__declspec(implementation_key(5177)) void ISolid::PutsetID ( int _val );
__declspec(implementation_key(5178)) int ISolid::GetActive ( );
__declspec(implementation_key(5179)) void ISolid::PutActive ( int _val );
__declspec(implementation_key(5180)) int ISurface::GetStdCurve ( int nVectorIndex );
__declspec(implementation_key(5181)) void ISurface::PutStdCurve ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5182)) VARIANT_BOOL ISurface::GetStdCurveReverse ( int nVectorIndex );
__declspec(implementation_key(5183)) void ISurface::PutStdCurveReverse ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(5184)) int ISurface::GetapproachData ( int nVectorIndex );
__declspec(implementation_key(5185)) void ISurface::PutapproachData ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5186)) int ISurface::GetDivisions ( int nVectorIndex );
__declspec(implementation_key(5187)) void ISurface::PutDivisions ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5188)) int ISurface::GetMeshPoint ( int nVectorIndex );
__declspec(implementation_key(5189)) void ISurface::PutMeshPoint ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5190)) int ISurface::GetBoundaryCurve ( int nVectorIndex );
__declspec(implementation_key(5191)) void ISurface::PutBoundaryCurve ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5192)) int ISurface::GetBoundaryFlag ( int nVectorIndex );
__declspec(implementation_key(5193)) void ISurface::PutBoundaryFlag ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5194)) enum zReturnCode ISurface::Get ( int entID );
__declspec(implementation_key(5195)) enum zReturnCode ISurface::Put ( int entID );
__declspec(implementation_key(5196)) enum zReturnCode ISurface::Inside ( double u, double v );
__declspec(implementation_key(5197)) enum zReturnCode ISurface::ParamToXYZ ( double u, double v, VARIANT * xyz );
__declspec(implementation_key(5198)) enum zReturnCode ISurface::XYZToParam ( const _variant_t & xyz, double * u, double * v );
__declspec(implementation_key(5199)) enum zReturnCode ISurface::cg ( VARIANT * xyz );
__declspec(implementation_key(5200)) enum zReturnCode ISurface::Tangents ( double u, double v, VARIANT * stan, VARIANT * ttan );
__declspec(implementation_key(5201)) enum zReturnCode ISurface::normal ( double u, double v, VARIANT * normal );
__declspec(implementation_key(5202)) enum zReturnCode ISurface::ProjectOnto ( const _variant_t & initial, double tolerance, VARIANT * projection );
__declspec(implementation_key(5203)) enum zReturnCode ISurface::Curves ( enum zCombinedMode nCombinedMode, int * numCurves, VARIANT * curveID );
__declspec(implementation_key(5204)) enum zReturnCode ISurface::Points ( enum zCombinedMode nCombinedMode, int * numPoints, VARIANT * pointID );
__declspec(implementation_key(5205)) enum zReturnCode ISurface::EndPoints ( int * numPoints, VARIANT * pointID );
__declspec(implementation_key(5206)) enum zReturnCode ISurface::Planar ( VARIANT * base, VARIANT * normal );
__declspec(implementation_key(5207)) enum zReturnCode ISurface::Cylindrical ( double * radius, VARIANT * base, VARIANT * Axis );
__declspec(implementation_key(5208)) enum zReturnCode ISurface::Area ( double * Area );
__declspec(implementation_key(5209)) enum zReturnCode ISurface::Facets ( int * numFacets, VARIANT * xyzFacet );
__declspec(implementation_key(5210)) enum zReturnCode ISurface::Nodes ( VARIANT_BOOL getBoundary, VARIANT_BOOL getInterior, int * numNodes, VARIANT * NodeID );
__declspec(implementation_key(5211)) enum zReturnCode ISurface::Elements ( int * numElems, VARIANT * elemID );
__declspec(implementation_key(5212)) enum zReturnCode ISurface::ElementFaces ( VARIANT_BOOL getPlaneElem, VARIANT_BOOL getSolidElem, VARIANT_BOOL requireElemAttach, int * numFaces, VARIANT * elemID, VARIANT * faceID );
__declspec(implementation_key(5213)) enum zReturnCode ISurface::ElementsWithFaces ( int * numElems, VARIANT * elemID );
__declspec(implementation_key(5214)) enum zReturnCode ISurface::IsPlane ( );
__declspec(implementation_key(5215)) enum zReturnCode ISurface::IsCylinder ( );
__declspec(implementation_key(5216)) enum zReturnCode ISurface::IsSphere ( );
__declspec(implementation_key(5217)) enum zReturnCode ISurface::IsCone ( );
__declspec(implementation_key(5218)) enum zReturnCode ISurface::IsTorus ( );
__declspec(implementation_key(5219)) enum zReturnCode ISurface::Spherical ( double * radius, VARIANT * center );
__declspec(implementation_key(5220)) enum zReturnCode ISurface::Conical ( double * radius, double * angle, VARIANT * base, VARIANT * Axis );
__declspec(implementation_key(5221)) enum zReturnCode ISurface::Toroidal ( double * radius1, double * radius2, VARIANT * base, VARIANT * Axis );
__declspec(implementation_key(5222)) enum zReturnCode ISurface::HasPole ( );
__declspec(implementation_key(5223)) enum zReturnCode ISurface::RationalParamToXYZ ( double u, double v, VARIANT * xyz );
__declspec(implementation_key(5224)) enum zReturnCode ISurface::BoundingBox ( VARIANT * box );
__declspec(implementation_key(5225)) enum zReturnCode ISurface::MaxNormalDeviation ( double dLimit, double * dAngle );
__declspec(implementation_key(5226)) enum zReturnCode ISurface::NormalAtXYZ ( int nLocations, const _variant_t & xyz, VARIANT * normal );
__declspec(implementation_key(5227)) enum zReturnCode ISurface::NormalBox ( VARIANT * box );
__declspec(implementation_key(5228)) enum zReturnCode ISurface::BoundarySurfaces ( int * numSurf, VARIANT * surfID );
__declspec(implementation_key(5229)) enum zReturnCode ISurface::AdjacentSurfaces ( enum zCombinedMode nCombinedMode, int * numSurfaces, VARIANT * surfaceID );
__declspec(implementation_key(5230)) enum zReturnCode ISurface::BoundarySurfacesAsSet ( int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(5231)) enum zReturnCode ISurface::AdjacentSurfacesAsSet ( enum zCombinedMode nCombinedMode, int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(5232)) enum zReturnCode ISurface::CurvesAsSet ( enum zCombinedMode nCombinedMode, int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(5233)) enum zReturnCode ISurface::PointsAsSet ( enum zCombinedMode nCombinedMode, int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(5234)) enum zReturnCode ISurface::EndPointsAsSet ( int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(5235)) enum zReturnCode ISurface::ElementsAsSet ( int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(5236)) enum zReturnCode ISurface::NodesAsSet ( VARIANT_BOOL getBoundary, VARIANT_BOOL getInterior, int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(5237)) enum zReturnCode ISurface::Solid ( int * pnSolidID );
__declspec(implementation_key(5238)) enum zReturnCode ISurface::InsideXYZ ( const _variant_t & xyz );
__declspec(implementation_key(5239)) enum zReturnCode ISurface::IsBoundingSolidRegion ( );
__declspec(implementation_key(5240)) enum zReturnCode ISurface::ResetMeshAttr ( );
__declspec(implementation_key(5241)) enum zReturnCode ISurface::Mesh ( int propID, enum zTopologyType elemShape, VARIANT_BOOL bAllowMapped );
__declspec(implementation_key(5242)) enum zReturnCode ISurface::AngleAtPoint ( int nPtID, double * dAngle, VARIANT * vBisector, VARIANT * vNormal );
__declspec(implementation_key(5243)) enum zReturnCode ISurface::BoundingSize ( VARIANT * pvDim, VARIANT * pvLongDir, VARIANT * pvNormalDir );
__declspec(implementation_key(5244)) enum zReturnCode ISurface::ApproximateArea ( double * Area );
__declspec(implementation_key(5245)) enum zReturnCode ISurface::MinRadiiOfCurvature ( double * pdConcaveRadius, double * pdConvexRadius, VARIANT_BOOL * pbIsPlanar );
__declspec(implementation_key(5246)) enum zReturnCode ISurface::CurveLoops ( enum zCombinedMode nCombinedMode, int * numLoops, int * numCurves, VARIANT * curveID );
__declspec(implementation_key(5247)) enum zReturnCode ISurface::CurvesAtPoint ( int nPtID, int * PrevCurveID, int * NextCurveID );
__declspec(implementation_key(5248)) enum zReturnCode ISurface::CommonCurvesAsSet ( enum zCombinedMode nCombinedMode, int nOtherSurfaceID, int nSetID, VARIANT_BOOL bClear );
__declspec(implementation_key(5249)) enum zReturnCode ISurface::FindMappedMeshingCorners ( int nNumDesired, int * pnNumFound, VARIANT * pnCornerList );
__declspec(implementation_key(5250)) enum zReturnCode ISurface::IsSuppressed ( );
__declspec(implementation_key(5251)) enum zReturnCode ISurface::Curvature ( const _variant_t & vXYZ, double * pdRadius1, VARIANT * vCurveDir1, double * pdRadius2, VARIANT * vCurveDir2, VARIANT * vNormDir );
__declspec(implementation_key(5252)) enum zReturnCode ISurface::IsMappedApproach ( );
__declspec(implementation_key(5253)) enum zReturnCode ISurface::IsMappable ( VARIANT_BOOL bForceBlends, double dMaxBlendRadius, double dMergeAngle, int * pnNumEdges, VARIANT * pnCornerPoints, VARIANT * pdEdgeLength, int * pnNumEdgeCurves, VARIANT * pnEdgeCurves );
__declspec(implementation_key(5254)) enum zReturnCode ISurface::AddMeshPoint ( int nPointID );
__declspec(implementation_key(5255)) int ISurface::CountMeshPoint ( );
__declspec(implementation_key(5256)) enum zReturnCode ISurface::IsMultiLoop ( );
__declspec(implementation_key(5257)) enum zReturnCode ISurface::PointLoops ( enum zCombinedMode nCombinedMode, int * numLoops, int * numPoints, VARIANT * pointID );
__declspec(implementation_key(5258)) enum zReturnCode ISurface::ProjectToClosest ( const _variant_t & vOrig, VARIANT * vProj );
__declspec(implementation_key(5259)) enum zReturnCode ISurface::ProjectAlongVector ( VARIANT_BOOL bBothDirections, const _variant_t & vAlong, const _variant_t & vOrig, VARIANT * vProj );
__declspec(implementation_key(5260)) enum zReturnCode ISurface::IsBlend ( int * blendtype, double * dRadius );
__declspec(implementation_key(5261)) enum zReturnCode ISurface::BoundingBoxInCSys ( int nCSysID, VARIANT * box );
__declspec(implementation_key(5262)) enum zReturnCode ISurface::RemoveMeshPoint ( int nPointID );
__declspec(implementation_key(5263)) enum zReturnCode ISurface::RemoveAllMeshPoints ( );
__declspec(implementation_key(5264)) enum zReturnCode ISurface::NextSet ( );
__declspec(implementation_key(5265)) enum zReturnCode ISurface::PrevSet ( );
__declspec(implementation_key(5266)) enum zReturnCode ISurface::NextEmptySet ( );
__declspec(implementation_key(5267)) enum zReturnCode ISurface::PrevEmptySet ( );
__declspec(implementation_key(5268)) enum zReturnCode ISurface::Exist ( int ID );
__declspec(implementation_key(5269)) enum zReturnCode ISurface::Deletable ( int ID );
__declspec(implementation_key(5270)) enum zReturnCode ISurface::Delete ( int ID );
__declspec(implementation_key(5271)) enum zReturnCode ISurface::Reset ( );
__declspec(implementation_key(5272)) enum zReturnCode ISurface::Next ( );
__declspec(implementation_key(5273)) enum zReturnCode ISurface::Prev ( );
__declspec(implementation_key(5274)) enum zReturnCode ISurface::First ( );
__declspec(implementation_key(5275)) enum zReturnCode ISurface::Last ( );
__declspec(implementation_key(5276)) int ISurface::NextID ( );
__declspec(implementation_key(5277)) int ISurface::PrevID ( );
__declspec(implementation_key(5278)) int ISurface::NextEmptyID ( );
__declspec(implementation_key(5279)) int ISurface::PrevEmptyID ( );
__declspec(implementation_key(5280)) enum zReturnCode ISurface::GetLibrary ( int ID );
__declspec(implementation_key(5281)) enum zReturnCode ISurface::PutLibrary ( );
__declspec(implementation_key(5282)) enum zReturnCode ISurface::DeleteLibrary ( int ID );
__declspec(implementation_key(5283)) enum zReturnCode ISurface::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5284)) enum zReturnCode ISurface::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5285)) int ISurface::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(5286)) enum zReturnCode ISurface::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(5287)) enum zReturnCode ISurface::NextInSet ( int nSetID );
__declspec(implementation_key(5288)) enum zReturnCode ISurface::FirstInSet ( int nSetID );
__declspec(implementation_key(5289)) int ISurface::CountSet ( );
__declspec(implementation_key(5290)) enum zReturnCode ISurface::NextExistingInSet ( int nSetID );
__declspec(implementation_key(5291)) enum zReturnCode ISurface::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(5292)) enum zSurfaceType ISurface::Gettype ( );
__declspec(implementation_key(5293)) void ISurface::Puttype ( enum zSurfaceType _val );
__declspec(implementation_key(5294)) int ISurface::GetattrPID ( );
__declspec(implementation_key(5295)) void ISurface::PutattrPID ( int _val );
__declspec(implementation_key(5296)) double ISurface::GetattrOffset ( );
__declspec(implementation_key(5297)) void ISurface::PutattrOffset ( double _val );
__declspec(implementation_key(5298)) enum zMeshApproach ISurface::Getapproach ( );
__declspec(implementation_key(5299)) void ISurface::Putapproach ( enum zMeshApproach _val );
__declspec(implementation_key(5300)) enum zColor ISurface::Getcolor ( );
__declspec(implementation_key(5301)) void ISurface::Putcolor ( enum zColor _val );
__declspec(implementation_key(5302)) int ISurface::Getlayer ( );
__declspec(implementation_key(5303)) void ISurface::Putlayer ( int _val );
__declspec(implementation_key(5304)) int ISurface::GetAddress ( );
__declspec(implementation_key(5305)) void ISurface::PutAddress ( int _val );
__declspec(implementation_key(5306)) int ISurface::GetEngine ( );
__declspec(implementation_key(5307)) void ISurface::PutEngine ( int _val );
__declspec(implementation_key(5308)) VARIANT_BOOL ISurface::GetSuppressed ( );
__declspec(implementation_key(5309)) void ISurface::PutSuppressed ( VARIANT_BOOL _val );
__declspec(implementation_key(5310)) double ISurface::GetMeshSizeInterior ( );
__declspec(implementation_key(5311)) void ISurface::PutMeshSizeInterior ( double _val );
__declspec(implementation_key(5312)) double ISurface::GetMeshSizeChord ( );
__declspec(implementation_key(5313)) void ISurface::PutMeshSizeChord ( double _val );
__declspec(implementation_key(5314)) int ISurface::GetBoundaryMode ( );
__declspec(implementation_key(5315)) void ISurface::PutBoundaryMode ( int _val );
__declspec(implementation_key(5316)) int ISurface::GetBoundaryOnSurface ( );
__declspec(implementation_key(5317)) void ISurface::PutBoundaryOnSurface ( int _val );
__declspec(implementation_key(5318)) _variant_t ISurface::GetvStdCurve ( );
__declspec(implementation_key(5319)) void ISurface::PutvStdCurve ( const _variant_t & _val );
__declspec(implementation_key(5320)) _variant_t ISurface::GetvStdCurveReverse ( );
__declspec(implementation_key(5321)) void ISurface::PutvStdCurveReverse ( const _variant_t & _val );
__declspec(implementation_key(5322)) _variant_t ISurface::GetvapproachData ( );
__declspec(implementation_key(5323)) void ISurface::PutvapproachData ( const _variant_t & _val );
__declspec(implementation_key(5324)) _variant_t ISurface::GetvDivisions ( );
__declspec(implementation_key(5325)) void ISurface::PutvDivisions ( const _variant_t & _val );
__declspec(implementation_key(5326)) _variant_t ISurface::GetvMeshPoint ( );
__declspec(implementation_key(5327)) void ISurface::PutvMeshPoint ( const _variant_t & _val );
__declspec(implementation_key(5328)) _variant_t ISurface::GetvBoundaryCurve ( );
__declspec(implementation_key(5329)) void ISurface::PutvBoundaryCurve ( const _variant_t & _val );
__declspec(implementation_key(5330)) _variant_t ISurface::GetvBoundaryFlag ( );
__declspec(implementation_key(5331)) void ISurface::PutvBoundaryFlag ( const _variant_t & _val );
__declspec(implementation_key(5332)) int ISurface::GetQuadMeshLayers ( );
__declspec(implementation_key(5333)) void ISurface::PutQuadMeshLayers ( int _val );
__declspec(implementation_key(5334)) int ISurface::GetInternalToBoundary ( );
__declspec(implementation_key(5335)) void ISurface::PutInternalToBoundary ( int _val );
__declspec(implementation_key(5336)) enum zTopologyType ISurface::GetattrTopology ( );
__declspec(implementation_key(5337)) void ISurface::PutattrTopology ( enum zTopologyType _val );
__declspec(implementation_key(5338)) enum zMesherType ISurface::GetattrMesher ( );
__declspec(implementation_key(5339)) void ISurface::PutattrMesher ( enum zMesherType _val );
__declspec(implementation_key(5340)) int ISurface::GetattrMappedLevel ( );
__declspec(implementation_key(5341)) void ISurface::PutattrMappedLevel ( int _val );
__declspec(implementation_key(5342)) VARIANT_BOOL ISurface::GetattrMapSubdivisions ( );
__declspec(implementation_key(5343)) void ISurface::PutattrMapSubdivisions ( VARIANT_BOOL _val );
__declspec(implementation_key(5344)) VARIANT_BOOL ISurface::GetattrMapEqualOnly ( );
__declspec(implementation_key(5345)) void ISurface::PutattrMapEqualOnly ( VARIANT_BOOL _val );
__declspec(implementation_key(5346)) VARIANT_BOOL ISurface::GetattrMapAltTri ( );
__declspec(implementation_key(5347)) void ISurface::PutattrMapAltTri ( VARIANT_BOOL _val );
__declspec(implementation_key(5348)) VARIANT_BOOL ISurface::GetattrMapRightBias ( );
__declspec(implementation_key(5349)) void ISurface::PutattrMapRightBias ( VARIANT_BOOL _val );
__declspec(implementation_key(5350)) double ISurface::GetattrMapAngleDeviation ( );
__declspec(implementation_key(5351)) void ISurface::PutattrMapAngleDeviation ( double _val );
__declspec(implementation_key(5352)) double ISurface::GetattrMapMinCornerAngle ( );
__declspec(implementation_key(5353)) void ISurface::PutattrMapMinCornerAngle ( double _val );
__declspec(implementation_key(5354)) VARIANT_BOOL ISurface::GetattrMidsideGeom ( );
__declspec(implementation_key(5355)) void ISurface::PutattrMidsideGeom ( VARIANT_BOOL _val );
__declspec(implementation_key(5356)) double ISurface::GetattrMidsideAngle ( );
__declspec(implementation_key(5357)) void ISurface::PutattrMidsideAngle ( double _val );
__declspec(implementation_key(5358)) int ISurface::GetattrMinBetween ( );
__declspec(implementation_key(5359)) void ISurface::PutattrMinBetween ( int _val );
__declspec(implementation_key(5360)) double ISurface::GetattrMaxAspect ( );
__declspec(implementation_key(5361)) void ISurface::PutattrMaxAspect ( double _val );
__declspec(implementation_key(5362)) int ISurface::GetattrQuickCutNodes ( );
__declspec(implementation_key(5363)) void ISurface::PutattrQuickCutNodes ( int _val );
__declspec(implementation_key(5364)) double ISurface::GetattrQuadCutAngle ( );
__declspec(implementation_key(5365)) void ISurface::PutattrQuadCutAngle ( double _val );
__declspec(implementation_key(5366)) VARIANT_BOOL ISurface::GetattrSmoothLaplacian ( );
__declspec(implementation_key(5367)) void ISurface::PutattrSmoothLaplacian ( VARIANT_BOOL _val );
__declspec(implementation_key(5368)) int ISurface::GetattrSmoothIter ( );
__declspec(implementation_key(5369)) void ISurface::PutattrSmoothIter ( int _val );
__declspec(implementation_key(5370)) double ISurface::GetattrSmoothTolerance ( );
__declspec(implementation_key(5371)) void ISurface::PutattrSmoothTolerance ( double _val );
__declspec(implementation_key(5372)) VARIANT_BOOL ISurface::GetattrConnectEdgeNodes ( );
__declspec(implementation_key(5373)) void ISurface::PutattrConnectEdgeNodes ( VARIANT_BOOL _val );
__declspec(implementation_key(5374)) double ISurface::GetattrConnectEdgeNodeTol ( );
__declspec(implementation_key(5375)) void ISurface::PutattrConnectEdgeNodeTol ( double _val );
__declspec(implementation_key(5376)) enum zMeshOffsetFrom ISurface::GetattrOffsetFrom ( );
__declspec(implementation_key(5377)) void ISurface::PutattrOffsetFrom ( enum zMeshOffsetFrom _val );
__declspec(implementation_key(5378)) VARIANT_BOOL ISurface::GetattrInitialized ( );
__declspec(implementation_key(5379)) void ISurface::PutattrInitialized ( VARIANT_BOOL _val );
__declspec(implementation_key(5380)) VARIANT_BOOL ISurface::GetattrPostMeshCleanup ( );
__declspec(implementation_key(5381)) void ISurface::PutattrPostMeshCleanup ( VARIANT_BOOL _val );
__declspec(implementation_key(5382)) VARIANT_BOOL ISurface::GetattrMapSplitQuads ( );
__declspec(implementation_key(5383)) void ISurface::PutattrMapSplitQuads ( VARIANT_BOOL _val );
__declspec(implementation_key(5384)) double ISurface::GetScaleFactor ( );
__declspec(implementation_key(5385)) void ISurface::PutScaleFactor ( double _val );
__declspec(implementation_key(5386)) VARIANT_BOOL ISurface::GetattrVertexLoopsAsHardPoints ( );
__declspec(implementation_key(5387)) void ISurface::PutattrVertexLoopsAsHardPoints ( VARIANT_BOOL _val );
__declspec(implementation_key(5388)) VARIANT_BOOL ISurface::GetattrMaxQuads ( );
__declspec(implementation_key(5389)) void ISurface::PutattrMaxQuads ( VARIANT_BOOL _val );
__declspec(implementation_key(5390)) int ISurface::GetID ( );
__declspec(implementation_key(5391)) void ISurface::PutID ( int _val );
__declspec(implementation_key(5392)) int ISurface::GetsetID ( );
__declspec(implementation_key(5393)) void ISurface::PutsetID ( int _val );
__declspec(implementation_key(5394)) int ISurface::GetActive ( );
__declspec(implementation_key(5395)) void ISurface::PutActive ( int _val );
__declspec(implementation_key(5396)) int ITmgBC::Geti ( int nVectorIndex );
__declspec(implementation_key(5397)) void ITmgBC::Puti ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5398)) double ITmgBC::Getr ( int nVectorIndex );
__declspec(implementation_key(5399)) void ITmgBC::Putr ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5400)) int ITmgBC::Getc ( int nVectorIndex );
__declspec(implementation_key(5401)) void ITmgBC::Putc ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5402)) VARIANT_BOOL ITmgBC::Getb ( int nVectorIndex );
__declspec(implementation_key(5403)) void ITmgBC::Putb ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(5404)) enum zReturnCode ITmgBC::GetAll ( int entID, VARIANT * i, VARIANT * r, VARIANT * c );
__declspec(implementation_key(5405)) enum zReturnCode ITmgBC::PutAll ( int entID, const _variant_t & i, const _variant_t & r, const _variant_t & c );
__declspec(implementation_key(5406)) enum zReturnCode ITmgBC::GetAll2 ( int entID, VARIANT * i, VARIANT * r, VARIANT * b, VARIANT * c );
__declspec(implementation_key(5407)) enum zReturnCode ITmgBC::PutAll2 ( int entID, const _variant_t & i, const _variant_t & r, const _variant_t & b, const _variant_t & c );
__declspec(implementation_key(5408)) enum zReturnCode ITmgBC::NextSet ( );
__declspec(implementation_key(5409)) enum zReturnCode ITmgBC::PrevSet ( );
__declspec(implementation_key(5410)) enum zReturnCode ITmgBC::NextEmptySet ( );
__declspec(implementation_key(5411)) enum zReturnCode ITmgBC::PrevEmptySet ( );
__declspec(implementation_key(5412)) enum zReturnCode ITmgBC::Get ( int ID );
__declspec(implementation_key(5413)) enum zReturnCode ITmgBC::Put ( int ID );
__declspec(implementation_key(5414)) enum zReturnCode ITmgBC::Exist ( int ID );
__declspec(implementation_key(5415)) enum zReturnCode ITmgBC::Deletable ( int ID );
__declspec(implementation_key(5416)) enum zReturnCode ITmgBC::Delete ( int ID );
__declspec(implementation_key(5417)) enum zReturnCode ITmgBC::Reset ( );
__declspec(implementation_key(5418)) enum zReturnCode ITmgBC::Next ( );
__declspec(implementation_key(5419)) enum zReturnCode ITmgBC::Prev ( );
__declspec(implementation_key(5420)) enum zReturnCode ITmgBC::First ( );
__declspec(implementation_key(5421)) enum zReturnCode ITmgBC::Last ( );
__declspec(implementation_key(5422)) int ITmgBC::NextID ( );
__declspec(implementation_key(5423)) int ITmgBC::PrevID ( );
__declspec(implementation_key(5424)) int ITmgBC::NextEmptyID ( );
__declspec(implementation_key(5425)) int ITmgBC::PrevEmptyID ( );
__declspec(implementation_key(5426)) enum zReturnCode ITmgBC::GetLibrary ( int ID );
__declspec(implementation_key(5427)) enum zReturnCode ITmgBC::PutLibrary ( );
__declspec(implementation_key(5428)) enum zReturnCode ITmgBC::DeleteLibrary ( int ID );
__declspec(implementation_key(5429)) enum zReturnCode ITmgBC::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5430)) enum zReturnCode ITmgBC::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5431)) int ITmgBC::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(5432)) enum zReturnCode ITmgBC::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(5433)) enum zReturnCode ITmgBC::NextInSet ( int nSetID );
__declspec(implementation_key(5434)) enum zReturnCode ITmgBC::FirstInSet ( int nSetID );
__declspec(implementation_key(5435)) int ITmgBC::CountSet ( );
__declspec(implementation_key(5436)) enum zReturnCode ITmgBC::NextExistingInSet ( int nSetID );
__declspec(implementation_key(5437)) enum zReturnCode ITmgBC::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(5438)) _variant_t ITmgBC::Getvi ( );
__declspec(implementation_key(5439)) void ITmgBC::Putvi ( const _variant_t & _val );
__declspec(implementation_key(5440)) _variant_t ITmgBC::Getvr ( );
__declspec(implementation_key(5441)) void ITmgBC::Putvr ( const _variant_t & _val );
__declspec(implementation_key(5442)) _variant_t ITmgBC::Getvc ( );
__declspec(implementation_key(5443)) void ITmgBC::Putvc ( const _variant_t & _val );
__declspec(implementation_key(5444)) _variant_t ITmgBC::Getvb ( );
__declspec(implementation_key(5445)) void ITmgBC::Putvb ( const _variant_t & _val );
__declspec(implementation_key(5446)) int ITmgBC::GetID ( );
__declspec(implementation_key(5447)) void ITmgBC::PutID ( int _val );
__declspec(implementation_key(5448)) int ITmgBC::GetsetID ( );
__declspec(implementation_key(5449)) void ITmgBC::PutsetID ( int _val );
__declspec(implementation_key(5450)) int ITmgBC::GetActive ( );
__declspec(implementation_key(5451)) void ITmgBC::PutActive ( int _val );
__declspec(implementation_key(5452)) int ITmgCtl::Geti ( int nVectorIndex );
__declspec(implementation_key(5453)) void ITmgCtl::Puti ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5454)) double ITmgCtl::Getr ( int nVectorIndex );
__declspec(implementation_key(5455)) void ITmgCtl::Putr ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5456)) VARIANT_BOOL ITmgCtl::Getb ( int nVectorIndex );
__declspec(implementation_key(5457)) void ITmgCtl::Putb ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(5458)) int ITmgCtl::Getc ( int nVectorIndex );
__declspec(implementation_key(5459)) void ITmgCtl::Putc ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5460)) enum zReturnCode ITmgCtl::GetAll ( int entID, VARIANT * i, VARIANT * r, VARIANT * b, VARIANT * c );
__declspec(implementation_key(5461)) enum zReturnCode ITmgCtl::PutAll ( int entID, const _variant_t & i, const _variant_t & r, const _variant_t & b, const _variant_t & c );
__declspec(implementation_key(5462)) enum zReturnCode ITmgCtl::GetAll2 ( int entID, VARIANT * i, VARIANT * r, VARIANT * b, VARIANT * c );
__declspec(implementation_key(5463)) enum zReturnCode ITmgCtl::PutAll2 ( int entID, const _variant_t & i, const _variant_t & r, const _variant_t & b, const _variant_t & c );
__declspec(implementation_key(5464)) enum zReturnCode ITmgCtl::NextSet ( );
__declspec(implementation_key(5465)) enum zReturnCode ITmgCtl::PrevSet ( );
__declspec(implementation_key(5466)) enum zReturnCode ITmgCtl::NextEmptySet ( );
__declspec(implementation_key(5467)) enum zReturnCode ITmgCtl::PrevEmptySet ( );
__declspec(implementation_key(5468)) enum zReturnCode ITmgCtl::Get ( int ID );
__declspec(implementation_key(5469)) enum zReturnCode ITmgCtl::Put ( int ID );
__declspec(implementation_key(5470)) enum zReturnCode ITmgCtl::Exist ( int ID );
__declspec(implementation_key(5471)) enum zReturnCode ITmgCtl::Deletable ( int ID );
__declspec(implementation_key(5472)) enum zReturnCode ITmgCtl::Delete ( int ID );
__declspec(implementation_key(5473)) enum zReturnCode ITmgCtl::Reset ( );
__declspec(implementation_key(5474)) enum zReturnCode ITmgCtl::Next ( );
__declspec(implementation_key(5475)) enum zReturnCode ITmgCtl::Prev ( );
__declspec(implementation_key(5476)) enum zReturnCode ITmgCtl::First ( );
__declspec(implementation_key(5477)) enum zReturnCode ITmgCtl::Last ( );
__declspec(implementation_key(5478)) int ITmgCtl::NextID ( );
__declspec(implementation_key(5479)) int ITmgCtl::PrevID ( );
__declspec(implementation_key(5480)) int ITmgCtl::NextEmptyID ( );
__declspec(implementation_key(5481)) int ITmgCtl::PrevEmptyID ( );
__declspec(implementation_key(5482)) enum zReturnCode ITmgCtl::GetLibrary ( int ID );
__declspec(implementation_key(5483)) enum zReturnCode ITmgCtl::PutLibrary ( );
__declspec(implementation_key(5484)) enum zReturnCode ITmgCtl::DeleteLibrary ( int ID );
__declspec(implementation_key(5485)) enum zReturnCode ITmgCtl::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5486)) enum zReturnCode ITmgCtl::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5487)) int ITmgCtl::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(5488)) enum zReturnCode ITmgCtl::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(5489)) enum zReturnCode ITmgCtl::NextInSet ( int nSetID );
__declspec(implementation_key(5490)) enum zReturnCode ITmgCtl::FirstInSet ( int nSetID );
__declspec(implementation_key(5491)) int ITmgCtl::CountSet ( );
__declspec(implementation_key(5492)) enum zReturnCode ITmgCtl::NextExistingInSet ( int nSetID );
__declspec(implementation_key(5493)) enum zReturnCode ITmgCtl::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(5494)) _variant_t ITmgCtl::Getvi ( );
__declspec(implementation_key(5495)) void ITmgCtl::Putvi ( const _variant_t & _val );
__declspec(implementation_key(5496)) _variant_t ITmgCtl::Getvr ( );
__declspec(implementation_key(5497)) void ITmgCtl::Putvr ( const _variant_t & _val );
__declspec(implementation_key(5498)) _variant_t ITmgCtl::Getvb ( );
__declspec(implementation_key(5499)) void ITmgCtl::Putvb ( const _variant_t & _val );
__declspec(implementation_key(5500)) _variant_t ITmgCtl::Getvc ( );
__declspec(implementation_key(5501)) void ITmgCtl::Putvc ( const _variant_t & _val );
__declspec(implementation_key(5502)) int ITmgCtl::GetID ( );
__declspec(implementation_key(5503)) void ITmgCtl::PutID ( int _val );
__declspec(implementation_key(5504)) int ITmgCtl::GetsetID ( );
__declspec(implementation_key(5505)) void ITmgCtl::PutsetID ( int _val );
__declspec(implementation_key(5506)) int ITmgCtl::GetActive ( );
__declspec(implementation_key(5507)) void ITmgCtl::PutActive ( int _val );
__declspec(implementation_key(5508)) int ITmgInt::Geti ( int nVectorIndex );
__declspec(implementation_key(5509)) void ITmgInt::Puti ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5510)) enum zReturnCode ITmgInt::GetAll ( int entID, VARIANT * i );
__declspec(implementation_key(5511)) enum zReturnCode ITmgInt::PutAll ( int entID, const _variant_t & i );
__declspec(implementation_key(5512)) enum zReturnCode ITmgInt::NextSet ( );
__declspec(implementation_key(5513)) enum zReturnCode ITmgInt::PrevSet ( );
__declspec(implementation_key(5514)) enum zReturnCode ITmgInt::NextEmptySet ( );
__declspec(implementation_key(5515)) enum zReturnCode ITmgInt::PrevEmptySet ( );
__declspec(implementation_key(5516)) enum zReturnCode ITmgInt::Get ( int ID );
__declspec(implementation_key(5517)) enum zReturnCode ITmgInt::Put ( int ID );
__declspec(implementation_key(5518)) enum zReturnCode ITmgInt::Exist ( int ID );
__declspec(implementation_key(5519)) enum zReturnCode ITmgInt::Deletable ( int ID );
__declspec(implementation_key(5520)) enum zReturnCode ITmgInt::Delete ( int ID );
__declspec(implementation_key(5521)) enum zReturnCode ITmgInt::Reset ( );
__declspec(implementation_key(5522)) enum zReturnCode ITmgInt::Next ( );
__declspec(implementation_key(5523)) enum zReturnCode ITmgInt::Prev ( );
__declspec(implementation_key(5524)) enum zReturnCode ITmgInt::First ( );
__declspec(implementation_key(5525)) enum zReturnCode ITmgInt::Last ( );
__declspec(implementation_key(5526)) int ITmgInt::NextID ( );
__declspec(implementation_key(5527)) int ITmgInt::PrevID ( );
__declspec(implementation_key(5528)) int ITmgInt::NextEmptyID ( );
__declspec(implementation_key(5529)) int ITmgInt::PrevEmptyID ( );
__declspec(implementation_key(5530)) enum zReturnCode ITmgInt::GetLibrary ( int ID );
__declspec(implementation_key(5531)) enum zReturnCode ITmgInt::PutLibrary ( );
__declspec(implementation_key(5532)) enum zReturnCode ITmgInt::DeleteLibrary ( int ID );
__declspec(implementation_key(5533)) enum zReturnCode ITmgInt::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5534)) enum zReturnCode ITmgInt::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5535)) int ITmgInt::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(5536)) enum zReturnCode ITmgInt::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(5537)) enum zReturnCode ITmgInt::NextInSet ( int nSetID );
__declspec(implementation_key(5538)) enum zReturnCode ITmgInt::FirstInSet ( int nSetID );
__declspec(implementation_key(5539)) int ITmgInt::CountSet ( );
__declspec(implementation_key(5540)) enum zReturnCode ITmgInt::NextExistingInSet ( int nSetID );
__declspec(implementation_key(5541)) enum zReturnCode ITmgInt::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(5542)) _variant_t ITmgInt::Getvi ( );
__declspec(implementation_key(5543)) void ITmgInt::Putvi ( const _variant_t & _val );
__declspec(implementation_key(5544)) int ITmgInt::GetID ( );
__declspec(implementation_key(5545)) void ITmgInt::PutID ( int _val );
__declspec(implementation_key(5546)) int ITmgInt::GetsetID ( );
__declspec(implementation_key(5547)) void ITmgInt::PutsetID ( int _val );
__declspec(implementation_key(5548)) int ITmgInt::GetActive ( );
__declspec(implementation_key(5549)) void ITmgInt::PutActive ( int _val );
__declspec(implementation_key(5550)) int ITmgOpt::Geti ( int nVectorIndex );
__declspec(implementation_key(5551)) void ITmgOpt::Puti ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5552)) double ITmgOpt::Getr ( int nVectorIndex );
__declspec(implementation_key(5553)) void ITmgOpt::Putr ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5554)) int ITmgOpt::Getc ( int nVectorIndex );
__declspec(implementation_key(5555)) void ITmgOpt::Putc ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5556)) enum zReturnCode ITmgOpt::GetAll ( int entID, VARIANT * i, VARIANT * r, VARIANT * c );
__declspec(implementation_key(5557)) enum zReturnCode ITmgOpt::PutAll ( int entID, const _variant_t & i, const _variant_t & r, const _variant_t & c );
__declspec(implementation_key(5558)) enum zReturnCode ITmgOpt::NextSet ( );
__declspec(implementation_key(5559)) enum zReturnCode ITmgOpt::PrevSet ( );
__declspec(implementation_key(5560)) enum zReturnCode ITmgOpt::NextEmptySet ( );
__declspec(implementation_key(5561)) enum zReturnCode ITmgOpt::PrevEmptySet ( );
__declspec(implementation_key(5562)) enum zReturnCode ITmgOpt::Get ( int ID );
__declspec(implementation_key(5563)) enum zReturnCode ITmgOpt::Put ( int ID );
__declspec(implementation_key(5564)) enum zReturnCode ITmgOpt::Exist ( int ID );
__declspec(implementation_key(5565)) enum zReturnCode ITmgOpt::Deletable ( int ID );
__declspec(implementation_key(5566)) enum zReturnCode ITmgOpt::Delete ( int ID );
__declspec(implementation_key(5567)) enum zReturnCode ITmgOpt::Reset ( );
__declspec(implementation_key(5568)) enum zReturnCode ITmgOpt::Next ( );
__declspec(implementation_key(5569)) enum zReturnCode ITmgOpt::Prev ( );
__declspec(implementation_key(5570)) enum zReturnCode ITmgOpt::First ( );
__declspec(implementation_key(5571)) enum zReturnCode ITmgOpt::Last ( );
__declspec(implementation_key(5572)) int ITmgOpt::NextID ( );
__declspec(implementation_key(5573)) int ITmgOpt::PrevID ( );
__declspec(implementation_key(5574)) int ITmgOpt::NextEmptyID ( );
__declspec(implementation_key(5575)) int ITmgOpt::PrevEmptyID ( );
__declspec(implementation_key(5576)) enum zReturnCode ITmgOpt::GetLibrary ( int ID );
__declspec(implementation_key(5577)) enum zReturnCode ITmgOpt::PutLibrary ( );
__declspec(implementation_key(5578)) enum zReturnCode ITmgOpt::DeleteLibrary ( int ID );
__declspec(implementation_key(5579)) enum zReturnCode ITmgOpt::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5580)) enum zReturnCode ITmgOpt::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5581)) int ITmgOpt::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(5582)) enum zReturnCode ITmgOpt::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(5583)) enum zReturnCode ITmgOpt::NextInSet ( int nSetID );
__declspec(implementation_key(5584)) enum zReturnCode ITmgOpt::FirstInSet ( int nSetID );
__declspec(implementation_key(5585)) int ITmgOpt::CountSet ( );
__declspec(implementation_key(5586)) enum zReturnCode ITmgOpt::NextExistingInSet ( int nSetID );
__declspec(implementation_key(5587)) enum zReturnCode ITmgOpt::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(5588)) _variant_t ITmgOpt::Getvi ( );
__declspec(implementation_key(5589)) void ITmgOpt::Putvi ( const _variant_t & _val );
__declspec(implementation_key(5590)) _variant_t ITmgOpt::Getvr ( );
__declspec(implementation_key(5591)) void ITmgOpt::Putvr ( const _variant_t & _val );
__declspec(implementation_key(5592)) _variant_t ITmgOpt::Getvc ( );
__declspec(implementation_key(5593)) void ITmgOpt::Putvc ( const _variant_t & _val );
__declspec(implementation_key(5594)) int ITmgOpt::GetID ( );
__declspec(implementation_key(5595)) void ITmgOpt::PutID ( int _val );
__declspec(implementation_key(5596)) int ITmgOpt::GetsetID ( );
__declspec(implementation_key(5597)) void ITmgOpt::PutsetID ( int _val );
__declspec(implementation_key(5598)) int ITmgOpt::GetActive ( );
__declspec(implementation_key(5599)) void ITmgOpt::PutActive ( int _val );
__declspec(implementation_key(5600)) int ITmgReal::Geti ( int nVectorIndex );
__declspec(implementation_key(5601)) void ITmgReal::Puti ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5602)) double ITmgReal::Getr ( int nVectorIndex );
__declspec(implementation_key(5603)) void ITmgReal::Putr ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5604)) enum zReturnCode ITmgReal::GetAll ( int entID, VARIANT * i, VARIANT * r );
__declspec(implementation_key(5605)) enum zReturnCode ITmgReal::PutAll ( int entID, const _variant_t & i, const _variant_t & r );
__declspec(implementation_key(5606)) enum zReturnCode ITmgReal::NextSet ( );
__declspec(implementation_key(5607)) enum zReturnCode ITmgReal::PrevSet ( );
__declspec(implementation_key(5608)) enum zReturnCode ITmgReal::NextEmptySet ( );
__declspec(implementation_key(5609)) enum zReturnCode ITmgReal::PrevEmptySet ( );
__declspec(implementation_key(5610)) enum zReturnCode ITmgReal::Get ( int ID );
__declspec(implementation_key(5611)) enum zReturnCode ITmgReal::Put ( int ID );
__declspec(implementation_key(5612)) enum zReturnCode ITmgReal::Exist ( int ID );
__declspec(implementation_key(5613)) enum zReturnCode ITmgReal::Deletable ( int ID );
__declspec(implementation_key(5614)) enum zReturnCode ITmgReal::Delete ( int ID );
__declspec(implementation_key(5615)) enum zReturnCode ITmgReal::Reset ( );
__declspec(implementation_key(5616)) enum zReturnCode ITmgReal::Next ( );
__declspec(implementation_key(5617)) enum zReturnCode ITmgReal::Prev ( );
__declspec(implementation_key(5618)) enum zReturnCode ITmgReal::First ( );
__declspec(implementation_key(5619)) enum zReturnCode ITmgReal::Last ( );
__declspec(implementation_key(5620)) int ITmgReal::NextID ( );
__declspec(implementation_key(5621)) int ITmgReal::PrevID ( );
__declspec(implementation_key(5622)) int ITmgReal::NextEmptyID ( );
__declspec(implementation_key(5623)) int ITmgReal::PrevEmptyID ( );
__declspec(implementation_key(5624)) enum zReturnCode ITmgReal::GetLibrary ( int ID );
__declspec(implementation_key(5625)) enum zReturnCode ITmgReal::PutLibrary ( );
__declspec(implementation_key(5626)) enum zReturnCode ITmgReal::DeleteLibrary ( int ID );
__declspec(implementation_key(5627)) enum zReturnCode ITmgReal::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5628)) enum zReturnCode ITmgReal::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5629)) int ITmgReal::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(5630)) enum zReturnCode ITmgReal::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(5631)) enum zReturnCode ITmgReal::NextInSet ( int nSetID );
__declspec(implementation_key(5632)) enum zReturnCode ITmgReal::FirstInSet ( int nSetID );
__declspec(implementation_key(5633)) int ITmgReal::CountSet ( );
__declspec(implementation_key(5634)) enum zReturnCode ITmgReal::NextExistingInSet ( int nSetID );
__declspec(implementation_key(5635)) enum zReturnCode ITmgReal::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(5636)) _variant_t ITmgReal::Getvi ( );
__declspec(implementation_key(5637)) void ITmgReal::Putvi ( const _variant_t & _val );
__declspec(implementation_key(5638)) _variant_t ITmgReal::Getvr ( );
__declspec(implementation_key(5639)) void ITmgReal::Putvr ( const _variant_t & _val );
__declspec(implementation_key(5640)) int ITmgReal::GetID ( );
__declspec(implementation_key(5641)) void ITmgReal::PutID ( int _val );
__declspec(implementation_key(5642)) int ITmgReal::GetsetID ( );
__declspec(implementation_key(5643)) void ITmgReal::PutsetID ( int _val );
__declspec(implementation_key(5644)) int ITmgReal::GetActive ( );
__declspec(implementation_key(5645)) void ITmgReal::PutActive ( int _val );
__declspec(implementation_key(5646)) int IVar::GetVarID ( _bstr_t varname );
__declspec(implementation_key(5647)) double IVar::Evaluate ( );
__declspec(implementation_key(5648)) enum zReturnCode IVar::Put ( int entID );
__declspec(implementation_key(5649)) enum zReturnCode IVar::Define ( _bstr_t varname, _bstr_t Equation );
__declspec(implementation_key(5650)) enum zReturnCode IVar::DefineReal ( _bstr_t varname, double value );
__declspec(implementation_key(5651)) enum zReturnCode IVar::NextSet ( );
__declspec(implementation_key(5652)) enum zReturnCode IVar::PrevSet ( );
__declspec(implementation_key(5653)) enum zReturnCode IVar::NextEmptySet ( );
__declspec(implementation_key(5654)) enum zReturnCode IVar::PrevEmptySet ( );
__declspec(implementation_key(5655)) enum zReturnCode IVar::Get ( int ID );
__declspec(implementation_key(5656)) enum zReturnCode IVar::Exist ( int ID );
__declspec(implementation_key(5657)) enum zReturnCode IVar::Deletable ( int ID );
__declspec(implementation_key(5658)) enum zReturnCode IVar::Delete ( int ID );
__declspec(implementation_key(5659)) enum zReturnCode IVar::Reset ( );
__declspec(implementation_key(5660)) enum zReturnCode IVar::Next ( );
__declspec(implementation_key(5661)) enum zReturnCode IVar::Prev ( );
__declspec(implementation_key(5662)) enum zReturnCode IVar::First ( );
__declspec(implementation_key(5663)) enum zReturnCode IVar::Last ( );
__declspec(implementation_key(5664)) int IVar::NextID ( );
__declspec(implementation_key(5665)) int IVar::PrevID ( );
__declspec(implementation_key(5666)) int IVar::NextEmptyID ( );
__declspec(implementation_key(5667)) int IVar::PrevEmptyID ( );
__declspec(implementation_key(5668)) enum zReturnCode IVar::GetLibrary ( int ID );
__declspec(implementation_key(5669)) enum zReturnCode IVar::PutLibrary ( );
__declspec(implementation_key(5670)) enum zReturnCode IVar::DeleteLibrary ( int ID );
__declspec(implementation_key(5671)) enum zReturnCode IVar::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5672)) enum zReturnCode IVar::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5673)) int IVar::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(5674)) enum zReturnCode IVar::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(5675)) enum zReturnCode IVar::NextInSet ( int nSetID );
__declspec(implementation_key(5676)) enum zReturnCode IVar::FirstInSet ( int nSetID );
__declspec(implementation_key(5677)) int IVar::CountSet ( );
__declspec(implementation_key(5678)) enum zReturnCode IVar::NextExistingInSet ( int nSetID );
__declspec(implementation_key(5679)) enum zReturnCode IVar::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(5680)) double IVar::Getvalue ( );
__declspec(implementation_key(5681)) void IVar::Putvalue ( double _val );
__declspec(implementation_key(5682)) _bstr_t IVar::Getvarname ( );
__declspec(implementation_key(5683)) void IVar::Putvarname ( _bstr_t _val );
__declspec(implementation_key(5684)) _bstr_t IVar::GetEquation ( );
__declspec(implementation_key(5685)) void IVar::PutEquation ( _bstr_t _val );
__declspec(implementation_key(5686)) int IVar::GetID ( );
__declspec(implementation_key(5687)) void IVar::PutID ( int _val );
__declspec(implementation_key(5688)) int IVar::GetsetID ( );
__declspec(implementation_key(5689)) void IVar::PutsetID ( int _val );
__declspec(implementation_key(5690)) int IVar::GetActive ( );
__declspec(implementation_key(5691)) void IVar::PutActive ( int _val );
__declspec(implementation_key(5692)) double IView::Getrotation ( int nVectorIndex );
__declspec(implementation_key(5693)) void IView::Putrotation ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5694)) double IView::Getcenter ( int nVectorIndex );
__declspec(implementation_key(5695)) void IView::Putcenter ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5696)) int IView::GetXYOutputSet ( int nVectorIndex );
__declspec(implementation_key(5697)) void IView::PutXYOutputSet ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5698)) int IView::GetXYOutputData ( int nVectorIndex );
__declspec(implementation_key(5699)) void IView::PutXYOutputData ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5700)) int IView::GetXYOutputEntity ( int nVectorIndex );
__declspec(implementation_key(5701)) void IView::PutXYOutputEntity ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5702)) double IView::GetLight ( int nVectorIndex );
__declspec(implementation_key(5703)) void IView::PutLight ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5704)) double IView::GetAxisLocation ( int nVectorIndex );
__declspec(implementation_key(5705)) void IView::PutAxisLocation ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5706)) int IView::GetUserContourLevel ( int nVectorIndex );
__declspec(implementation_key(5707)) void IView::PutUserContourLevel ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5708)) double IView::GetUserContourValue ( int nVectorIndex );
__declspec(implementation_key(5709)) void IView::PutUserContourValue ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5710)) enum zColor IView::GetContourColor ( int nVectorIndex );
__declspec(implementation_key(5711)) void IView::PutContourColor ( int nVectorIndex, enum zColor _arg2 );
__declspec(implementation_key(5712)) double IView::GetXYScale ( int nVectorIndex );
__declspec(implementation_key(5713)) void IView::PutXYScale ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5714)) int IView::GetColorMode ( enum zViewOptions nVectorIndex );
__declspec(implementation_key(5715)) void IView::PutColorMode ( enum zViewOptions nVectorIndex, int _arg2 );
__declspec(implementation_key(5716)) enum zColor IView::Getcolor ( enum zViewOptions nVectorIndex );
__declspec(implementation_key(5717)) void IView::Putcolor ( enum zViewOptions nVectorIndex, enum zColor _arg2 );
__declspec(implementation_key(5718)) VARIANT_BOOL IView::GetDraw ( enum zViewOptions nVectorIndex );
__declspec(implementation_key(5719)) void IView::PutDraw ( enum zViewOptions nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(5720)) int IView::GetLabel ( enum zViewOptions nVectorIndex );
__declspec(implementation_key(5721)) void IView::PutLabel ( enum zViewOptions nVectorIndex, int _arg2 );
__declspec(implementation_key(5722)) double IView::GetPrevCenter ( int nVectorIndex );
__declspec(implementation_key(5723)) void IView::PutPrevCenter ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5724)) double IView::GetSectionBase ( int nVectorIndex );
__declspec(implementation_key(5725)) void IView::PutSectionBase ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5726)) double IView::GetSectionNormal ( int nVectorIndex );
__declspec(implementation_key(5727)) void IView::PutSectionNormal ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5728)) double IView::GetSection2Base ( int nVectorIndex );
__declspec(implementation_key(5729)) void IView::PutSection2Base ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5730)) double IView::GetSection2Normal ( int nVectorIndex );
__declspec(implementation_key(5731)) void IView::PutSection2Normal ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5732)) double IView::GetSection3Base ( int nVectorIndex );
__declspec(implementation_key(5733)) void IView::PutSection3Base ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5734)) double IView::GetSection3Normal ( int nVectorIndex );
__declspec(implementation_key(5735)) void IView::PutSection3Normal ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5736)) int IView::GetFunction ( int nVectorIndex );
__declspec(implementation_key(5737)) void IView::PutFunction ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5738)) int IView::GetXYSetRange ( int nVectorIndex );
__declspec(implementation_key(5739)) void IView::PutXYSetRange ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5740)) int IView::GetContourVecID1 ( int nVectorIndex );
__declspec(implementation_key(5741)) void IView::PutContourVecID1 ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5742)) int IView::GetContourVecID2 ( int nVectorIndex );
__declspec(implementation_key(5743)) void IView::PutContourVecID2 ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5744)) int IView::GetContourVecID3 ( int nVectorIndex );
__declspec(implementation_key(5745)) void IView::PutContourVecID3 ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(5746)) double IView::GetContourVecDir ( int nVectorIndex );
__declspec(implementation_key(5747)) void IView::PutContourVecDir ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5748)) double IView::GetSpotlightDir ( int nVectorIndex );
__declspec(implementation_key(5749)) void IView::PutSpotlightDir ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5750)) double IView::GetRotationCenter ( int nVectorIndex );
__declspec(implementation_key(5751)) void IView::PutRotationCenter ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5752)) double IView::GetRotationVector ( int nVectorIndex );
__declspec(implementation_key(5753)) void IView::PutRotationVector ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5754)) double IView::GetLogoLocation ( int nVectorIndex );
__declspec(implementation_key(5755)) void IView::PutLogoLocation ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5756)) double IView::GetStreamLineLocation ( int nVectorIndex );
__declspec(implementation_key(5757)) void IView::PutStreamLineLocation ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5758)) enum zColor IView::GetUserContourPalette ( int nVectorIndex );
__declspec(implementation_key(5759)) void IView::PutUserContourPalette ( int nVectorIndex, enum zColor _arg2 );
__declspec(implementation_key(5760)) double IView::GetPrevRotation ( int nVectorIndex );
__declspec(implementation_key(5761)) void IView::PutPrevRotation ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5762)) double IView::GetTransformPlateVector ( int nVectorIndex );
__declspec(implementation_key(5763)) void IView::PutTransformPlateVector ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5764)) double IView::GetClipPlaneOrigin ( int nVectorIndex );
__declspec(implementation_key(5765)) void IView::PutClipPlaneOrigin ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5766)) double IView::GetClipPlaneNormal ( int nVectorIndex );
__declspec(implementation_key(5767)) void IView::PutClipPlaneNormal ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(5768)) VARIANT_BOOL IView::GetContourVecOn ( int nVectorIndex );
__declspec(implementation_key(5769)) void IView::PutContourVecOn ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(5770)) enum zReturnCode IView::Visible ( VARIANT_BOOL Visible );
__declspec(implementation_key(5771)) enum zReturnCode IView::Redraw ( );
__declspec(implementation_key(5772)) enum zReturnCode IView::Regenerate ( );
__declspec(implementation_key(5773)) enum zReturnCode IView::IsLayerVisible ( int layerID );
__declspec(implementation_key(5774)) enum zReturnCode IView::SetLayerVisible ( int layerID, VARIANT_BOOL Visible );
__declspec(implementation_key(5775)) enum zReturnCode IView::Rotate ( double oX, double oY, double oZ, double dX, double dY, double dZ, double angle );
__declspec(implementation_key(5776)) enum zReturnCode IView::AlignCSys ( int csysID );
__declspec(implementation_key(5777)) enum zReturnCode IView::AlignVector ( double oX, double oY, double oZ, double dX, double dY, double dZ );
__declspec(implementation_key(5778)) enum zReturnCode IView::AlignWorkplane ( );
__declspec(implementation_key(5779)) enum zReturnCode IView::AutoscaleAll ( VARIANT_BOOL redoBox );
__declspec(implementation_key(5780)) enum zReturnCode IView::AutoscaleVisible ( VARIANT_BOOL redoBox );
__declspec(implementation_key(5781)) enum zReturnCode IView::Initialize ( );
__declspec(implementation_key(5782)) enum zReturnCode IView::Align2Vector ( double vZx, double vZy, double vZz, double vXYx, double vXYy, double vXYZ, VARIANT_BOOL bAutoXY );
__declspec(implementation_key(5783)) enum zReturnCode IView::Get ( int entID );
__declspec(implementation_key(5784)) enum zReturnCode IView::Put ( int entID );
__declspec(implementation_key(5785)) enum zReturnCode IView::GetMultiGroupList ( int * nGroup, VARIANT * nGroupID );
__declspec(implementation_key(5786)) enum zReturnCode IView::SetMultiGroupList ( VARIANT_BOOL bClear, int nGroups, const _variant_t & nGroupID );
__declspec(implementation_key(5787)) enum zReturnCode IView::ClearMultiGroupList ( );
__declspec(implementation_key(5788)) enum zReturnCode IView::SetMultiGroupListFromSets ( VARIANT_BOOL bClear, int nShowSetID, int nHideSetID );
__declspec(implementation_key(5789)) enum zReturnCode IView::NextSet ( );
__declspec(implementation_key(5790)) enum zReturnCode IView::PrevSet ( );
__declspec(implementation_key(5791)) enum zReturnCode IView::NextEmptySet ( );
__declspec(implementation_key(5792)) enum zReturnCode IView::PrevEmptySet ( );
__declspec(implementation_key(5793)) enum zReturnCode IView::Exist ( int ID );
__declspec(implementation_key(5794)) enum zReturnCode IView::Deletable ( int ID );
__declspec(implementation_key(5795)) enum zReturnCode IView::Delete ( int ID );
__declspec(implementation_key(5796)) enum zReturnCode IView::Reset ( );
__declspec(implementation_key(5797)) enum zReturnCode IView::Next ( );
__declspec(implementation_key(5798)) enum zReturnCode IView::Prev ( );
__declspec(implementation_key(5799)) enum zReturnCode IView::First ( );
__declspec(implementation_key(5800)) enum zReturnCode IView::Last ( );
__declspec(implementation_key(5801)) int IView::NextID ( );
__declspec(implementation_key(5802)) int IView::PrevID ( );
__declspec(implementation_key(5803)) int IView::NextEmptyID ( );
__declspec(implementation_key(5804)) int IView::PrevEmptyID ( );
__declspec(implementation_key(5805)) enum zReturnCode IView::GetLibrary ( int ID );
__declspec(implementation_key(5806)) enum zReturnCode IView::PutLibrary ( );
__declspec(implementation_key(5807)) enum zReturnCode IView::DeleteLibrary ( int ID );
__declspec(implementation_key(5808)) enum zReturnCode IView::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5809)) enum zReturnCode IView::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(5810)) int IView::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(5811)) enum zReturnCode IView::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(5812)) enum zReturnCode IView::NextInSet ( int nSetID );
__declspec(implementation_key(5813)) enum zReturnCode IView::FirstInSet ( int nSetID );
__declspec(implementation_key(5814)) int IView::CountSet ( );
__declspec(implementation_key(5815)) enum zReturnCode IView::NextExistingInSet ( int nSetID );
__declspec(implementation_key(5816)) enum zReturnCode IView::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(5817)) enum zViewMode IView::GetMode ( );
__declspec(implementation_key(5818)) void IView::PutMode ( enum zViewMode _val );
__declspec(implementation_key(5819)) enum zDeformedFormat IView::GetDeformed ( );
__declspec(implementation_key(5820)) void IView::PutDeformed ( enum zDeformedFormat _val );
__declspec(implementation_key(5821)) enum zContourFormat IView::GetContour ( );
__declspec(implementation_key(5822)) void IView::PutContour ( enum zContourFormat _val );
__declspec(implementation_key(5823)) double IView::GetMagnification ( );
__declspec(implementation_key(5824)) void IView::PutMagnification ( double _val );
__declspec(implementation_key(5825)) double IView::GetAspect ( );
__declspec(implementation_key(5826)) void IView::PutAspect ( double _val );
__declspec(implementation_key(5827)) VARIANT_BOOL IView::GetWindowTitleBar ( );
__declspec(implementation_key(5828)) void IView::PutWindowTitleBar ( VARIANT_BOOL _val );
__declspec(implementation_key(5829)) int IView::GetWindowBorder ( );
__declspec(implementation_key(5830)) void IView::PutWindowBorder ( int _val );
__declspec(implementation_key(5831)) VARIANT_BOOL IView::GetWindowEraseBack ( );
__declspec(implementation_key(5832)) void IView::PutWindowEraseBack ( VARIANT_BOOL _val );
__declspec(implementation_key(5833)) enum zColor IView::GetWindowBackColor ( );
__declspec(implementation_key(5834)) void IView::PutWindowBackColor ( enum zColor _val );
__declspec(implementation_key(5835)) double IView::GetPrevWindowLeft ( );
__declspec(implementation_key(5836)) void IView::PutPrevWindowLeft ( double _val );
__declspec(implementation_key(5837)) double IView::GetPrevWindowTop ( );
__declspec(implementation_key(5838)) void IView::PutPrevWindowTop ( double _val );
__declspec(implementation_key(5839)) double IView::GetPrevWindowRight ( );
__declspec(implementation_key(5840)) void IView::PutPrevWindowRight ( double _val );
__declspec(implementation_key(5841)) double IView::GetPrevWindowBottom ( );
__declspec(implementation_key(5842)) void IView::PutPrevWindowBottom ( double _val );
__declspec(implementation_key(5843)) double IView::GetPrevWindowXmin ( );
__declspec(implementation_key(5844)) void IView::PutPrevWindowXmin ( double _val );
__declspec(implementation_key(5845)) double IView::GetPrevWindowXmax ( );
__declspec(implementation_key(5846)) void IView::PutPrevWindowXmax ( double _val );
__declspec(implementation_key(5847)) double IView::GetPrevWindowYmin ( );
__declspec(implementation_key(5848)) void IView::PutPrevWindowYmin ( double _val );
__declspec(implementation_key(5849)) double IView::GetPrevWindowYmax ( );
__declspec(implementation_key(5850)) void IView::PutPrevWindowYmax ( double _val );
__declspec(implementation_key(5851)) int IView::GetBC ( );
__declspec(implementation_key(5852)) void IView::PutBC ( int _val );
__declspec(implementation_key(5853)) int IView::Getload ( );
__declspec(implementation_key(5854)) void IView::Putload ( int _val );
__declspec(implementation_key(5855)) int IView::GetGroup ( );
__declspec(implementation_key(5856)) void IView::PutGroup ( int _val );
__declspec(implementation_key(5857)) int IView::GetOutputSet ( );
__declspec(implementation_key(5858)) void IView::PutOutputSet ( int _val );
__declspec(implementation_key(5859)) int IView::GetFinalOutputSet ( );
__declspec(implementation_key(5860)) void IView::PutFinalOutputSet ( int _val );
__declspec(implementation_key(5861)) int IView::GetOutputSetInc ( );
__declspec(implementation_key(5862)) void IView::PutOutputSetInc ( int _val );
__declspec(implementation_key(5863)) int IView::GetDeformData ( );
__declspec(implementation_key(5864)) void IView::PutDeformData ( int _val );
__declspec(implementation_key(5865)) int IView::GetContourData ( );
__declspec(implementation_key(5866)) void IView::PutContourData ( int _val );
__declspec(implementation_key(5867)) double IView::GetPerspectiveDist ( );
__declspec(implementation_key(5868)) void IView::PutPerspectiveDist ( double _val );
__declspec(implementation_key(5869)) double IView::GetInterOccularDist ( );
__declspec(implementation_key(5870)) void IView::PutInterOccularDist ( double _val );
__declspec(implementation_key(5871)) double IView::GetShrinkFactor ( );
__declspec(implementation_key(5872)) void IView::PutShrinkFactor ( double _val );
__declspec(implementation_key(5873)) double IView::GetPerspectiveAngle ( );
__declspec(implementation_key(5874)) void IView::PutPerspectiveAngle ( double _val );
__declspec(implementation_key(5875)) double IView::GetAmbientLight ( );
__declspec(implementation_key(5876)) void IView::PutAmbientLight ( double _val );
__declspec(implementation_key(5877)) double IView::GetArrowsToLabel ( );
__declspec(implementation_key(5878)) void IView::PutArrowsToLabel ( double _val );
__declspec(implementation_key(5879)) double IView::GetDeformedRelScale ( );
__declspec(implementation_key(5880)) void IView::PutDeformedRelScale ( double _val );
__declspec(implementation_key(5881)) double IView::GetDeformedAbsScale ( );
__declspec(implementation_key(5882)) void IView::PutDeformedAbsScale ( double _val );
__declspec(implementation_key(5883)) int IView::GetAnimationFrames ( );
__declspec(implementation_key(5884)) void IView::PutAnimationFrames ( int _val );
__declspec(implementation_key(5885)) int IView::GetAnimationDelay ( );
__declspec(implementation_key(5886)) void IView::PutAnimationDelay ( int _val );
__declspec(implementation_key(5887)) int IView::GetUserContourCount ( );
__declspec(implementation_key(5888)) void IView::PutUserContourCount ( int _val );
__declspec(implementation_key(5889)) int IView::GetContourLabelFreq ( );
__declspec(implementation_key(5890)) void IView::PutContourLabelFreq ( int _val );
__declspec(implementation_key(5891)) int IView::GetContourLegendFreq ( );
__declspec(implementation_key(5892)) void IView::PutContourLegendFreq ( int _val );
__declspec(implementation_key(5893)) double IView::GetCriteriaMax ( );
__declspec(implementation_key(5894)) void IView::PutCriteriaMax ( double _val );
__declspec(implementation_key(5895)) double IView::GetCriteriaMin ( );
__declspec(implementation_key(5896)) void IView::PutCriteriaMin ( double _val );
__declspec(implementation_key(5897)) double IView::GetXYXmin ( );
__declspec(implementation_key(5898)) void IView::PutXYXmin ( double _val );
__declspec(implementation_key(5899)) double IView::GetXYXmax ( );
__declspec(implementation_key(5900)) void IView::PutXYXmax ( double _val );
__declspec(implementation_key(5901)) double IView::GetXYymin ( );
__declspec(implementation_key(5902)) void IView::PutXYymin ( double _val );
__declspec(implementation_key(5903)) double IView::GetXYymax ( );
__declspec(implementation_key(5904)) void IView::PutXYymax ( double _val );
__declspec(implementation_key(5905)) _bstr_t IView::GetXYTitle ( );
__declspec(implementation_key(5906)) void IView::PutXYTitle ( _bstr_t _val );
__declspec(implementation_key(5907)) _bstr_t IView::GetXYSubtitle ( );
__declspec(implementation_key(5908)) void IView::PutXYSubtitle ( _bstr_t _val );
__declspec(implementation_key(5909)) int IView::GetXYCSys ( );
__declspec(implementation_key(5910)) void IView::PutXYCSys ( int _val );
__declspec(implementation_key(5911)) int IView::GetXYDirection ( );
__declspec(implementation_key(5912)) void IView::PutXYDirection ( int _val );
__declspec(implementation_key(5913)) int IView::GetXYXTics ( );
__declspec(implementation_key(5914)) void IView::PutXYXTics ( int _val );
__declspec(implementation_key(5915)) int IView::GetXYYTics ( );
__declspec(implementation_key(5916)) void IView::PutXYYTics ( int _val );
__declspec(implementation_key(5917)) double IView::GetLoadVecLength ( );
__declspec(implementation_key(5918)) void IView::PutLoadVecLength ( double _val );
__declspec(implementation_key(5919)) double IView::GetOtherVecLength ( );
__declspec(implementation_key(5920)) void IView::PutOtherVecLength ( double _val );
__declspec(implementation_key(5921)) double IView::GetPrevMagnification ( );
__declspec(implementation_key(5922)) void IView::PutPrevMagnification ( double _val );
__declspec(implementation_key(5923)) VARIANT_BOOL IView::GetShowAllLayers ( );
__declspec(implementation_key(5924)) void IView::PutShowAllLayers ( VARIANT_BOOL _val );
__declspec(implementation_key(5925)) VARIANT_BOOL IView::GetSectionPlaneMode ( );
__declspec(implementation_key(5926)) void IView::PutSectionPlaneMode ( VARIANT_BOOL _val );
__declspec(implementation_key(5927)) VARIANT_BOOL IView::GetSection1On ( );
__declspec(implementation_key(5928)) void IView::PutSection1On ( VARIANT_BOOL _val );
__declspec(implementation_key(5929)) VARIANT_BOOL IView::GetSection2On ( );
__declspec(implementation_key(5930)) void IView::PutSection2On ( VARIANT_BOOL _val );
__declspec(implementation_key(5931)) VARIANT_BOOL IView::GetSection3On ( );
__declspec(implementation_key(5932)) void IView::PutSection3On ( VARIANT_BOOL _val );
__declspec(implementation_key(5933)) double IView::GetBeamDiagramScale ( );
__declspec(implementation_key(5934)) void IView::PutBeamDiagramScale ( double _val );
__declspec(implementation_key(5935)) double IView::GetSectionSpacing ( );
__declspec(implementation_key(5936)) void IView::PutSectionSpacing ( double _val );
__declspec(implementation_key(5937)) int IView::GetSectionCount ( );
__declspec(implementation_key(5938)) void IView::PutSectionCount ( int _val );
__declspec(implementation_key(5939)) VARIANT_BOOL IView::GetSectionMode ( );
__declspec(implementation_key(5940)) void IView::PutSectionMode ( VARIANT_BOOL _val );
__declspec(implementation_key(5941)) VARIANT_BOOL IView::GetUndefAnimation ( );
__declspec(implementation_key(5942)) void IView::PutUndefAnimation ( VARIANT_BOOL _val );
__declspec(implementation_key(5943)) int IView::GetTraceOpt ( );
__declspec(implementation_key(5944)) void IView::PutTraceOpt ( int _val );
__declspec(implementation_key(5945)) int IView::GetTraceID ( );
__declspec(implementation_key(5946)) void IView::PutTraceID ( int _val );
__declspec(implementation_key(5947)) VARIANT_BOOL IView::GetContourVecHide ( );
__declspec(implementation_key(5948)) void IView::PutContourVecHide ( VARIANT_BOOL _val );
__declspec(implementation_key(5949)) int IView::GetContourVecMode ( );
__declspec(implementation_key(5950)) void IView::PutContourVecMode ( int _val );
__declspec(implementation_key(5951)) int IView::GetContourVecCSys ( );
__declspec(implementation_key(5952)) void IView::PutContourVecCSys ( int _val );
__declspec(implementation_key(5953)) double IView::GetSpotlightDist ( );
__declspec(implementation_key(5954)) void IView::PutSpotlightDist ( double _val );
__declspec(implementation_key(5955)) int IView::GetContourLabelDigits ( );
__declspec(implementation_key(5956)) void IView::PutContourLabelDigits ( int _val );
__declspec(implementation_key(5957)) int IView::GetContourLegendDigits ( );
__declspec(implementation_key(5958)) void IView::PutContourLegendDigits ( int _val );
__declspec(implementation_key(5959)) double IView::GetIsosurfaceValue ( );
__declspec(implementation_key(5960)) void IView::PutIsosurfaceValue ( double _val );
__declspec(implementation_key(5961)) double IView::GetLoadVectorMinScale ( );
__declspec(implementation_key(5962)) void IView::PutLoadVectorMinScale ( double _val );
__declspec(implementation_key(5963)) double IView::GetRenderPushForward ( );
__declspec(implementation_key(5964)) void IView::PutRenderPushForward ( double _val );
__declspec(implementation_key(5965)) enum zColor IView::GetContourVecColor2 ( );
__declspec(implementation_key(5966)) void IView::PutContourVecColor2 ( enum zColor _val );
__declspec(implementation_key(5967)) enum zColor IView::GetContourVecColor3 ( );
__declspec(implementation_key(5968)) void IView::PutContourVecColor3 ( enum zColor _val );
__declspec(implementation_key(5969)) VARIANT_BOOL IView::GetFreebodyShowSum ( );
__declspec(implementation_key(5970)) void IView::PutFreebodyShowSum ( VARIANT_BOOL _val );
__declspec(implementation_key(5971)) VARIANT_BOOL IView::GetFreebodyMinVecFlag ( );
__declspec(implementation_key(5972)) void IView::PutFreebodyMinVecFlag ( VARIANT_BOOL _val );
__declspec(implementation_key(5973)) double IView::GetFreebodyShowMag ( );
__declspec(implementation_key(5974)) void IView::PutFreebodyShowMag ( double _val );
__declspec(implementation_key(5975)) int IView::GetContourVecAddl ( );
__declspec(implementation_key(5976)) void IView::PutContourVecAddl ( int _val );
__declspec(implementation_key(5977)) VARIANT_BOOL IView::GetContourElemUnaveraged ( );
__declspec(implementation_key(5978)) void IView::PutContourElemUnaveraged ( VARIANT_BOOL _val );
__declspec(implementation_key(5979)) VARIANT_BOOL IView::GetContourElemBreakProp ( );
__declspec(implementation_key(5980)) void IView::PutContourElemBreakProp ( VARIANT_BOOL _val );
__declspec(implementation_key(5981)) VARIANT_BOOL IView::GetContourElemBreakMatl ( );
__declspec(implementation_key(5982)) void IView::PutContourElemBreakMatl ( VARIANT_BOOL _val );
__declspec(implementation_key(5983)) VARIANT_BOOL IView::GetContourElemBreakLayer ( );
__declspec(implementation_key(5984)) void IView::PutContourElemBreakLayer ( VARIANT_BOOL _val );
__declspec(implementation_key(5985)) VARIANT_BOOL IView::GetContourElemBreakColor ( );
__declspec(implementation_key(5986)) void IView::PutContourElemBreakColor ( VARIANT_BOOL _val );
__declspec(implementation_key(5987)) VARIANT_BOOL IView::GetContourElemBreakGeom ( );
__declspec(implementation_key(5988)) void IView::PutContourElemBreakGeom ( VARIANT_BOOL _val );
__declspec(implementation_key(5989)) double IView::GetContourElemBreakAngle ( );
__declspec(implementation_key(5990)) void IView::PutContourElemBreakAngle ( double _val );
__declspec(implementation_key(5991)) VARIANT_BOOL IView::GetRotationCenterOn ( );
__declspec(implementation_key(5992)) void IView::PutRotationCenterOn ( VARIANT_BOOL _val );
__declspec(implementation_key(5993)) _bstr_t IView::Gettitle ( );
__declspec(implementation_key(5994)) void IView::Puttitle ( _bstr_t _val );
__declspec(implementation_key(5995)) enum zColor IView::GetWindowBackColor2 ( );
__declspec(implementation_key(5996)) void IView::PutWindowBackColor2 ( enum zColor _val );
__declspec(implementation_key(5997)) VARIANT_BOOL IView::GetWindowShadeBack ( );
__declspec(implementation_key(5998)) void IView::PutWindowShadeBack ( VARIANT_BOOL _val );
__declspec(implementation_key(5999)) _variant_t IView::GetvRotation ( );
__declspec(implementation_key(6000)) void IView::PutvRotation ( const _variant_t & _val );
__declspec(implementation_key(6001)) _variant_t IView::GetvCenter ( );
__declspec(implementation_key(6002)) void IView::PutvCenter ( const _variant_t & _val );
__declspec(implementation_key(6003)) _variant_t IView::GetvXYOutputSet ( );
__declspec(implementation_key(6004)) void IView::PutvXYOutputSet ( const _variant_t & _val );
__declspec(implementation_key(6005)) _variant_t IView::GetvXYOutputData ( );
__declspec(implementation_key(6006)) void IView::PutvXYOutputData ( const _variant_t & _val );
__declspec(implementation_key(6007)) _variant_t IView::GetvXYOutputEntity ( );
__declspec(implementation_key(6008)) void IView::PutvXYOutputEntity ( const _variant_t & _val );
__declspec(implementation_key(6009)) _variant_t IView::GetvLight ( );
__declspec(implementation_key(6010)) void IView::PutvLight ( const _variant_t & _val );
__declspec(implementation_key(6011)) _variant_t IView::GetvAxisLocation ( );
__declspec(implementation_key(6012)) void IView::PutvAxisLocation ( const _variant_t & _val );
__declspec(implementation_key(6013)) _variant_t IView::GetvUserContourLevel ( );
__declspec(implementation_key(6014)) void IView::PutvUserContourLevel ( const _variant_t & _val );
__declspec(implementation_key(6015)) _variant_t IView::GetvUserContourValue ( );
__declspec(implementation_key(6016)) void IView::PutvUserContourValue ( const _variant_t & _val );
__declspec(implementation_key(6017)) _variant_t IView::GetvContourColor ( );
__declspec(implementation_key(6018)) void IView::PutvContourColor ( const _variant_t & _val );
__declspec(implementation_key(6019)) _variant_t IView::GetvXYScale ( );
__declspec(implementation_key(6020)) void IView::PutvXYScale ( const _variant_t & _val );
__declspec(implementation_key(6021)) _variant_t IView::GetvColorMode ( );
__declspec(implementation_key(6022)) void IView::PutvColorMode ( const _variant_t & _val );
__declspec(implementation_key(6023)) _variant_t IView::GetvColor ( );
__declspec(implementation_key(6024)) void IView::PutvColor ( const _variant_t & _val );
__declspec(implementation_key(6025)) _variant_t IView::GetvDraw ( );
__declspec(implementation_key(6026)) void IView::PutvDraw ( const _variant_t & _val );
__declspec(implementation_key(6027)) _variant_t IView::GetvLabel ( );
__declspec(implementation_key(6028)) void IView::PutvLabel ( const _variant_t & _val );
__declspec(implementation_key(6029)) _variant_t IView::GetvPrevCenter ( );
__declspec(implementation_key(6030)) void IView::PutvPrevCenter ( const _variant_t & _val );
__declspec(implementation_key(6031)) _variant_t IView::GetvSectionBase ( );
__declspec(implementation_key(6032)) void IView::PutvSectionBase ( const _variant_t & _val );
__declspec(implementation_key(6033)) _variant_t IView::GetvSectionNormal ( );
__declspec(implementation_key(6034)) void IView::PutvSectionNormal ( const _variant_t & _val );
__declspec(implementation_key(6035)) _variant_t IView::GetvSection2Base ( );
__declspec(implementation_key(6036)) void IView::PutvSection2Base ( const _variant_t & _val );
__declspec(implementation_key(6037)) _variant_t IView::GetvSection2Normal ( );
__declspec(implementation_key(6038)) void IView::PutvSection2Normal ( const _variant_t & _val );
__declspec(implementation_key(6039)) _variant_t IView::GetvSection3Base ( );
__declspec(implementation_key(6040)) void IView::PutvSection3Base ( const _variant_t & _val );
__declspec(implementation_key(6041)) _variant_t IView::GetvSection3Normal ( );
__declspec(implementation_key(6042)) void IView::PutvSection3Normal ( const _variant_t & _val );
__declspec(implementation_key(6043)) _variant_t IView::Getvfunction ( );
__declspec(implementation_key(6044)) void IView::Putvfunction ( const _variant_t & _val );
__declspec(implementation_key(6045)) _variant_t IView::GetvXYSetRange ( );
__declspec(implementation_key(6046)) void IView::PutvXYSetRange ( const _variant_t & _val );
__declspec(implementation_key(6047)) _variant_t IView::GetvContourVecID1 ( );
__declspec(implementation_key(6048)) void IView::PutvContourVecID1 ( const _variant_t & _val );
__declspec(implementation_key(6049)) _variant_t IView::GetvContourVecID2 ( );
__declspec(implementation_key(6050)) void IView::PutvContourVecID2 ( const _variant_t & _val );
__declspec(implementation_key(6051)) _variant_t IView::GetvContourVecID3 ( );
__declspec(implementation_key(6052)) void IView::PutvContourVecID3 ( const _variant_t & _val );
__declspec(implementation_key(6053)) _variant_t IView::GetvContourVecDir ( );
__declspec(implementation_key(6054)) void IView::PutvContourVecDir ( const _variant_t & _val );
__declspec(implementation_key(6055)) _variant_t IView::GetvSpotlightDir ( );
__declspec(implementation_key(6056)) void IView::PutvSpotlightDir ( const _variant_t & _val );
__declspec(implementation_key(6057)) _variant_t IView::GetvRotationCenter ( );
__declspec(implementation_key(6058)) void IView::PutvRotationCenter ( const _variant_t & _val );
__declspec(implementation_key(6059)) _variant_t IView::GetvRotationVector ( );
__declspec(implementation_key(6060)) void IView::PutvRotationVector ( const _variant_t & _val );
__declspec(implementation_key(6061)) enum zColor IView::GetWindowBackColor3 ( );
__declspec(implementation_key(6062)) void IView::PutWindowBackColor3 ( enum zColor _val );
__declspec(implementation_key(6063)) int IView::GetWindowShadeBackOpt ( );
__declspec(implementation_key(6064)) void IView::PutWindowShadeBackOpt ( int _val );
__declspec(implementation_key(6065)) int IView::GetWindowShadeHorizon ( );
__declspec(implementation_key(6066)) void IView::PutWindowShadeHorizon ( int _val );
__declspec(implementation_key(6067)) VARIANT_BOOL IView::GetWindowLogo ( );
__declspec(implementation_key(6068)) void IView::PutWindowLogo ( VARIANT_BOOL _val );
__declspec(implementation_key(6069)) _variant_t IView::GetvLogoLocation ( );
__declspec(implementation_key(6070)) void IView::PutvLogoLocation ( const _variant_t & _val );
__declspec(implementation_key(6071)) double IView::GetRenderPushUnit ( );
__declspec(implementation_key(6072)) void IView::PutRenderPushUnit ( double _val );
__declspec(implementation_key(6073)) double IView::GetRenderPushUndeformed ( );
__declspec(implementation_key(6074)) void IView::PutRenderPushUndeformed ( double _val );
__declspec(implementation_key(6075)) int IView::GetRenderPushLabel ( );
__declspec(implementation_key(6076)) void IView::PutRenderPushLabel ( int _val );
__declspec(implementation_key(6077)) int IView::GetStreamLineOpt ( );
__declspec(implementation_key(6078)) void IView::PutStreamLineOpt ( int _val );
__declspec(implementation_key(6079)) int IView::GetStreamLineID ( );
__declspec(implementation_key(6080)) void IView::PutStreamLineID ( int _val );
__declspec(implementation_key(6081)) int IView::GetStreamLineRungeKuttaOrder ( );
__declspec(implementation_key(6082)) void IView::PutStreamLineRungeKuttaOrder ( int _val );
__declspec(implementation_key(6083)) double IView::GetStreamLineTolerance ( );
__declspec(implementation_key(6084)) void IView::PutStreamLineTolerance ( double _val );
__declspec(implementation_key(6085)) double IView::GetStreamLineMaxLenFactor ( );
__declspec(implementation_key(6086)) void IView::PutStreamLineMaxLenFactor ( double _val );
__declspec(implementation_key(6087)) double IView::GetStreamLineMinSpeedPct ( );
__declspec(implementation_key(6088)) void IView::PutStreamLineMinSpeedPct ( double _val );
__declspec(implementation_key(6089)) double IView::GetStreamLineMaxTime ( );
__declspec(implementation_key(6090)) void IView::PutStreamLineMaxTime ( double _val );
__declspec(implementation_key(6091)) _variant_t IView::GetvStreamLineLocation ( );
__declspec(implementation_key(6092)) void IView::PutvStreamLineLocation ( const _variant_t & _val );
__declspec(implementation_key(6093)) double IView::GetContourLegendShrinkPct ( );
__declspec(implementation_key(6094)) void IView::PutContourLegendShrinkPct ( double _val );
__declspec(implementation_key(6095)) int IView::GetTransparencyPercent ( );
__declspec(implementation_key(6096)) void IView::PutTransparencyPercent ( int _val );
__declspec(implementation_key(6097)) VARIANT_BOOL IView::GetRotateAroundModelAxes ( );
__declspec(implementation_key(6098)) void IView::PutRotateAroundModelAxes ( VARIANT_BOOL _val );
__declspec(implementation_key(6099)) VARIANT_BOOL IView::GetRotateSingleAxis ( );
__declspec(implementation_key(6100)) void IView::PutRotateSingleAxis ( VARIANT_BOOL _val );
__declspec(implementation_key(6101)) VARIANT_BOOL IView::GetRotateUseAxis ( );
__declspec(implementation_key(6102)) void IView::PutRotateUseAxis ( VARIANT_BOOL _val );
__declspec(implementation_key(6103)) int IView::GetContourGroup ( );
__declspec(implementation_key(6104)) void IView::PutContourGroup ( int _val );
__declspec(implementation_key(6105)) _variant_t IView::GetvUserContourPalette ( );
__declspec(implementation_key(6106)) void IView::PutvUserContourPalette ( const _variant_t & _val );
__declspec(implementation_key(6107)) int IView::GetMaxUserContourPalette ( );
__declspec(implementation_key(6108)) void IView::PutMaxUserContourPalette ( int _val );
__declspec(implementation_key(6109)) _variant_t IView::GetvPrevRotation ( );
__declspec(implementation_key(6110)) void IView::PutvPrevRotation ( const _variant_t & _val );
__declspec(implementation_key(6111)) int IView::GetRotateCSys ( );
__declspec(implementation_key(6112)) void IView::PutRotateCSys ( int _val );
__declspec(implementation_key(6113)) enum zOutputDestination IView::GetTransformDeformMode ( );
__declspec(implementation_key(6114)) void IView::PutTransformDeformMode ( enum zOutputDestination _val );
__declspec(implementation_key(6115)) int IView::GetTransformDeformCSys ( );
__declspec(implementation_key(6116)) void IView::PutTransformDeformCSys ( int _val );
__declspec(implementation_key(6117)) VARIANT_BOOL IView::GetTransformDeformX ( );
__declspec(implementation_key(6118)) void IView::PutTransformDeformX ( VARIANT_BOOL _val );
__declspec(implementation_key(6119)) VARIANT_BOOL IView::GetTransformDeformY ( );
__declspec(implementation_key(6120)) void IView::PutTransformDeformY ( VARIANT_BOOL _val );
__declspec(implementation_key(6121)) VARIANT_BOOL IView::GetTransformDeformZ ( );
__declspec(implementation_key(6122)) void IView::PutTransformDeformZ ( VARIANT_BOOL _val );
__declspec(implementation_key(6123)) enum zOutputDestination IView::GetTransformNodalMode ( );
__declspec(implementation_key(6124)) void IView::PutTransformNodalMode ( enum zOutputDestination _val );
__declspec(implementation_key(6125)) int IView::GetTransformNodalCSys ( );
__declspec(implementation_key(6126)) void IView::PutTransformNodalCSys ( int _val );
__declspec(implementation_key(6127)) enum zOutputDestination IView::GetTransformPlateMode ( );
__declspec(implementation_key(6128)) void IView::PutTransformPlateMode ( enum zOutputDestination _val );
__declspec(implementation_key(6129)) int IView::GetTransformPlateCSys ( );
__declspec(implementation_key(6130)) void IView::PutTransformPlateCSys ( int _val );
__declspec(implementation_key(6131)) int IView::GetTransformPlateDOF ( );
__declspec(implementation_key(6132)) void IView::PutTransformPlateDOF ( int _val );
__declspec(implementation_key(6133)) _variant_t IView::GetvTransformPlateVector ( );
__declspec(implementation_key(6134)) void IView::PutvTransformPlateVector ( const _variant_t & _val );
__declspec(implementation_key(6135)) enum zOutputDestination IView::GetTransformSolidMode ( );
__declspec(implementation_key(6136)) void IView::PutTransformSolidMode ( enum zOutputDestination _val );
__declspec(implementation_key(6137)) int IView::GetTransformSolidCSys ( );
__declspec(implementation_key(6138)) void IView::PutTransformSolidCSys ( int _val );
__declspec(implementation_key(6139)) int IView::GetGlobalPlyLocation ( );
__declspec(implementation_key(6140)) void IView::PutGlobalPlyLocation ( int _val );
__declspec(implementation_key(6141)) int IView::GetContourVecDigits ( );
__declspec(implementation_key(6142)) void IView::PutContourVecDigits ( int _val );
__declspec(implementation_key(6143)) double IView::GetContourVecLength ( );
__declspec(implementation_key(6144)) void IView::PutContourVecLength ( double _val );
__declspec(implementation_key(6145)) int IView::GetDeformRelativeToNode ( );
__declspec(implementation_key(6146)) void IView::PutDeformRelativeToNode ( int _val );
__declspec(implementation_key(6147)) _variant_t IView::GetvClipPlaneOrigin ( );
__declspec(implementation_key(6148)) void IView::PutvClipPlaneOrigin ( const _variant_t & _val );
__declspec(implementation_key(6149)) _variant_t IView::GetvClipPlaneNormal ( );
__declspec(implementation_key(6150)) void IView::PutvClipPlaneNormal ( const _variant_t & _val );
__declspec(implementation_key(6151)) int IView::GetFreebodyDigits ( );
__declspec(implementation_key(6152)) void IView::PutFreebodyDigits ( int _val );
__declspec(implementation_key(6153)) double IView::GetFreebodyLength ( );
__declspec(implementation_key(6154)) void IView::PutFreebodyLength ( double _val );
__declspec(implementation_key(6155)) double IView::GetFreebodyTotalForceFactor ( );
__declspec(implementation_key(6156)) void IView::PutFreebodyTotalForceFactor ( double _val );
__declspec(implementation_key(6157)) double IView::GetFreebodyTotalMomentFactor ( );
__declspec(implementation_key(6158)) void IView::PutFreebodyTotalMomentFactor ( double _val );
__declspec(implementation_key(6159)) double IView::GetFreebodyNodalForceFactor ( );
__declspec(implementation_key(6160)) void IView::PutFreebodyNodalForceFactor ( double _val );
__declspec(implementation_key(6161)) double IView::GetFreebodyNodalMomentFactor ( );
__declspec(implementation_key(6162)) void IView::PutFreebodyNodalMomentFactor ( double _val );
__declspec(implementation_key(6163)) double IView::GetFreebodyUnitsPerLength ( );
__declspec(implementation_key(6164)) void IView::PutFreebodyUnitsPerLength ( double _val );
__declspec(implementation_key(6165)) VARIANT_BOOL IView::GetBlankNodesOff ( );
__declspec(implementation_key(6166)) void IView::PutBlankNodesOff ( VARIANT_BOOL _val );
__declspec(implementation_key(6167)) int IView::GetContourDataSelection ( );
__declspec(implementation_key(6168)) void IView::PutContourDataSelection ( int _val );
__declspec(implementation_key(6169)) int IView::GetContourVector1 ( );
__declspec(implementation_key(6170)) void IView::PutContourVector1 ( int _val );
__declspec(implementation_key(6171)) int IView::GetContourVector2 ( );
__declspec(implementation_key(6172)) void IView::PutContourVector2 ( int _val );
__declspec(implementation_key(6173)) int IView::GetContourVector3 ( );
__declspec(implementation_key(6174)) void IView::PutContourVector3 ( int _val );
__declspec(implementation_key(6175)) VARIANT_BOOL IView::GetContourCornerData ( );
__declspec(implementation_key(6176)) void IView::PutContourCornerData ( VARIANT_BOOL _val );
__declspec(implementation_key(6177)) int IView::GetContourDataConversion ( );
__declspec(implementation_key(6178)) void IView::PutContourDataConversion ( int _val );
__declspec(implementation_key(6179)) int IView::GetComplexSyncMethod ( );
__declspec(implementation_key(6180)) void IView::PutComplexSyncMethod ( int _val );
__declspec(implementation_key(6181)) double IView::GetComplexSyncPhase ( );
__declspec(implementation_key(6182)) void IView::PutComplexSyncPhase ( double _val );
__declspec(implementation_key(6183)) double IView::GetComplexSyncIncrement ( );
__declspec(implementation_key(6184)) void IView::PutComplexSyncIncrement ( double _val );
__declspec(implementation_key(6185)) _variant_t IView::GetvContourVecOn ( );
__declspec(implementation_key(6186)) void IView::PutvContourVecOn ( const _variant_t & _val );
__declspec(implementation_key(6187)) VARIANT_BOOL IView::GetContourVecAutoVec ( );
__declspec(implementation_key(6188)) void IView::PutContourVecAutoVec ( VARIANT_BOOL _val );
__declspec(implementation_key(6189)) VARIANT_BOOL IView::GetContourVecAutoOrient ( );
__declspec(implementation_key(6190)) void IView::PutContourVecAutoOrient ( VARIANT_BOOL _val );
__declspec(implementation_key(6191)) VARIANT_BOOL IView::GetTransformDeformXInput ( );
__declspec(implementation_key(6192)) void IView::PutTransformDeformXInput ( VARIANT_BOOL _val );
__declspec(implementation_key(6193)) VARIANT_BOOL IView::GetTransformDeformYInput ( );
__declspec(implementation_key(6194)) void IView::PutTransformDeformYInput ( VARIANT_BOOL _val );
__declspec(implementation_key(6195)) VARIANT_BOOL IView::GetTransformDeformZInput ( );
__declspec(implementation_key(6196)) void IView::PutTransformDeformZInput ( VARIANT_BOOL _val );
__declspec(implementation_key(6197)) double IView::GetTransformPlateTolerance ( );
__declspec(implementation_key(6198)) void IView::PutTransformPlateTolerance ( double _val );
__declspec(implementation_key(6199)) VARIANT_BOOL IView::GetContourVecMinVecOn ( );
__declspec(implementation_key(6200)) void IView::PutContourVecMinVecOn ( VARIANT_BOOL _val );
__declspec(implementation_key(6201)) double IView::GetContourVecMinVec ( );
__declspec(implementation_key(6202)) void IView::PutContourVecMinVec ( double _val );
__declspec(implementation_key(6203)) double IView::GetContourVecMinLen ( );
__declspec(implementation_key(6204)) void IView::PutContourVecMinLen ( double _val );
__declspec(implementation_key(6205)) enum zColor IView::GetContourVecColor1 ( );
__declspec(implementation_key(6206)) void IView::PutContourVecColor1 ( enum zColor _val );
__declspec(implementation_key(6207)) int IView::GetLabelGroup ( );
__declspec(implementation_key(6208)) void IView::PutLabelGroup ( int _val );
__declspec(implementation_key(6209)) int IView::GetID ( );
__declspec(implementation_key(6210)) void IView::PutID ( int _val );
__declspec(implementation_key(6211)) int IView::GetsetID ( );
__declspec(implementation_key(6212)) void IView::PutsetID ( int _val );
__declspec(implementation_key(6213)) int IView::GetActive ( );
__declspec(implementation_key(6214)) void IView::PutActive ( int _val );
__declspec(implementation_key(6215)) double IViewOrient::Getcenter ( int nVectorIndex );
__declspec(implementation_key(6216)) void IViewOrient::Putcenter ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(6217)) double IViewOrient::GetRotationCenter ( int nVectorIndex );
__declspec(implementation_key(6218)) void IViewOrient::PutRotationCenter ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(6219)) double IViewOrient::GetRotationVector ( int nVectorIndex );
__declspec(implementation_key(6220)) void IViewOrient::PutRotationVector ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(6221)) enum zReturnCode IViewOrient::SetEyeDirection ( double dEyeX, double dEyeY, double dEyeZ, double dRightX, double dRightY, double dRightZ );
__declspec(implementation_key(6222)) enum zReturnCode IViewOrient::GetEyeDirection ( double * pdEyeX, double * pdEyeY, double * pdEyeZ, double * pdRightX, double * pdRightY, double * pdRightZ );
__declspec(implementation_key(6223)) enum zReturnCode IViewOrient::Get ( int entID );
__declspec(implementation_key(6224)) enum zReturnCode IViewOrient::Put ( int entID );
__declspec(implementation_key(6225)) enum zReturnCode IViewOrient::ViewRotation ( VARIANT_BOOL qUseCenter, double dX, double dY, double dZ );
__declspec(implementation_key(6226)) enum zReturnCode IViewOrient::ModelRotation ( VARIANT_BOOL qUseCenter, double dX, double dY, double dZ );
__declspec(implementation_key(6227)) enum zReturnCode IViewOrient::CoordSysRotation ( int iCoordSys, VARIANT_BOOL qUseCenter, double dX, double dY, double dZ );
__declspec(implementation_key(6228)) enum zReturnCode IViewOrient::VectorRotation ( double dX, double dY, double dZ, double dVX, double dVY, double dVZ );
__declspec(implementation_key(6229)) enum zReturnCode IViewOrient::RollThru ( );
__declspec(implementation_key(6230)) enum zReturnCode IViewOrient::RecordStart ( int nMaxFrames, int iViewID, int iPathID );
__declspec(implementation_key(6231)) enum zReturnCode IViewOrient::RecordEnd ( );
__declspec(implementation_key(6232)) enum zReturnCode IViewOrient::PlaybackStart ( int iViewID, int iPathID );
__declspec(implementation_key(6233)) enum zReturnCode IViewOrient::PlaybackNext ( );
__declspec(implementation_key(6234)) enum zReturnCode IViewOrient::PlaybackDelete ( int iPathID );
__declspec(implementation_key(6235)) enum zReturnCode IViewOrient::SnapToAxes ( );
__declspec(implementation_key(6236)) enum zReturnCode IViewOrient::SetRotationAngles ( double dX, double dY, double dZ );
__declspec(implementation_key(6237)) enum zReturnCode IViewOrient::GetRotationAngles ( double * pdX, double * pdY, double * pdZ );
__declspec(implementation_key(6238)) enum zReturnCode IViewOrient::NextSet ( );
__declspec(implementation_key(6239)) enum zReturnCode IViewOrient::PrevSet ( );
__declspec(implementation_key(6240)) enum zReturnCode IViewOrient::NextEmptySet ( );
__declspec(implementation_key(6241)) enum zReturnCode IViewOrient::PrevEmptySet ( );
__declspec(implementation_key(6242)) enum zReturnCode IViewOrient::Exist ( int ID );
__declspec(implementation_key(6243)) enum zReturnCode IViewOrient::Deletable ( int ID );
__declspec(implementation_key(6244)) enum zReturnCode IViewOrient::Delete ( int ID );
__declspec(implementation_key(6245)) enum zReturnCode IViewOrient::Reset ( );
__declspec(implementation_key(6246)) enum zReturnCode IViewOrient::Next ( );
__declspec(implementation_key(6247)) enum zReturnCode IViewOrient::Prev ( );
__declspec(implementation_key(6248)) enum zReturnCode IViewOrient::First ( );
__declspec(implementation_key(6249)) enum zReturnCode IViewOrient::Last ( );
__declspec(implementation_key(6250)) int IViewOrient::NextID ( );
__declspec(implementation_key(6251)) int IViewOrient::PrevID ( );
__declspec(implementation_key(6252)) int IViewOrient::NextEmptyID ( );
__declspec(implementation_key(6253)) int IViewOrient::PrevEmptyID ( );
__declspec(implementation_key(6254)) enum zReturnCode IViewOrient::GetLibrary ( int ID );
__declspec(implementation_key(6255)) enum zReturnCode IViewOrient::PutLibrary ( );
__declspec(implementation_key(6256)) enum zReturnCode IViewOrient::DeleteLibrary ( int ID );
__declspec(implementation_key(6257)) enum zReturnCode IViewOrient::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6258)) enum zReturnCode IViewOrient::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6259)) int IViewOrient::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(6260)) enum zReturnCode IViewOrient::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(6261)) enum zReturnCode IViewOrient::NextInSet ( int nSetID );
__declspec(implementation_key(6262)) enum zReturnCode IViewOrient::FirstInSet ( int nSetID );
__declspec(implementation_key(6263)) int IViewOrient::CountSet ( );
__declspec(implementation_key(6264)) enum zReturnCode IViewOrient::NextExistingInSet ( int nSetID );
__declspec(implementation_key(6265)) enum zReturnCode IViewOrient::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(6266)) _variant_t IViewOrient::GetvCenter ( );
__declspec(implementation_key(6267)) void IViewOrient::PutvCenter ( const _variant_t & _val );
__declspec(implementation_key(6268)) double IViewOrient::GetMagnification ( );
__declspec(implementation_key(6269)) void IViewOrient::PutMagnification ( double _val );
__declspec(implementation_key(6270)) VARIANT_BOOL IViewOrient::GetModelAlwaysInFront ( );
__declspec(implementation_key(6271)) void IViewOrient::PutModelAlwaysInFront ( VARIANT_BOOL _val );
__declspec(implementation_key(6272)) VARIANT_BOOL IViewOrient::GetAutoAspectRatio ( );
__declspec(implementation_key(6273)) void IViewOrient::PutAutoAspectRatio ( VARIANT_BOOL _val );
__declspec(implementation_key(6274)) double IViewOrient::GetAspectRatio ( );
__declspec(implementation_key(6275)) void IViewOrient::PutAspectRatio ( double _val );
__declspec(implementation_key(6276)) VARIANT_BOOL IViewOrient::GetPerspective ( );
__declspec(implementation_key(6277)) void IViewOrient::PutPerspective ( VARIANT_BOOL _val );
__declspec(implementation_key(6278)) double IViewOrient::GetPerspectiveAngle ( );
__declspec(implementation_key(6279)) void IViewOrient::PutPerspectiveAngle ( double _val );
__declspec(implementation_key(6280)) int IViewOrient::GetRotationAxesOption ( );
__declspec(implementation_key(6281)) void IViewOrient::PutRotationAxesOption ( int _val );
__declspec(implementation_key(6282)) int IViewOrient::GetRotationCenterOption ( );
__declspec(implementation_key(6283)) void IViewOrient::PutRotationCenterOption ( int _val );
__declspec(implementation_key(6284)) int IViewOrient::GetRotationCoordSys ( );
__declspec(implementation_key(6285)) void IViewOrient::PutRotationCoordSys ( int _val );
__declspec(implementation_key(6286)) VARIANT_BOOL IViewOrient::GetSingleAxis ( );
__declspec(implementation_key(6287)) void IViewOrient::PutSingleAxis ( VARIANT_BOOL _val );
__declspec(implementation_key(6288)) _variant_t IViewOrient::GetvRotationCenter ( );
__declspec(implementation_key(6289)) void IViewOrient::PutvRotationCenter ( const _variant_t & _val );
__declspec(implementation_key(6290)) _variant_t IViewOrient::GetvRotationVector ( );
__declspec(implementation_key(6291)) void IViewOrient::PutvRotationVector ( const _variant_t & _val );
__declspec(implementation_key(6292)) int IViewOrient::GetSecondaryRotationAxesOption ( );
__declspec(implementation_key(6293)) void IViewOrient::PutSecondaryRotationAxesOption ( int _val );
__declspec(implementation_key(6294)) int IViewOrient::GetID ( );
__declspec(implementation_key(6295)) void IViewOrient::PutID ( int _val );
__declspec(implementation_key(6296)) int IViewOrient::GetsetID ( );
__declspec(implementation_key(6297)) void IViewOrient::PutsetID ( int _val );
__declspec(implementation_key(6298)) int IViewOrient::GetActive ( );
__declspec(implementation_key(6299)) void IViewOrient::PutActive ( int _val );
__declspec(implementation_key(6300)) double IText::GetTextPosition ( int nVectorIndex );
__declspec(implementation_key(6301)) void IText::PutTextPosition ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(6302)) double IText::GetPointerPosition ( int nVectorIndex );
__declspec(implementation_key(6303)) void IText::PutPointerPosition ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(6304)) enum zReturnCode IText::Put ( int entID );
__declspec(implementation_key(6305)) enum zReturnCode IText::NextSet ( );
__declspec(implementation_key(6306)) enum zReturnCode IText::PrevSet ( );
__declspec(implementation_key(6307)) enum zReturnCode IText::NextEmptySet ( );
__declspec(implementation_key(6308)) enum zReturnCode IText::PrevEmptySet ( );
__declspec(implementation_key(6309)) enum zReturnCode IText::Get ( int ID );
__declspec(implementation_key(6310)) enum zReturnCode IText::Exist ( int ID );
__declspec(implementation_key(6311)) enum zReturnCode IText::Deletable ( int ID );
__declspec(implementation_key(6312)) enum zReturnCode IText::Delete ( int ID );
__declspec(implementation_key(6313)) enum zReturnCode IText::Reset ( );
__declspec(implementation_key(6314)) enum zReturnCode IText::Next ( );
__declspec(implementation_key(6315)) enum zReturnCode IText::Prev ( );
__declspec(implementation_key(6316)) enum zReturnCode IText::First ( );
__declspec(implementation_key(6317)) enum zReturnCode IText::Last ( );
__declspec(implementation_key(6318)) int IText::NextID ( );
__declspec(implementation_key(6319)) int IText::PrevID ( );
__declspec(implementation_key(6320)) int IText::NextEmptyID ( );
__declspec(implementation_key(6321)) int IText::PrevEmptyID ( );
__declspec(implementation_key(6322)) enum zReturnCode IText::GetLibrary ( int ID );
__declspec(implementation_key(6323)) enum zReturnCode IText::PutLibrary ( );
__declspec(implementation_key(6324)) enum zReturnCode IText::DeleteLibrary ( int ID );
__declspec(implementation_key(6325)) enum zReturnCode IText::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6326)) enum zReturnCode IText::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6327)) int IText::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(6328)) enum zReturnCode IText::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(6329)) enum zReturnCode IText::NextInSet ( int nSetID );
__declspec(implementation_key(6330)) enum zReturnCode IText::FirstInSet ( int nSetID );
__declspec(implementation_key(6331)) int IText::CountSet ( );
__declspec(implementation_key(6332)) enum zReturnCode IText::NextExistingInSet ( int nSetID );
__declspec(implementation_key(6333)) enum zReturnCode IText::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(6334)) VARIANT_BOOL IText::GetModelPosition ( );
__declspec(implementation_key(6335)) void IText::PutModelPosition ( VARIANT_BOOL _val );
__declspec(implementation_key(6336)) VARIANT_BOOL IText::GetAllViews ( );
__declspec(implementation_key(6337)) void IText::PutAllViews ( VARIANT_BOOL _val );
__declspec(implementation_key(6338)) VARIANT_BOOL IText::GetDrawPointer ( );
__declspec(implementation_key(6339)) void IText::PutDrawPointer ( VARIANT_BOOL _val );
__declspec(implementation_key(6340)) VARIANT_BOOL IText::GetDrawBorder ( );
__declspec(implementation_key(6341)) void IText::PutDrawBorder ( VARIANT_BOOL _val );
__declspec(implementation_key(6342)) int IText::GetVisibleView ( );
__declspec(implementation_key(6343)) void IText::PutVisibleView ( int _val );
__declspec(implementation_key(6344)) int IText::Getlayer ( );
__declspec(implementation_key(6345)) void IText::Putlayer ( int _val );
__declspec(implementation_key(6346)) enum zColor IText::Getcolor ( );
__declspec(implementation_key(6347)) void IText::Putcolor ( enum zColor _val );
__declspec(implementation_key(6348)) enum zColor IText::GetBorderColor ( );
__declspec(implementation_key(6349)) void IText::PutBorderColor ( enum zColor _val );
__declspec(implementation_key(6350)) enum zColor IText::GetBackColor ( );
__declspec(implementation_key(6351)) void IText::PutBackColor ( enum zColor _val );
__declspec(implementation_key(6352)) int IText::GetHorzJustify ( );
__declspec(implementation_key(6353)) void IText::PutHorzJustify ( int _val );
__declspec(implementation_key(6354)) int IText::GetVertJustify ( );
__declspec(implementation_key(6355)) void IText::PutVertJustify ( int _val );
__declspec(implementation_key(6356)) int IText::GetFontNumber ( );
__declspec(implementation_key(6357)) void IText::PutFontNumber ( int _val );
__declspec(implementation_key(6358)) _bstr_t IText::Gettext ( );
__declspec(implementation_key(6359)) void IText::Puttext ( _bstr_t _val );
__declspec(implementation_key(6360)) _variant_t IText::GetvTextPosition ( );
__declspec(implementation_key(6361)) void IText::PutvTextPosition ( const _variant_t & _val );
__declspec(implementation_key(6362)) _variant_t IText::GetvPointerPosition ( );
__declspec(implementation_key(6363)) void IText::PutvPointerPosition ( const _variant_t & _val );
__declspec(implementation_key(6364)) int IText::GetID ( );
__declspec(implementation_key(6365)) void IText::PutID ( int _val );
__declspec(implementation_key(6366)) int IText::GetsetID ( );
__declspec(implementation_key(6367)) void IText::PutsetID ( int _val );
__declspec(implementation_key(6368)) int IText::GetActive ( );
__declspec(implementation_key(6369)) void IText::PutActive ( int _val );
__declspec(implementation_key(6370)) VARIANT_BOOL IConnectionProp::Getflag ( int nVectorIndex );
__declspec(implementation_key(6371)) void IConnectionProp::Putflag ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(6372)) int IConnectionProp::GetflagI ( int nVectorIndex );
__declspec(implementation_key(6373)) void IConnectionProp::PutflagI ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(6374)) double IConnectionProp::Getpval ( int nVectorIndex );
__declspec(implementation_key(6375)) void IConnectionProp::Putpval ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(6376)) int IConnectionProp::Getplyval ( int nVectorIndex );
__declspec(implementation_key(6377)) void IConnectionProp::Putplyval ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(6378)) enum zReturnCode IConnectionProp::Put ( int entID );
__declspec(implementation_key(6379)) enum zReturnCode IConnectionProp::SetDefaults ( double dContactTolerance );
__declspec(implementation_key(6380)) enum zReturnCode IConnectionProp::NextSet ( );
__declspec(implementation_key(6381)) enum zReturnCode IConnectionProp::PrevSet ( );
__declspec(implementation_key(6382)) enum zReturnCode IConnectionProp::NextEmptySet ( );
__declspec(implementation_key(6383)) enum zReturnCode IConnectionProp::PrevEmptySet ( );
__declspec(implementation_key(6384)) enum zReturnCode IConnectionProp::Get ( int ID );
__declspec(implementation_key(6385)) enum zReturnCode IConnectionProp::Exist ( int ID );
__declspec(implementation_key(6386)) enum zReturnCode IConnectionProp::Deletable ( int ID );
__declspec(implementation_key(6387)) enum zReturnCode IConnectionProp::Delete ( int ID );
__declspec(implementation_key(6388)) enum zReturnCode IConnectionProp::Reset ( );
__declspec(implementation_key(6389)) enum zReturnCode IConnectionProp::Next ( );
__declspec(implementation_key(6390)) enum zReturnCode IConnectionProp::Prev ( );
__declspec(implementation_key(6391)) enum zReturnCode IConnectionProp::First ( );
__declspec(implementation_key(6392)) enum zReturnCode IConnectionProp::Last ( );
__declspec(implementation_key(6393)) int IConnectionProp::NextID ( );
__declspec(implementation_key(6394)) int IConnectionProp::PrevID ( );
__declspec(implementation_key(6395)) int IConnectionProp::NextEmptyID ( );
__declspec(implementation_key(6396)) int IConnectionProp::PrevEmptyID ( );
__declspec(implementation_key(6397)) enum zReturnCode IConnectionProp::GetLibrary ( int ID );
__declspec(implementation_key(6398)) enum zReturnCode IConnectionProp::PutLibrary ( );
__declspec(implementation_key(6399)) enum zReturnCode IConnectionProp::DeleteLibrary ( int ID );
__declspec(implementation_key(6400)) enum zReturnCode IConnectionProp::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6401)) enum zReturnCode IConnectionProp::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6402)) int IConnectionProp::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(6403)) enum zReturnCode IConnectionProp::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(6404)) enum zReturnCode IConnectionProp::NextInSet ( int nSetID );
__declspec(implementation_key(6405)) enum zReturnCode IConnectionProp::FirstInSet ( int nSetID );
__declspec(implementation_key(6406)) int IConnectionProp::CountSet ( );
__declspec(implementation_key(6407)) enum zReturnCode IConnectionProp::NextExistingInSet ( int nSetID );
__declspec(implementation_key(6408)) enum zReturnCode IConnectionProp::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(6409)) int IConnectionProp::Getlayer ( );
__declspec(implementation_key(6410)) void IConnectionProp::Putlayer ( int _val );
__declspec(implementation_key(6411)) enum zColor IConnectionProp::Getcolor ( );
__declspec(implementation_key(6412)) void IConnectionProp::Putcolor ( enum zColor _val );
__declspec(implementation_key(6413)) enum zConnectionPropType IConnectionProp::Gettype ( );
__declspec(implementation_key(6414)) void IConnectionProp::Puttype ( enum zConnectionPropType _val );
__declspec(implementation_key(6415)) _bstr_t IConnectionProp::Gettitle ( );
__declspec(implementation_key(6416)) void IConnectionProp::Puttitle ( _bstr_t _val );
__declspec(implementation_key(6417)) _variant_t IConnectionProp::Getplymat ( );
__declspec(implementation_key(6418)) void IConnectionProp::Putplymat ( const _variant_t & _val );
__declspec(implementation_key(6419)) _variant_t IConnectionProp::Getpmat ( );
__declspec(implementation_key(6420)) void IConnectionProp::Putpmat ( const _variant_t & _val );
__declspec(implementation_key(6421)) _variant_t IConnectionProp::Getvflag ( );
__declspec(implementation_key(6422)) void IConnectionProp::Putvflag ( const _variant_t & _val );
__declspec(implementation_key(6423)) _variant_t IConnectionProp::GetvflagI ( );
__declspec(implementation_key(6424)) void IConnectionProp::PutvflagI ( const _variant_t & _val );
__declspec(implementation_key(6425)) _variant_t IConnectionProp::Getvpval ( );
__declspec(implementation_key(6426)) void IConnectionProp::Putvpval ( const _variant_t & _val );
__declspec(implementation_key(6427)) _variant_t IConnectionProp::Getvplyval ( );
__declspec(implementation_key(6428)) void IConnectionProp::Putvplyval ( const _variant_t & _val );
__declspec(implementation_key(6429)) int IConnectionProp::GetID ( );
__declspec(implementation_key(6430)) void IConnectionProp::PutID ( int _val );
__declspec(implementation_key(6431)) int IConnectionProp::GetsetID ( );
__declspec(implementation_key(6432)) void IConnectionProp::PutsetID ( int _val );
__declspec(implementation_key(6433)) int IConnectionProp::GetActive ( );
__declspec(implementation_key(6434)) void IConnectionProp::PutActive ( int _val );
__declspec(implementation_key(6435)) int IConnection::GetContact ( int nVectorIndex );
__declspec(implementation_key(6436)) void IConnection::PutContact ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(6437)) enum zReturnCode IConnection::Put ( int entID );
__declspec(implementation_key(6438)) IConnectionPropPtr IConnection::Prop ( );
__declspec(implementation_key(6439)) enum zReturnCode IConnection::Enable ( VARIANT_BOOL bEnable );
__declspec(implementation_key(6440)) enum zReturnCode IConnection::IsEnabled ( );
__declspec(implementation_key(6441)) enum zReturnCode IConnection::BoundingBox ( VARIANT * box );
__declspec(implementation_key(6442)) enum zReturnCode IConnection::BoundingBoxInCSys ( int nCSysID, VARIANT * box );
__declspec(implementation_key(6443)) enum zReturnCode IConnection::NextSet ( );
__declspec(implementation_key(6444)) enum zReturnCode IConnection::PrevSet ( );
__declspec(implementation_key(6445)) enum zReturnCode IConnection::NextEmptySet ( );
__declspec(implementation_key(6446)) enum zReturnCode IConnection::PrevEmptySet ( );
__declspec(implementation_key(6447)) enum zReturnCode IConnection::Get ( int ID );
__declspec(implementation_key(6448)) enum zReturnCode IConnection::Exist ( int ID );
__declspec(implementation_key(6449)) enum zReturnCode IConnection::Deletable ( int ID );
__declspec(implementation_key(6450)) enum zReturnCode IConnection::Delete ( int ID );
__declspec(implementation_key(6451)) enum zReturnCode IConnection::Reset ( );
__declspec(implementation_key(6452)) enum zReturnCode IConnection::Next ( );
__declspec(implementation_key(6453)) enum zReturnCode IConnection::Prev ( );
__declspec(implementation_key(6454)) enum zReturnCode IConnection::First ( );
__declspec(implementation_key(6455)) enum zReturnCode IConnection::Last ( );
__declspec(implementation_key(6456)) int IConnection::NextID ( );
__declspec(implementation_key(6457)) int IConnection::PrevID ( );
__declspec(implementation_key(6458)) int IConnection::NextEmptyID ( );
__declspec(implementation_key(6459)) int IConnection::PrevEmptyID ( );
__declspec(implementation_key(6460)) enum zReturnCode IConnection::GetLibrary ( int ID );
__declspec(implementation_key(6461)) enum zReturnCode IConnection::PutLibrary ( );
__declspec(implementation_key(6462)) enum zReturnCode IConnection::DeleteLibrary ( int ID );
__declspec(implementation_key(6463)) enum zReturnCode IConnection::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6464)) enum zReturnCode IConnection::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6465)) int IConnection::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(6466)) enum zReturnCode IConnection::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(6467)) enum zReturnCode IConnection::NextInSet ( int nSetID );
__declspec(implementation_key(6468)) enum zReturnCode IConnection::FirstInSet ( int nSetID );
__declspec(implementation_key(6469)) int IConnection::CountSet ( );
__declspec(implementation_key(6470)) enum zReturnCode IConnection::NextExistingInSet ( int nSetID );
__declspec(implementation_key(6471)) enum zReturnCode IConnection::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(6472)) enum zColor IConnection::Getcolor ( );
__declspec(implementation_key(6473)) void IConnection::Putcolor ( enum zColor _val );
__declspec(implementation_key(6474)) int IConnection::GetpropID ( );
__declspec(implementation_key(6475)) void IConnection::PutpropID ( int _val );
__declspec(implementation_key(6476)) int IConnection::Getlayer ( );
__declspec(implementation_key(6477)) void IConnection::Putlayer ( int _val );
__declspec(implementation_key(6478)) _bstr_t IConnection::Gettitle ( );
__declspec(implementation_key(6479)) void IConnection::Puttitle ( _bstr_t _val );
__declspec(implementation_key(6480)) _variant_t IConnection::Getvcontact ( );
__declspec(implementation_key(6481)) void IConnection::Putvcontact ( const _variant_t & _val );
__declspec(implementation_key(6482)) int IConnection::GetID ( );
__declspec(implementation_key(6483)) void IConnection::PutID ( int _val );
__declspec(implementation_key(6484)) int IConnection::GetsetID ( );
__declspec(implementation_key(6485)) void IConnection::PutsetID ( int _val );
__declspec(implementation_key(6486)) int IConnection::GetActive ( );
__declspec(implementation_key(6487)) void IConnection::PutActive ( int _val );
__declspec(implementation_key(6488)) VARIANT_BOOL IScratch::GetbData ( int nVectorIndex );
__declspec(implementation_key(6489)) void IScratch::PutbData ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(6490)) int IScratch::GetnData ( int nVectorIndex );
__declspec(implementation_key(6491)) void IScratch::PutnData ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(6492)) double IScratch::GetrData ( int nVectorIndex );
__declspec(implementation_key(6493)) void IScratch::PutrData ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(6494)) enum zReturnCode IScratch::Get ( int entID );
__declspec(implementation_key(6495)) enum zReturnCode IScratch::Put ( int entID );
__declspec(implementation_key(6496)) enum zReturnCode IScratch::Exist ( int entID );
__declspec(implementation_key(6497)) enum zReturnCode IScratch::Delete ( int entID );
__declspec(implementation_key(6498)) enum zReturnCode IScratch::Next ( );
__declspec(implementation_key(6499)) enum zReturnCode IScratch::Prev ( );
__declspec(implementation_key(6500)) enum zReturnCode IScratch::First ( );
__declspec(implementation_key(6501)) enum zReturnCode IScratch::Last ( );
__declspec(implementation_key(6502)) enum zReturnCode IScratch::Reset ( );
__declspec(implementation_key(6503)) enum zReturnCode IScratch::clear ( );
__declspec(implementation_key(6504)) enum zReturnCode IScratch::Debug ( );
__declspec(implementation_key(6505)) int IScratch::GetID ( );
__declspec(implementation_key(6506)) void IScratch::PutID ( int _val );
__declspec(implementation_key(6507)) int IScratch::GetsetID ( );
__declspec(implementation_key(6508)) void IScratch::PutsetID ( int _val );
__declspec(implementation_key(6509)) int IScratch::GetActive ( );
__declspec(implementation_key(6510)) void IScratch::PutActive ( int _val );
__declspec(implementation_key(6511)) enum zReturnCode ISelector::ClearAll ( );
__declspec(implementation_key(6512)) enum zReturnCode ISelector::clear ( enum zSelectorType entityTYPE );
__declspec(implementation_key(6513)) enum zReturnCode ISelector::Count ( enum zSelectorType entityTYPE, int * nSelected );
__declspec(implementation_key(6514)) enum zReturnCode ISelector::SelectBox ( );
__declspec(implementation_key(6515)) enum zReturnCode ISelector::SelectCircle ( );
__declspec(implementation_key(6516)) enum zReturnCode ISelector::SelectPolygon ( );
__declspec(implementation_key(6517)) enum zReturnCode ISelector::SelectFreehand ( );
__declspec(implementation_key(6518)) enum zReturnCode ISelector::Grow ( );
__declspec(implementation_key(6519)) enum zReturnCode ISelector::Shrink ( );
__declspec(implementation_key(6520)) enum zReturnCode ISelector::Show ( VARIANT_BOOL bShowAll );
__declspec(implementation_key(6521)) enum zReturnCode ISelector::SaveGroup ( int groupID );
__declspec(implementation_key(6522)) enum zReturnCode ISelector::LoadGroup ( int groupID );
__declspec(implementation_key(6523)) enum zReturnCode ISelector::UpdateDataTable ( );
__declspec(implementation_key(6524)) enum zReturnCode ISelector::Add ( enum zSelectorType entityTYPE, int nID );
__declspec(implementation_key(6525)) enum zReturnCode ISelector::AddSet ( enum zSelectorType entityTYPE, int nSetD, VARIANT_BOOL bUpdateDataTable );
__declspec(implementation_key(6526)) ISetPtr ISelector::GetSelected ( enum zSelectorType entityTYPE );
__declspec(implementation_key(6527)) enum zReturnCode ISelector::Copy ( );
__declspec(implementation_key(6528)) enum zReturnCode ISelector::Paste ( VARIANT_BOOL bShowDlg );
__declspec(implementation_key(6529)) enum zReturnCode ISelector::GetSelectedID ( enum zSelectorType entityTYPE, int * nNumSelected, VARIANT * pnSelectedID );
__declspec(implementation_key(6530)) enum zReturnCode ISelector::Tooltips ( VARIANT_BOOL bOn, VARIANT_BOOL bIncludeLayersAndGroups );
__declspec(implementation_key(6531)) VARIANT_BOOL ISelector::GetMultipleMode ( );
__declspec(implementation_key(6532)) void ISelector::PutMultipleMode ( VARIANT_BOOL _val );
__declspec(implementation_key(6533)) VARIANT_BOOL ISelector::GetAddMode ( );
__declspec(implementation_key(6534)) void ISelector::PutAddMode ( VARIANT_BOOL _val );
__declspec(implementation_key(6535)) enum zSelectorDrill ISelector::GetDrillMode ( );
__declspec(implementation_key(6536)) void ISelector::PutDrillMode ( enum zSelectorDrill _val );
__declspec(implementation_key(6537)) VARIANT_BOOL ISelector::GetRelatedMode ( );
__declspec(implementation_key(6538)) void ISelector::PutRelatedMode ( VARIANT_BOOL _val );
__declspec(implementation_key(6539)) enum zSelectorType ISelector::GetSelectEntity ( );
__declspec(implementation_key(6540)) void ISelector::PutSelectEntity ( enum zSelectorType _val );
__declspec(implementation_key(6541)) VARIANT_BOOL ISelector::GetActive ( );
__declspec(implementation_key(6542)) void ISelector::PutActive ( VARIANT_BOOL _val );
__declspec(implementation_key(6543)) enum zReturnCode ILoadDefinition::Delete ( int entID );
__declspec(implementation_key(6544)) enum zReturnCode ILoadDefinition::Get ( int entID );
__declspec(implementation_key(6545)) enum zReturnCode ILoadDefinition::PutAll ( int entID, enum zDataType enDataType, enum zLoadType enLoadType, _bstr_t sTitle );
__declspec(implementation_key(6546)) enum zReturnCode ILoadDefinition::ResetNextLoad ( );
__declspec(implementation_key(6547)) enum zReturnCode ILoadDefinition::NextLoad ( IDispatch * * pDispatch );
__declspec(implementation_key(6548)) int ILoadDefinition::CountLoads ( );
__declspec(implementation_key(6549)) enum zReturnCode ILoadDefinition::IsTotalLoad ( );
__declspec(implementation_key(6550)) enum zReturnCode ILoadDefinition::NextSet ( );
__declspec(implementation_key(6551)) enum zReturnCode ILoadDefinition::PrevSet ( );
__declspec(implementation_key(6552)) enum zReturnCode ILoadDefinition::NextEmptySet ( );
__declspec(implementation_key(6553)) enum zReturnCode ILoadDefinition::PrevEmptySet ( );
__declspec(implementation_key(6554)) enum zReturnCode ILoadDefinition::Put ( int ID );
__declspec(implementation_key(6555)) enum zReturnCode ILoadDefinition::Exist ( int ID );
__declspec(implementation_key(6556)) enum zReturnCode ILoadDefinition::Deletable ( int ID );
__declspec(implementation_key(6557)) enum zReturnCode ILoadDefinition::Reset ( );
__declspec(implementation_key(6558)) enum zReturnCode ILoadDefinition::Next ( );
__declspec(implementation_key(6559)) enum zReturnCode ILoadDefinition::Prev ( );
__declspec(implementation_key(6560)) enum zReturnCode ILoadDefinition::First ( );
__declspec(implementation_key(6561)) enum zReturnCode ILoadDefinition::Last ( );
__declspec(implementation_key(6562)) int ILoadDefinition::NextID ( );
__declspec(implementation_key(6563)) int ILoadDefinition::PrevID ( );
__declspec(implementation_key(6564)) int ILoadDefinition::NextEmptyID ( );
__declspec(implementation_key(6565)) int ILoadDefinition::PrevEmptyID ( );
__declspec(implementation_key(6566)) enum zReturnCode ILoadDefinition::GetLibrary ( int ID );
__declspec(implementation_key(6567)) enum zReturnCode ILoadDefinition::PutLibrary ( );
__declspec(implementation_key(6568)) enum zReturnCode ILoadDefinition::DeleteLibrary ( int ID );
__declspec(implementation_key(6569)) enum zReturnCode ILoadDefinition::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6570)) enum zReturnCode ILoadDefinition::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6571)) int ILoadDefinition::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(6572)) enum zReturnCode ILoadDefinition::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(6573)) enum zReturnCode ILoadDefinition::NextInSet ( int nSetID );
__declspec(implementation_key(6574)) enum zReturnCode ILoadDefinition::FirstInSet ( int nSetID );
__declspec(implementation_key(6575)) int ILoadDefinition::CountSet ( );
__declspec(implementation_key(6576)) enum zReturnCode ILoadDefinition::NextExistingInSet ( int nSetID );
__declspec(implementation_key(6577)) enum zReturnCode ILoadDefinition::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(6578)) _bstr_t ILoadDefinition::Gettitle ( );
__declspec(implementation_key(6579)) void ILoadDefinition::Puttitle ( _bstr_t _val );
__declspec(implementation_key(6580)) enum zLoadType ILoadDefinition::GetloadType ( );
__declspec(implementation_key(6581)) void ILoadDefinition::PutloadType ( enum zLoadType _val );
__declspec(implementation_key(6582)) enum zDataType ILoadDefinition::GetdataType ( );
__declspec(implementation_key(6583)) void ILoadDefinition::PutdataType ( enum zDataType _val );
__declspec(implementation_key(6584)) int ILoadDefinition::GetID ( );
__declspec(implementation_key(6585)) void ILoadDefinition::PutID ( int _val );
__declspec(implementation_key(6586)) int ILoadDefinition::GetsetID ( );
__declspec(implementation_key(6587)) void ILoadDefinition::PutsetID ( int _val );
__declspec(implementation_key(6588)) int ILoadDefinition::GetActive ( );
__declspec(implementation_key(6589)) void ILoadDefinition::PutActive ( int _val );
__declspec(implementation_key(6590)) enum zReturnCode IBCDefinition::Delete ( int entID );
__declspec(implementation_key(6591)) enum zReturnCode IBCDefinition::Get ( int entID );
__declspec(implementation_key(6592)) enum zReturnCode IBCDefinition::PutAll ( int entID, enum zDataType enDataType, enum zDataType enOnType, _bstr_t sTitle );
__declspec(implementation_key(6593)) enum zReturnCode IBCDefinition::ResetNextBC ( );
__declspec(implementation_key(6594)) enum zReturnCode IBCDefinition::NextBC ( IDispatch * * pDispatch );
__declspec(implementation_key(6595)) enum zReturnCode IBCDefinition::NextSet ( );
__declspec(implementation_key(6596)) enum zReturnCode IBCDefinition::PrevSet ( );
__declspec(implementation_key(6597)) enum zReturnCode IBCDefinition::NextEmptySet ( );
__declspec(implementation_key(6598)) enum zReturnCode IBCDefinition::PrevEmptySet ( );
__declspec(implementation_key(6599)) enum zReturnCode IBCDefinition::Put ( int ID );
__declspec(implementation_key(6600)) enum zReturnCode IBCDefinition::Exist ( int ID );
__declspec(implementation_key(6601)) enum zReturnCode IBCDefinition::Deletable ( int ID );
__declspec(implementation_key(6602)) enum zReturnCode IBCDefinition::Reset ( );
__declspec(implementation_key(6603)) enum zReturnCode IBCDefinition::Next ( );
__declspec(implementation_key(6604)) enum zReturnCode IBCDefinition::Prev ( );
__declspec(implementation_key(6605)) enum zReturnCode IBCDefinition::First ( );
__declspec(implementation_key(6606)) enum zReturnCode IBCDefinition::Last ( );
__declspec(implementation_key(6607)) int IBCDefinition::NextID ( );
__declspec(implementation_key(6608)) int IBCDefinition::PrevID ( );
__declspec(implementation_key(6609)) int IBCDefinition::NextEmptyID ( );
__declspec(implementation_key(6610)) int IBCDefinition::PrevEmptyID ( );
__declspec(implementation_key(6611)) enum zReturnCode IBCDefinition::GetLibrary ( int ID );
__declspec(implementation_key(6612)) enum zReturnCode IBCDefinition::PutLibrary ( );
__declspec(implementation_key(6613)) enum zReturnCode IBCDefinition::DeleteLibrary ( int ID );
__declspec(implementation_key(6614)) enum zReturnCode IBCDefinition::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6615)) enum zReturnCode IBCDefinition::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6616)) int IBCDefinition::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(6617)) enum zReturnCode IBCDefinition::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(6618)) enum zReturnCode IBCDefinition::NextInSet ( int nSetID );
__declspec(implementation_key(6619)) enum zReturnCode IBCDefinition::FirstInSet ( int nSetID );
__declspec(implementation_key(6620)) int IBCDefinition::CountSet ( );
__declspec(implementation_key(6621)) enum zReturnCode IBCDefinition::NextExistingInSet ( int nSetID );
__declspec(implementation_key(6622)) enum zReturnCode IBCDefinition::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(6623)) _bstr_t IBCDefinition::Gettitle ( );
__declspec(implementation_key(6624)) void IBCDefinition::Puttitle ( _bstr_t _val );
__declspec(implementation_key(6625)) enum zDataType IBCDefinition::GetOnType ( );
__declspec(implementation_key(6626)) void IBCDefinition::PutOnType ( enum zDataType _val );
__declspec(implementation_key(6627)) enum zDataType IBCDefinition::GetdataType ( );
__declspec(implementation_key(6628)) void IBCDefinition::PutdataType ( enum zDataType _val );
__declspec(implementation_key(6629)) int IBCDefinition::GetID ( );
__declspec(implementation_key(6630)) void IBCDefinition::PutID ( int _val );
__declspec(implementation_key(6631)) int IBCDefinition::GetsetID ( );
__declspec(implementation_key(6632)) void IBCDefinition::PutsetID ( int _val );
__declspec(implementation_key(6633)) int IBCDefinition::GetActive ( );
__declspec(implementation_key(6634)) void IBCDefinition::PutActive ( int _val );
__declspec(implementation_key(6635)) double IGFXPoint::Getxyz ( int nVectorIndex );
__declspec(implementation_key(6636)) void IGFXPoint::Putxyz ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(6637)) enum zReturnCode IGFXPoint::PutAll ( int entID, double x, double y, double z, int layer, enum zColor color, enum zGFXPointSymbol symbol );
__declspec(implementation_key(6638)) enum zReturnCode IGFXPoint::PutAllArray ( int numPoint, const _variant_t & entID, const _variant_t & xyz, const _variant_t & layer, const _variant_t & color, const _variant_t & symbol );
__declspec(implementation_key(6639)) enum zReturnCode IGFXPoint::PutCoordArray ( int numPoint, const _variant_t & xyz, int layer, enum zColor color, enum zGFXPointSymbol symbol );
__declspec(implementation_key(6640)) enum zReturnCode IGFXPoint::DeleteAll ( VARIANT_BOOL bAllSets, int nSetID );
__declspec(implementation_key(6641)) enum zReturnCode IGFXPoint::Delete ( int entID );
__declspec(implementation_key(6642)) enum zReturnCode IGFXPoint::NextSet ( );
__declspec(implementation_key(6643)) enum zReturnCode IGFXPoint::PrevSet ( );
__declspec(implementation_key(6644)) enum zReturnCode IGFXPoint::NextEmptySet ( );
__declspec(implementation_key(6645)) enum zReturnCode IGFXPoint::PrevEmptySet ( );
__declspec(implementation_key(6646)) enum zReturnCode IGFXPoint::Get ( int ID );
__declspec(implementation_key(6647)) enum zReturnCode IGFXPoint::Put ( int ID );
__declspec(implementation_key(6648)) enum zReturnCode IGFXPoint::Exist ( int ID );
__declspec(implementation_key(6649)) enum zReturnCode IGFXPoint::Deletable ( int ID );
__declspec(implementation_key(6650)) enum zReturnCode IGFXPoint::Reset ( );
__declspec(implementation_key(6651)) enum zReturnCode IGFXPoint::Next ( );
__declspec(implementation_key(6652)) enum zReturnCode IGFXPoint::Prev ( );
__declspec(implementation_key(6653)) enum zReturnCode IGFXPoint::First ( );
__declspec(implementation_key(6654)) enum zReturnCode IGFXPoint::Last ( );
__declspec(implementation_key(6655)) int IGFXPoint::NextID ( );
__declspec(implementation_key(6656)) int IGFXPoint::PrevID ( );
__declspec(implementation_key(6657)) int IGFXPoint::NextEmptyID ( );
__declspec(implementation_key(6658)) int IGFXPoint::PrevEmptyID ( );
__declspec(implementation_key(6659)) enum zReturnCode IGFXPoint::GetLibrary ( int ID );
__declspec(implementation_key(6660)) enum zReturnCode IGFXPoint::PutLibrary ( );
__declspec(implementation_key(6661)) enum zReturnCode IGFXPoint::DeleteLibrary ( int ID );
__declspec(implementation_key(6662)) enum zReturnCode IGFXPoint::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6663)) enum zReturnCode IGFXPoint::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6664)) int IGFXPoint::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(6665)) enum zReturnCode IGFXPoint::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(6666)) enum zReturnCode IGFXPoint::NextInSet ( int nSetID );
__declspec(implementation_key(6667)) enum zReturnCode IGFXPoint::FirstInSet ( int nSetID );
__declspec(implementation_key(6668)) int IGFXPoint::CountSet ( );
__declspec(implementation_key(6669)) enum zReturnCode IGFXPoint::NextExistingInSet ( int nSetID );
__declspec(implementation_key(6670)) enum zReturnCode IGFXPoint::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(6671)) double IGFXPoint::Getx ( );
__declspec(implementation_key(6672)) void IGFXPoint::Putx ( double _val );
__declspec(implementation_key(6673)) double IGFXPoint::Gety ( );
__declspec(implementation_key(6674)) void IGFXPoint::Puty ( double _val );
__declspec(implementation_key(6675)) double IGFXPoint::Getz ( );
__declspec(implementation_key(6676)) void IGFXPoint::Putz ( double _val );
__declspec(implementation_key(6677)) int IGFXPoint::Getlayer ( );
__declspec(implementation_key(6678)) void IGFXPoint::Putlayer ( int _val );
__declspec(implementation_key(6679)) enum zColor IGFXPoint::Getcolor ( );
__declspec(implementation_key(6680)) void IGFXPoint::Putcolor ( enum zColor _val );
__declspec(implementation_key(6681)) enum zGFXPointSymbol IGFXPoint::Getsymbol ( );
__declspec(implementation_key(6682)) void IGFXPoint::Putsymbol ( enum zGFXPointSymbol _val );
__declspec(implementation_key(6683)) _variant_t IGFXPoint::GetvXYZ ( );
__declspec(implementation_key(6684)) void IGFXPoint::PutvXYZ ( const _variant_t & _val );
__declspec(implementation_key(6685)) int IGFXPoint::GetID ( );
__declspec(implementation_key(6686)) void IGFXPoint::PutID ( int _val );
__declspec(implementation_key(6687)) int IGFXPoint::GetsetID ( );
__declspec(implementation_key(6688)) void IGFXPoint::PutsetID ( int _val );
__declspec(implementation_key(6689)) int IGFXPoint::GetActive ( );
__declspec(implementation_key(6690)) void IGFXPoint::PutActive ( int _val );
__declspec(implementation_key(6691)) double IGFXLine::Getxyz ( int nRowIndex, int nColIndex );
__declspec(implementation_key(6692)) void IGFXLine::Putxyz ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(6693)) enum zReturnCode IGFXLine::PutAll ( int entID, double x1, double y1, double z1, double x2, double y2, double z2, int layer, enum zColor color );
__declspec(implementation_key(6694)) enum zReturnCode IGFXLine::PutAllArray ( int numLine, const _variant_t & entID, const _variant_t & xyz, const _variant_t & layer, const _variant_t & color );
__declspec(implementation_key(6695)) enum zReturnCode IGFXLine::PutCoordArray ( int numLine, const _variant_t & xyz, int layer, enum zColor color );
__declspec(implementation_key(6696)) enum zReturnCode IGFXLine::DeleteAll ( VARIANT_BOOL bAllSets, int nSetID );
__declspec(implementation_key(6697)) enum zReturnCode IGFXLine::Delete ( int entID );
__declspec(implementation_key(6698)) enum zReturnCode IGFXLine::NextSet ( );
__declspec(implementation_key(6699)) enum zReturnCode IGFXLine::PrevSet ( );
__declspec(implementation_key(6700)) enum zReturnCode IGFXLine::NextEmptySet ( );
__declspec(implementation_key(6701)) enum zReturnCode IGFXLine::PrevEmptySet ( );
__declspec(implementation_key(6702)) enum zReturnCode IGFXLine::Get ( int ID );
__declspec(implementation_key(6703)) enum zReturnCode IGFXLine::Put ( int ID );
__declspec(implementation_key(6704)) enum zReturnCode IGFXLine::Exist ( int ID );
__declspec(implementation_key(6705)) enum zReturnCode IGFXLine::Deletable ( int ID );
__declspec(implementation_key(6706)) enum zReturnCode IGFXLine::Reset ( );
__declspec(implementation_key(6707)) enum zReturnCode IGFXLine::Next ( );
__declspec(implementation_key(6708)) enum zReturnCode IGFXLine::Prev ( );
__declspec(implementation_key(6709)) enum zReturnCode IGFXLine::First ( );
__declspec(implementation_key(6710)) enum zReturnCode IGFXLine::Last ( );
__declspec(implementation_key(6711)) int IGFXLine::NextID ( );
__declspec(implementation_key(6712)) int IGFXLine::PrevID ( );
__declspec(implementation_key(6713)) int IGFXLine::NextEmptyID ( );
__declspec(implementation_key(6714)) int IGFXLine::PrevEmptyID ( );
__declspec(implementation_key(6715)) enum zReturnCode IGFXLine::GetLibrary ( int ID );
__declspec(implementation_key(6716)) enum zReturnCode IGFXLine::PutLibrary ( );
__declspec(implementation_key(6717)) enum zReturnCode IGFXLine::DeleteLibrary ( int ID );
__declspec(implementation_key(6718)) enum zReturnCode IGFXLine::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6719)) enum zReturnCode IGFXLine::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6720)) int IGFXLine::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(6721)) enum zReturnCode IGFXLine::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(6722)) enum zReturnCode IGFXLine::NextInSet ( int nSetID );
__declspec(implementation_key(6723)) enum zReturnCode IGFXLine::FirstInSet ( int nSetID );
__declspec(implementation_key(6724)) int IGFXLine::CountSet ( );
__declspec(implementation_key(6725)) enum zReturnCode IGFXLine::NextExistingInSet ( int nSetID );
__declspec(implementation_key(6726)) enum zReturnCode IGFXLine::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(6727)) double IGFXLine::Getx1 ( );
__declspec(implementation_key(6728)) void IGFXLine::Putx1 ( double _val );
__declspec(implementation_key(6729)) double IGFXLine::Gety1 ( );
__declspec(implementation_key(6730)) void IGFXLine::Puty1 ( double _val );
__declspec(implementation_key(6731)) double IGFXLine::Getz1 ( );
__declspec(implementation_key(6732)) void IGFXLine::Putz1 ( double _val );
__declspec(implementation_key(6733)) double IGFXLine::Getx2 ( );
__declspec(implementation_key(6734)) void IGFXLine::Putx2 ( double _val );
__declspec(implementation_key(6735)) double IGFXLine::Gety2 ( );
__declspec(implementation_key(6736)) void IGFXLine::Puty2 ( double _val );
__declspec(implementation_key(6737)) double IGFXLine::Getz2 ( );
__declspec(implementation_key(6738)) void IGFXLine::Putz2 ( double _val );
__declspec(implementation_key(6739)) int IGFXLine::Getlayer ( );
__declspec(implementation_key(6740)) void IGFXLine::Putlayer ( int _val );
__declspec(implementation_key(6741)) enum zColor IGFXLine::Getcolor ( );
__declspec(implementation_key(6742)) void IGFXLine::Putcolor ( enum zColor _val );
__declspec(implementation_key(6743)) _variant_t IGFXLine::GetvXYZ ( );
__declspec(implementation_key(6744)) void IGFXLine::PutvXYZ ( const _variant_t & _val );
__declspec(implementation_key(6745)) int IGFXLine::GetID ( );
__declspec(implementation_key(6746)) void IGFXLine::PutID ( int _val );
__declspec(implementation_key(6747)) int IGFXLine::GetsetID ( );
__declspec(implementation_key(6748)) void IGFXLine::PutsetID ( int _val );
__declspec(implementation_key(6749)) int IGFXLine::GetActive ( );
__declspec(implementation_key(6750)) void IGFXLine::PutActive ( int _val );
__declspec(implementation_key(6751)) double IGFXArrow::Getxyz ( int nVectorIndex );
__declspec(implementation_key(6752)) void IGFXArrow::Putxyz ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(6753)) double IGFXArrow::Getdxyz ( int nVectorIndex );
__declspec(implementation_key(6754)) void IGFXArrow::Putdxyz ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(6755)) enum zReturnCode IGFXArrow::PutAll ( int entID, double x, double y, double z, double dX, double dY, double dZ, double Length, enum zGFXArrowMode lengthmode, int layer, enum zColor color, enum zGFXArrowStyle style );
__declspec(implementation_key(6756)) enum zReturnCode IGFXArrow::PutAllArray ( int numArrow, const _variant_t & entID, const _variant_t & xyz, const _variant_t & dxyz, const _variant_t & Length, const _variant_t & lengthmode, const _variant_t & layer, const _variant_t & color, const _variant_t & style );
__declspec(implementation_key(6757)) enum zReturnCode IGFXArrow::PutCoordArray ( int numArrow, const _variant_t & xyz, const _variant_t & dxyz, const _variant_t & Length, enum zGFXArrowMode lengthmode, int layer, enum zColor color, enum zGFXArrowStyle style );
__declspec(implementation_key(6758)) enum zReturnCode IGFXArrow::DeleteAll ( VARIANT_BOOL bAllSets, int nSetID );
__declspec(implementation_key(6759)) enum zReturnCode IGFXArrow::Delete ( int entID );
__declspec(implementation_key(6760)) enum zReturnCode IGFXArrow::NextSet ( );
__declspec(implementation_key(6761)) enum zReturnCode IGFXArrow::PrevSet ( );
__declspec(implementation_key(6762)) enum zReturnCode IGFXArrow::NextEmptySet ( );
__declspec(implementation_key(6763)) enum zReturnCode IGFXArrow::PrevEmptySet ( );
__declspec(implementation_key(6764)) enum zReturnCode IGFXArrow::Get ( int ID );
__declspec(implementation_key(6765)) enum zReturnCode IGFXArrow::Put ( int ID );
__declspec(implementation_key(6766)) enum zReturnCode IGFXArrow::Exist ( int ID );
__declspec(implementation_key(6767)) enum zReturnCode IGFXArrow::Deletable ( int ID );
__declspec(implementation_key(6768)) enum zReturnCode IGFXArrow::Reset ( );
__declspec(implementation_key(6769)) enum zReturnCode IGFXArrow::Next ( );
__declspec(implementation_key(6770)) enum zReturnCode IGFXArrow::Prev ( );
__declspec(implementation_key(6771)) enum zReturnCode IGFXArrow::First ( );
__declspec(implementation_key(6772)) enum zReturnCode IGFXArrow::Last ( );
__declspec(implementation_key(6773)) int IGFXArrow::NextID ( );
__declspec(implementation_key(6774)) int IGFXArrow::PrevID ( );
__declspec(implementation_key(6775)) int IGFXArrow::NextEmptyID ( );
__declspec(implementation_key(6776)) int IGFXArrow::PrevEmptyID ( );
__declspec(implementation_key(6777)) enum zReturnCode IGFXArrow::GetLibrary ( int ID );
__declspec(implementation_key(6778)) enum zReturnCode IGFXArrow::PutLibrary ( );
__declspec(implementation_key(6779)) enum zReturnCode IGFXArrow::DeleteLibrary ( int ID );
__declspec(implementation_key(6780)) enum zReturnCode IGFXArrow::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6781)) enum zReturnCode IGFXArrow::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6782)) int IGFXArrow::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(6783)) enum zReturnCode IGFXArrow::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(6784)) enum zReturnCode IGFXArrow::NextInSet ( int nSetID );
__declspec(implementation_key(6785)) enum zReturnCode IGFXArrow::FirstInSet ( int nSetID );
__declspec(implementation_key(6786)) int IGFXArrow::CountSet ( );
__declspec(implementation_key(6787)) enum zReturnCode IGFXArrow::NextExistingInSet ( int nSetID );
__declspec(implementation_key(6788)) enum zReturnCode IGFXArrow::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(6789)) double IGFXArrow::Getx ( );
__declspec(implementation_key(6790)) void IGFXArrow::Putx ( double _val );
__declspec(implementation_key(6791)) double IGFXArrow::Gety ( );
__declspec(implementation_key(6792)) void IGFXArrow::Puty ( double _val );
__declspec(implementation_key(6793)) double IGFXArrow::Getz ( );
__declspec(implementation_key(6794)) void IGFXArrow::Putz ( double _val );
__declspec(implementation_key(6795)) double IGFXArrow::GetdX ( );
__declspec(implementation_key(6796)) void IGFXArrow::PutdX ( double _val );
__declspec(implementation_key(6797)) double IGFXArrow::GetdY ( );
__declspec(implementation_key(6798)) void IGFXArrow::PutdY ( double _val );
__declspec(implementation_key(6799)) double IGFXArrow::GetdZ ( );
__declspec(implementation_key(6800)) void IGFXArrow::PutdZ ( double _val );
__declspec(implementation_key(6801)) double IGFXArrow::GetLength ( );
__declspec(implementation_key(6802)) void IGFXArrow::PutLength ( double _val );
__declspec(implementation_key(6803)) enum zGFXArrowMode IGFXArrow::Getlengthmode ( );
__declspec(implementation_key(6804)) void IGFXArrow::Putlengthmode ( enum zGFXArrowMode _val );
__declspec(implementation_key(6805)) int IGFXArrow::Getlayer ( );
__declspec(implementation_key(6806)) void IGFXArrow::Putlayer ( int _val );
__declspec(implementation_key(6807)) enum zColor IGFXArrow::Getcolor ( );
__declspec(implementation_key(6808)) void IGFXArrow::Putcolor ( enum zColor _val );
__declspec(implementation_key(6809)) enum zGFXArrowStyle IGFXArrow::Getstyle ( );
__declspec(implementation_key(6810)) void IGFXArrow::Putstyle ( enum zGFXArrowStyle _val );
__declspec(implementation_key(6811)) _variant_t IGFXArrow::GetvXYZ ( );
__declspec(implementation_key(6812)) void IGFXArrow::PutvXYZ ( const _variant_t & _val );
__declspec(implementation_key(6813)) _variant_t IGFXArrow::Getvdxyz ( );
__declspec(implementation_key(6814)) void IGFXArrow::Putvdxyz ( const _variant_t & _val );
__declspec(implementation_key(6815)) int IGFXArrow::GetID ( );
__declspec(implementation_key(6816)) void IGFXArrow::PutID ( int _val );
__declspec(implementation_key(6817)) int IGFXArrow::GetsetID ( );
__declspec(implementation_key(6818)) void IGFXArrow::PutsetID ( int _val );
__declspec(implementation_key(6819)) int IGFXArrow::GetActive ( );
__declspec(implementation_key(6820)) void IGFXArrow::PutActive ( int _val );
__declspec(implementation_key(6821)) double IGFXTria3::Getxyz ( int nRowIndex, int nColIndex );
__declspec(implementation_key(6822)) void IGFXTria3::Putxyz ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(6823)) double IGFXTria3::Getnormal ( int nRowIndex, int nColIndex );
__declspec(implementation_key(6824)) void IGFXTria3::Putnormal ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(6825)) enum zReturnCode IGFXTria3::PutAll ( int entID, const _variant_t & xyz, enum zGFXEdgeFlags edgeflags, const _variant_t & normal, VARIANT_BOOL autonormal, int layer, enum zColor fillcolor, enum zColor edgecolor );
__declspec(implementation_key(6826)) enum zReturnCode IGFXTria3::PutAllArray ( int numTria, const _variant_t & entID, const _variant_t & xyz, const _variant_t & edgeflags, const _variant_t & normal, const _variant_t & autonormal, const _variant_t & layer, const _variant_t & fillcolor, const _variant_t & edgecolor );
__declspec(implementation_key(6827)) enum zReturnCode IGFXTria3::PutCoordNormalArray ( int numTria, const _variant_t & xyz, const _variant_t & edgeflags, const _variant_t & normal, VARIANT_BOOL autonormal, int layer, enum zColor fillcolor, enum zColor edgecolor );
__declspec(implementation_key(6828)) enum zReturnCode IGFXTria3::PutCoordArray ( int numTria, const _variant_t & xyz, int layer, enum zColor fillcolor, enum zColor edgecolor );
__declspec(implementation_key(6829)) enum zReturnCode IGFXTria3::DeleteAll ( VARIANT_BOOL bAllSets, int nSetID );
__declspec(implementation_key(6830)) enum zReturnCode IGFXTria3::Delete ( int entID );
__declspec(implementation_key(6831)) enum zReturnCode IGFXTria3::NextSet ( );
__declspec(implementation_key(6832)) enum zReturnCode IGFXTria3::PrevSet ( );
__declspec(implementation_key(6833)) enum zReturnCode IGFXTria3::NextEmptySet ( );
__declspec(implementation_key(6834)) enum zReturnCode IGFXTria3::PrevEmptySet ( );
__declspec(implementation_key(6835)) enum zReturnCode IGFXTria3::Get ( int ID );
__declspec(implementation_key(6836)) enum zReturnCode IGFXTria3::Put ( int ID );
__declspec(implementation_key(6837)) enum zReturnCode IGFXTria3::Exist ( int ID );
__declspec(implementation_key(6838)) enum zReturnCode IGFXTria3::Deletable ( int ID );
__declspec(implementation_key(6839)) enum zReturnCode IGFXTria3::Reset ( );
__declspec(implementation_key(6840)) enum zReturnCode IGFXTria3::Next ( );
__declspec(implementation_key(6841)) enum zReturnCode IGFXTria3::Prev ( );
__declspec(implementation_key(6842)) enum zReturnCode IGFXTria3::First ( );
__declspec(implementation_key(6843)) enum zReturnCode IGFXTria3::Last ( );
__declspec(implementation_key(6844)) int IGFXTria3::NextID ( );
__declspec(implementation_key(6845)) int IGFXTria3::PrevID ( );
__declspec(implementation_key(6846)) int IGFXTria3::NextEmptyID ( );
__declspec(implementation_key(6847)) int IGFXTria3::PrevEmptyID ( );
__declspec(implementation_key(6848)) enum zReturnCode IGFXTria3::GetLibrary ( int ID );
__declspec(implementation_key(6849)) enum zReturnCode IGFXTria3::PutLibrary ( );
__declspec(implementation_key(6850)) enum zReturnCode IGFXTria3::DeleteLibrary ( int ID );
__declspec(implementation_key(6851)) enum zReturnCode IGFXTria3::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6852)) enum zReturnCode IGFXTria3::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6853)) int IGFXTria3::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(6854)) enum zReturnCode IGFXTria3::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(6855)) enum zReturnCode IGFXTria3::NextInSet ( int nSetID );
__declspec(implementation_key(6856)) enum zReturnCode IGFXTria3::FirstInSet ( int nSetID );
__declspec(implementation_key(6857)) int IGFXTria3::CountSet ( );
__declspec(implementation_key(6858)) enum zReturnCode IGFXTria3::NextExistingInSet ( int nSetID );
__declspec(implementation_key(6859)) enum zReturnCode IGFXTria3::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(6860)) _variant_t IGFXTria3::GetvXYZ ( );
__declspec(implementation_key(6861)) void IGFXTria3::PutvXYZ ( const _variant_t & _val );
__declspec(implementation_key(6862)) _variant_t IGFXTria3::GetvNormal ( );
__declspec(implementation_key(6863)) void IGFXTria3::PutvNormal ( const _variant_t & _val );
__declspec(implementation_key(6864)) int IGFXTria3::Getlayer ( );
__declspec(implementation_key(6865)) void IGFXTria3::Putlayer ( int _val );
__declspec(implementation_key(6866)) enum zColor IGFXTria3::Getfillcolor ( );
__declspec(implementation_key(6867)) void IGFXTria3::Putfillcolor ( enum zColor _val );
__declspec(implementation_key(6868)) enum zColor IGFXTria3::Getedgecolor ( );
__declspec(implementation_key(6869)) void IGFXTria3::Putedgecolor ( enum zColor _val );
__declspec(implementation_key(6870)) enum zGFXEdgeFlags IGFXTria3::Getedgeflags ( );
__declspec(implementation_key(6871)) void IGFXTria3::Putedgeflags ( enum zGFXEdgeFlags _val );
__declspec(implementation_key(6872)) VARIANT_BOOL IGFXTria3::Getautonormal ( );
__declspec(implementation_key(6873)) void IGFXTria3::Putautonormal ( VARIANT_BOOL _val );
__declspec(implementation_key(6874)) int IGFXTria3::GetID ( );
__declspec(implementation_key(6875)) void IGFXTria3::PutID ( int _val );
__declspec(implementation_key(6876)) int IGFXTria3::GetsetID ( );
__declspec(implementation_key(6877)) void IGFXTria3::PutsetID ( int _val );
__declspec(implementation_key(6878)) int IGFXTria3::GetActive ( );
__declspec(implementation_key(6879)) void IGFXTria3::PutActive ( int _val );
__declspec(implementation_key(6880)) double IGFXQuad4::Getxyz ( int nRowIndex, int nColIndex );
__declspec(implementation_key(6881)) void IGFXQuad4::Putxyz ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(6882)) double IGFXQuad4::Getnormal ( int nRowIndex, int nColIndex );
__declspec(implementation_key(6883)) void IGFXQuad4::Putnormal ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(6884)) enum zReturnCode IGFXQuad4::PutAll ( int entID, const _variant_t & xyz, enum zGFXEdgeFlags edgeflags, const _variant_t & normal, VARIANT_BOOL autonormal, int layer, enum zColor fillcolor, enum zColor edgecolor );
__declspec(implementation_key(6885)) enum zReturnCode IGFXQuad4::PutAllArray ( int numQuad, const _variant_t & entID, const _variant_t & xyz, const _variant_t & edgeflags, const _variant_t & normal, const _variant_t & autonormal, const _variant_t & layer, const _variant_t & fillcolor, const _variant_t & edgecolor );
__declspec(implementation_key(6886)) enum zReturnCode IGFXQuad4::PutCoordNormalArray ( int numQuad, const _variant_t & xyz, const _variant_t & edgeflags, const _variant_t & normal, VARIANT_BOOL autonormal, int layer, enum zColor fillcolor, enum zColor edgecolor );
__declspec(implementation_key(6887)) enum zReturnCode IGFXQuad4::PutCoordArray ( int numQuad, const _variant_t & xyz, int layer, enum zColor fillcolor, enum zColor edgecolor );
__declspec(implementation_key(6888)) enum zReturnCode IGFXQuad4::DeleteAll ( VARIANT_BOOL bAllSets, int nSetID );
__declspec(implementation_key(6889)) enum zReturnCode IGFXQuad4::Delete ( int entID );
__declspec(implementation_key(6890)) enum zReturnCode IGFXQuad4::NextSet ( );
__declspec(implementation_key(6891)) enum zReturnCode IGFXQuad4::PrevSet ( );
__declspec(implementation_key(6892)) enum zReturnCode IGFXQuad4::NextEmptySet ( );
__declspec(implementation_key(6893)) enum zReturnCode IGFXQuad4::PrevEmptySet ( );
__declspec(implementation_key(6894)) enum zReturnCode IGFXQuad4::Get ( int ID );
__declspec(implementation_key(6895)) enum zReturnCode IGFXQuad4::Put ( int ID );
__declspec(implementation_key(6896)) enum zReturnCode IGFXQuad4::Exist ( int ID );
__declspec(implementation_key(6897)) enum zReturnCode IGFXQuad4::Deletable ( int ID );
__declspec(implementation_key(6898)) enum zReturnCode IGFXQuad4::Reset ( );
__declspec(implementation_key(6899)) enum zReturnCode IGFXQuad4::Next ( );
__declspec(implementation_key(6900)) enum zReturnCode IGFXQuad4::Prev ( );
__declspec(implementation_key(6901)) enum zReturnCode IGFXQuad4::First ( );
__declspec(implementation_key(6902)) enum zReturnCode IGFXQuad4::Last ( );
__declspec(implementation_key(6903)) int IGFXQuad4::NextID ( );
__declspec(implementation_key(6904)) int IGFXQuad4::PrevID ( );
__declspec(implementation_key(6905)) int IGFXQuad4::NextEmptyID ( );
__declspec(implementation_key(6906)) int IGFXQuad4::PrevEmptyID ( );
__declspec(implementation_key(6907)) enum zReturnCode IGFXQuad4::GetLibrary ( int ID );
__declspec(implementation_key(6908)) enum zReturnCode IGFXQuad4::PutLibrary ( );
__declspec(implementation_key(6909)) enum zReturnCode IGFXQuad4::DeleteLibrary ( int ID );
__declspec(implementation_key(6910)) enum zReturnCode IGFXQuad4::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6911)) enum zReturnCode IGFXQuad4::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6912)) int IGFXQuad4::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(6913)) enum zReturnCode IGFXQuad4::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(6914)) enum zReturnCode IGFXQuad4::NextInSet ( int nSetID );
__declspec(implementation_key(6915)) enum zReturnCode IGFXQuad4::FirstInSet ( int nSetID );
__declspec(implementation_key(6916)) int IGFXQuad4::CountSet ( );
__declspec(implementation_key(6917)) enum zReturnCode IGFXQuad4::NextExistingInSet ( int nSetID );
__declspec(implementation_key(6918)) enum zReturnCode IGFXQuad4::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(6919)) _variant_t IGFXQuad4::GetvXYZ ( );
__declspec(implementation_key(6920)) void IGFXQuad4::PutvXYZ ( const _variant_t & _val );
__declspec(implementation_key(6921)) _variant_t IGFXQuad4::GetvNormal ( );
__declspec(implementation_key(6922)) void IGFXQuad4::PutvNormal ( const _variant_t & _val );
__declspec(implementation_key(6923)) int IGFXQuad4::Getlayer ( );
__declspec(implementation_key(6924)) void IGFXQuad4::Putlayer ( int _val );
__declspec(implementation_key(6925)) enum zColor IGFXQuad4::Getfillcolor ( );
__declspec(implementation_key(6926)) void IGFXQuad4::Putfillcolor ( enum zColor _val );
__declspec(implementation_key(6927)) enum zColor IGFXQuad4::Getedgecolor ( );
__declspec(implementation_key(6928)) void IGFXQuad4::Putedgecolor ( enum zColor _val );
__declspec(implementation_key(6929)) enum zGFXEdgeFlags IGFXQuad4::Getedgeflags ( );
__declspec(implementation_key(6930)) void IGFXQuad4::Putedgeflags ( enum zGFXEdgeFlags _val );
__declspec(implementation_key(6931)) VARIANT_BOOL IGFXQuad4::Getautonormal ( );
__declspec(implementation_key(6932)) void IGFXQuad4::Putautonormal ( VARIANT_BOOL _val );
__declspec(implementation_key(6933)) int IGFXQuad4::GetID ( );
__declspec(implementation_key(6934)) void IGFXQuad4::PutID ( int _val );
__declspec(implementation_key(6935)) int IGFXQuad4::GetsetID ( );
__declspec(implementation_key(6936)) void IGFXQuad4::PutsetID ( int _val );
__declspec(implementation_key(6937)) int IGFXQuad4::GetActive ( );
__declspec(implementation_key(6938)) void IGFXQuad4::PutActive ( int _val );
__declspec(implementation_key(6939)) enum zReturnCode IGlobalPly::NextSet ( );
__declspec(implementation_key(6940)) enum zReturnCode IGlobalPly::PrevSet ( );
__declspec(implementation_key(6941)) enum zReturnCode IGlobalPly::NextEmptySet ( );
__declspec(implementation_key(6942)) enum zReturnCode IGlobalPly::PrevEmptySet ( );
__declspec(implementation_key(6943)) enum zReturnCode IGlobalPly::Get ( int ID );
__declspec(implementation_key(6944)) enum zReturnCode IGlobalPly::Put ( int ID );
__declspec(implementation_key(6945)) enum zReturnCode IGlobalPly::Exist ( int ID );
__declspec(implementation_key(6946)) enum zReturnCode IGlobalPly::Deletable ( int ID );
__declspec(implementation_key(6947)) enum zReturnCode IGlobalPly::Delete ( int ID );
__declspec(implementation_key(6948)) enum zReturnCode IGlobalPly::Reset ( );
__declspec(implementation_key(6949)) enum zReturnCode IGlobalPly::Next ( );
__declspec(implementation_key(6950)) enum zReturnCode IGlobalPly::Prev ( );
__declspec(implementation_key(6951)) enum zReturnCode IGlobalPly::First ( );
__declspec(implementation_key(6952)) enum zReturnCode IGlobalPly::Last ( );
__declspec(implementation_key(6953)) int IGlobalPly::NextID ( );
__declspec(implementation_key(6954)) int IGlobalPly::PrevID ( );
__declspec(implementation_key(6955)) int IGlobalPly::NextEmptyID ( );
__declspec(implementation_key(6956)) int IGlobalPly::PrevEmptyID ( );
__declspec(implementation_key(6957)) enum zReturnCode IGlobalPly::GetLibrary ( int ID );
__declspec(implementation_key(6958)) enum zReturnCode IGlobalPly::PutLibrary ( );
__declspec(implementation_key(6959)) enum zReturnCode IGlobalPly::DeleteLibrary ( int ID );
__declspec(implementation_key(6960)) enum zReturnCode IGlobalPly::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6961)) enum zReturnCode IGlobalPly::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(6962)) int IGlobalPly::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(6963)) enum zReturnCode IGlobalPly::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(6964)) enum zReturnCode IGlobalPly::NextInSet ( int nSetID );
__declspec(implementation_key(6965)) enum zReturnCode IGlobalPly::FirstInSet ( int nSetID );
__declspec(implementation_key(6966)) int IGlobalPly::CountSet ( );
__declspec(implementation_key(6967)) enum zReturnCode IGlobalPly::NextExistingInSet ( int nSetID );
__declspec(implementation_key(6968)) enum zReturnCode IGlobalPly::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(6969)) _bstr_t IGlobalPly::Gettitle ( );
__declspec(implementation_key(6970)) void IGlobalPly::Puttitle ( _bstr_t _val );
__declspec(implementation_key(6971)) double IGlobalPly::Getthickness ( );
__declspec(implementation_key(6972)) void IGlobalPly::Putthickness ( double _val );
__declspec(implementation_key(6973)) int IGlobalPly::GetmatlID ( );
__declspec(implementation_key(6974)) void IGlobalPly::PutmatlID ( int _val );
__declspec(implementation_key(6975)) int IGlobalPly::GetID ( );
__declspec(implementation_key(6976)) void IGlobalPly::PutID ( int _val );
__declspec(implementation_key(6977)) int IGlobalPly::GetsetID ( );
__declspec(implementation_key(6978)) void IGlobalPly::PutsetID ( int _val );
__declspec(implementation_key(6979)) int IGlobalPly::GetActive ( );
__declspec(implementation_key(6980)) void IGlobalPly::PutActive ( int _val );
__declspec(implementation_key(6981)) enum zReturnCode ILoadBolt::Put ( int entID );
__declspec(implementation_key(6982)) enum zReturnCode ILoadBolt::Delete ( int entID );
__declspec(implementation_key(6983)) enum zReturnCode ILoadBolt::AddArray ( int Count, const _variant_t & RegionID, const _variant_t & values );
__declspec(implementation_key(6984)) enum zReturnCode ILoadBolt::NextSet ( );
__declspec(implementation_key(6985)) enum zReturnCode ILoadBolt::PrevSet ( );
__declspec(implementation_key(6986)) enum zReturnCode ILoadBolt::NextEmptySet ( );
__declspec(implementation_key(6987)) enum zReturnCode ILoadBolt::PrevEmptySet ( );
__declspec(implementation_key(6988)) enum zReturnCode ILoadBolt::Get ( int ID );
__declspec(implementation_key(6989)) enum zReturnCode ILoadBolt::Exist ( int ID );
__declspec(implementation_key(6990)) enum zReturnCode ILoadBolt::Deletable ( int ID );
__declspec(implementation_key(6991)) enum zReturnCode ILoadBolt::Reset ( );
__declspec(implementation_key(6992)) enum zReturnCode ILoadBolt::Next ( );
__declspec(implementation_key(6993)) enum zReturnCode ILoadBolt::Prev ( );
__declspec(implementation_key(6994)) enum zReturnCode ILoadBolt::First ( );
__declspec(implementation_key(6995)) enum zReturnCode ILoadBolt::Last ( );
__declspec(implementation_key(6996)) int ILoadBolt::NextID ( );
__declspec(implementation_key(6997)) int ILoadBolt::PrevID ( );
__declspec(implementation_key(6998)) int ILoadBolt::NextEmptyID ( );
__declspec(implementation_key(6999)) int ILoadBolt::PrevEmptyID ( );
__declspec(implementation_key(7000)) enum zReturnCode ILoadBolt::GetLibrary ( int ID );
__declspec(implementation_key(7001)) enum zReturnCode ILoadBolt::PutLibrary ( );
__declspec(implementation_key(7002)) enum zReturnCode ILoadBolt::DeleteLibrary ( int ID );
__declspec(implementation_key(7003)) enum zReturnCode ILoadBolt::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7004)) enum zReturnCode ILoadBolt::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7005)) int ILoadBolt::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(7006)) enum zReturnCode ILoadBolt::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(7007)) enum zReturnCode ILoadBolt::NextInSet ( int nSetID );
__declspec(implementation_key(7008)) enum zReturnCode ILoadBolt::FirstInSet ( int nSetID );
__declspec(implementation_key(7009)) int ILoadBolt::CountSet ( );
__declspec(implementation_key(7010)) enum zReturnCode ILoadBolt::NextExistingInSet ( int nSetID );
__declspec(implementation_key(7011)) enum zReturnCode ILoadBolt::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(7012)) double ILoadBolt::Getpreload ( );
__declspec(implementation_key(7013)) void ILoadBolt::Putpreload ( double _val );
__declspec(implementation_key(7014)) int ILoadBolt::Getlayer ( );
__declspec(implementation_key(7015)) void ILoadBolt::Putlayer ( int _val );
__declspec(implementation_key(7016)) enum zColor ILoadBolt::Getcolor ( );
__declspec(implementation_key(7017)) void ILoadBolt::Putcolor ( enum zColor _val );
__declspec(implementation_key(7018)) int ILoadBolt::GetLoadDefinitionID ( );
__declspec(implementation_key(7019)) void ILoadBolt::PutLoadDefinitionID ( int _val );
__declspec(implementation_key(7020)) int ILoadBolt::GetID ( );
__declspec(implementation_key(7021)) void ILoadBolt::PutID ( int _val );
__declspec(implementation_key(7022)) int ILoadBolt::GetsetID ( );
__declspec(implementation_key(7023)) void ILoadBolt::PutsetID ( int _val );
__declspec(implementation_key(7024)) int ILoadBolt::GetActive ( );
__declspec(implementation_key(7025)) void ILoadBolt::PutActive ( int _val );
__declspec(implementation_key(7026)) enum zReturnCode IMapOutput::MapFromModelToSet ( __int64 outModelID, int nGroup, int nOutSet, int nOutVect );
__declspec(implementation_key(7027)) enum zReturnCode IMapOutput::MapFromModelToSet2 ( __int64 outModelID, int nGroup, int nOutSet, int nOutVect, const _variant_t & ID, const _variant_t & elFace );
__declspec(implementation_key(7028)) enum zReturnCode IMapOutput::MapFromModelToLocation ( __int64 outModelID, int nGroup, int nOutSet, int nOutVect, const _variant_t & vLocationX, const _variant_t & vLocationY, const _variant_t & vLocationZ, VARIANT * vLocationP, VARIANT * vLoadX, VARIANT * vLoadY, VARIANT * vLoadZ );
__declspec(implementation_key(7029)) enum zReturnCode IMapOutput::GetOutputDataSurface ( int dataSurfID );
__declspec(implementation_key(7030)) enum zReturnCode IMapOutput::MapOutputDataToLocation ( int Count, const _variant_t & vXYx, VARIANT * vValXYZ, VARIANT * qValid );
__declspec(implementation_key(7031)) enum zReturnCode IMapOutput::Deletable ( int ID );
__declspec(implementation_key(7032)) enum zReturnCode IMapOutput::Reset ( );
__declspec(implementation_key(7033)) enum zReturnCode IMapOutput::First ( );
__declspec(implementation_key(7034)) enum zReturnCode IMapOutput::Last ( );
__declspec(implementation_key(7035)) enum zReturnCode IMapOutput::GetLibrary ( int ID );
__declspec(implementation_key(7036)) enum zReturnCode IMapOutput::PutLibrary ( );
__declspec(implementation_key(7037)) enum zReturnCode IMapOutput::DeleteLibrary ( int ID );
__declspec(implementation_key(7038)) enum zReturnCode IMapOutput::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7039)) enum zReturnCode IMapOutput::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7040)) int IMapOutput::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(7041)) enum zReturnCode IMapOutput::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(7042)) enum zReturnCode IMapOutput::FirstInSet ( int nSetID );
__declspec(implementation_key(7043)) enum zReturnCode IMapOutput::NextExistingInSet ( int nSetID );
__declspec(implementation_key(7044)) enum zReturnCode IMapOutput::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(7045)) enum zMapOption IMapOutput::GetMapOption ( );
__declspec(implementation_key(7046)) void IMapOutput::PutMapOption ( enum zMapOption _val );
__declspec(implementation_key(7047)) double IMapOutput::GetDefaultMapValue1 ( );
__declspec(implementation_key(7048)) void IMapOutput::PutDefaultMapValue1 ( double _val );
__declspec(implementation_key(7049)) double IMapOutput::GetDefaultMapValue2 ( );
__declspec(implementation_key(7050)) void IMapOutput::PutDefaultMapValue2 ( double _val );
__declspec(implementation_key(7051)) double IMapOutput::GetDefaultMapValue3 ( );
__declspec(implementation_key(7052)) void IMapOutput::PutDefaultMapValue3 ( double _val );
__declspec(implementation_key(7053)) int IMapOutput::GetTargetSet ( );
__declspec(implementation_key(7054)) void IMapOutput::PutTargetSet ( int _val );
__declspec(implementation_key(7055)) enum zMapLoadType IMapOutput::GetloadType ( );
__declspec(implementation_key(7056)) void IMapOutput::PutloadType ( enum zMapLoadType _val );
__declspec(implementation_key(7057)) enum zMapType IMapOutput::GetMapToType ( );
__declspec(implementation_key(7058)) void IMapOutput::PutMapToType ( enum zMapType _val );
__declspec(implementation_key(7059)) double IMapOutput::GetMapOffsetTolerance ( );
__declspec(implementation_key(7060)) void IMapOutput::PutMapOffsetTolerance ( double _val );
__declspec(implementation_key(7061)) enum zDataConvert IMapOutput::GetDataConversion ( );
__declspec(implementation_key(7062)) void IMapOutput::PutDataConversion ( enum zDataConvert _val );
__declspec(implementation_key(7063)) int IMapOutput::GetID ( );
__declspec(implementation_key(7064)) void IMapOutput::PutID ( int _val );
__declspec(implementation_key(7065)) int IMapOutput::GetsetID ( );
__declspec(implementation_key(7066)) void IMapOutput::PutsetID ( int _val );
__declspec(implementation_key(7067)) int IMapOutput::GetActive ( );
__declspec(implementation_key(7068)) void IMapOutput::PutActive ( int _val );
__declspec(implementation_key(7069)) enum zReturnCode IDataSurf::GetDataSurf ( int entID );
__declspec(implementation_key(7070)) enum zReturnCode IDataSurf::PutDataSurf ( int entID );
__declspec(implementation_key(7071)) enum zReturnCode IDataSurf::VarBetween2Pts ( const _variant_t & xyz, const _variant_t & val_xyz );
__declspec(implementation_key(7072)) enum zReturnCode IDataSurf::VarAlongCoord ( int projID, const _variant_t & xyz, const _variant_t & val_xyz );
__declspec(implementation_key(7073)) enum zReturnCode IDataSurf::VarBetween4Pts ( const _variant_t & xyz, const _variant_t & val_xyz );
__declspec(implementation_key(7074)) enum zReturnCode IDataSurf::VarBetween8Pts ( const _variant_t & xyz, const _variant_t & val_xyz );
__declspec(implementation_key(7075)) enum zReturnCode IDataSurf::VarArbitrary3DCoord ( int projID, const _variant_t & xyz, const _variant_t & val_xyz );
__declspec(implementation_key(7076)) enum zReturnCode IDataSurf::VarEquation ( _bstr_t Equation );
__declspec(implementation_key(7077)) enum zReturnCode IDataSurf::VarOutputMap ( __int64 ModelID, int groupID, int outSetID, int outVecID );
__declspec(implementation_key(7078)) enum zReturnCode IDataSurf::VarMeshSurface ( int setID, enum zDataType enOnType, _bstr_t sX, _bstr_t sY, _bstr_t sZ );
__declspec(implementation_key(7079)) enum zReturnCode IDataSurf::VarSpatialUVtable ( int uDiv, int vDiv );
__declspec(implementation_key(7080)) enum zReturnCode IDataSurf::VarSpatialXYZTable ( int xDiv, int yDiv, int zDiv );
__declspec(implementation_key(7081)) enum zReturnCode IDataSurf::VarParametric2Pt ( const _variant_t & xyz, const _variant_t & val_xyz );
__declspec(implementation_key(7082)) enum zReturnCode IDataSurf::GetCellValue ( int nPage, int nRow, int nCol, int nComponent, double * dValue );
__declspec(implementation_key(7083)) enum zReturnCode IDataSurf::SetCellValue ( int nPage, int nRow, int nCol, int nComponent, double dValue );
__declspec(implementation_key(7084)) enum zReturnCode IDataSurf::SetCellEquation ( int nPage, int nRow, int nCol, int nComponent, _bstr_t sEquation );
__declspec(implementation_key(7085)) enum zReturnCode IDataSurf::GetColumnTitle ( int nPage, int nCol, BSTR * sTitle );
__declspec(implementation_key(7086)) enum zReturnCode IDataSurf::GetColumnValue ( int nPage, int nCol, double * dValue );
__declspec(implementation_key(7087)) enum zReturnCode IDataSurf::GetRowTitle ( int nPage, int nCol, BSTR * sTitle );
__declspec(implementation_key(7088)) enum zReturnCode IDataSurf::GetRowValue ( int nPage, int nCol, double * dValue );
__declspec(implementation_key(7089)) enum zReturnCode IDataSurf::GetPageTitle ( int nPage, BSTR * sTitle );
__declspec(implementation_key(7090)) enum zReturnCode IDataSurf::GetPageValue ( int nPage, double * dValue );
__declspec(implementation_key(7091)) enum zReturnCode IDataSurf::SetColumnTitle ( int nPage, int nCol, _bstr_t sTitle );
__declspec(implementation_key(7092)) enum zReturnCode IDataSurf::SetColumnValue ( int nPage, int nCol, double rVal );
__declspec(implementation_key(7093)) enum zReturnCode IDataSurf::SetRowTitle ( int nPage, int nRow, _bstr_t sTitle );
__declspec(implementation_key(7094)) enum zReturnCode IDataSurf::SetRowValue ( int nPage, int nRow, double rVal );
__declspec(implementation_key(7095)) enum zReturnCode IDataSurf::SetPageTitle ( int nPage, _bstr_t sTitle );
__declspec(implementation_key(7096)) enum zReturnCode IDataSurf::SetPageValue ( int nPage, double rVal );
__declspec(implementation_key(7097)) enum zReturnCode IDataSurf::SetCellBlank ( int nPage, int nRow, int nCol, int nComponent );
__declspec(implementation_key(7098)) enum zReturnCode IDataSurf::GetDataSurfInfo ( int * nPages, int * nComponent, BSTR * sTitle );
__declspec(implementation_key(7099)) enum zReturnCode IDataSurf::GetPageInfo ( int nPage, int * nRow, int * nCol );
__declspec(implementation_key(7100)) enum zReturnCode IDataSurf::Resize ( int nPage, int nRow, int nCol, VARIANT_BOOL bVector );
__declspec(implementation_key(7101)) enum zReturnCode IDataSurf::VarParametric4Pt ( const _variant_t & xyz, const _variant_t & val_xyz );
__declspec(implementation_key(7102)) enum zReturnCode IDataSurf::Evaluate ( int geomID, enum zDataType enOnType, int mapSetID, VARIANT_BOOL isElemental );
__declspec(implementation_key(7103)) enum zReturnCode IDataSurf::GetData ( int geomID, int feaID, const _variant_t & Coord, double * sVal, VARIANT * cgXYZ );
__declspec(implementation_key(7104)) enum zReturnCode IDataSurf::GetDataSurfType ( );
__declspec(implementation_key(7105)) enum zReturnCode IDataSurf::Get ( int entID );
__declspec(implementation_key(7106)) enum zReturnCode IDataSurf::Put ( int entID );
__declspec(implementation_key(7107)) enum zReturnCode IDataSurf::NextSet ( );
__declspec(implementation_key(7108)) enum zReturnCode IDataSurf::PrevSet ( );
__declspec(implementation_key(7109)) enum zReturnCode IDataSurf::NextEmptySet ( );
__declspec(implementation_key(7110)) enum zReturnCode IDataSurf::PrevEmptySet ( );
__declspec(implementation_key(7111)) enum zReturnCode IDataSurf::Exist ( int ID );
__declspec(implementation_key(7112)) enum zReturnCode IDataSurf::Deletable ( int ID );
__declspec(implementation_key(7113)) enum zReturnCode IDataSurf::Delete ( int ID );
__declspec(implementation_key(7114)) enum zReturnCode IDataSurf::Reset ( );
__declspec(implementation_key(7115)) enum zReturnCode IDataSurf::Next ( );
__declspec(implementation_key(7116)) enum zReturnCode IDataSurf::Prev ( );
__declspec(implementation_key(7117)) enum zReturnCode IDataSurf::First ( );
__declspec(implementation_key(7118)) enum zReturnCode IDataSurf::Last ( );
__declspec(implementation_key(7119)) int IDataSurf::NextID ( );
__declspec(implementation_key(7120)) int IDataSurf::PrevID ( );
__declspec(implementation_key(7121)) int IDataSurf::NextEmptyID ( );
__declspec(implementation_key(7122)) int IDataSurf::PrevEmptyID ( );
__declspec(implementation_key(7123)) enum zReturnCode IDataSurf::GetLibrary ( int ID );
__declspec(implementation_key(7124)) enum zReturnCode IDataSurf::PutLibrary ( );
__declspec(implementation_key(7125)) enum zReturnCode IDataSurf::DeleteLibrary ( int ID );
__declspec(implementation_key(7126)) enum zReturnCode IDataSurf::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7127)) enum zReturnCode IDataSurf::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7128)) int IDataSurf::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(7129)) enum zReturnCode IDataSurf::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(7130)) enum zReturnCode IDataSurf::NextInSet ( int nSetID );
__declspec(implementation_key(7131)) enum zReturnCode IDataSurf::FirstInSet ( int nSetID );
__declspec(implementation_key(7132)) int IDataSurf::CountSet ( );
__declspec(implementation_key(7133)) enum zReturnCode IDataSurf::NextExistingInSet ( int nSetID );
__declspec(implementation_key(7134)) enum zReturnCode IDataSurf::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(7135)) _bstr_t IDataSurf::Gettitle ( );
__declspec(implementation_key(7136)) void IDataSurf::Puttitle ( _bstr_t _val );
__declspec(implementation_key(7137)) VARIANT_BOOL IDataSurf::GetVector ( );
__declspec(implementation_key(7138)) void IDataSurf::PutVector ( VARIANT_BOOL _val );
__declspec(implementation_key(7139)) int IDataSurf::GetAlongCoordProjectID ( );
__declspec(implementation_key(7140)) void IDataSurf::PutAlongCoordProjectID ( int _val );
__declspec(implementation_key(7141)) enum zMapOption IDataSurf::GetOutMapOption ( );
__declspec(implementation_key(7142)) void IDataSurf::PutOutMapOption ( enum zMapOption _val );
__declspec(implementation_key(7143)) double IDataSurf::GetTabularUdefVal ( );
__declspec(implementation_key(7144)) void IDataSurf::PutTabularUdefVal ( double _val );
__declspec(implementation_key(7145)) int IDataSurf::GetCSys ( );
__declspec(implementation_key(7146)) void IDataSurf::PutCSys ( int _val );
__declspec(implementation_key(7147)) double IDataSurf::GetDefOutMapValue1 ( );
__declspec(implementation_key(7148)) void IDataSurf::PutDefOutMapValue1 ( double _val );
__declspec(implementation_key(7149)) double IDataSurf::GetDefOutMapValue2 ( );
__declspec(implementation_key(7150)) void IDataSurf::PutDefOutMapValue2 ( double _val );
__declspec(implementation_key(7151)) double IDataSurf::GetDefOutMapValue3 ( );
__declspec(implementation_key(7152)) void IDataSurf::PutDefOutMapValue3 ( double _val );
__declspec(implementation_key(7153)) int IDataSurf::GetParamCurveSurfID ( );
__declspec(implementation_key(7154)) void IDataSurf::PutParamCurveSurfID ( int _val );
__declspec(implementation_key(7155)) int IDataSurf::GetInterpMin ( );
__declspec(implementation_key(7156)) void IDataSurf::PutInterpMin ( int _val );
__declspec(implementation_key(7157)) double IDataSurf::GetInterpPercent ( );
__declspec(implementation_key(7158)) void IDataSurf::PutInterpPercent ( double _val );
__declspec(implementation_key(7159)) int IDataSurf::GetTabularUdefOption ( );
__declspec(implementation_key(7160)) void IDataSurf::PutTabularUdefOption ( int _val );
__declspec(implementation_key(7161)) double IDataSurf::GetMapOffsetTolerance ( );
__declspec(implementation_key(7162)) void IDataSurf::PutMapOffsetTolerance ( double _val );
__declspec(implementation_key(7163)) VARIANT_BOOL IDataSurf::GetExtendEdgeValues ( );
__declspec(implementation_key(7164)) void IDataSurf::PutExtendEdgeValues ( VARIANT_BOOL _val );
__declspec(implementation_key(7165)) enum zDataConvert IDataSurf::GetDataConversion ( );
__declspec(implementation_key(7166)) void IDataSurf::PutDataConversion ( enum zDataConvert _val );
__declspec(implementation_key(7167)) int IDataSurf::GetID ( );
__declspec(implementation_key(7168)) void IDataSurf::PutID ( int _val );
__declspec(implementation_key(7169)) int IDataSurf::GetsetID ( );
__declspec(implementation_key(7170)) void IDataSurf::PutsetID ( int _val );
__declspec(implementation_key(7171)) int IDataSurf::GetActive ( );
__declspec(implementation_key(7172)) void IDataSurf::PutActive ( int _val );
__declspec(implementation_key(7173)) int IDataTable::FindRow ( int ModelID, int setID, int ID );
__declspec(implementation_key(7174)) enum zReturnCode IDataTable::GetRowInfo ( int * numRows, VARIANT * ModelID, VARIANT * setID, VARIANT * ID );
__declspec(implementation_key(7175)) enum zReturnCode IDataTable::GetRowVisible ( int nRow, VARIANT_BOOL * bVisible );
__declspec(implementation_key(7176)) enum zReturnCode IDataTable::SetRowVisible ( int nRowOrAll, VARIANT_BOOL bVisible );
__declspec(implementation_key(7177)) int IDataTable::FindColumn ( _bstr_t colTitle );
__declspec(implementation_key(7178)) enum zReturnCode IDataTable::GetColumnInfo ( int * numColumns, VARIANT * ColType, VARIANT * colTitle );
__declspec(implementation_key(7179)) enum zReturnCode IDataTable::GetColumnVisible ( int nColumn, VARIANT_BOOL * bVisible );
__declspec(implementation_key(7180)) enum zReturnCode IDataTable::SetColumnVisible ( int nColumnOrAll, VARIANT_BOOL bVisible );
__declspec(implementation_key(7181)) enum zReturnCode IDataTable::GetColumnWidth ( int nColumn, int * nWidth );
__declspec(implementation_key(7182)) enum zReturnCode IDataTable::SetColumnWidth ( int nColumnOrAll, int nWidth );
__declspec(implementation_key(7183)) enum zReturnCode IDataTable::GetColumnTitle ( int nColumn, BSTR * colTitle );
__declspec(implementation_key(7184)) enum zReturnCode IDataTable::SetColumnTitle ( int nColumn, _bstr_t colTitle );
__declspec(implementation_key(7185)) enum zReturnCode IDataTable::SetColumnPosition ( int nColumn, int nNewIndex, VARIANT_BOOL bAfter );
__declspec(implementation_key(7186)) enum zReturnCode IDataTable::SetColumnAlignment ( int nColumnOrAll, enum zAlignment nAlign );
__declspec(implementation_key(7187)) enum zReturnCode IDataTable::AddSelection ( int numRows, const _variant_t & Rows, VARIANT_BOOL bSelect );
__declspec(implementation_key(7188)) enum zReturnCode IDataTable::ClearSelection ( );
__declspec(implementation_key(7189)) enum zReturnCode IDataTable::GetSelection ( int * numRows, VARIANT * Rows );
__declspec(implementation_key(7190)) enum zReturnCode IDataTable::GetRowValues ( int numRowsOrAll, const _variant_t & Rows, int * numData, VARIANT * RowData );
__declspec(implementation_key(7191)) enum zReturnCode IDataTable::UpdateColumn ( int nColumn, enum zDataTableColumnType ColType, int nRows, const _variant_t & Rows, const _variant_t & value );
__declspec(implementation_key(7192)) enum zReturnCode IDataTable::GetColumnValue ( int nColumn, int numRowsOrAll, const _variant_t & Rows, int * numData, VARIANT * ColumnData );
__declspec(implementation_key(7193)) enum zReturnCode IDataTable::GetColumnText ( int nColumn, int numRowsOrAll, const _variant_t & Rows, int * numData, VARIANT * ColumnText );
__declspec(implementation_key(7194)) enum zReturnCode IDataTable::AddColumn ( VARIANT_BOOL bClear, VARIANT_BOOL bHidden, enum zDataType entityTYPE, int entitySetID, _bstr_t colTitle, enum zDataTableColumnType ColType, int nRows, const _variant_t & ID, const _variant_t & value, int * nNewColumnID );
__declspec(implementation_key(7195)) enum zReturnCode IDataTable::UpdateColumnByID ( int nColumn, int entitySetID, enum zDataTableColumnType ColType, int nRows, const _variant_t & ID, const _variant_t & value );
__declspec(implementation_key(7196)) enum zReturnCode IDataTable::AddEntityData ( VARIANT_BOOL bClear, enum zDataType entityTYPE, int entitySetID, int entityIDSet );
__declspec(implementation_key(7197)) enum zReturnCode IDataTable::AddMassProperties ( );
__declspec(implementation_key(7198)) enum zReturnCode IDataTable::AddElementChecks ( );
__declspec(implementation_key(7199)) enum zReturnCode IDataTable::AddMeshAssociativity ( );
__declspec(implementation_key(7200)) enum zReturnCode IDataTable::SetTextColor ( int nColumn, int numRows, const _variant_t & Rows, int nRed, int nGreen, int nBlue );
__declspec(implementation_key(7201)) enum zReturnCode IDataTable::SetBackgroundColor ( int nColumn, int numRows, const _variant_t & Rows, int nRed, int nGreen, int nBlue );
__declspec(implementation_key(7202)) enum zReturnCode IDataTable::AddGroup ( int nColumn, VARIANT_BOOL bShowInGroupOnly, VARIANT_BOOL bSortAscending );
__declspec(implementation_key(7203)) enum zReturnCode IDataTable::ClearGroup ( );
__declspec(implementation_key(7204)) enum zReturnCode IDataTable::GetGroup ( int * numColumns, VARIANT * Columns );
__declspec(implementation_key(7205)) enum zReturnCode IDataTable::ShowGroup ( VARIANT_BOOL bVisible );
__declspec(implementation_key(7206)) enum zReturnCode IDataTable::AddSort ( int nColumn, VARIANT_BOOL bSortAscending );
__declspec(implementation_key(7207)) enum zReturnCode IDataTable::ClearSort ( );
__declspec(implementation_key(7208)) enum zReturnCode IDataTable::GetSort ( int * numColumns, VARIANT * Columns );
__declspec(implementation_key(7209)) enum zReturnCode IDataTable::Lock ( VARIANT_BOOL bLock );
__declspec(implementation_key(7210)) enum zReturnCode IDataTable::Copy ( VARIANT_BOOL bCopyAll );
__declspec(implementation_key(7211)) enum zReturnCode IDataTable::clear ( );
__declspec(implementation_key(7212)) enum zReturnCode IDataTable::DeleteRows ( int numRows, const _variant_t & Rows );
__declspec(implementation_key(7213)) enum zReturnCode IDataTable::Show ( VARIANT_BOOL bShowAll );
__declspec(implementation_key(7214)) enum zReturnCode IDataTable::Print ( );
__declspec(implementation_key(7215)) enum zReturnCode IDataTable::AddOutput ( int nOutputSet, int nOutputVector, int * nNewColumnID );
__declspec(implementation_key(7216)) enum zReturnCode IDataTable::Save ( VARIANT_BOOL bCopyAll, _bstr_t fName, enum zDataTableSaveFormat nFormat );
__declspec(implementation_key(7217)) enum zReturnCode IDataTable::AddNastranElementChecks ( );
__declspec(implementation_key(7218)) int IDataTable::GetNumberOfRows ( );
__declspec(implementation_key(7219)) void IDataTable::PutNumberOfRows ( int _val );
__declspec(implementation_key(7220)) int IDataTable::GetNumberOfColumns ( );
__declspec(implementation_key(7221)) void IDataTable::PutNumberOfColumns ( int _val );
__declspec(implementation_key(7222)) enum zDataType IDataTable::Gettype ( );
__declspec(implementation_key(7223)) void IDataTable::Puttype ( enum zDataType _val );
__declspec(implementation_key(7224)) VARIANT_BOOL IDataTable::GetVisibleRowsOnly ( );
__declspec(implementation_key(7225)) void IDataTable::PutVisibleRowsOnly ( VARIANT_BOOL _val );
__declspec(implementation_key(7226)) VARIANT_BOOL IDataTable::GetVisibleColsOnly ( );
__declspec(implementation_key(7227)) void IDataTable::PutVisibleColsOnly ( VARIANT_BOOL _val );
__declspec(implementation_key(7228)) VARIANT_BOOL IDataTable::GetVisible ( );
__declspec(implementation_key(7229)) void IDataTable::PutVisible ( VARIANT_BOOL _val );
__declspec(implementation_key(7230)) VARIANT_BOOL IDataTable::GetLocked ( );
__declspec(implementation_key(7231)) void IDataTable::PutLocked ( VARIANT_BOOL _val );
__declspec(implementation_key(7232)) enum zReturnCode IReference::DeleteAll ( );
__declspec(implementation_key(7233)) enum zReturnCode IReference::NextSet ( );
__declspec(implementation_key(7234)) enum zReturnCode IReference::PrevSet ( );
__declspec(implementation_key(7235)) enum zReturnCode IReference::NextEmptySet ( );
__declspec(implementation_key(7236)) enum zReturnCode IReference::PrevEmptySet ( );
__declspec(implementation_key(7237)) enum zReturnCode IReference::Get ( int ID );
__declspec(implementation_key(7238)) enum zReturnCode IReference::Put ( int ID );
__declspec(implementation_key(7239)) enum zReturnCode IReference::Exist ( int ID );
__declspec(implementation_key(7240)) enum zReturnCode IReference::Deletable ( int ID );
__declspec(implementation_key(7241)) enum zReturnCode IReference::Delete ( int ID );
__declspec(implementation_key(7242)) enum zReturnCode IReference::Reset ( );
__declspec(implementation_key(7243)) enum zReturnCode IReference::Next ( );
__declspec(implementation_key(7244)) enum zReturnCode IReference::Prev ( );
__declspec(implementation_key(7245)) enum zReturnCode IReference::First ( );
__declspec(implementation_key(7246)) enum zReturnCode IReference::Last ( );
__declspec(implementation_key(7247)) int IReference::NextID ( );
__declspec(implementation_key(7248)) int IReference::PrevID ( );
__declspec(implementation_key(7249)) int IReference::NextEmptyID ( );
__declspec(implementation_key(7250)) int IReference::PrevEmptyID ( );
__declspec(implementation_key(7251)) enum zReturnCode IReference::GetLibrary ( int ID );
__declspec(implementation_key(7252)) enum zReturnCode IReference::PutLibrary ( );
__declspec(implementation_key(7253)) enum zReturnCode IReference::DeleteLibrary ( int ID );
__declspec(implementation_key(7254)) enum zReturnCode IReference::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7255)) enum zReturnCode IReference::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7256)) int IReference::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(7257)) enum zReturnCode IReference::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(7258)) enum zReturnCode IReference::NextInSet ( int nSetID );
__declspec(implementation_key(7259)) enum zReturnCode IReference::FirstInSet ( int nSetID );
__declspec(implementation_key(7260)) int IReference::CountSet ( );
__declspec(implementation_key(7261)) enum zReturnCode IReference::NextExistingInSet ( int nSetID );
__declspec(implementation_key(7262)) enum zReturnCode IReference::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(7263)) _bstr_t IReference::Getfilename ( );
__declspec(implementation_key(7264)) void IReference::Putfilename ( _bstr_t _val );
__declspec(implementation_key(7265)) _bstr_t IReference::GetParentFileName ( );
__declspec(implementation_key(7266)) void IReference::PutParentFileName ( _bstr_t _val );
__declspec(implementation_key(7267)) int IReference::GetReadFrom ( );
__declspec(implementation_key(7268)) void IReference::PutReadFrom ( int _val );
__declspec(implementation_key(7269)) int IReference::GetReadTime ( );
__declspec(implementation_key(7270)) void IReference::PutReadTime ( int _val );
__declspec(implementation_key(7271)) int IReference::GetReadFileTime ( );
__declspec(implementation_key(7272)) void IReference::PutReadFileTime ( int _val );
__declspec(implementation_key(7273)) int IReference::GetReadType ( );
__declspec(implementation_key(7274)) void IReference::PutReadType ( int _val );
__declspec(implementation_key(7275)) int IReference::GetID ( );
__declspec(implementation_key(7276)) void IReference::PutID ( int _val );
__declspec(implementation_key(7277)) int IReference::GetsetID ( );
__declspec(implementation_key(7278)) void IReference::PutsetID ( int _val );
__declspec(implementation_key(7279)) int IReference::GetActive ( );
__declspec(implementation_key(7280)) void IReference::PutActive ( int _val );
__declspec(implementation_key(7281)) double IAeroPanel::GetPt1 ( int nVectorIndex );
__declspec(implementation_key(7282)) void IAeroPanel::PutPt1 ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(7283)) double IAeroPanel::GetPt4 ( int nVectorIndex );
__declspec(implementation_key(7284)) void IAeroPanel::PutPt4 ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(7285)) enum zReturnCode IAeroPanel::Get ( int entID );
__declspec(implementation_key(7286)) enum zReturnCode IAeroPanel::Put ( int entID );
__declspec(implementation_key(7287)) enum zReturnCode IAeroPanel::GetDivisionList ( int * nChord, VARIANT * cval, int * nSpan, VARIANT * sVal );
__declspec(implementation_key(7288)) enum zReturnCode IAeroPanel::PutDivisionList ( int nChord, const _variant_t & cval, int nSpan, const _variant_t & sVal );
__declspec(implementation_key(7289)) int IAeroPanel::SlenderBodyCount ( );
__declspec(implementation_key(7290)) int IAeroPanel::InterferenceBodyCount ( );
__declspec(implementation_key(7291)) int IAeroPanel::PanelSpanCount ( );
__declspec(implementation_key(7292)) int IAeroPanel::PanelChordCount ( );
__declspec(implementation_key(7293)) ISetPtr IAeroPanel::GetBoxSet ( int iBox1, int iBox2 );
__declspec(implementation_key(7294)) int IAeroPanel::AeroChordXYZ ( int * nNumChord, VARIANT * dChordLoc );
__declspec(implementation_key(7295)) int IAeroPanel::AeroSpanXYZ ( int * nNumSpan, VARIANT * dSpanLoc );
__declspec(implementation_key(7296)) enum zReturnCode IAeroPanel::NextSet ( );
__declspec(implementation_key(7297)) enum zReturnCode IAeroPanel::PrevSet ( );
__declspec(implementation_key(7298)) enum zReturnCode IAeroPanel::NextEmptySet ( );
__declspec(implementation_key(7299)) enum zReturnCode IAeroPanel::PrevEmptySet ( );
__declspec(implementation_key(7300)) enum zReturnCode IAeroPanel::Exist ( int ID );
__declspec(implementation_key(7301)) enum zReturnCode IAeroPanel::Deletable ( int ID );
__declspec(implementation_key(7302)) enum zReturnCode IAeroPanel::Delete ( int ID );
__declspec(implementation_key(7303)) enum zReturnCode IAeroPanel::Reset ( );
__declspec(implementation_key(7304)) enum zReturnCode IAeroPanel::Next ( );
__declspec(implementation_key(7305)) enum zReturnCode IAeroPanel::Prev ( );
__declspec(implementation_key(7306)) enum zReturnCode IAeroPanel::First ( );
__declspec(implementation_key(7307)) enum zReturnCode IAeroPanel::Last ( );
__declspec(implementation_key(7308)) int IAeroPanel::NextID ( );
__declspec(implementation_key(7309)) int IAeroPanel::PrevID ( );
__declspec(implementation_key(7310)) int IAeroPanel::NextEmptyID ( );
__declspec(implementation_key(7311)) int IAeroPanel::PrevEmptyID ( );
__declspec(implementation_key(7312)) enum zReturnCode IAeroPanel::GetLibrary ( int ID );
__declspec(implementation_key(7313)) enum zReturnCode IAeroPanel::PutLibrary ( );
__declspec(implementation_key(7314)) enum zReturnCode IAeroPanel::DeleteLibrary ( int ID );
__declspec(implementation_key(7315)) enum zReturnCode IAeroPanel::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7316)) enum zReturnCode IAeroPanel::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7317)) int IAeroPanel::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(7318)) enum zReturnCode IAeroPanel::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(7319)) enum zReturnCode IAeroPanel::NextInSet ( int nSetID );
__declspec(implementation_key(7320)) enum zReturnCode IAeroPanel::FirstInSet ( int nSetID );
__declspec(implementation_key(7321)) int IAeroPanel::CountSet ( );
__declspec(implementation_key(7322)) enum zReturnCode IAeroPanel::NextExistingInSet ( int nSetID );
__declspec(implementation_key(7323)) enum zReturnCode IAeroPanel::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(7324)) enum zColor IAeroPanel::Getcolor ( );
__declspec(implementation_key(7325)) void IAeroPanel::Putcolor ( enum zColor _val );
__declspec(implementation_key(7326)) int IAeroPanel::Getlayer ( );
__declspec(implementation_key(7327)) void IAeroPanel::Putlayer ( int _val );
__declspec(implementation_key(7328)) _bstr_t IAeroPanel::Gettitle ( );
__declspec(implementation_key(7329)) void IAeroPanel::Puttitle ( _bstr_t _val );
__declspec(implementation_key(7330)) int IAeroPanel::Getpid ( );
__declspec(implementation_key(7331)) void IAeroPanel::Putpid ( int _val );
__declspec(implementation_key(7332)) int IAeroPanel::Geticp ( );
__declspec(implementation_key(7333)) void IAeroPanel::Puticp ( int _val );
__declspec(implementation_key(7334)) int IAeroPanel::GetnSpan ( );
__declspec(implementation_key(7335)) void IAeroPanel::PutnSpan ( int _val );
__declspec(implementation_key(7336)) int IAeroPanel::GetnChord ( );
__declspec(implementation_key(7337)) void IAeroPanel::PutnChord ( int _val );
__declspec(implementation_key(7338)) int IAeroPanel::GetnIgid ( );
__declspec(implementation_key(7339)) void IAeroPanel::PutnIgid ( int _val );
__declspec(implementation_key(7340)) _variant_t IAeroPanel::GetvPt1 ( );
__declspec(implementation_key(7341)) void IAeroPanel::PutvPt1 ( const _variant_t & _val );
__declspec(implementation_key(7342)) _variant_t IAeroPanel::GetvPt4 ( );
__declspec(implementation_key(7343)) void IAeroPanel::PutvPt4 ( const _variant_t & _val );
__declspec(implementation_key(7344)) double IAeroPanel::GetdChord12 ( );
__declspec(implementation_key(7345)) void IAeroPanel::PutdChord12 ( double _val );
__declspec(implementation_key(7346)) double IAeroPanel::GetdChord34 ( );
__declspec(implementation_key(7347)) void IAeroPanel::PutdChord34 ( double _val );
__declspec(implementation_key(7348)) int IAeroPanel::GetnLspanID ( );
__declspec(implementation_key(7349)) void IAeroPanel::PutnLspanID ( int _val );
__declspec(implementation_key(7350)) int IAeroPanel::GetnLchordID ( );
__declspec(implementation_key(7351)) void IAeroPanel::PutnLchordID ( int _val );
__declspec(implementation_key(7352)) enum zAeroPanelType IAeroPanel::Gettype ( );
__declspec(implementation_key(7353)) void IAeroPanel::Puttype ( enum zAeroPanelType _val );
__declspec(implementation_key(7354)) enum zReturnCode IAeroProp::Get ( int entID );
__declspec(implementation_key(7355)) enum zReturnCode IAeroProp::Put ( int entID );
__declspec(implementation_key(7356)) enum zReturnCode IAeroProp::GetThetaList ( int nListID, int * nCount, VARIANT * nVal );
__declspec(implementation_key(7357)) enum zReturnCode IAeroProp::PutThetaList ( int nListID, int nCount, const _variant_t & nVal );
__declspec(implementation_key(7358)) enum zReturnCode IAeroProp::GetRadiList ( int nListID, int * nCount, VARIANT * nVal );
__declspec(implementation_key(7359)) enum zReturnCode IAeroProp::PutRadiList ( int nListID, int nCount, const _variant_t & nVal );
__declspec(implementation_key(7360)) enum zReturnCode IAeroProp::ClearSbList ( );
__declspec(implementation_key(7361)) enum zReturnCode IAeroProp::ClearIbList ( );
__declspec(implementation_key(7362)) enum zReturnCode IAeroProp::ClearTheta1List ( );
__declspec(implementation_key(7363)) enum zReturnCode IAeroProp::ClearTheta2List ( );
__declspec(implementation_key(7364)) int IAeroProp::SlenderBodyDivisionByProp ( );
__declspec(implementation_key(7365)) int IAeroProp::InterferenceBodyDivisionByProp ( );
__declspec(implementation_key(7366)) int IAeroProp::GetSBRadiCount ( );
__declspec(implementation_key(7367)) int IAeroProp::GetIBRadiCount ( );
__declspec(implementation_key(7368)) enum zReturnCode IAeroProp::NextSet ( );
__declspec(implementation_key(7369)) enum zReturnCode IAeroProp::PrevSet ( );
__declspec(implementation_key(7370)) enum zReturnCode IAeroProp::NextEmptySet ( );
__declspec(implementation_key(7371)) enum zReturnCode IAeroProp::PrevEmptySet ( );
__declspec(implementation_key(7372)) enum zReturnCode IAeroProp::Exist ( int ID );
__declspec(implementation_key(7373)) enum zReturnCode IAeroProp::Deletable ( int ID );
__declspec(implementation_key(7374)) enum zReturnCode IAeroProp::Delete ( int ID );
__declspec(implementation_key(7375)) enum zReturnCode IAeroProp::Reset ( );
__declspec(implementation_key(7376)) enum zReturnCode IAeroProp::Next ( );
__declspec(implementation_key(7377)) enum zReturnCode IAeroProp::Prev ( );
__declspec(implementation_key(7378)) enum zReturnCode IAeroProp::First ( );
__declspec(implementation_key(7379)) enum zReturnCode IAeroProp::Last ( );
__declspec(implementation_key(7380)) int IAeroProp::NextID ( );
__declspec(implementation_key(7381)) int IAeroProp::PrevID ( );
__declspec(implementation_key(7382)) int IAeroProp::NextEmptyID ( );
__declspec(implementation_key(7383)) int IAeroProp::PrevEmptyID ( );
__declspec(implementation_key(7384)) enum zReturnCode IAeroProp::GetLibrary ( int ID );
__declspec(implementation_key(7385)) enum zReturnCode IAeroProp::PutLibrary ( );
__declspec(implementation_key(7386)) enum zReturnCode IAeroProp::DeleteLibrary ( int ID );
__declspec(implementation_key(7387)) enum zReturnCode IAeroProp::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7388)) enum zReturnCode IAeroProp::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7389)) int IAeroProp::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(7390)) enum zReturnCode IAeroProp::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(7391)) enum zReturnCode IAeroProp::NextInSet ( int nSetID );
__declspec(implementation_key(7392)) enum zReturnCode IAeroProp::FirstInSet ( int nSetID );
__declspec(implementation_key(7393)) int IAeroProp::CountSet ( );
__declspec(implementation_key(7394)) enum zReturnCode IAeroProp::NextExistingInSet ( int nSetID );
__declspec(implementation_key(7395)) enum zReturnCode IAeroProp::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(7396)) enum zColor IAeroProp::Getcolor ( );
__declspec(implementation_key(7397)) void IAeroProp::Putcolor ( enum zColor _val );
__declspec(implementation_key(7398)) int IAeroProp::Getlayer ( );
__declspec(implementation_key(7399)) void IAeroProp::Putlayer ( int _val );
__declspec(implementation_key(7400)) _bstr_t IAeroProp::Gettitle ( );
__declspec(implementation_key(7401)) void IAeroProp::Puttitle ( _bstr_t _val );
__declspec(implementation_key(7402)) _variant_t IAeroProp::Getvpdval ( );
__declspec(implementation_key(7403)) void IAeroProp::Putvpdval ( const _variant_t & _val );
__declspec(implementation_key(7404)) _variant_t IAeroProp::Getvpnval ( );
__declspec(implementation_key(7405)) void IAeroProp::Putvpnval ( const _variant_t & _val );
__declspec(implementation_key(7406)) double IAeroProp::Getap_d_width ( );
__declspec(implementation_key(7407)) void IAeroProp::Putap_d_width ( double _val );
__declspec(implementation_key(7408)) double IAeroProp::Getap_d_ar ( );
__declspec(implementation_key(7409)) void IAeroProp::Putap_d_ar ( double _val );
__declspec(implementation_key(7410)) int IAeroProp::Getap_i_orient ( );
__declspec(implementation_key(7411)) void IAeroProp::Putap_i_orient ( int _val );
__declspec(implementation_key(7412)) int IAeroProp::Getap_i_lrsb ( );
__declspec(implementation_key(7413)) void IAeroProp::Putap_i_lrsb ( int _val );
__declspec(implementation_key(7414)) int IAeroProp::Getap_i_lrib ( );
__declspec(implementation_key(7415)) void IAeroProp::Putap_i_lrib ( int _val );
__declspec(implementation_key(7416)) int IAeroProp::Getap_i_lth1 ( );
__declspec(implementation_key(7417)) void IAeroProp::Putap_i_lth1 ( int _val );
__declspec(implementation_key(7418)) int IAeroProp::Getap_i_lth2 ( );
__declspec(implementation_key(7419)) void IAeroProp::Putap_i_lth2 ( int _val );
__declspec(implementation_key(7420)) int IAeroProp::Getap_i_thi1 ( );
__declspec(implementation_key(7421)) void IAeroProp::Putap_i_thi1 ( int _val );
__declspec(implementation_key(7422)) int IAeroProp::Getap_i_thi2 ( );
__declspec(implementation_key(7423)) void IAeroProp::Putap_i_thi2 ( int _val );
__declspec(implementation_key(7424)) int IAeroProp::Getap_i_thi3 ( );
__declspec(implementation_key(7425)) void IAeroProp::Putap_i_thi3 ( int _val );
__declspec(implementation_key(7426)) int IAeroProp::Getap_i_thn1 ( );
__declspec(implementation_key(7427)) void IAeroProp::Putap_i_thn1 ( int _val );
__declspec(implementation_key(7428)) int IAeroProp::Getap_i_thn2 ( );
__declspec(implementation_key(7429)) void IAeroProp::Putap_i_thn2 ( int _val );
__declspec(implementation_key(7430)) int IAeroProp::Getap_i_thn3 ( );
__declspec(implementation_key(7431)) void IAeroProp::Putap_i_thn3 ( int _val );
__declspec(implementation_key(7432)) enum zAeroPanelType IAeroProp::Gettype ( );
__declspec(implementation_key(7433)) void IAeroProp::Puttype ( enum zAeroPanelType _val );
__declspec(implementation_key(7434)) enum zReturnCode IAeroSpline::Get ( int entID );
__declspec(implementation_key(7435)) enum zReturnCode IAeroSpline::Put ( int entID );
__declspec(implementation_key(7436)) ISetPtr IAeroSpline::GetNodeSet ( );
__declspec(implementation_key(7437)) ISetPtr IAeroSpline::GetBoxSet ( );
__declspec(implementation_key(7438)) enum zReturnCode IAeroSpline::NextSet ( );
__declspec(implementation_key(7439)) enum zReturnCode IAeroSpline::PrevSet ( );
__declspec(implementation_key(7440)) enum zReturnCode IAeroSpline::NextEmptySet ( );
__declspec(implementation_key(7441)) enum zReturnCode IAeroSpline::PrevEmptySet ( );
__declspec(implementation_key(7442)) enum zReturnCode IAeroSpline::Exist ( int ID );
__declspec(implementation_key(7443)) enum zReturnCode IAeroSpline::Deletable ( int ID );
__declspec(implementation_key(7444)) enum zReturnCode IAeroSpline::Delete ( int ID );
__declspec(implementation_key(7445)) enum zReturnCode IAeroSpline::Reset ( );
__declspec(implementation_key(7446)) enum zReturnCode IAeroSpline::Next ( );
__declspec(implementation_key(7447)) enum zReturnCode IAeroSpline::Prev ( );
__declspec(implementation_key(7448)) enum zReturnCode IAeroSpline::First ( );
__declspec(implementation_key(7449)) enum zReturnCode IAeroSpline::Last ( );
__declspec(implementation_key(7450)) int IAeroSpline::NextID ( );
__declspec(implementation_key(7451)) int IAeroSpline::PrevID ( );
__declspec(implementation_key(7452)) int IAeroSpline::NextEmptyID ( );
__declspec(implementation_key(7453)) int IAeroSpline::PrevEmptyID ( );
__declspec(implementation_key(7454)) enum zReturnCode IAeroSpline::GetLibrary ( int ID );
__declspec(implementation_key(7455)) enum zReturnCode IAeroSpline::PutLibrary ( );
__declspec(implementation_key(7456)) enum zReturnCode IAeroSpline::DeleteLibrary ( int ID );
__declspec(implementation_key(7457)) enum zReturnCode IAeroSpline::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7458)) enum zReturnCode IAeroSpline::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7459)) int IAeroSpline::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(7460)) enum zReturnCode IAeroSpline::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(7461)) enum zReturnCode IAeroSpline::NextInSet ( int nSetID );
__declspec(implementation_key(7462)) enum zReturnCode IAeroSpline::FirstInSet ( int nSetID );
__declspec(implementation_key(7463)) int IAeroSpline::CountSet ( );
__declspec(implementation_key(7464)) enum zReturnCode IAeroSpline::NextExistingInSet ( int nSetID );
__declspec(implementation_key(7465)) enum zReturnCode IAeroSpline::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(7466)) enum zColor IAeroSpline::Getcolor ( );
__declspec(implementation_key(7467)) void IAeroSpline::Putcolor ( enum zColor _val );
__declspec(implementation_key(7468)) int IAeroSpline::Getlayer ( );
__declspec(implementation_key(7469)) void IAeroSpline::Putlayer ( int _val );
__declspec(implementation_key(7470)) _bstr_t IAeroSpline::Gettitle ( );
__declspec(implementation_key(7471)) void IAeroSpline::Puttitle ( _bstr_t _val );
__declspec(implementation_key(7472)) int IAeroSpline::Gettype ( );
__declspec(implementation_key(7473)) void IAeroSpline::Puttype ( int _val );
__declspec(implementation_key(7474)) int IAeroSpline::Geticaero ( );
__declspec(implementation_key(7475)) void IAeroSpline::Puticaero ( int _val );
__declspec(implementation_key(7476)) int IAeroSpline::GetiBox1 ( );
__declspec(implementation_key(7477)) void IAeroSpline::PutiBox1 ( int _val );
__declspec(implementation_key(7478)) int IAeroSpline::GetiBox2 ( );
__declspec(implementation_key(7479)) void IAeroSpline::PutiBox2 ( int _val );
__declspec(implementation_key(7480)) int IAeroSpline::Getisetg ( );
__declspec(implementation_key(7481)) void IAeroSpline::Putisetg ( int _val );
__declspec(implementation_key(7482)) double IAeroSpline::GetdZ ( );
__declspec(implementation_key(7483)) void IAeroSpline::PutdZ ( double _val );
__declspec(implementation_key(7484)) int IAeroSpline::Getmeth ( );
__declspec(implementation_key(7485)) void IAeroSpline::Putmeth ( int _val );
__declspec(implementation_key(7486)) int IAeroSpline::Getnelem ( );
__declspec(implementation_key(7487)) void IAeroSpline::Putnelem ( int _val );
__declspec(implementation_key(7488)) int IAeroSpline::Getmelem ( );
__declspec(implementation_key(7489)) void IAeroSpline::Putmelem ( int _val );
__declspec(implementation_key(7490)) int IAeroSpline::Getusage ( );
__declspec(implementation_key(7491)) void IAeroSpline::Putusage ( int _val );
__declspec(implementation_key(7492)) double IAeroSpline::Getdtor ( );
__declspec(implementation_key(7493)) void IAeroSpline::Putdtor ( double _val );
__declspec(implementation_key(7494)) int IAeroSpline::Getcid ( );
__declspec(implementation_key(7495)) void IAeroSpline::Putcid ( int _val );
__declspec(implementation_key(7496)) double IAeroSpline::Getdthx ( );
__declspec(implementation_key(7497)) void IAeroSpline::Putdthx ( double _val );
__declspec(implementation_key(7498)) double IAeroSpline::Getdthy ( );
__declspec(implementation_key(7499)) void IAeroSpline::Putdthy ( double _val );
__declspec(implementation_key(7500)) enum zReturnCode IAeroSurf::Get ( int entID );
__declspec(implementation_key(7501)) enum zReturnCode IAeroSurf::Put ( int entID );
__declspec(implementation_key(7502)) enum zReturnCode IAeroSurf::PutSurfaceSet1 ( int nSetID );
__declspec(implementation_key(7503)) enum zReturnCode IAeroSurf::PutSurfaceSet2 ( int nSetID );
__declspec(implementation_key(7504)) ISetPtr IAeroSurf::GetSurfaceSet1 ( );
__declspec(implementation_key(7505)) ISetPtr IAeroSurf::GetSurfaceSet2 ( );
__declspec(implementation_key(7506)) enum zReturnCode IAeroSurf::ClearSurfaceSet1 ( );
__declspec(implementation_key(7507)) enum zReturnCode IAeroSurf::ClearSurfaceSet2 ( );
__declspec(implementation_key(7508)) enum zReturnCode IAeroSurf::NextSet ( );
__declspec(implementation_key(7509)) enum zReturnCode IAeroSurf::PrevSet ( );
__declspec(implementation_key(7510)) enum zReturnCode IAeroSurf::NextEmptySet ( );
__declspec(implementation_key(7511)) enum zReturnCode IAeroSurf::PrevEmptySet ( );
__declspec(implementation_key(7512)) enum zReturnCode IAeroSurf::Exist ( int ID );
__declspec(implementation_key(7513)) enum zReturnCode IAeroSurf::Deletable ( int ID );
__declspec(implementation_key(7514)) enum zReturnCode IAeroSurf::Delete ( int ID );
__declspec(implementation_key(7515)) enum zReturnCode IAeroSurf::Reset ( );
__declspec(implementation_key(7516)) enum zReturnCode IAeroSurf::Next ( );
__declspec(implementation_key(7517)) enum zReturnCode IAeroSurf::Prev ( );
__declspec(implementation_key(7518)) enum zReturnCode IAeroSurf::First ( );
__declspec(implementation_key(7519)) enum zReturnCode IAeroSurf::Last ( );
__declspec(implementation_key(7520)) int IAeroSurf::NextID ( );
__declspec(implementation_key(7521)) int IAeroSurf::PrevID ( );
__declspec(implementation_key(7522)) int IAeroSurf::NextEmptyID ( );
__declspec(implementation_key(7523)) int IAeroSurf::PrevEmptyID ( );
__declspec(implementation_key(7524)) enum zReturnCode IAeroSurf::GetLibrary ( int ID );
__declspec(implementation_key(7525)) enum zReturnCode IAeroSurf::PutLibrary ( );
__declspec(implementation_key(7526)) enum zReturnCode IAeroSurf::DeleteLibrary ( int ID );
__declspec(implementation_key(7527)) enum zReturnCode IAeroSurf::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7528)) enum zReturnCode IAeroSurf::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7529)) int IAeroSurf::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(7530)) enum zReturnCode IAeroSurf::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(7531)) enum zReturnCode IAeroSurf::NextInSet ( int nSetID );
__declspec(implementation_key(7532)) enum zReturnCode IAeroSurf::FirstInSet ( int nSetID );
__declspec(implementation_key(7533)) int IAeroSurf::CountSet ( );
__declspec(implementation_key(7534)) enum zReturnCode IAeroSurf::NextExistingInSet ( int nSetID );
__declspec(implementation_key(7535)) enum zReturnCode IAeroSurf::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(7536)) enum zColor IAeroSurf::Getcolor ( );
__declspec(implementation_key(7537)) void IAeroSurf::Putcolor ( enum zColor _val );
__declspec(implementation_key(7538)) int IAeroSurf::Getlayer ( );
__declspec(implementation_key(7539)) void IAeroSurf::Putlayer ( int _val );
__declspec(implementation_key(7540)) _bstr_t IAeroSurf::Gettitle ( );
__declspec(implementation_key(7541)) void IAeroSurf::Puttitle ( _bstr_t _val );
__declspec(implementation_key(7542)) int IAeroSurf::GetCSys ( );
__declspec(implementation_key(7543)) void IAeroSurf::PutCSys ( int _val );
__declspec(implementation_key(7544)) int IAeroSurf::Getcsys1 ( );
__declspec(implementation_key(7545)) void IAeroSurf::Putcsys1 ( int _val );
__declspec(implementation_key(7546)) int IAeroSurf::Getaeid ( );
__declspec(implementation_key(7547)) void IAeroSurf::Putaeid ( int _val );
__declspec(implementation_key(7548)) int IAeroSurf::Getaeid1 ( );
__declspec(implementation_key(7549)) void IAeroSurf::Putaeid1 ( int _val );
__declspec(implementation_key(7550)) double IAeroSurf::Geteff ( );
__declspec(implementation_key(7551)) void IAeroSurf::Puteff ( double _val );
__declspec(implementation_key(7552)) VARIANT_BOOL IAeroSurf::Getldw ( );
__declspec(implementation_key(7553)) void IAeroSurf::Putldw ( VARIANT_BOOL _val );
__declspec(implementation_key(7554)) double IAeroSurf::Getcrefc ( );
__declspec(implementation_key(7555)) void IAeroSurf::Putcrefc ( double _val );
__declspec(implementation_key(7556)) double IAeroSurf::Getcrefs ( );
__declspec(implementation_key(7557)) void IAeroSurf::Putcrefs ( double _val );
__declspec(implementation_key(7558)) double IAeroSurf::Getpllim ( );
__declspec(implementation_key(7559)) void IAeroSurf::Putpllim ( double _val );
__declspec(implementation_key(7560)) double IAeroSurf::Getpulim ( );
__declspec(implementation_key(7561)) void IAeroSurf::Putpulim ( double _val );
__declspec(implementation_key(7562)) double IAeroSurf::Gethmllim ( );
__declspec(implementation_key(7563)) void IAeroSurf::Puthmllim ( double _val );
__declspec(implementation_key(7564)) double IAeroSurf::Gethmulim ( );
__declspec(implementation_key(7565)) void IAeroSurf::Puthmulim ( double _val );
__declspec(implementation_key(7566)) int IAeroSurf::Gettqllim ( );
__declspec(implementation_key(7567)) void IAeroSurf::Puttqllim ( int _val );
__declspec(implementation_key(7568)) int IAeroSurf::Gettqulim ( );
__declspec(implementation_key(7569)) void IAeroSurf::Puttqulim ( int _val );
__declspec(implementation_key(7570)) _bstr_t IAeroSurf::GetLabel ( );
__declspec(implementation_key(7571)) void IAeroSurf::PutLabel ( _bstr_t _val );
__declspec(implementation_key(7572)) VARIANT_BOOL IFreebody::GetSumComponents ( enum zFbdComponent nVectorIndex );
__declspec(implementation_key(7573)) void IFreebody::PutSumComponents ( enum zFbdComponent nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7574)) VARIANT_BOOL IFreebody::GetSumContributions ( enum zFbdContribution nVectorIndex );
__declspec(implementation_key(7575)) void IFreebody::PutSumContributions ( enum zFbdContribution nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7576)) VARIANT_BOOL IFreebody::GetShowTotalVec ( enum zFbdComponent nVectorIndex );
__declspec(implementation_key(7577)) void IFreebody::PutShowTotalVec ( enum zFbdComponent nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7578)) enum zColor IFreebody::GetTotalVecColor ( enum zColor nVectorIndex );
__declspec(implementation_key(7579)) void IFreebody::PutTotalVecColor ( enum zColor nVectorIndex, enum zColor _arg2 );
__declspec(implementation_key(7580)) VARIANT_BOOL IFreebody::GetShowNodalVec ( enum zFbdComponent nVectorIndex );
__declspec(implementation_key(7581)) void IFreebody::PutShowNodalVec ( enum zFbdComponent nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7582)) enum zColor IFreebody::GetNodalVecColor ( enum zColor nVectorIndex );
__declspec(implementation_key(7583)) void IFreebody::PutNodalVecColor ( enum zColor nVectorIndex, enum zColor _arg2 );
__declspec(implementation_key(7584)) enum zFbdVecMode IFreebody::GetTotalVectorMode ( enum zFbdVecMode nVectorIndex );
__declspec(implementation_key(7585)) void IFreebody::PutTotalVectorMode ( enum zFbdVecMode nVectorIndex, enum zFbdVecMode _arg2 );
__declspec(implementation_key(7586)) enum zFbdVecMode IFreebody::GetNodalVectorMode ( enum zFbdVecMode nVectorIndex );
__declspec(implementation_key(7587)) void IFreebody::PutNodalVectorMode ( enum zFbdVecMode nVectorIndex, enum zFbdVecMode _arg2 );
__declspec(implementation_key(7588)) double IFreebody::GetSectionPlaneBase ( int nVectorIndex );
__declspec(implementation_key(7589)) void IFreebody::PutSectionPlaneBase ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(7590)) double IFreebody::GetSectionPlaneNormal ( int nVectorIndex );
__declspec(implementation_key(7591)) void IFreebody::PutSectionPlaneNormal ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(7592)) double IFreebody::GetSectionVectorBase ( int nVectorIndex );
__declspec(implementation_key(7593)) void IFreebody::PutSectionVectorBase ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(7594)) double IFreebody::GetSectionVectorTip ( int nVectorIndex );
__declspec(implementation_key(7595)) void IFreebody::PutSectionVectorTip ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(7596)) enum zReturnCode IFreebody::Get ( int entID );
__declspec(implementation_key(7597)) enum zReturnCode IFreebody::Put ( int entID );
__declspec(implementation_key(7598)) enum zReturnCode IFreebody::GetElements ( int * NumElem, VARIANT * elemID );
__declspec(implementation_key(7599)) enum zReturnCode IFreebody::SetElements ( VARIANT_BOOL bClear, int setID );
__declspec(implementation_key(7600)) enum zReturnCode IFreebody::GetNodes ( int * numNode, VARIANT * NodeID );
__declspec(implementation_key(7601)) enum zReturnCode IFreebody::SetNodes ( VARIANT_BOOL bClear, int setID );
__declspec(implementation_key(7602)) enum zReturnCode IFreebody::ClearElements ( );
__declspec(implementation_key(7603)) enum zReturnCode IFreebody::ClearNodes ( );
__declspec(implementation_key(7604)) enum zReturnCode IFreebody::CalculateNodalCenter ( VARIANT_BOOL bUpdate, VARIANT * xyz );
__declspec(implementation_key(7605)) enum zReturnCode IFreebody::CalculateSummation ( int outSetID, VARIANT * calculations );
__declspec(implementation_key(7606)) enum zReturnCode IFreebody::CalculateSummation2 ( int nSetID, VARIANT_BOOL bUseFBCSys, int * nNumSets, VARIANT * outsetIDs, VARIANT * calculations );
__declspec(implementation_key(7607)) enum zReturnCode IFreebody::GetNodalSums ( int nSetID, int * nNumNodes, VARIANT * nNodeIDs, VARIANT * dVals );
__declspec(implementation_key(7608)) enum zReturnCode IFreebody::GetSumAtNode ( int nNodeID, int nSetID, VARIANT * dVals );
__declspec(implementation_key(7609)) enum zReturnCode IFreebody::GetSectionCutSums ( int nOutSetSetID, int nCuts, int * pnNumCuts, VARIANT * pCutLocs, VARIANT * pSumLocs, VARIANT * pSums );
__declspec(implementation_key(7610)) enum zReturnCode IFreebody::SetLocationFromCoord ( double x, double y, double z, double * pLoc );
__declspec(implementation_key(7611)) enum zReturnCode IFreebody::Show ( );
__declspec(implementation_key(7612)) enum zReturnCode IFreebody::NextSet ( );
__declspec(implementation_key(7613)) enum zReturnCode IFreebody::PrevSet ( );
__declspec(implementation_key(7614)) enum zReturnCode IFreebody::NextEmptySet ( );
__declspec(implementation_key(7615)) enum zReturnCode IFreebody::PrevEmptySet ( );
__declspec(implementation_key(7616)) enum zReturnCode IFreebody::Exist ( int ID );
__declspec(implementation_key(7617)) enum zReturnCode IFreebody::Deletable ( int ID );
__declspec(implementation_key(7618)) enum zReturnCode IFreebody::Delete ( int ID );
__declspec(implementation_key(7619)) enum zReturnCode IFreebody::Reset ( );
__declspec(implementation_key(7620)) enum zReturnCode IFreebody::Next ( );
__declspec(implementation_key(7621)) enum zReturnCode IFreebody::Prev ( );
__declspec(implementation_key(7622)) enum zReturnCode IFreebody::First ( );
__declspec(implementation_key(7623)) enum zReturnCode IFreebody::Last ( );
__declspec(implementation_key(7624)) int IFreebody::NextID ( );
__declspec(implementation_key(7625)) int IFreebody::PrevID ( );
__declspec(implementation_key(7626)) int IFreebody::NextEmptyID ( );
__declspec(implementation_key(7627)) int IFreebody::PrevEmptyID ( );
__declspec(implementation_key(7628)) enum zReturnCode IFreebody::GetLibrary ( int ID );
__declspec(implementation_key(7629)) enum zReturnCode IFreebody::PutLibrary ( );
__declspec(implementation_key(7630)) enum zReturnCode IFreebody::DeleteLibrary ( int ID );
__declspec(implementation_key(7631)) enum zReturnCode IFreebody::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7632)) enum zReturnCode IFreebody::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7633)) int IFreebody::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(7634)) enum zReturnCode IFreebody::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(7635)) enum zReturnCode IFreebody::NextInSet ( int nSetID );
__declspec(implementation_key(7636)) enum zReturnCode IFreebody::FirstInSet ( int nSetID );
__declspec(implementation_key(7637)) int IFreebody::CountSet ( );
__declspec(implementation_key(7638)) enum zReturnCode IFreebody::NextExistingInSet ( int nSetID );
__declspec(implementation_key(7639)) enum zReturnCode IFreebody::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(7640)) _bstr_t IFreebody::Gettitle ( );
__declspec(implementation_key(7641)) void IFreebody::Puttitle ( _bstr_t _val );
__declspec(implementation_key(7642)) double IFreebody::Getx ( );
__declspec(implementation_key(7643)) void IFreebody::Putx ( double _val );
__declspec(implementation_key(7644)) double IFreebody::Gety ( );
__declspec(implementation_key(7645)) void IFreebody::Puty ( double _val );
__declspec(implementation_key(7646)) double IFreebody::Getz ( );
__declspec(implementation_key(7647)) void IFreebody::Putz ( double _val );
__declspec(implementation_key(7648)) _variant_t IFreebody::GetvSumComponents ( );
__declspec(implementation_key(7649)) void IFreebody::PutvSumComponents ( const _variant_t & _val );
__declspec(implementation_key(7650)) _variant_t IFreebody::GetvSumContributions ( );
__declspec(implementation_key(7651)) void IFreebody::PutvSumContributions ( const _variant_t & _val );
__declspec(implementation_key(7652)) _variant_t IFreebody::GetvShowTotalVec ( );
__declspec(implementation_key(7653)) void IFreebody::PutvShowTotalVec ( const _variant_t & _val );
__declspec(implementation_key(7654)) _variant_t IFreebody::GetvTotalVecColor ( );
__declspec(implementation_key(7655)) void IFreebody::PutvTotalVecColor ( const _variant_t & _val );
__declspec(implementation_key(7656)) _variant_t IFreebody::GetvShowNodalVec ( );
__declspec(implementation_key(7657)) void IFreebody::PutvShowNodalVec ( const _variant_t & _val );
__declspec(implementation_key(7658)) _variant_t IFreebody::GetvNodalVecColor ( );
__declspec(implementation_key(7659)) void IFreebody::PutvNodalVecColor ( const _variant_t & _val );
__declspec(implementation_key(7660)) enum zColor IFreebody::GetNodeMarkerColor ( );
__declspec(implementation_key(7661)) void IFreebody::PutNodeMarkerColor ( enum zColor _val );
__declspec(implementation_key(7662)) _variant_t IFreebody::GetvTotalVectorMode ( );
__declspec(implementation_key(7663)) void IFreebody::PutvTotalVectorMode ( const _variant_t & _val );
__declspec(implementation_key(7664)) _variant_t IFreebody::GetvNodalVectorMode ( );
__declspec(implementation_key(7665)) void IFreebody::PutvNodalVectorMode ( const _variant_t & _val );
__declspec(implementation_key(7666)) int IFreebody::GetCSys ( );
__declspec(implementation_key(7667)) void IFreebody::PutCSys ( int _val );
__declspec(implementation_key(7668)) int IFreebody::GetGroup ( );
__declspec(implementation_key(7669)) void IFreebody::PutGroup ( int _val );
__declspec(implementation_key(7670)) enum zFbdDisplayMode IFreebody::GetDisplayMode ( );
__declspec(implementation_key(7671)) void IFreebody::PutDisplayMode ( enum zFbdDisplayMode _val );
__declspec(implementation_key(7672)) int IFreebody::Getlayer ( );
__declspec(implementation_key(7673)) void IFreebody::Putlayer ( int _val );
__declspec(implementation_key(7674)) VARIANT_BOOL IFreebody::GetAlternateApplied ( );
__declspec(implementation_key(7675)) void IFreebody::PutAlternateApplied ( VARIANT_BOOL _val );
__declspec(implementation_key(7676)) VARIANT_BOOL IFreebody::GetAlternateSPC ( );
__declspec(implementation_key(7677)) void IFreebody::PutAlternateSPC ( VARIANT_BOOL _val );
__declspec(implementation_key(7678)) VARIANT_BOOL IFreebody::GetAlternateMPC ( );
__declspec(implementation_key(7679)) void IFreebody::PutAlternateMPC ( VARIANT_BOOL _val );
__declspec(implementation_key(7680)) VARIANT_BOOL IFreebody::GetUseNodalOuputCS ( );
__declspec(implementation_key(7681)) void IFreebody::PutUseNodalOuputCS ( VARIANT_BOOL _val );
__declspec(implementation_key(7682)) _variant_t IFreebody::GetvSectionPlaneBase ( );
__declspec(implementation_key(7683)) void IFreebody::PutvSectionPlaneBase ( const _variant_t & _val );
__declspec(implementation_key(7684)) _variant_t IFreebody::GetvSectionPlaneNormal ( );
__declspec(implementation_key(7685)) void IFreebody::PutvSectionPlaneNormal ( const _variant_t & _val );
__declspec(implementation_key(7686)) int IFreebody::GetSectionCurve ( );
__declspec(implementation_key(7687)) void IFreebody::PutSectionCurve ( int _val );
__declspec(implementation_key(7688)) _variant_t IFreebody::GetvSectionVectorBase ( );
__declspec(implementation_key(7689)) void IFreebody::PutvSectionVectorBase ( const _variant_t & _val );
__declspec(implementation_key(7690)) _variant_t IFreebody::GetvSectionVectorTip ( );
__declspec(implementation_key(7691)) void IFreebody::PutvSectionVectorTip ( const _variant_t & _val );
__declspec(implementation_key(7692)) VARIANT_BOOL IFreebody::GetSectionRotateSums ( );
__declspec(implementation_key(7693)) void IFreebody::PutSectionRotateSums ( VARIANT_BOOL _val );
__declspec(implementation_key(7694)) VARIANT_BOOL IFreebody::GetSectionIncludeClippedElem ( );
__declspec(implementation_key(7695)) void IFreebody::PutSectionIncludeClippedElem ( VARIANT_BOOL _val );
__declspec(implementation_key(7696)) double IFreebody::GetSectionTolerance ( );
__declspec(implementation_key(7697)) void IFreebody::PutSectionTolerance ( double _val );
__declspec(implementation_key(7698)) enum zFbdSectionSumLoc IFreebody::GetSectionSumLocation ( );
__declspec(implementation_key(7699)) void IFreebody::PutSectionSumLocation ( enum zFbdSectionSumLoc _val );
__declspec(implementation_key(7700)) VARIANT_BOOL IFreebody::GetSectionLimitToGroup ( );
__declspec(implementation_key(7701)) void IFreebody::PutSectionLimitToGroup ( VARIANT_BOOL _val );
__declspec(implementation_key(7702)) int IFreebody::GetSectionGroup ( );
__declspec(implementation_key(7703)) void IFreebody::PutSectionGroup ( int _val );
__declspec(implementation_key(7704)) VARIANT_BOOL IFreebody::GetReverseTotalValues ( );
__declspec(implementation_key(7705)) void IFreebody::PutReverseTotalValues ( VARIANT_BOOL _val );
__declspec(implementation_key(7706)) enum zFbdSectionMode IFreebody::GetSectionMode ( );
__declspec(implementation_key(7707)) void IFreebody::PutSectionMode ( enum zFbdSectionMode _val );
__declspec(implementation_key(7708)) double IFreebody::GetSectionRadius ( );
__declspec(implementation_key(7709)) void IFreebody::PutSectionRadius ( double _val );
__declspec(implementation_key(7710)) VARIANT_BOOL IFreebody::GetSectionReverse ( );
__declspec(implementation_key(7711)) void IFreebody::PutSectionReverse ( VARIANT_BOOL _val );
__declspec(implementation_key(7712)) double IFreebody::GetSectionLocation ( );
__declspec(implementation_key(7713)) void IFreebody::PutSectionLocation ( double _val );
__declspec(implementation_key(7714)) int IFreebody::GetID ( );
__declspec(implementation_key(7715)) void IFreebody::PutID ( int _val );
__declspec(implementation_key(7716)) int IFreebody::GetsetID ( );
__declspec(implementation_key(7717)) void IFreebody::PutsetID ( int _val );
__declspec(implementation_key(7718)) int IFreebody::GetActive ( );
__declspec(implementation_key(7719)) void IFreebody::PutActive ( int _val );
__declspec(implementation_key(7720)) enum zReturnCode ISEReference::Put ( int entID );
__declspec(implementation_key(7721)) enum zReturnCode ISEReference::NextSet ( );
__declspec(implementation_key(7722)) enum zReturnCode ISEReference::PrevSet ( );
__declspec(implementation_key(7723)) enum zReturnCode ISEReference::NextEmptySet ( );
__declspec(implementation_key(7724)) enum zReturnCode ISEReference::PrevEmptySet ( );
__declspec(implementation_key(7725)) enum zReturnCode ISEReference::Get ( int ID );
__declspec(implementation_key(7726)) enum zReturnCode ISEReference::Exist ( int ID );
__declspec(implementation_key(7727)) enum zReturnCode ISEReference::Deletable ( int ID );
__declspec(implementation_key(7728)) enum zReturnCode ISEReference::Delete ( int ID );
__declspec(implementation_key(7729)) enum zReturnCode ISEReference::Reset ( );
__declspec(implementation_key(7730)) enum zReturnCode ISEReference::Next ( );
__declspec(implementation_key(7731)) enum zReturnCode ISEReference::Prev ( );
__declspec(implementation_key(7732)) enum zReturnCode ISEReference::First ( );
__declspec(implementation_key(7733)) enum zReturnCode ISEReference::Last ( );
__declspec(implementation_key(7734)) int ISEReference::NextID ( );
__declspec(implementation_key(7735)) int ISEReference::PrevID ( );
__declspec(implementation_key(7736)) int ISEReference::NextEmptyID ( );
__declspec(implementation_key(7737)) int ISEReference::PrevEmptyID ( );
__declspec(implementation_key(7738)) enum zReturnCode ISEReference::GetLibrary ( int ID );
__declspec(implementation_key(7739)) enum zReturnCode ISEReference::PutLibrary ( );
__declspec(implementation_key(7740)) enum zReturnCode ISEReference::DeleteLibrary ( int ID );
__declspec(implementation_key(7741)) enum zReturnCode ISEReference::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7742)) enum zReturnCode ISEReference::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7743)) int ISEReference::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(7744)) enum zReturnCode ISEReference::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(7745)) enum zReturnCode ISEReference::NextInSet ( int nSetID );
__declspec(implementation_key(7746)) enum zReturnCode ISEReference::FirstInSet ( int nSetID );
__declspec(implementation_key(7747)) int ISEReference::CountSet ( );
__declspec(implementation_key(7748)) enum zReturnCode ISEReference::NextExistingInSet ( int nSetID );
__declspec(implementation_key(7749)) enum zReturnCode ISEReference::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(7750)) _bstr_t ISEReference::GetReferenceFile ( );
__declspec(implementation_key(7751)) void ISEReference::PutReferenceFile ( _bstr_t _val );
__declspec(implementation_key(7752)) enum zAnalysisExtSERef ISEReference::GetReferenceType ( );
__declspec(implementation_key(7753)) void ISEReference::PutReferenceType ( enum zAnalysisExtSERef _val );
__declspec(implementation_key(7754)) int ISEReference::GetReferenceID ( );
__declspec(implementation_key(7755)) void ISEReference::PutReferenceID ( int _val );
__declspec(implementation_key(7756)) _bstr_t ISEReference::GetASMFile ( );
__declspec(implementation_key(7757)) void ISEReference::PutASMFile ( _bstr_t _val );
__declspec(implementation_key(7758)) VARIANT_BOOL ISEReference::GetStiffness ( );
__declspec(implementation_key(7759)) void ISEReference::PutStiffness ( VARIANT_BOOL _val );
__declspec(implementation_key(7760)) VARIANT_BOOL ISEReference::GetMass ( );
__declspec(implementation_key(7761)) void ISEReference::PutMass ( VARIANT_BOOL _val );
__declspec(implementation_key(7762)) VARIANT_BOOL ISEReference::GetViscousDamping ( );
__declspec(implementation_key(7763)) void ISEReference::PutViscousDamping ( VARIANT_BOOL _val );
__declspec(implementation_key(7764)) VARIANT_BOOL ISEReference::GetStructuralDaming ( );
__declspec(implementation_key(7765)) void ISEReference::PutStructuralDaming ( VARIANT_BOOL _val );
__declspec(implementation_key(7766)) VARIANT_BOOL ISEReference::GetLoadsMatrix ( );
__declspec(implementation_key(7767)) void ISEReference::PutLoadsMatrix ( VARIANT_BOOL _val );
__declspec(implementation_key(7768)) enum zAnalysisAssignForm ISEReference::GetAssignForm ( );
__declspec(implementation_key(7769)) void ISEReference::PutAssignForm ( enum zAnalysisAssignForm _val );
__declspec(implementation_key(7770)) int ISEReference::GetID ( );
__declspec(implementation_key(7771)) void ISEReference::PutID ( int _val );
__declspec(implementation_key(7772)) int ISEReference::GetsetID ( );
__declspec(implementation_key(7773)) void ISEReference::PutsetID ( int _val );
__declspec(implementation_key(7774)) int ISEReference::GetActive ( );
__declspec(implementation_key(7775)) void ISEReference::PutActive ( int _val );
__declspec(implementation_key(7776)) double IChart::GetAxisRange ( int nRowIndex, int nColIndex );
__declspec(implementation_key(7777)) void IChart::PutAxisRange ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(7778)) VARIANT_BOOL IChart::GetAxisVisible ( int nVectorIndex );
__declspec(implementation_key(7779)) void IChart::PutAxisVisible ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7780)) VARIANT_BOOL IChart::GetAxisZoom ( int nVectorIndex );
__declspec(implementation_key(7781)) void IChart::PutAxisZoom ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7782)) double IChart::GetAxisMajorInterval ( int nVectorIndex );
__declspec(implementation_key(7783)) void IChart::PutAxisMajorInterval ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(7784)) int IChart::GetAxisMinorCount ( int nVectorIndex );
__declspec(implementation_key(7785)) void IChart::PutAxisMinorCount ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(7786)) VARIANT_BOOL IChart::GetAxisMajorGridlineVisible ( int nVectorIndex );
__declspec(implementation_key(7787)) void IChart::PutAxisMajorGridlineVisible ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7788)) VARIANT_BOOL IChart::GetAxisMinorGridlineVisible ( int nVectorIndex );
__declspec(implementation_key(7789)) void IChart::PutAxisMinorGridlineVisible ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7790)) VARIANT_BOOL IChart::GetAxisAutoscale ( int nVectorIndex );
__declspec(implementation_key(7791)) void IChart::PutAxisAutoscale ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7792)) enum zChartAxisStyle IChart::GetAxisStyle ( int nVectorIndex );
__declspec(implementation_key(7793)) void IChart::PutAxisStyle ( int nVectorIndex, enum zChartAxisStyle _arg2 );
__declspec(implementation_key(7794)) VARIANT_BOOL IChart::GetAxisMajorTickmarkVisible ( int nVectorIndex );
__declspec(implementation_key(7795)) void IChart::PutAxisMajorTickmarkVisible ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7796)) VARIANT_BOOL IChart::GetAxisMinorTickmarkVisible ( int nVectorIndex );
__declspec(implementation_key(7797)) void IChart::PutAxisMinorTickmarkVisible ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7798)) VARIANT_BOOL IChart::GetAxisTitleVisible ( int nVectorIndex );
__declspec(implementation_key(7799)) void IChart::PutAxisTitleVisible ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7800)) enum zChartTextJustification IChart::GetAxisTitleJustification ( int nVectorIndex );
__declspec(implementation_key(7801)) void IChart::PutAxisTitleJustification ( int nVectorIndex, enum zChartTextJustification _arg2 );
__declspec(implementation_key(7802)) double IChart::GetAxisTitleFontSize ( int nVectorIndex );
__declspec(implementation_key(7803)) void IChart::PutAxisTitleFontSize ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(7804)) VARIANT_BOOL IChart::GetAxisTitleBold ( int nVectorIndex );
__declspec(implementation_key(7805)) void IChart::PutAxisTitleBold ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7806)) VARIANT_BOOL IChart::GetAxisTitleItalic ( int nVectorIndex );
__declspec(implementation_key(7807)) void IChart::PutAxisTitleItalic ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7808)) VARIANT_BOOL IChart::GetAxisTitleUnderline ( int nVectorIndex );
__declspec(implementation_key(7809)) void IChart::PutAxisTitleUnderline ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7810)) enum zColor IChart::GetAxisTitleColor ( int nVectorIndex );
__declspec(implementation_key(7811)) void IChart::PutAxisTitleColor ( int nVectorIndex, enum zColor _arg2 );
__declspec(implementation_key(7812)) int IChart::GetAxisLabelDecimal ( int nVectorIndex );
__declspec(implementation_key(7813)) void IChart::PutAxisLabelDecimal ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(7814)) enum zChartNumberFormat IChart::GetAxisLabelFormat ( int nVectorIndex );
__declspec(implementation_key(7815)) void IChart::PutAxisLabelFormat ( int nVectorIndex, enum zChartNumberFormat _arg2 );
__declspec(implementation_key(7816)) enum zChartLegendLocation IChart::GetLegendLocation ( int nVectorIndex );
__declspec(implementation_key(7817)) void IChart::PutLegendLocation ( int nVectorIndex, enum zChartLegendLocation _arg2 );
__declspec(implementation_key(7818)) int IChart::GetAxisMinorCountLog ( int nVectorIndex );
__declspec(implementation_key(7819)) void IChart::PutAxisMinorCountLog ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(7820)) VARIANT_BOOL IChart::GetAxisRangePad ( int nVectorIndex );
__declspec(implementation_key(7821)) void IChart::PutAxisRangePad ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7822)) VARIANT_BOOL IChart::GetAxisAutoscale2 ( int nVectorIndex );
__declspec(implementation_key(7823)) void IChart::PutAxisAutoscale2 ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7824)) double IChart::GetAxisRange2 ( int nRowIndex, int nColIndex );
__declspec(implementation_key(7825)) void IChart::PutAxisRange2 ( int nRowIndex, int nColIndex, double _arg3 );
__declspec(implementation_key(7826)) VARIANT_BOOL IChart::GetAxisRangePad2 ( int nVectorIndex );
__declspec(implementation_key(7827)) void IChart::PutAxisRangePad2 ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7828)) enum zChartAxisStyle IChart::GetAxisStyle2 ( int nVectorIndex );
__declspec(implementation_key(7829)) void IChart::PutAxisStyle2 ( int nVectorIndex, enum zChartAxisStyle _arg2 );
__declspec(implementation_key(7830)) enum zChartNumberFormat IChart::GetAxisLabelFormat2 ( int nVectorIndex );
__declspec(implementation_key(7831)) void IChart::PutAxisLabelFormat2 ( int nVectorIndex, enum zChartNumberFormat _arg2 );
__declspec(implementation_key(7832)) int IChart::GetAxisLabelDecimal2 ( int nVectorIndex );
__declspec(implementation_key(7833)) void IChart::PutAxisLabelDecimal2 ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(7834)) enum zReturnCode IChart::Get ( int entID );
__declspec(implementation_key(7835)) enum zReturnCode IChart::Put ( int entID );
__declspec(implementation_key(7836)) enum zReturnCode IChart::AddDataSeries ( int setID );
__declspec(implementation_key(7837)) enum zReturnCode IChart::RemoveDataSeries ( int setID );
__declspec(implementation_key(7838)) enum zReturnCode IChart::GetDataSeries ( int * numDS, VARIANT * dsID );
__declspec(implementation_key(7839)) enum zReturnCode IChart::ShowPane ( );
__declspec(implementation_key(7840)) enum zReturnCode IChart::RemoveAllDataSeries ( );
__declspec(implementation_key(7841)) enum zReturnCode IChart::NextSet ( );
__declspec(implementation_key(7842)) enum zReturnCode IChart::PrevSet ( );
__declspec(implementation_key(7843)) enum zReturnCode IChart::NextEmptySet ( );
__declspec(implementation_key(7844)) enum zReturnCode IChart::PrevEmptySet ( );
__declspec(implementation_key(7845)) enum zReturnCode IChart::Exist ( int ID );
__declspec(implementation_key(7846)) enum zReturnCode IChart::Deletable ( int ID );
__declspec(implementation_key(7847)) enum zReturnCode IChart::Delete ( int ID );
__declspec(implementation_key(7848)) enum zReturnCode IChart::Reset ( );
__declspec(implementation_key(7849)) enum zReturnCode IChart::Next ( );
__declspec(implementation_key(7850)) enum zReturnCode IChart::Prev ( );
__declspec(implementation_key(7851)) enum zReturnCode IChart::First ( );
__declspec(implementation_key(7852)) enum zReturnCode IChart::Last ( );
__declspec(implementation_key(7853)) int IChart::NextID ( );
__declspec(implementation_key(7854)) int IChart::PrevID ( );
__declspec(implementation_key(7855)) int IChart::NextEmptyID ( );
__declspec(implementation_key(7856)) int IChart::PrevEmptyID ( );
__declspec(implementation_key(7857)) enum zReturnCode IChart::GetLibrary ( int ID );
__declspec(implementation_key(7858)) enum zReturnCode IChart::PutLibrary ( );
__declspec(implementation_key(7859)) enum zReturnCode IChart::DeleteLibrary ( int ID );
__declspec(implementation_key(7860)) enum zReturnCode IChart::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7861)) enum zReturnCode IChart::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(7862)) int IChart::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(7863)) enum zReturnCode IChart::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(7864)) enum zReturnCode IChart::NextInSet ( int nSetID );
__declspec(implementation_key(7865)) enum zReturnCode IChart::FirstInSet ( int nSetID );
__declspec(implementation_key(7866)) int IChart::CountSet ( );
__declspec(implementation_key(7867)) enum zReturnCode IChart::NextExistingInSet ( int nSetID );
__declspec(implementation_key(7868)) enum zReturnCode IChart::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(7869)) _bstr_t IChart::Gettitle ( );
__declspec(implementation_key(7870)) void IChart::Puttitle ( _bstr_t _val );
__declspec(implementation_key(7871)) enum zChartStyle IChart::Getstyle ( );
__declspec(implementation_key(7872)) void IChart::Putstyle ( enum zChartStyle _val );
__declspec(implementation_key(7873)) _bstr_t IChart::GetAxisTitleX ( );
__declspec(implementation_key(7874)) void IChart::PutAxisTitleX ( _bstr_t _val );
__declspec(implementation_key(7875)) _bstr_t IChart::GetAxisTitleY ( );
__declspec(implementation_key(7876)) void IChart::PutAxisTitleY ( _bstr_t _val );
__declspec(implementation_key(7877)) _variant_t IChart::GetvAxisAutoscale ( );
__declspec(implementation_key(7878)) void IChart::PutvAxisAutoscale ( const _variant_t & _val );
__declspec(implementation_key(7879)) _variant_t IChart::GetvAxisStyle ( );
__declspec(implementation_key(7880)) void IChart::PutvAxisStyle ( const _variant_t & _val );
__declspec(implementation_key(7881)) _variant_t IChart::GetvAxisRange ( );
__declspec(implementation_key(7882)) void IChart::PutvAxisRange ( const _variant_t & _val );
__declspec(implementation_key(7883)) _variant_t IChart::GetvAxisVisible ( );
__declspec(implementation_key(7884)) void IChart::PutvAxisVisible ( const _variant_t & _val );
__declspec(implementation_key(7885)) _variant_t IChart::GetvAxisMajorTickmarkVisible ( );
__declspec(implementation_key(7886)) void IChart::PutvAxisMajorTickmarkVisible ( const _variant_t & _val );
__declspec(implementation_key(7887)) _variant_t IChart::GetvAxisMinorTickmarkVisible ( );
__declspec(implementation_key(7888)) void IChart::PutvAxisMinorTickmarkVisible ( const _variant_t & _val );
__declspec(implementation_key(7889)) VARIANT_BOOL IChart::GetOutputSetInherit ( );
__declspec(implementation_key(7890)) void IChart::PutOutputSetInherit ( VARIANT_BOOL _val );
__declspec(implementation_key(7891)) int IChart::GetOutputSet ( );
__declspec(implementation_key(7892)) void IChart::PutOutputSet ( int _val );
__declspec(implementation_key(7893)) int IChart::GetOutputSetEnd ( );
__declspec(implementation_key(7894)) void IChart::PutOutputSetEnd ( int _val );
__declspec(implementation_key(7895)) VARIANT_BOOL IChart::GetOutputSetAll ( );
__declspec(implementation_key(7896)) void IChart::PutOutputSetAll ( VARIANT_BOOL _val );
__declspec(implementation_key(7897)) VARIANT_BOOL IChart::GetMarkerFromChart ( );
__declspec(implementation_key(7898)) void IChart::PutMarkerFromChart ( VARIANT_BOOL _val );
__declspec(implementation_key(7899)) VARIANT_BOOL IChart::GetMarkerVisible ( );
__declspec(implementation_key(7900)) void IChart::PutMarkerVisible ( VARIANT_BOOL _val );
__declspec(implementation_key(7901)) int IChart::GetMarkerSize ( );
__declspec(implementation_key(7902)) void IChart::PutMarkerSize ( int _val );
__declspec(implementation_key(7903)) enum zChartMarkerStyle IChart::GetMarkerStyle ( );
__declspec(implementation_key(7904)) void IChart::PutMarkerStyle ( enum zChartMarkerStyle _val );
__declspec(implementation_key(7905)) VARIANT_BOOL IChart::GetLabelFromChart ( );
__declspec(implementation_key(7906)) void IChart::PutLabelFromChart ( VARIANT_BOOL _val );
__declspec(implementation_key(7907)) VARIANT_BOOL IChart::GetLabelVisible ( );
__declspec(implementation_key(7908)) void IChart::PutLabelVisible ( VARIANT_BOOL _val );
__declspec(implementation_key(7909)) VARIANT_BOOL IChart::GetShowLabelX ( );
__declspec(implementation_key(7910)) void IChart::PutShowLabelX ( VARIANT_BOOL _val );
__declspec(implementation_key(7911)) VARIANT_BOOL IChart::GetShowLabelY ( );
__declspec(implementation_key(7912)) void IChart::PutShowLabelY ( VARIANT_BOOL _val );
__declspec(implementation_key(7913)) VARIANT_BOOL IChart::GetShowLabelMaxMin ( );
__declspec(implementation_key(7914)) void IChart::PutShowLabelMaxMin ( VARIANT_BOOL _val );
__declspec(implementation_key(7915)) VARIANT_BOOL IChart::GetPaletteFromChart ( );
__declspec(implementation_key(7916)) void IChart::PutPaletteFromChart ( VARIANT_BOOL _val );
__declspec(implementation_key(7917)) enum zChartPalette IChart::GetPalette ( );
__declspec(implementation_key(7918)) void IChart::PutPalette ( enum zChartPalette _val );
__declspec(implementation_key(7919)) VARIANT_BOOL IChart::GetDarkBackground ( );
__declspec(implementation_key(7920)) void IChart::PutDarkBackground ( VARIANT_BOOL _val );
__declspec(implementation_key(7921)) VARIANT_BOOL IChart::GetLegendVisible ( );
__declspec(implementation_key(7922)) void IChart::PutLegendVisible ( VARIANT_BOOL _val );
__declspec(implementation_key(7923)) _variant_t IChart::GetvLegendLocation ( );
__declspec(implementation_key(7924)) void IChart::PutvLegendLocation ( const _variant_t & _val );
__declspec(implementation_key(7925)) enum zChartLegendDirection IChart::GetLegendDirection ( );
__declspec(implementation_key(7926)) void IChart::PutLegendDirection ( enum zChartLegendDirection _val );
__declspec(implementation_key(7927)) VARIANT_BOOL IChart::GetTitleVisible ( );
__declspec(implementation_key(7928)) void IChart::PutTitleVisible ( VARIANT_BOOL _val );
__declspec(implementation_key(7929)) enum zChartTitleLocation IChart::GetTitleLocation ( );
__declspec(implementation_key(7930)) void IChart::PutTitleLocation ( enum zChartTitleLocation _val );
__declspec(implementation_key(7931)) enum zChartTextJustification IChart::GetTitleJustification ( );
__declspec(implementation_key(7932)) void IChart::PutTitleJustification ( enum zChartTextJustification _val );
__declspec(implementation_key(7933)) double IChart::GetTitleFontSize ( );
__declspec(implementation_key(7934)) void IChart::PutTitleFontSize ( double _val );
__declspec(implementation_key(7935)) VARIANT_BOOL IChart::GetTitleFontBold ( );
__declspec(implementation_key(7936)) void IChart::PutTitleFontBold ( VARIANT_BOOL _val );
__declspec(implementation_key(7937)) VARIANT_BOOL IChart::GetTitleFontItalic ( );
__declspec(implementation_key(7938)) void IChart::PutTitleFontItalic ( VARIANT_BOOL _val );
__declspec(implementation_key(7939)) VARIANT_BOOL IChart::GetTitleFontUnderline ( );
__declspec(implementation_key(7940)) void IChart::PutTitleFontUnderline ( VARIANT_BOOL _val );
__declspec(implementation_key(7941)) enum zColor IChart::GetTitleFontColor ( );
__declspec(implementation_key(7942)) void IChart::PutTitleFontColor ( enum zColor _val );
__declspec(implementation_key(7943)) _variant_t IChart::GetvAxisMajorInterval ( );
__declspec(implementation_key(7944)) void IChart::PutvAxisMajorInterval ( const _variant_t & _val );
__declspec(implementation_key(7945)) _variant_t IChart::GetvAxisMinorCount ( );
__declspec(implementation_key(7946)) void IChart::PutvAxisMinorCount ( const _variant_t & _val );
__declspec(implementation_key(7947)) _variant_t IChart::GetvAxisMajorGridlineVisible ( );
__declspec(implementation_key(7948)) void IChart::PutvAxisMajorGridlineVisible ( const _variant_t & _val );
__declspec(implementation_key(7949)) _variant_t IChart::GetvAxisMinorGridlineVisible ( );
__declspec(implementation_key(7950)) void IChart::PutvAxisMinorGridlineVisible ( const _variant_t & _val );
__declspec(implementation_key(7951)) _variant_t IChart::GetvAxisZoom ( );
__declspec(implementation_key(7952)) void IChart::PutvAxisZoom ( const _variant_t & _val );
__declspec(implementation_key(7953)) _variant_t IChart::GetvAxisTitleVisible ( );
__declspec(implementation_key(7954)) void IChart::PutvAxisTitleVisible ( const _variant_t & _val );
__declspec(implementation_key(7955)) _variant_t IChart::GetvAxisTitleJustification ( );
__declspec(implementation_key(7956)) void IChart::PutvAxisTitleJustification ( const _variant_t & _val );
__declspec(implementation_key(7957)) _variant_t IChart::GetvAxisTitleFontSize ( );
__declspec(implementation_key(7958)) void IChart::PutvAxisTitleFontSize ( const _variant_t & _val );
__declspec(implementation_key(7959)) _variant_t IChart::GetvAxisTitleBold ( );
__declspec(implementation_key(7960)) void IChart::PutvAxisTitleBold ( const _variant_t & _val );
__declspec(implementation_key(7961)) _variant_t IChart::GetvAxisTitleItalic ( );
__declspec(implementation_key(7962)) void IChart::PutvAxisTitleItalic ( const _variant_t & _val );
__declspec(implementation_key(7963)) _variant_t IChart::GetvAxisTitleUnderline ( );
__declspec(implementation_key(7964)) void IChart::PutvAxisTitleUnderline ( const _variant_t & _val );
__declspec(implementation_key(7965)) _variant_t IChart::GetvAxisTitleFontColor ( );
__declspec(implementation_key(7966)) void IChart::PutvAxisTitleFontColor ( const _variant_t & _val );
__declspec(implementation_key(7967)) _variant_t IChart::GetvAxisLabelDecimal ( );
__declspec(implementation_key(7968)) void IChart::PutvAxisLabelDecimal ( const _variant_t & _val );
__declspec(implementation_key(7969)) _variant_t IChart::GetvAxisLabelFormat ( );
__declspec(implementation_key(7970)) void IChart::PutvAxisLabelFormat ( const _variant_t & _val );
__declspec(implementation_key(7971)) _bstr_t IChart::GetFont ( );
__declspec(implementation_key(7972)) void IChart::PutFont ( _bstr_t _val );
__declspec(implementation_key(7973)) double IChart::GetLabelFontSize ( );
__declspec(implementation_key(7974)) void IChart::PutLabelFontSize ( double _val );
__declspec(implementation_key(7975)) double IChart::GetAxisValueFontSize ( );
__declspec(implementation_key(7976)) void IChart::PutAxisValueFontSize ( double _val );
__declspec(implementation_key(7977)) double IChart::GetLegendFontSize ( );
__declspec(implementation_key(7978)) void IChart::PutLegendFontSize ( double _val );
__declspec(implementation_key(7979)) _variant_t IChart::GetvAxisMinorCountLog ( );
__declspec(implementation_key(7980)) void IChart::PutvAxisMinorCountLog ( const _variant_t & _val );
__declspec(implementation_key(7981)) _variant_t IChart::GetvAxisRangePad ( );
__declspec(implementation_key(7982)) void IChart::PutvAxisRangePad ( const _variant_t & _val );
__declspec(implementation_key(7983)) enum zColor IChart::GetAxisMajorColor ( );
__declspec(implementation_key(7984)) void IChart::PutAxisMajorColor ( enum zColor _val );
__declspec(implementation_key(7985)) VARIANT_BOOL IChart::GetAxisMajorColorAutoDim ( );
__declspec(implementation_key(7986)) void IChart::PutAxisMajorColorAutoDim ( VARIANT_BOOL _val );
__declspec(implementation_key(7987)) VARIANT_BOOL IChart::GetScaleInherit ( );
__declspec(implementation_key(7988)) void IChart::PutScaleInherit ( VARIANT_BOOL _val );
__declspec(implementation_key(7989)) double IChart::GetMasterScale ( );
__declspec(implementation_key(7990)) void IChart::PutMasterScale ( double _val );
__declspec(implementation_key(7991)) enum zChartComplexLocation IChart::GetComplexPlotLocation ( );
__declspec(implementation_key(7992)) void IChart::PutComplexPlotLocation ( enum zChartComplexLocation _val );
__declspec(implementation_key(7993)) _variant_t IChart::GetvAxisAutoscale2 ( );
__declspec(implementation_key(7994)) void IChart::PutvAxisAutoscale2 ( const _variant_t & _val );
__declspec(implementation_key(7995)) _variant_t IChart::GetvAxisRange2 ( );
__declspec(implementation_key(7996)) void IChart::PutvAxisRange2 ( const _variant_t & _val );
__declspec(implementation_key(7997)) _variant_t IChart::GetvAxisRangePad2 ( );
__declspec(implementation_key(7998)) void IChart::PutvAxisRangePad2 ( const _variant_t & _val );
__declspec(implementation_key(7999)) _variant_t IChart::GetvAxisStyle2 ( );
__declspec(implementation_key(8000)) void IChart::PutvAxisStyle2 ( const _variant_t & _val );
__declspec(implementation_key(8001)) _variant_t IChart::GetvAxisLabelFormat2 ( );
__declspec(implementation_key(8002)) void IChart::PutvAxisLabelFormat2 ( const _variant_t & _val );
__declspec(implementation_key(8003)) _variant_t IChart::GetvAxisLabelDecimal2 ( );
__declspec(implementation_key(8004)) void IChart::PutvAxisLabelDecimal2 ( const _variant_t & _val );
__declspec(implementation_key(8005)) int IChart::GetID ( );
__declspec(implementation_key(8006)) void IChart::PutID ( int _val );
__declspec(implementation_key(8007)) int IChart::GetsetID ( );
__declspec(implementation_key(8008)) void IChart::PutsetID ( int _val );
__declspec(implementation_key(8009)) int IChart::GetActive ( );
__declspec(implementation_key(8010)) void IChart::PutActive ( int _val );
__declspec(implementation_key(8011)) double IChartSeries::GetTransformPlateVector ( int nVectorIndex );
__declspec(implementation_key(8012)) void IChartSeries::PutTransformPlateVector ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8013)) double IChartSeries::GetTransformPlateVector2 ( int nVectorIndex );
__declspec(implementation_key(8014)) void IChartSeries::PutTransformPlateVector2 ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8015)) enum zReturnCode IChartSeries::Get ( int entID );
__declspec(implementation_key(8016)) enum zReturnCode IChartSeries::Put ( int entID );
__declspec(implementation_key(8017)) enum zReturnCode IChartSeries::GetXY ( int * numPoints, VARIANT * xyValues, VARIANT * xRange, VARIANT * yRange );
__declspec(implementation_key(8018)) enum zReturnCode IChartSeries::CopyToClipboard ( );
__declspec(implementation_key(8019)) enum zReturnCode IChartSeries::GetEntityType ( int chartID );
__declspec(implementation_key(8020)) enum zReturnCode IChartSeries::NextSet ( );
__declspec(implementation_key(8021)) enum zReturnCode IChartSeries::PrevSet ( );
__declspec(implementation_key(8022)) enum zReturnCode IChartSeries::NextEmptySet ( );
__declspec(implementation_key(8023)) enum zReturnCode IChartSeries::PrevEmptySet ( );
__declspec(implementation_key(8024)) enum zReturnCode IChartSeries::Exist ( int ID );
__declspec(implementation_key(8025)) enum zReturnCode IChartSeries::Deletable ( int ID );
__declspec(implementation_key(8026)) enum zReturnCode IChartSeries::Delete ( int ID );
__declspec(implementation_key(8027)) enum zReturnCode IChartSeries::Reset ( );
__declspec(implementation_key(8028)) enum zReturnCode IChartSeries::Next ( );
__declspec(implementation_key(8029)) enum zReturnCode IChartSeries::Prev ( );
__declspec(implementation_key(8030)) enum zReturnCode IChartSeries::First ( );
__declspec(implementation_key(8031)) enum zReturnCode IChartSeries::Last ( );
__declspec(implementation_key(8032)) int IChartSeries::NextID ( );
__declspec(implementation_key(8033)) int IChartSeries::PrevID ( );
__declspec(implementation_key(8034)) int IChartSeries::NextEmptyID ( );
__declspec(implementation_key(8035)) int IChartSeries::PrevEmptyID ( );
__declspec(implementation_key(8036)) enum zReturnCode IChartSeries::GetLibrary ( int ID );
__declspec(implementation_key(8037)) enum zReturnCode IChartSeries::PutLibrary ( );
__declspec(implementation_key(8038)) enum zReturnCode IChartSeries::DeleteLibrary ( int ID );
__declspec(implementation_key(8039)) enum zReturnCode IChartSeries::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(8040)) enum zReturnCode IChartSeries::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(8041)) int IChartSeries::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(8042)) enum zReturnCode IChartSeries::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(8043)) enum zReturnCode IChartSeries::NextInSet ( int nSetID );
__declspec(implementation_key(8044)) enum zReturnCode IChartSeries::FirstInSet ( int nSetID );
__declspec(implementation_key(8045)) int IChartSeries::CountSet ( );
__declspec(implementation_key(8046)) enum zReturnCode IChartSeries::NextExistingInSet ( int nSetID );
__declspec(implementation_key(8047)) enum zReturnCode IChartSeries::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(8048)) _bstr_t IChartSeries::Gettitle ( );
__declspec(implementation_key(8049)) void IChartSeries::Puttitle ( _bstr_t _val );
__declspec(implementation_key(8050)) enum zChartSeriesType IChartSeries::GetSeriesType ( );
__declspec(implementation_key(8051)) void IChartSeries::PutSeriesType ( enum zChartSeriesType _val );
__declspec(implementation_key(8052)) int IChartSeries::GetOutputSet ( );
__declspec(implementation_key(8053)) void IChartSeries::PutOutputSet ( int _val );
__declspec(implementation_key(8054)) int IChartSeries::GetOutputVector ( );
__declspec(implementation_key(8055)) void IChartSeries::PutOutputVector ( int _val );
__declspec(implementation_key(8056)) int IChartSeries::GetPosition ( );
__declspec(implementation_key(8057)) void IChartSeries::PutPosition ( int _val );
__declspec(implementation_key(8058)) int IChartSeries::GetPositionCoordSys ( );
__declspec(implementation_key(8059)) void IChartSeries::PutPositionCoordSys ( int _val );
__declspec(implementation_key(8060)) int IChartSeries::Getlocation ( );
__declspec(implementation_key(8061)) void IChartSeries::Putlocation ( int _val );
__declspec(implementation_key(8062)) VARIANT_BOOL IChartSeries::GetMarkerInherit ( );
__declspec(implementation_key(8063)) void IChartSeries::PutMarkerInherit ( VARIANT_BOOL _val );
__declspec(implementation_key(8064)) VARIANT_BOOL IChartSeries::GetMarkerVisible ( );
__declspec(implementation_key(8065)) void IChartSeries::PutMarkerVisible ( VARIANT_BOOL _val );
__declspec(implementation_key(8066)) enum zChartMarkerStyle IChartSeries::GetMarkerStyle ( );
__declspec(implementation_key(8067)) void IChartSeries::PutMarkerStyle ( enum zChartMarkerStyle _val );
__declspec(implementation_key(8068)) int IChartSeries::GetMarkerSize ( );
__declspec(implementation_key(8069)) void IChartSeries::PutMarkerSize ( int _val );
__declspec(implementation_key(8070)) VARIANT_BOOL IChartSeries::GetColorInherit ( );
__declspec(implementation_key(8071)) void IChartSeries::PutColorInherit ( VARIANT_BOOL _val );
__declspec(implementation_key(8072)) int IChartSeries::Getcolor ( );
__declspec(implementation_key(8073)) void IChartSeries::Putcolor ( int _val );
__declspec(implementation_key(8074)) int IChartSeries::GetInterval ( );
__declspec(implementation_key(8075)) void IChartSeries::PutInterval ( int _val );
__declspec(implementation_key(8076)) int IChartSeries::GetFunctionID ( );
__declspec(implementation_key(8077)) void IChartSeries::PutFunctionID ( int _val );
__declspec(implementation_key(8078)) int IChartSeries::GetOutputSetEnd ( );
__declspec(implementation_key(8079)) void IChartSeries::PutOutputSetEnd ( int _val );
__declspec(implementation_key(8080)) VARIANT_BOOL IChartSeries::GetOutputSetAll ( );
__declspec(implementation_key(8081)) void IChartSeries::PutOutputSetAll ( VARIANT_BOOL _val );
__declspec(implementation_key(8082)) VARIANT_BOOL IChartSeries::GetLabelInherit ( );
__declspec(implementation_key(8083)) void IChartSeries::PutLabelInherit ( VARIANT_BOOL _val );
__declspec(implementation_key(8084)) VARIANT_BOOL IChartSeries::GetLabelVisible ( );
__declspec(implementation_key(8085)) void IChartSeries::PutLabelVisible ( VARIANT_BOOL _val );
__declspec(implementation_key(8086)) VARIANT_BOOL IChartSeries::GetShowLabelX ( );
__declspec(implementation_key(8087)) void IChartSeries::PutShowLabelX ( VARIANT_BOOL _val );
__declspec(implementation_key(8088)) VARIANT_BOOL IChartSeries::GetShowLabelY ( );
__declspec(implementation_key(8089)) void IChartSeries::PutShowLabelY ( VARIANT_BOOL _val );
__declspec(implementation_key(8090)) VARIANT_BOOL IChartSeries::GetShowLabelMaxMin ( );
__declspec(implementation_key(8091)) void IChartSeries::PutShowLabelMaxMin ( VARIANT_BOOL _val );
__declspec(implementation_key(8092)) double IChartSeries::GetScale ( );
__declspec(implementation_key(8093)) void IChartSeries::PutScale ( double _val );
__declspec(implementation_key(8094)) int IChartSeries::GetGroup ( );
__declspec(implementation_key(8095)) void IChartSeries::PutGroup ( int _val );
__declspec(implementation_key(8096)) int IChartSeries::GetOutputVector2 ( );
__declspec(implementation_key(8097)) void IChartSeries::PutOutputVector2 ( int _val );
__declspec(implementation_key(8098)) int IChartSeries::GetLocation2 ( );
__declspec(implementation_key(8099)) void IChartSeries::PutLocation2 ( int _val );
__declspec(implementation_key(8100)) VARIANT_BOOL IChartSeries::GetSortData ( );
__declspec(implementation_key(8101)) void IChartSeries::PutSortData ( VARIANT_BOOL _val );
__declspec(implementation_key(8102)) VARIANT_BOOL IChartSeries::GetPositionIsRelative ( );
__declspec(implementation_key(8103)) void IChartSeries::PutPositionIsRelative ( VARIANT_BOOL _val );
__declspec(implementation_key(8104)) int IChartSeries::GetStudyID ( );
__declspec(implementation_key(8105)) void IChartSeries::PutStudyID ( int _val );
__declspec(implementation_key(8106)) enum zResultsConvert IChartSeries::GetConvertMethod ( );
__declspec(implementation_key(8107)) void IChartSeries::PutConvertMethod ( enum zResultsConvert _val );
__declspec(implementation_key(8108)) enum zResultsConvert IChartSeries::GetConvertMethod2 ( );
__declspec(implementation_key(8109)) void IChartSeries::PutConvertMethod2 ( enum zResultsConvert _val );
__declspec(implementation_key(8110)) enum zOutputDestination IChartSeries::GetTransformNodalMode ( );
__declspec(implementation_key(8111)) void IChartSeries::PutTransformNodalMode ( enum zOutputDestination _val );
__declspec(implementation_key(8112)) int IChartSeries::GetTransformNodalCSys ( );
__declspec(implementation_key(8113)) void IChartSeries::PutTransformNodalCSys ( int _val );
__declspec(implementation_key(8114)) enum zOutputDestination IChartSeries::GetTransformPlateMode ( );
__declspec(implementation_key(8115)) void IChartSeries::PutTransformPlateMode ( enum zOutputDestination _val );
__declspec(implementation_key(8116)) int IChartSeries::GetTransformPlateCSys ( );
__declspec(implementation_key(8117)) void IChartSeries::PutTransformPlateCSys ( int _val );
__declspec(implementation_key(8118)) int IChartSeries::GetTransformPlateDOF ( );
__declspec(implementation_key(8119)) void IChartSeries::PutTransformPlateDOF ( int _val );
__declspec(implementation_key(8120)) _variant_t IChartSeries::GetvTransformPlateVector ( );
__declspec(implementation_key(8121)) void IChartSeries::PutvTransformPlateVector ( const _variant_t & _val );
__declspec(implementation_key(8122)) enum zOutputDestination IChartSeries::GetTransformSolidMode ( );
__declspec(implementation_key(8123)) void IChartSeries::PutTransformSolidMode ( enum zOutputDestination _val );
__declspec(implementation_key(8124)) int IChartSeries::GetTransformSolidCSys ( );
__declspec(implementation_key(8125)) void IChartSeries::PutTransformSolidCSys ( int _val );
__declspec(implementation_key(8126)) enum zOutputDestination IChartSeries::GetTransformNodalMode2 ( );
__declspec(implementation_key(8127)) void IChartSeries::PutTransformNodalMode2 ( enum zOutputDestination _val );
__declspec(implementation_key(8128)) int IChartSeries::GetTransformNodalCSys2 ( );
__declspec(implementation_key(8129)) void IChartSeries::PutTransformNodalCSys2 ( int _val );
__declspec(implementation_key(8130)) enum zOutputDestination IChartSeries::GetTransformPlateMode2 ( );
__declspec(implementation_key(8131)) void IChartSeries::PutTransformPlateMode2 ( enum zOutputDestination _val );
__declspec(implementation_key(8132)) int IChartSeries::GetTransformPlateCSys2 ( );
__declspec(implementation_key(8133)) void IChartSeries::PutTransformPlateCSys2 ( int _val );
__declspec(implementation_key(8134)) int IChartSeries::GetTransformPlateDOF2 ( );
__declspec(implementation_key(8135)) void IChartSeries::PutTransformPlateDOF2 ( int _val );
__declspec(implementation_key(8136)) _variant_t IChartSeries::GetvTransformPlateVector2 ( );
__declspec(implementation_key(8137)) void IChartSeries::PutvTransformPlateVector2 ( const _variant_t & _val );
__declspec(implementation_key(8138)) enum zOutputDestination IChartSeries::GetTransformSolidMode2 ( );
__declspec(implementation_key(8139)) void IChartSeries::PutTransformSolidMode2 ( enum zOutputDestination _val );
__declspec(implementation_key(8140)) int IChartSeries::GetTransformSolidCSys2 ( );
__declspec(implementation_key(8141)) void IChartSeries::PutTransformSolidCSys2 ( int _val );
__declspec(implementation_key(8142)) enum zChartSeriesComplexMethod IChartSeries::GetComplexMethod ( );
__declspec(implementation_key(8143)) void IChartSeries::PutComplexMethod ( enum zChartSeriesComplexMethod _val );
__declspec(implementation_key(8144)) double IChartSeries::GetComplexPhase ( );
__declspec(implementation_key(8145)) void IChartSeries::PutComplexPhase ( double _val );
__declspec(implementation_key(8146)) double IChartSeries::GetComplexStart ( );
__declspec(implementation_key(8147)) void IChartSeries::PutComplexStart ( double _val );
__declspec(implementation_key(8148)) double IChartSeries::GetComplexEnd ( );
__declspec(implementation_key(8149)) void IChartSeries::PutComplexEnd ( double _val );
__declspec(implementation_key(8150)) double IChartSeries::GetTransformPlateTolerance ( );
__declspec(implementation_key(8151)) void IChartSeries::PutTransformPlateTolerance ( double _val );
__declspec(implementation_key(8152)) double IChartSeries::GetTransformPlateTolerance2 ( );
__declspec(implementation_key(8153)) void IChartSeries::PutTransformPlateTolerance2 ( double _val );
__declspec(implementation_key(8154)) int IChartSeries::GetID ( );
__declspec(implementation_key(8155)) void IChartSeries::PutID ( int _val );
__declspec(implementation_key(8156)) int IChartSeries::GetsetID ( );
__declspec(implementation_key(8157)) void IChartSeries::PutsetID ( int _val );
__declspec(implementation_key(8158)) int IChartSeries::GetActive ( );
__declspec(implementation_key(8159)) void IChartSeries::PutActive ( int _val );
__declspec(implementation_key(8160)) enum zReturnCode ITableData::Get ( int entID );
__declspec(implementation_key(8161)) enum zReturnCode ITableData::Put ( int entID );
__declspec(implementation_key(8162)) enum zReturnCode ITableData::GetFunction ( int entID );
__declspec(implementation_key(8163)) enum zReturnCode ITableData::PutFunction ( int entID );
__declspec(implementation_key(8164)) enum zReturnCode ITableData::CellRange ( int * nMinRow, int * nMaxRow, int * nMinCol, int * nMaxCol );
__declspec(implementation_key(8165)) enum zReturnCode ITableData::SaveToFile ( _bstr_t sFilename, VARIANT_BOOL bAppend );
__declspec(implementation_key(8166)) enum zReturnCode ITableData::Initialize ( int nNumRow, int nNumCol );
__declspec(implementation_key(8167)) enum zReturnCode ITableData::Resize ( int nNumRow, int nNumCol );
__declspec(implementation_key(8168)) enum zReturnCode ITableData::clear ( );
__declspec(implementation_key(8169)) enum zReturnCode ITableData::SetCellDouble ( int nRow, int nCol, double dValue );
__declspec(implementation_key(8170)) enum zReturnCode ITableData::SetCellInteger ( int nRow, int nCol, int nValue );
__declspec(implementation_key(8171)) enum zReturnCode ITableData::SetCellText ( int nRow, int nCol, _bstr_t sText );
__declspec(implementation_key(8172)) enum zReturnCode ITableData::SetCellEquation ( int nRow, int nCol, _bstr_t sEqn );
__declspec(implementation_key(8173)) enum zReturnCode ITableData::SetCellEntity ( int nRow, int nCol, enum zDataType ntype, int nID );
__declspec(implementation_key(8174)) enum zReturnCode ITableData::GetCellDouble ( int nRow, int nCol, double * dValue );
__declspec(implementation_key(8175)) enum zReturnCode ITableData::GetCellInteger ( int nRow, int nCol, int * nValue );
__declspec(implementation_key(8176)) enum zReturnCode ITableData::GetCellText ( int nRow, int nCol, BSTR * sText );
__declspec(implementation_key(8177)) enum zReturnCode ITableData::GetCellEntity ( int nRow, int nCol, enum zDataType * ntype, int * nID );
__declspec(implementation_key(8178)) enum zReturnCode ITableData::SetMultiCellDouble ( int nFirstRow, int nLastRow, int nFirstCol, int nLastCol, const _variant_t & dValues );
__declspec(implementation_key(8179)) enum zReturnCode ITableData::SetMultiCellInteger ( int nFirstRow, int nLastRow, int nFirstCol, int nLastCol, const _variant_t & nValues );
__declspec(implementation_key(8180)) enum zReturnCode ITableData::SetMultiCellText ( int nFirstRow, int nLastRow, int nFirstCol, int nLastCol, const _variant_t & sValues );
__declspec(implementation_key(8181)) enum zReturnCode ITableData::GetMultiCellDouble ( int nFirstRow, int nLastRow, int nFirstCol, int nLastCol, VARIANT * dValues );
__declspec(implementation_key(8182)) enum zReturnCode ITableData::GetMultiCellInteger ( int nFirstRow, int nLastRow, int nFirstCol, int nLastCol, VARIANT * nValues );
__declspec(implementation_key(8183)) enum zReturnCode ITableData::NextSet ( );
__declspec(implementation_key(8184)) enum zReturnCode ITableData::PrevSet ( );
__declspec(implementation_key(8185)) enum zReturnCode ITableData::NextEmptySet ( );
__declspec(implementation_key(8186)) enum zReturnCode ITableData::PrevEmptySet ( );
__declspec(implementation_key(8187)) enum zReturnCode ITableData::Exist ( int ID );
__declspec(implementation_key(8188)) enum zReturnCode ITableData::Deletable ( int ID );
__declspec(implementation_key(8189)) enum zReturnCode ITableData::Delete ( int ID );
__declspec(implementation_key(8190)) enum zReturnCode ITableData::Reset ( );
__declspec(implementation_key(8191)) enum zReturnCode ITableData::Next ( );
__declspec(implementation_key(8192)) enum zReturnCode ITableData::Prev ( );
__declspec(implementation_key(8193)) enum zReturnCode ITableData::First ( );
__declspec(implementation_key(8194)) enum zReturnCode ITableData::Last ( );
__declspec(implementation_key(8195)) int ITableData::NextID ( );
__declspec(implementation_key(8196)) int ITableData::PrevID ( );
__declspec(implementation_key(8197)) int ITableData::NextEmptyID ( );
__declspec(implementation_key(8198)) int ITableData::PrevEmptyID ( );
__declspec(implementation_key(8199)) enum zReturnCode ITableData::GetLibrary ( int ID );
__declspec(implementation_key(8200)) enum zReturnCode ITableData::PutLibrary ( );
__declspec(implementation_key(8201)) enum zReturnCode ITableData::DeleteLibrary ( int ID );
__declspec(implementation_key(8202)) enum zReturnCode ITableData::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(8203)) enum zReturnCode ITableData::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(8204)) int ITableData::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(8205)) enum zReturnCode ITableData::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(8206)) enum zReturnCode ITableData::NextInSet ( int nSetID );
__declspec(implementation_key(8207)) enum zReturnCode ITableData::FirstInSet ( int nSetID );
__declspec(implementation_key(8208)) int ITableData::CountSet ( );
__declspec(implementation_key(8209)) enum zReturnCode ITableData::NextExistingInSet ( int nSetID );
__declspec(implementation_key(8210)) enum zReturnCode ITableData::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(8211)) _bstr_t ITableData::Gettitle ( );
__declspec(implementation_key(8212)) void ITableData::Puttitle ( _bstr_t _val );
__declspec(implementation_key(8213)) enum zTableType ITableData::Gettype ( );
__declspec(implementation_key(8214)) void ITableData::Puttype ( enum zTableType _val );
__declspec(implementation_key(8215)) int ITableData::Getsubtype ( );
__declspec(implementation_key(8216)) void ITableData::Putsubtype ( int _val );
__declspec(implementation_key(8217)) enum zFunctionType ITableData::GetFunctionType ( );
__declspec(implementation_key(8218)) void ITableData::PutFunctionType ( enum zFunctionType _val );
__declspec(implementation_key(8219)) enum zVectorFunctionType ITableData::GetVectorFunctionType ( );
__declspec(implementation_key(8220)) void ITableData::PutVectorFunctionType ( enum zVectorFunctionType _val );
__declspec(implementation_key(8221)) int ITableData::GetRows ( );
__declspec(implementation_key(8222)) void ITableData::PutRows ( int _val );
__declspec(implementation_key(8223)) int ITableData::GetColumns ( );
__declspec(implementation_key(8224)) void ITableData::PutColumns ( int _val );
__declspec(implementation_key(8225)) int ITableData::GetID ( );
__declspec(implementation_key(8226)) void ITableData::PutID ( int _val );
__declspec(implementation_key(8227)) int ITableData::GetsetID ( );
__declspec(implementation_key(8228)) void ITableData::PutsetID ( int _val );
__declspec(implementation_key(8229)) int ITableData::GetActive ( );
__declspec(implementation_key(8230)) void ITableData::PutActive ( int _val );
__declspec(implementation_key(8231)) double IInterpolate::GetAmbientVector ( int nVectorIndex );
__declspec(implementation_key(8232)) void IInterpolate::PutAmbientVector ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8233)) double IInterpolate::GetAmbientTensor ( int nVectorIndex );
__declspec(implementation_key(8234)) void IInterpolate::PutAmbientTensor ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8235)) enum zReturnCode IInterpolate::clear ( );
__declspec(implementation_key(8236)) enum zReturnCode IInterpolate::ClearResults ( );
__declspec(implementation_key(8237)) enum zReturnCode IInterpolate::AddElements ( int nElemSetID );
__declspec(implementation_key(8238)) enum zReturnCode IInterpolate::AddScalar ( int nSetID, int nVecID );
__declspec(implementation_key(8239)) enum zReturnCode IInterpolate::AddVector ( int nSetID, int nVecX, int nVecY, int nVecZ );
__declspec(implementation_key(8240)) enum zReturnCode IInterpolate::AddTensor2D ( int nSetID, int nVecX, int nVecY, int nVecXY );
__declspec(implementation_key(8241)) enum zReturnCode IInterpolate::AddTensor ( int nSetID, int nVecX, int nVecY, int nVecZ, int nVecXY, int nVecYZ, int nVecZX );
__declspec(implementation_key(8242)) enum zReturnCode IInterpolate::AddNodal ( int nSetID, int nX, int nY, int nZ, int nRX, int nRY, int nRZ );
__declspec(implementation_key(8243)) enum zReturnCode IInterpolate::FindElement ( const _variant_t & vCoord, int * nElemID );
__declspec(implementation_key(8244)) enum zReturnCode IInterpolate::FindScalar ( const _variant_t & vCoord, int * nElemID, double * dValue );
__declspec(implementation_key(8245)) enum zReturnCode IInterpolate::FindVector ( const _variant_t & vCoord, int * nElemID, double * dX, double * dY, double * dZ );
__declspec(implementation_key(8246)) enum zReturnCode IInterpolate::FindVectorTotal ( const _variant_t & vCoord, int * nElemID, double * dTotal );
__declspec(implementation_key(8247)) enum zReturnCode IInterpolate::FindTensor2D ( const _variant_t & vCoord, int * nElemID, double * dX, double * dY, double * dXY );
__declspec(implementation_key(8248)) enum zReturnCode IInterpolate::FindTensor ( const _variant_t & vCoord, int * nElemID, double * dX, double * dY, double * dZ, double * dXY, double * dYZ, double * dZX );
__declspec(implementation_key(8249)) enum zReturnCode IInterpolate::FindInvariant ( const _variant_t & vCoord, enum zInvariantResultType nInvariantType, int * nElemID, double * dValue );
__declspec(implementation_key(8250)) enum zReturnCode IInterpolate::FindNodal ( const _variant_t & vCoord, int * nElemID, double * dX, double * dY, double * dZ, double * dRX, double * dRY, double * dRZ );
__declspec(implementation_key(8251)) enum zReturnCode IInterpolate::MultiElement ( int nNumCoord, const _variant_t & vCoord, VARIANT * nElemID );
__declspec(implementation_key(8252)) enum zReturnCode IInterpolate::MultiScalar ( int nNumCoord, const _variant_t & vCoord, VARIANT * nElemID, VARIANT * dValue );
__declspec(implementation_key(8253)) enum zReturnCode IInterpolate::MultiVector ( int nNumCoord, const _variant_t & vCoord, VARIANT * nElemID, VARIANT * dX, VARIANT * dY, VARIANT * dZ );
__declspec(implementation_key(8254)) enum zReturnCode IInterpolate::MultiVectorTotal ( int nNumCoord, const _variant_t & vCoord, VARIANT * nElemID, VARIANT * dTotal );
__declspec(implementation_key(8255)) enum zReturnCode IInterpolate::MultiTensor2D ( int nNumCoord, const _variant_t & vCoord, VARIANT * nElemID, VARIANT * dX, VARIANT * dY, VARIANT * dXY );
__declspec(implementation_key(8256)) enum zReturnCode IInterpolate::MultiTensor ( int nNumCoord, const _variant_t & vCoord, VARIANT * nElemID, VARIANT * dX, VARIANT * dY, VARIANT * dZ, VARIANT * dXY, VARIANT * dYZ, VARIANT * dZX );
__declspec(implementation_key(8257)) enum zReturnCode IInterpolate::MultiInvariant ( int nNumCoord, const _variant_t & vCoord, enum zInvariantResultType nInvariantType, VARIANT * nElemID, VARIANT * dValue );
__declspec(implementation_key(8258)) enum zReturnCode IInterpolate::MultiNodal ( int nNumCoord, const _variant_t & vCoord, VARIANT * nElemID, VARIANT * dX, VARIANT * dY, VARIANT * dZ, VARIANT * dRX, VARIANT * dRY, VARIANT * dRZ );
__declspec(implementation_key(8259)) enum zReturnCode IInterpolate::SetNodalTransform ( enum zOutputDestination nTransformMode, int nCSysID );
__declspec(implementation_key(8260)) enum zReturnCode IInterpolate::SetPlateTransform ( enum zOutputDestination nTransformMode, int nCSysID, int nDOF, const _variant_t & vAlongVector, double dToleranceAngle );
__declspec(implementation_key(8261)) enum zReturnCode IInterpolate::SetSolidTransform ( enum zOutputDestination nTransformMode, int nCSysID );
__declspec(implementation_key(8262)) enum zReturnCode IInterpolate::SetOutputOrientTri3 ( int nStress, int nStrain, int nForce );
__declspec(implementation_key(8263)) enum zReturnCode IInterpolate::SetOutputOrientTri6 ( int nStress, int nStrain, int nForce );
__declspec(implementation_key(8264)) enum zReturnCode IInterpolate::SetOutputOrientQuad4 ( int nStress, int nStrain, int nForce );
__declspec(implementation_key(8265)) enum zReturnCode IInterpolate::SetOutputOrientQuad8 ( int nStress, int nStrain, int nForce );
__declspec(implementation_key(8266)) enum zReturnCode IInterpolate::SetOutputOrientSolid ( int nIsotropic, int nAnisotropic, int nHyperelastic );
__declspec(implementation_key(8267)) enum zReturnCode IInterpolate::SetOutputMode ( enum zResultsConvert nConvertMode, VARIANT_BOOL bAverageCorners, VARIANT_BOOL bBreakProp, VARIANT_BOOL bBreakMatl, VARIANT_BOOL bBreakLayer, VARIANT_BOOL bBreakColor, VARIANT_BOOL bBreakGeom, double dBreakAngle );
__declspec(implementation_key(8268)) enum zReturnCode IInterpolate::SetGlobalPly ( int nGlobalPly );
__declspec(implementation_key(8269)) enum zReturnCode IInterpolate::FindVector2 ( const _variant_t & vCoord, int * nElemID, double * dX, double * dY, double * dZ );
__declspec(implementation_key(8270)) enum zReturnCode IInterpolate::SetComplexOptions ( VARIANT_BOOL bExpandComplex, double dComplexPhase );
__declspec(implementation_key(8271)) VARIANT_BOOL IInterpolate::GetCentroidAveraging ( );
__declspec(implementation_key(8272)) void IInterpolate::PutCentroidAveraging ( VARIANT_BOOL _val );
__declspec(implementation_key(8273)) VARIANT_BOOL IInterpolate::GetUseSolidFreeFacesOnly ( );
__declspec(implementation_key(8274)) void IInterpolate::PutUseSolidFreeFacesOnly ( VARIANT_BOOL _val );
__declspec(implementation_key(8275)) VARIANT_BOOL IInterpolate::GetEngineeringShearStrain ( );
__declspec(implementation_key(8276)) void IInterpolate::PutEngineeringShearStrain ( VARIANT_BOOL _val );
__declspec(implementation_key(8277)) double IInterpolate::GetDistanceTolerance ( );
__declspec(implementation_key(8278)) void IInterpolate::PutDistanceTolerance ( double _val );
__declspec(implementation_key(8279)) double IInterpolate::GetAmbientScalar ( );
__declspec(implementation_key(8280)) void IInterpolate::PutAmbientScalar ( double _val );
__declspec(implementation_key(8281)) _variant_t IInterpolate::GetvAmbientVector ( );
__declspec(implementation_key(8282)) void IInterpolate::PutvAmbientVector ( const _variant_t & _val );
__declspec(implementation_key(8283)) _variant_t IInterpolate::GetvAmbientTensor ( );
__declspec(implementation_key(8284)) void IInterpolate::PutvAmbientTensor ( const _variant_t & _val );
__declspec(implementation_key(8285)) enum zReturnCode IBeamCalculator::GetElementProperties ( double * dArea, double * dIzz, double * dIyy, double * dIyz, double * dfJ, double * dShearAreaY, double * dShearAreaZ, double * dWarp, double * dNeutralAxisOffsetY, double * dNeutralAxisOffsetZ );
__declspec(implementation_key(8286)) enum zReturnCode IBeamCalculator::GetMeshInfo ( int * nNumNode, VARIANT * dNodeYZ, int * nNumElem, VARIANT * nElemNodes );
__declspec(implementation_key(8287)) enum zReturnCode IBeamCalculator::CalculateStress ( int nOutputSetID, enum zBeamCalculatorStressComponent enStressComponent, int * pnNumNodes, VARIANT * pdCoordinates, VARIANT * pdStresses, VARIANT * pdMaxStress, VARIANT * pnMaxStressIndex, VARIANT * pdMinStress, VARIANT * pnMinIndexStress );
__declspec(implementation_key(8288)) enum zReturnCode IBeamCalculator::CalculateStressFromForces ( const _variant_t & dEndAForces, const _variant_t & dEndBForces, enum zBeamCalculatorStressComponent enStressComponent, int * pnNumNodes, VARIANT * pdCoordinates, VARIANT * pdStresses, VARIANT * pdMaxStress, VARIANT * pnMaxStressInfo, VARIANT * pdMinStress, VARIANT * pnMinStressInfo );
__declspec(implementation_key(8289)) enum zReturnCode IBeamCalculator::FindMaxMinStress ( int nOutputSetID, enum zBeamCalculatorStressComponent enStressComponent, int * nMaxSetID, enum zBeamCalculatorStressComponent * enMaxComponent, double * dMaxLocation, double * dMaxStress, int * nMinSetID, enum zBeamCalculatorStressComponent * enMinComponent, double * dMinLocation, double * dMinStress );
__declspec(implementation_key(8290)) int IBeamCalculator::GetElement ( );
__declspec(implementation_key(8291)) void IBeamCalculator::PutElement ( int _val );
__declspec(implementation_key(8292)) double IBeamCalculator::GetPosition ( );
__declspec(implementation_key(8293)) void IBeamCalculator::PutPosition ( double _val );
__declspec(implementation_key(8294)) int IBeamCalculator::GetMeshFactor ( );
__declspec(implementation_key(8295)) void IBeamCalculator::PutMeshFactor ( int _val );
__declspec(implementation_key(8296)) VARIANT_BOOL IBeamCalculator::GetIncludeAxialForce ( );
__declspec(implementation_key(8297)) void IBeamCalculator::PutIncludeAxialForce ( VARIANT_BOOL _val );
__declspec(implementation_key(8298)) VARIANT_BOOL IBeamCalculator::GetIncludeShearForceY ( );
__declspec(implementation_key(8299)) void IBeamCalculator::PutIncludeShearForceY ( VARIANT_BOOL _val );
__declspec(implementation_key(8300)) VARIANT_BOOL IBeamCalculator::GetIncludeShearForceZ ( );
__declspec(implementation_key(8301)) void IBeamCalculator::PutIncludeShearForceZ ( VARIANT_BOOL _val );
__declspec(implementation_key(8302)) VARIANT_BOOL IBeamCalculator::GetIncludeMomentY ( );
__declspec(implementation_key(8303)) void IBeamCalculator::PutIncludeMomentY ( VARIANT_BOOL _val );
__declspec(implementation_key(8304)) VARIANT_BOOL IBeamCalculator::GetIncludeMomentZ ( );
__declspec(implementation_key(8305)) void IBeamCalculator::PutIncludeMomentZ ( VARIANT_BOOL _val );
__declspec(implementation_key(8306)) VARIANT_BOOL IBeamCalculator::GetIncludeTorque ( );
__declspec(implementation_key(8307)) void IBeamCalculator::PutIncludeTorque ( VARIANT_BOOL _val );
__declspec(implementation_key(8308)) int IAnalysisStudy::CountOutputSets ( );
__declspec(implementation_key(8309)) enum zReturnCode IAnalysisStudy::OutputSets ( int nOutputSetSetID );
__declspec(implementation_key(8310)) VARIANT_BOOL IAnalysisStudy::HasOutputSet ( int nSetID );
__declspec(implementation_key(8311)) enum zReturnCode IAnalysisStudy::AddOutputSets ( int nSetID );
__declspec(implementation_key(8312)) enum zReturnCode IAnalysisStudy::RemoveOutputSets ( int nSetID );
__declspec(implementation_key(8313)) enum zReturnCode IAnalysisStudy::RemoveAllOutputSets ( );
__declspec(implementation_key(8314)) enum zReturnCode IAnalysisStudy::Delete ( int nSetID, VARIANT_BOOL bDeleteOutput );
__declspec(implementation_key(8315)) enum zReturnCode IAnalysisStudy::NextSet ( );
__declspec(implementation_key(8316)) enum zReturnCode IAnalysisStudy::PrevSet ( );
__declspec(implementation_key(8317)) enum zReturnCode IAnalysisStudy::NextEmptySet ( );
__declspec(implementation_key(8318)) enum zReturnCode IAnalysisStudy::PrevEmptySet ( );
__declspec(implementation_key(8319)) enum zReturnCode IAnalysisStudy::Get ( int ID );
__declspec(implementation_key(8320)) enum zReturnCode IAnalysisStudy::Put ( int ID );
__declspec(implementation_key(8321)) enum zReturnCode IAnalysisStudy::Exist ( int ID );
__declspec(implementation_key(8322)) enum zReturnCode IAnalysisStudy::Deletable ( int ID );
__declspec(implementation_key(8323)) enum zReturnCode IAnalysisStudy::Reset ( );
__declspec(implementation_key(8324)) enum zReturnCode IAnalysisStudy::Next ( );
__declspec(implementation_key(8325)) enum zReturnCode IAnalysisStudy::Prev ( );
__declspec(implementation_key(8326)) enum zReturnCode IAnalysisStudy::First ( );
__declspec(implementation_key(8327)) enum zReturnCode IAnalysisStudy::Last ( );
__declspec(implementation_key(8328)) int IAnalysisStudy::NextID ( );
__declspec(implementation_key(8329)) int IAnalysisStudy::PrevID ( );
__declspec(implementation_key(8330)) int IAnalysisStudy::NextEmptyID ( );
__declspec(implementation_key(8331)) int IAnalysisStudy::PrevEmptyID ( );
__declspec(implementation_key(8332)) enum zReturnCode IAnalysisStudy::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(8333)) enum zReturnCode IAnalysisStudy::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(8334)) int IAnalysisStudy::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(8335)) enum zReturnCode IAnalysisStudy::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(8336)) enum zReturnCode IAnalysisStudy::NextInSet ( int nSetID );
__declspec(implementation_key(8337)) enum zReturnCode IAnalysisStudy::FirstInSet ( int nSetID );
__declspec(implementation_key(8338)) int IAnalysisStudy::CountSet ( );
__declspec(implementation_key(8339)) enum zReturnCode IAnalysisStudy::NextExistingInSet ( int nSetID );
__declspec(implementation_key(8340)) enum zReturnCode IAnalysisStudy::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(8341)) int IAnalysisStudy::GetFileTime ( );
__declspec(implementation_key(8342)) void IAnalysisStudy::PutFileTime ( int _val );
__declspec(implementation_key(8343)) enum zAnalysisProgram IAnalysisStudy::GetAnalysisProg ( );
__declspec(implementation_key(8344)) void IAnalysisStudy::PutAnalysisProg ( enum zAnalysisProgram _val );
__declspec(implementation_key(8345)) enum zAnalysisType IAnalysisStudy::GetAnalysisType ( );
__declspec(implementation_key(8346)) void IAnalysisStudy::PutAnalysisType ( enum zAnalysisType _val );
__declspec(implementation_key(8347)) _bstr_t IAnalysisStudy::Gettitle ( );
__declspec(implementation_key(8348)) void IAnalysisStudy::Puttitle ( _bstr_t _val );
__declspec(implementation_key(8349)) _bstr_t IAnalysisStudy::Getnotes ( );
__declspec(implementation_key(8350)) void IAnalysisStudy::Putnotes ( _bstr_t _val );
__declspec(implementation_key(8351)) int IAnalysisStudy::GetAnalysisSet ( );
__declspec(implementation_key(8352)) void IAnalysisStudy::PutAnalysisSet ( int _val );
__declspec(implementation_key(8353)) int IAnalysisStudy::GetID ( );
__declspec(implementation_key(8354)) void IAnalysisStudy::PutID ( int _val );
__declspec(implementation_key(8355)) int IAnalysisStudy::GetsetID ( );
__declspec(implementation_key(8356)) void IAnalysisStudy::PutsetID ( int _val );
__declspec(implementation_key(8357)) int IAnalysisStudy::GetActive ( );
__declspec(implementation_key(8358)) void IAnalysisStudy::PutActive ( int _val );
__declspec(implementation_key(8359)) enum zReturnCode IDrawErase::ClearAll ( );
__declspec(implementation_key(8360)) enum zReturnCode IDrawErase::clear ( enum zDataType entityTYPE );
__declspec(implementation_key(8361)) enum zReturnCode IDrawErase::SaveGroup ( int groupID, _bstr_t title );
__declspec(implementation_key(8362)) enum zReturnCode IDrawErase::LoadGroup ( int groupID );
__declspec(implementation_key(8363)) enum zReturnCode IDrawErase::Grow ( );
__declspec(implementation_key(8364)) enum zReturnCode IDrawErase::Shrink ( );
__declspec(implementation_key(8365)) enum zReturnCode IDrawErase::HasErased ( );
__declspec(implementation_key(8366)) enum zReturnCode IDrawErase::HasErasedType ( enum zDataType entityTYPE );
__declspec(implementation_key(8367)) enum zReturnCode IDrawErase::EraseSet ( enum zDataType entityTYPE, int nSetD, VARIANT_BOOL bAddToEraseList, VARIANT_BOOL bClear, VARIANT_BOOL bRedraw );
__declspec(implementation_key(8368)) ISetPtr IDrawErase::GetErased ( enum zDataType entityTYPE );
__declspec(implementation_key(8369)) VARIANT_BOOL IDrawErase::GetEnable ( );
__declspec(implementation_key(8370)) void IDrawErase::PutEnable ( VARIANT_BOOL _val );
__declspec(implementation_key(8371)) VARIANT_BOOL IDrawErase::GetEraseMode ( );
__declspec(implementation_key(8372)) void IDrawErase::PutEraseMode ( VARIANT_BOOL _val );
__declspec(implementation_key(8373)) VARIANT_BOOL IDrawErase::GetAutoSelectMesh ( );
__declspec(implementation_key(8374)) void IDrawErase::PutAutoSelectMesh ( VARIANT_BOOL _val );
__declspec(implementation_key(8375)) VARIANT_BOOL IDrawErase::GetExclusiveDrawMode ( );
__declspec(implementation_key(8376)) void IDrawErase::PutExclusiveDrawMode ( VARIANT_BOOL _val );
__declspec(implementation_key(8377)) VARIANT_BOOL IDrawErase::GetEraseGeometry ( );
__declspec(implementation_key(8378)) void IDrawErase::PutEraseGeometry ( VARIANT_BOOL _val );
__declspec(implementation_key(8379)) VARIANT_BOOL IDrawErase::GetEraseMesh ( );
__declspec(implementation_key(8380)) void IDrawErase::PutEraseMesh ( VARIANT_BOOL _val );
__declspec(implementation_key(8381)) VARIANT_BOOL IDrawErase::GetDrawModeSelectFromAll ( );
__declspec(implementation_key(8382)) void IDrawErase::PutDrawModeSelectFromAll ( VARIANT_BOOL _val );
__declspec(implementation_key(8383)) enum zReturnCode IFreq::AddFreq ( int NF, const _variant_t & Fi, int asetID, VARIANT_BOOL on );
__declspec(implementation_key(8384)) enum zReturnCode IFreq::AddFreq1 ( double F1, double DF, int NDF, int asetID, VARIANT_BOOL on );
__declspec(implementation_key(8385)) enum zReturnCode IFreq::AddFreq2 ( double F1, double F2, int NF, int asetID, VARIANT_BOOL on );
__declspec(implementation_key(8386)) enum zReturnCode IFreq::AddFreq3 ( double F1, double F2, int NEF, VARIANT_BOOL LOG, double CLUSTER, int asetID, VARIANT_BOOL on );
__declspec(implementation_key(8387)) enum zReturnCode IFreq::AddFreq4 ( double F1, double F2, int NFM, double FPSD, int asetID, VARIANT_BOOL on );
__declspec(implementation_key(8388)) enum zReturnCode IFreq::AddFreq5 ( double F1, double F2, int NFR, const _variant_t & FRi, int asetID, VARIANT_BOOL on );
__declspec(implementation_key(8389)) enum zReturnCode IFreq::UpdFreq ( int NF, const _variant_t & Fi, int asetID, VARIANT_BOOL on );
__declspec(implementation_key(8390)) enum zReturnCode IFreq::UpdFreq1 ( double F1, double DF, int NDF, int asetID, VARIANT_BOOL on );
__declspec(implementation_key(8391)) enum zReturnCode IFreq::UpdFreq2 ( double F1, double F2, int NF, int asetID, VARIANT_BOOL on );
__declspec(implementation_key(8392)) enum zReturnCode IFreq::UpdFreq3 ( double F1, double F2, int NEF, VARIANT_BOOL LOG, double CLUSTER, int asetID, VARIANT_BOOL on );
__declspec(implementation_key(8393)) enum zReturnCode IFreq::UpdFreq4 ( double F1, double F2, int NFM, double FPSD, int asetID, VARIANT_BOOL on );
__declspec(implementation_key(8394)) enum zReturnCode IFreq::UpdFreq5 ( double F1, double F2, int NFR, const _variant_t & FRi, int asetID, VARIANT_BOOL on );
__declspec(implementation_key(8395)) enum zReturnCode IFreq::AddFreqByFuncID ( int funcID, int asetID, VARIANT_BOOL on );
__declspec(implementation_key(8396)) enum zReturnCode IFreq::AddFreq5ByFuncID ( double F1, double F2, int funcID, int asetID, VARIANT_BOOL on );
__declspec(implementation_key(8397)) enum zReturnCode IFreq::UpdFreqByFuncID ( int funcID, int asetID, VARIANT_BOOL on );
__declspec(implementation_key(8398)) enum zReturnCode IFreq::UpdFreq5ByFuncID ( double F1, double F2, int funcID, int asetID, VARIANT_BOOL on );
__declspec(implementation_key(8399)) enum zReturnCode IFreq::AllOn ( int asetID );
__declspec(implementation_key(8400)) enum zReturnCode IFreq::AllOff ( int asetID );
__declspec(implementation_key(8401)) enum zReturnCode IFreq::TurnOn ( int asetID, int freqID );
__declspec(implementation_key(8402)) enum zReturnCode IFreq::TurnOff ( int asetID, int freqID );
__declspec(implementation_key(8403)) enum zReturnCode IFreq::NextSet ( );
__declspec(implementation_key(8404)) enum zReturnCode IFreq::PrevSet ( );
__declspec(implementation_key(8405)) enum zReturnCode IFreq::NextEmptySet ( );
__declspec(implementation_key(8406)) enum zReturnCode IFreq::PrevEmptySet ( );
__declspec(implementation_key(8407)) enum zReturnCode IFreq::Get ( int ID );
__declspec(implementation_key(8408)) enum zReturnCode IFreq::Put ( int ID );
__declspec(implementation_key(8409)) enum zReturnCode IFreq::Exist ( int ID );
__declspec(implementation_key(8410)) enum zReturnCode IFreq::Deletable ( int ID );
__declspec(implementation_key(8411)) enum zReturnCode IFreq::Reset ( );
__declspec(implementation_key(8412)) enum zReturnCode IFreq::Next ( );
__declspec(implementation_key(8413)) enum zReturnCode IFreq::Prev ( );
__declspec(implementation_key(8414)) enum zReturnCode IFreq::First ( );
__declspec(implementation_key(8415)) enum zReturnCode IFreq::Last ( );
__declspec(implementation_key(8416)) int IFreq::NextID ( );
__declspec(implementation_key(8417)) int IFreq::PrevID ( );
__declspec(implementation_key(8418)) int IFreq::NextEmptyID ( );
__declspec(implementation_key(8419)) int IFreq::PrevEmptyID ( );
__declspec(implementation_key(8420)) enum zReturnCode IFreq::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(8421)) enum zReturnCode IFreq::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(8422)) int IFreq::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(8423)) enum zReturnCode IFreq::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(8424)) enum zReturnCode IFreq::NextInSet ( int nSetID );
__declspec(implementation_key(8425)) enum zReturnCode IFreq::FirstInSet ( int nSetID );
__declspec(implementation_key(8426)) int IFreq::CountSet ( );
__declspec(implementation_key(8427)) enum zReturnCode IFreq::NextExistingInSet ( int nSetID );
__declspec(implementation_key(8428)) enum zReturnCode IFreq::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(8429)) double IFreq::GetF1 ( );
__declspec(implementation_key(8430)) void IFreq::PutF1 ( double _val );
__declspec(implementation_key(8431)) double IFreq::GetF2 ( );
__declspec(implementation_key(8432)) void IFreq::PutF2 ( double _val );
__declspec(implementation_key(8433)) double IFreq::GetDF ( );
__declspec(implementation_key(8434)) void IFreq::PutDF ( double _val );
__declspec(implementation_key(8435)) double IFreq::GetFSPD ( );
__declspec(implementation_key(8436)) void IFreq::PutFSPD ( double _val );
__declspec(implementation_key(8437)) double IFreq::GetCLUSTER ( );
__declspec(implementation_key(8438)) void IFreq::PutCLUSTER ( double _val );
__declspec(implementation_key(8439)) int IFreq::GetNF ( );
__declspec(implementation_key(8440)) void IFreq::PutNF ( int _val );
__declspec(implementation_key(8441)) unsigned char IFreq::GetLOG ( );
__declspec(implementation_key(8442)) void IFreq::PutLOG ( unsigned char _val );
__declspec(implementation_key(8443)) enum zFreqType IFreq::Gettype ( );
__declspec(implementation_key(8444)) void IFreq::Puttype ( enum zFreqType _val );
__declspec(implementation_key(8445)) int IFreq::GetID ( );
__declspec(implementation_key(8446)) void IFreq::PutID ( int _val );
__declspec(implementation_key(8447)) int IFreq::GetsetID ( );
__declspec(implementation_key(8448)) void IFreq::PutsetID ( int _val );
__declspec(implementation_key(8449)) int IFreq::GetActive ( );
__declspec(implementation_key(8450)) void IFreq::PutActive ( int _val );
__declspec(implementation_key(8451)) enum zReturnCode IMidFaceCentroidModel::KeepNodes ( VARIANT_BOOL qKeepNodes );
__declspec(implementation_key(8452)) enum zReturnCode IMidFaceCentroidModel::SetCentroidNodeColor ( int iColor );
__declspec(implementation_key(8453)) enum zReturnCode IMidFaceCentroidModel::SetFaceNodeColor ( int iColor );
__declspec(implementation_key(8454)) enum zReturnCode IMidFaceCentroidModel::SetNodeStartIDs ( int iFirstFaceNodeID, int iFirstCentroidNodeID );
__declspec(implementation_key(8455)) enum zReturnCode IMidFaceCentroidModel::SetLoadAndConstraintSet ( int ILoadSet, int IBCSet );
__declspec(implementation_key(8456)) enum zReturnCode IMidFaceCentroidModel::SetMappingTria6 ( int iDefaultMapping, int iGroupTri6, int iGroupTri7 );
__declspec(implementation_key(8457)) enum zReturnCode IMidFaceCentroidModel::SetMappingQuad8 ( int iDefaultMapping, int iGroupQuad8, int iGroupQuad9 );
__declspec(implementation_key(8458)) enum zReturnCode IMidFaceCentroidModel::SetMappingTetra10 ( int iDefaultMapping, int iGroupTet10, int iGroupTet14, int iGroupTet15 );
__declspec(implementation_key(8459)) enum zReturnCode IMidFaceCentroidModel::SetMappingWedge15 ( int iDefaultMapping, int iGroupWedge15, int iGroupWedge20, int iGroupWedge21 );
__declspec(implementation_key(8460)) enum zReturnCode IMidFaceCentroidModel::SetMappingBrick20 ( int iDefaultMapping, int iGroupHex20, int iGroupHex26, int iGroupHex27 );
__declspec(implementation_key(8461)) enum zReturnCode IMidFaceCentroidModel::SetMappingPyramid13 ( int iDefaultMapping, int iGroupPyramid14, int iGroupPyramid18, int iGroupPyramid19 );
__declspec(implementation_key(8462)) enum zReturnCode IMidFaceCentroidModel::ShowTri_3 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8463)) enum zReturnCode IMidFaceCentroidModel::ShowTri_6 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8464)) enum zReturnCode IMidFaceCentroidModel::ShowTri_7 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8465)) enum zReturnCode IMidFaceCentroidModel::ShowQuad_4 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8466)) enum zReturnCode IMidFaceCentroidModel::ShowQuad_8 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8467)) enum zReturnCode IMidFaceCentroidModel::ShowQuad_9 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8468)) enum zReturnCode IMidFaceCentroidModel::ShowTet_4 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8469)) enum zReturnCode IMidFaceCentroidModel::Show_Tet_10 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8470)) enum zReturnCode IMidFaceCentroidModel::ShowTet_14 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8471)) enum zReturnCode IMidFaceCentroidModel::ShowTet_15 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8472)) enum zReturnCode IMidFaceCentroidModel::ShowWedge_6 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8473)) enum zReturnCode IMidFaceCentroidModel::ShowWedge_15 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8474)) enum zReturnCode IMidFaceCentroidModel::ShowWedge_20 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8475)) enum zReturnCode IMidFaceCentroidModel::ShowWedge_21 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8476)) enum zReturnCode IMidFaceCentroidModel::ShowPyramid_5 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8477)) enum zReturnCode IMidFaceCentroidModel::ShowPyramid_14 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8478)) enum zReturnCode IMidFaceCentroidModel::ShowPyramid_18 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8479)) enum zReturnCode IMidFaceCentroidModel::ShowPyramid_19 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8480)) enum zReturnCode IMidFaceCentroidModel::ShowHex_8 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8481)) enum zReturnCode IMidFaceCentroidModel::ShowHex_20 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8482)) enum zReturnCode IMidFaceCentroidModel::ShowHex_26 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8483)) enum zReturnCode IMidFaceCentroidModel::ShowHex_27 ( VARIANT_BOOL qNodes );
__declspec(implementation_key(8484)) enum zReturnCode IMidFaceCentroidModel::GenerateMidFaceCentroidNodes ( );
__declspec(implementation_key(8485)) enum zReturnCode IMidFaceCentroidModel::WriteNeutralFile ( _bstr_t fName );
__declspec(implementation_key(8486)) enum zReturnCode IMidFaceCentroidModel::Rotate ( );
__declspec(implementation_key(8487)) enum zReturnCode IMidFaceCentroidModel::SetTitle ( _bstr_t fName );
__declspec(implementation_key(8488)) enum zReturnCode IMidFaceCentroidModel::SetPointGroup ( int IGroup );
__declspec(implementation_key(8489)) enum zReturnCode IUserDefinedGraphics::SetView ( int iViewID );
__declspec(implementation_key(8490)) enum zReturnCode IUserDefinedGraphics::GetView ( int * piViewID );
__declspec(implementation_key(8491)) enum zReturnCode IUserDefinedGraphics::SetName ( _bstr_t pName );
__declspec(implementation_key(8492)) enum zReturnCode IUserDefinedGraphics::Publish ( );
__declspec(implementation_key(8493)) enum zReturnCode IUserDefinedGraphics::Blank ( VARIANT_BOOL qBlanked );
__declspec(implementation_key(8494)) enum zReturnCode IUserDefinedGraphics::CollectorPoints ( _bstr_t pName, int nAppearances, double dDepthOffset, int * piCollectorID );
__declspec(implementation_key(8495)) enum zReturnCode IUserDefinedGraphics::CollectorBitmap ( _bstr_t pName, int nAppearances, int iBitmapID, double dXOffset, double dYOffset, double dDepthOffset, int * piCollectorID );
__declspec(implementation_key(8496)) enum zReturnCode IUserDefinedGraphics::CollectorSymbol ( _bstr_t pName, int nAppearances, int iSymbolID, VARIANT_BOOL qScreenScale, double dScreenScale, double dDepthOffset, int * piCollectorID );
__declspec(implementation_key(8497)) enum zReturnCode IUserDefinedGraphics::CollectorSymbolREAL8 ( _bstr_t pName, int nAppearances, int iSymbolID, VARIANT_BOOL qScreenScale, double dMaxScale, double dMinScale, double dXOffset, double dYOffset, double dZOffset, double dDepthOffset, _bstr_t pFormat, int * piCollectorID );
__declspec(implementation_key(8498)) enum zReturnCode IUserDefinedGraphics::CollectorText ( _bstr_t pName, int nAppearances, double dXOffset, double dYOffset, double dZOffset, int * piCollectorID );
__declspec(implementation_key(8499)) enum zReturnCode IUserDefinedGraphics::CollectorTextINT4 ( _bstr_t pName, int nAppearances, double dXOffset, double dYOffset, double dZOffset, _bstr_t pFormat, int * piCollectorID );
__declspec(implementation_key(8500)) enum zReturnCode IUserDefinedGraphics::CollectorTextREAL8 ( _bstr_t pName, int nAppearances, double dXOffset, double dYOffset, double dZOffset, _bstr_t pFormat, int * piCollectorID );
__declspec(implementation_key(8501)) enum zReturnCode IUserDefinedGraphics::CollectorLines ( _bstr_t pName, int nAppearances, double dDepthOffset, int * piCollectorID );
__declspec(implementation_key(8502)) enum zReturnCode IUserDefinedGraphics::CollectorTriangles ( _bstr_t pName, int nAppearances, double dDepthOffset, int * piCollectorID );
__declspec(implementation_key(8503)) enum zReturnCode IUserDefinedGraphics::CollectorBlank ( int iCollectorID, VARIANT_BOOL qBlanked );
__declspec(implementation_key(8504)) enum zReturnCode IUserDefinedGraphics::CollectorSingleSymbol ( int iCollectorID, VARIANT_BOOL qSingle );
__declspec(implementation_key(8505)) enum zReturnCode IUserDefinedGraphics::CollectorLabels ( int iCollectorID, VARIANT_BOOL qLabels );
__declspec(implementation_key(8506)) enum zReturnCode IUserDefinedGraphics::CollectorMarkForDeletion ( int iCollectorID );
__declspec(implementation_key(8507)) enum zReturnCode IUserDefinedGraphics::CollectorAppearance ( int iCollectorID, int iAppearanceID, const _variant_t & dColor1, const _variant_t & dColor2, double dLineWidth, int iLineStyle, int iFillPattern, VARIANT_BOOL qLighting, int iCullMode, int iFont, double dPointSize );
__declspec(implementation_key(8508)) enum zReturnCode IUserDefinedGraphics::CollectorAddPointLocations ( int iCollectorID, int iAppearanceID, int nPoints, const _variant_t & pdPoints );
__declspec(implementation_key(8509)) enum zReturnCode IUserDefinedGraphics::CollectorAddPointEntityLocations ( int iCollectorID, int iAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs );
__declspec(implementation_key(8510)) enum zReturnCode IUserDefinedGraphics::CollectorAddPointEntityFaceLocations ( int iCollectorID, int iAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & piFaceIDs );
__declspec(implementation_key(8511)) enum zReturnCode IUserDefinedGraphics::CollectorAddSymbolLocations ( int iCollectorID, int iAppearanceID, int nSymbols, const _variant_t & pdPoints, const _variant_t & pfDirections, const _variant_t & pdOrthogonals );
__declspec(implementation_key(8512)) enum zReturnCode IUserDefinedGraphics::CollectorAddSymbolEntityLocations ( int iCollectorID, int iAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & pdDirections, const _variant_t & pdOrthogonals );
__declspec(implementation_key(8513)) enum zReturnCode IUserDefinedGraphics::CollectorAddSymbolEntityFaceLocations ( int iCollectorID, int iAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & piFaceIDs, const _variant_t & pdDirections, const _variant_t & pdOrthogonals );
__declspec(implementation_key(8514)) enum zReturnCode IUserDefinedGraphics::CollectorAddSymbolEntityFaceNormalLocations ( int iCollectorID, int iAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & piFaceIDs, const _variant_t & pdOrthogonals );
__declspec(implementation_key(8515)) enum zReturnCode IUserDefinedGraphics::CollectorAddSymbolEntityFaceNormalAutoLocations ( int iCollectorID, int iAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & piFaceIDs, const _variant_t & piOrientOptions, const _variant_t & pdOrientAngles );
__declspec(implementation_key(8516)) enum zReturnCode IUserDefinedGraphics::CollectorAddSymbolEntityEdgeLocations ( int iCollectorID, int iAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & piEdgeIDs, const _variant_t & pdDirections, const _variant_t & pdOrthogonals );
__declspec(implementation_key(8517)) enum zReturnCode IUserDefinedGraphics::CollectorAddSymbolEntityEdgeAutoLocations ( int iCollectorID, int iAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & piEdgeIDs, const _variant_t & piOrientOptions );
__declspec(implementation_key(8518)) enum zReturnCode IUserDefinedGraphics::CollectorAddSymbolREAL8Locations ( int iCollectorID, int iSymbolAppearanceID, int iLabelAppearanceID, int nSymbols, const _variant_t & pdPoints, const _variant_t & pfDirections, const _variant_t & pdOrthogonals, const _variant_t & pdValues );
__declspec(implementation_key(8519)) enum zReturnCode IUserDefinedGraphics::CollectorAddSymbolREAL8EntityLocations ( int iCollectorID, int iSymbolAppearanceID, int iLabelAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & pdDirections, const _variant_t & pdOrthogonals, const _variant_t & pdValues );
__declspec(implementation_key(8520)) enum zReturnCode IUserDefinedGraphics::CollectorAddSymbolREAL8EntityFaceLocations ( int iCollectorID, int iSymbolAppearanceID, int iLabelAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & piFaceIDs, const _variant_t & pdDirections, const _variant_t & pdOrthogonals, const _variant_t & pdValues );
__declspec(implementation_key(8521)) enum zReturnCode IUserDefinedGraphics::CollectorAddSymbolREAL8EntityFaceNormalLocations ( int iCollectorID, int iSymbolAppearanceID, int iLabelAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & piFaceIDs, const _variant_t & pdOrthogonals, const _variant_t & pdValues );
__declspec(implementation_key(8522)) enum zReturnCode IUserDefinedGraphics::CollectorAddSymbolREAL8EntityFaceNormalAutoLocations ( int iCollectorID, int iSymbolAppearanceID, int iLabelAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & piFaceIDs, const _variant_t & piOrientOptions, const _variant_t & pdOrientAngles, const _variant_t & pdValues );
__declspec(implementation_key(8523)) enum zReturnCode IUserDefinedGraphics::CollectorAddSymbolREAL8EntityEdgeLocations ( int iCollectorID, int iSymbolAppearanceID, int iLabelAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & piEdgeIDs, const _variant_t & pdDirections, const _variant_t & pdOrthogonals, const _variant_t & pdValues );
__declspec(implementation_key(8524)) enum zReturnCode IUserDefinedGraphics::CollectorAddSymbolREAL8EntityEdgeAutoLocations ( int iCollectorID, int iSymbolAppearanceID, int iLabelAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & piEdgeIDs, const _variant_t & piOrientOptions, const _variant_t & pdValues );
__declspec(implementation_key(8525)) enum zReturnCode IUserDefinedGraphics::CollectorAddTextLocations ( int iCollectorID, int iAppearanceID, int nPoints, const _variant_t & pdPoints, const _variant_t & ppText );
__declspec(implementation_key(8526)) enum zReturnCode IUserDefinedGraphics::CollectorAddTextEntityLocations ( int iCollectorID, int iAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & ppText );
__declspec(implementation_key(8527)) enum zReturnCode IUserDefinedGraphics::CollectorAddTextEntityFaceLocations ( int iCollectorID, int iAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & piFaceIDs, const _variant_t & ppText );
__declspec(implementation_key(8528)) enum zReturnCode IUserDefinedGraphics::CollectorAddTextINT4Locations ( int iCollectorID, int iAppearanceID, int nPoints, const _variant_t & pdPoints, const _variant_t & piValues );
__declspec(implementation_key(8529)) enum zReturnCode IUserDefinedGraphics::CollectorAddTextINT4EntityLocations ( int iCollectorID, int iAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & piValues );
__declspec(implementation_key(8530)) enum zReturnCode IUserDefinedGraphics::CollectorAddTextINT4EntityFaceLocations ( int iCollectorID, int iAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & piFaceIDs, const _variant_t & piValues );
__declspec(implementation_key(8531)) enum zReturnCode IUserDefinedGraphics::CollectorAddTextREAL8Locations ( int iCollectorID, int iAppearanceID, int nPoints, const _variant_t & pdPoints, const _variant_t & pdValues );
__declspec(implementation_key(8532)) enum zReturnCode IUserDefinedGraphics::CollectorAddTextREAL8EntityLocations ( int iCollectorID, int iAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & pdValues );
__declspec(implementation_key(8533)) enum zReturnCode IUserDefinedGraphics::CollectorAddTextREAL8EntityFaceLocations ( int iCollectorID, int iAppearanceID, enum zDataType eType, int nIDs, const _variant_t & piIDs, const _variant_t & piFaceIDs, const _variant_t & pdValues );
__declspec(implementation_key(8534)) enum zReturnCode IUserDefinedGraphics::CollectorAddLineLocations ( int iCollectorID, int iAppearanceID, int nLines, const _variant_t & pdPoints );
__declspec(implementation_key(8535)) enum zReturnCode IUserDefinedGraphics::CollectorAddPolyLineLocations ( int iCollectorID, int iAppearanceID, int nPoints, const _variant_t & pdPoints );
__declspec(implementation_key(8536)) enum zReturnCode IUserDefinedGraphics::CollectorAddMeshLineLocations ( int iCollectorID, int iAppearanceID, int nPoints, const _variant_t & pdPoints, int nLines, const _variant_t & piLines );
__declspec(implementation_key(8537)) enum zReturnCode IUserDefinedGraphics::CollectorAddTriangleLocations ( int iCollectorID, int iAppearanceID, int nTriangles, const _variant_t & pdPoints );
__declspec(implementation_key(8538)) enum zReturnCode IUserDefinedGraphics::CollectorAddMeshTriangleLocations ( int iCollectorID, int iAppearanceID, int nPoints, const _variant_t & pdPoints, int nTriangles, const _variant_t & piTriangles );
__declspec(implementation_key(8539)) enum zReturnCode IUserDefinedGraphics::CollectorAddMeshTriangleNormalLocations ( int iCollectorID, int iAppearanceID, int nPoints, const _variant_t & pdPoints, const _variant_t & pdNormals, int nTriangles, const _variant_t & piTriangles );
__declspec(implementation_key(8540)) enum zReturnCode IUserDefinedGraphics::BitmapCreate ( int iWidth, int iHeight, const _variant_t & pqBits, int * piBitmapID );
__declspec(implementation_key(8541)) enum zReturnCode IUserDefinedGraphics::BitmapMarkForDeletion ( int iBitmapID );
__declspec(implementation_key(8542)) enum zReturnCode IUserDefinedGraphics::SymbolCreate ( int nAppearances, const _variant_t & dLabelLocation, VARIANT_BOOL qScreenOrient, int * piSymbolID );
__declspec(implementation_key(8543)) enum zReturnCode IUserDefinedGraphics::SymbolMarkForDeletion ( int iSymbolID );
__declspec(implementation_key(8544)) enum zReturnCode IUserDefinedGraphics::SymbolSetAddInScreen ( int iSymbolID, int iInScreenMode );
__declspec(implementation_key(8545)) enum zReturnCode IUserDefinedGraphics::SymbolAddPoints ( int iSymbolID, int iAppearanceOffset, int nPoints, const _variant_t & pdPoints );
__declspec(implementation_key(8546)) enum zReturnCode IUserDefinedGraphics::SymbolAddLineStraight ( int iSymbolID, int iAppearanceOffset, const _variant_t & dPoints );
__declspec(implementation_key(8547)) enum zReturnCode IUserDefinedGraphics::SymbolAddLinePoly ( int iSymbolID, int iAppearanceOffset, int nPoints, const _variant_t & pdPoints );
__declspec(implementation_key(8548)) enum zReturnCode IUserDefinedGraphics::SymbolAddLineCircle ( int iSymbolID, int iAppearanceOffset, const _variant_t & dCenter, const _variant_t & dPointOnCircle, const _variant_t & dNormal, int nDividers );
__declspec(implementation_key(8549)) enum zReturnCode IUserDefinedGraphics::SymbolAddLineBrick ( int iSymbolID, int iAppearanceOffset, const _variant_t & dPoints );
__declspec(implementation_key(8550)) enum zReturnCode IUserDefinedGraphics::SymbolAddLineCylinder ( int iSymbolID, int iAppearanceOffset, const _variant_t & dCenter, const _variant_t & dPointOnCircle, const _variant_t & dDirection, double dHeight, int nDividers, int nSubDividers );
__declspec(implementation_key(8551)) enum zReturnCode IUserDefinedGraphics::SymbolAddLineCone ( int iSymbolID, int iAppearanceOffset, const _variant_t & dCenter, const _variant_t & dPointOnCircle, const _variant_t & dDirection, double dHeight, int nDividers, int nSubDividers );
__declspec(implementation_key(8552)) enum zReturnCode IUserDefinedGraphics::SymbolAddLineSphere ( int iSymbolID, int iAppearanceOffset, const _variant_t & dCenter, const _variant_t & dPointOnEquator, const _variant_t & dDirection, double dAngle, int nLongDividers, int nLongSubDividers, int nLatDividers, int nLatSubDividers );
__declspec(implementation_key(8553)) enum zReturnCode IUserDefinedGraphics::SymbolAddFillTriangle ( int iSymbolID, int iAppearanceOffset, const _variant_t & dPoints, const _variant_t & dNormals );
__declspec(implementation_key(8554)) enum zReturnCode IUserDefinedGraphics::SymbolAddFillCircle ( int iSymbolID, int iAppearanceOffset, const _variant_t & dCenter, const _variant_t & dPointOnCircle, const _variant_t & dNormal, int nDividers );
__declspec(implementation_key(8555)) enum zReturnCode IUserDefinedGraphics::SymbolAddFillBrick ( int iSymbolID, int iAppearanceOffset, const _variant_t & dPoints, VARIANT_BOOL qEndCap );
__declspec(implementation_key(8556)) enum zReturnCode IUserDefinedGraphics::SymbolAddFillCylinder ( int iSymbolID, int iAppearanceOffset, const _variant_t & dCenter, const _variant_t & dPointOnCircle, const _variant_t & dDirection, double dHeight, int nDividers, int nSubDividers, VARIANT_BOOL qEndCap );
__declspec(implementation_key(8557)) enum zReturnCode IUserDefinedGraphics::SymbolAddFillCone ( int iSymbolID, int iAppearanceOffset, const _variant_t & dCenter, const _variant_t & dPointOnCircle, const _variant_t & dDirection, double dHeight, int nDividers, int nSubDividers, VARIANT_BOOL qEndCap );
__declspec(implementation_key(8558)) enum zReturnCode IUserDefinedGraphics::SymbolAddFillTubeBrick ( int iSymbolID, int iAppearanceOffset, const _variant_t & dOuterPoints, const _variant_t & dInnerPoints );
__declspec(implementation_key(8559)) enum zReturnCode IUserDefinedGraphics::SymbolAddFillTubeCylinder ( int iSymbolID, int iAppearanceOffset, const _variant_t & dCenter, const _variant_t & dPointOnCircle, const _variant_t & dDirection, double dHeight, double dInnerProportion, int nDividers, int nSubDividers );
__declspec(implementation_key(8560)) enum zReturnCode IUserDefinedGraphics::SymbolAddFillSphere ( int iSymbolID, int iAppearanceOffset, const _variant_t & dCenter, const _variant_t & dPointOnEquator, const _variant_t & dDirection, double dAngle, int nLongDividers, int nLongSubDividers, int nLatDividers, int nLatSubDividers );
__declspec(implementation_key(8561)) enum zReturnCode IUserDefinedGraphics::Detach ( _bstr_t pDetachedName );
__declspec(implementation_key(8562)) enum zReturnCode IUserDefinedGraphics::Attach ( _bstr_t pDetachedName );
__declspec(implementation_key(8563)) double IVector::Getbase ( int nVectorIndex );
__declspec(implementation_key(8564)) void IVector::Putbase ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8565)) double IVector::Getdir ( int nVectorIndex );
__declspec(implementation_key(8566)) void IVector::Putdir ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8567)) enum zReturnCode IVector::PutAll ( int ID, _bstr_t sTitle, const _variant_t & vBase, const _variant_t & vDir, double dLen );
__declspec(implementation_key(8568)) enum zReturnCode IVector::NextSet ( );
__declspec(implementation_key(8569)) enum zReturnCode IVector::PrevSet ( );
__declspec(implementation_key(8570)) enum zReturnCode IVector::NextEmptySet ( );
__declspec(implementation_key(8571)) enum zReturnCode IVector::PrevEmptySet ( );
__declspec(implementation_key(8572)) enum zReturnCode IVector::Get ( int ID );
__declspec(implementation_key(8573)) enum zReturnCode IVector::Put ( int ID );
__declspec(implementation_key(8574)) enum zReturnCode IVector::Exist ( int ID );
__declspec(implementation_key(8575)) enum zReturnCode IVector::Deletable ( int ID );
__declspec(implementation_key(8576)) enum zReturnCode IVector::Delete ( int ID );
__declspec(implementation_key(8577)) enum zReturnCode IVector::Reset ( );
__declspec(implementation_key(8578)) enum zReturnCode IVector::Next ( );
__declspec(implementation_key(8579)) enum zReturnCode IVector::Prev ( );
__declspec(implementation_key(8580)) enum zReturnCode IVector::First ( );
__declspec(implementation_key(8581)) enum zReturnCode IVector::Last ( );
__declspec(implementation_key(8582)) int IVector::NextID ( );
__declspec(implementation_key(8583)) int IVector::PrevID ( );
__declspec(implementation_key(8584)) int IVector::NextEmptyID ( );
__declspec(implementation_key(8585)) int IVector::PrevEmptyID ( );
__declspec(implementation_key(8586)) enum zReturnCode IVector::GetLibrary ( int ID );
__declspec(implementation_key(8587)) enum zReturnCode IVector::PutLibrary ( );
__declspec(implementation_key(8588)) enum zReturnCode IVector::DeleteLibrary ( int ID );
__declspec(implementation_key(8589)) enum zReturnCode IVector::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(8590)) enum zReturnCode IVector::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(8591)) int IVector::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(8592)) enum zReturnCode IVector::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(8593)) enum zReturnCode IVector::NextInSet ( int nSetID );
__declspec(implementation_key(8594)) enum zReturnCode IVector::FirstInSet ( int nSetID );
__declspec(implementation_key(8595)) int IVector::CountSet ( );
__declspec(implementation_key(8596)) enum zReturnCode IVector::NextExistingInSet ( int nSetID );
__declspec(implementation_key(8597)) enum zReturnCode IVector::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(8598)) _bstr_t IVector::Gettitle ( );
__declspec(implementation_key(8599)) void IVector::Puttitle ( _bstr_t _val );
__declspec(implementation_key(8600)) _variant_t IVector::GetvBase ( );
__declspec(implementation_key(8601)) void IVector::PutvBase ( const _variant_t & _val );
__declspec(implementation_key(8602)) _variant_t IVector::GetvDir ( );
__declspec(implementation_key(8603)) void IVector::PutvDir ( const _variant_t & _val );
__declspec(implementation_key(8604)) double IVector::GetLength ( );
__declspec(implementation_key(8605)) void IVector::PutLength ( double _val );
__declspec(implementation_key(8606)) int IVector::GetID ( );
__declspec(implementation_key(8607)) void IVector::PutID ( int _val );
__declspec(implementation_key(8608)) int IVector::GetsetID ( );
__declspec(implementation_key(8609)) void IVector::PutsetID ( int _val );
__declspec(implementation_key(8610)) int IVector::GetActive ( );
__declspec(implementation_key(8611)) void IVector::PutActive ( int _val );
__declspec(implementation_key(8612)) double IPlane::Getbase ( int nVectorIndex );
__declspec(implementation_key(8613)) void IPlane::Putbase ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8614)) double IPlane::Getnorm ( int nVectorIndex );
__declspec(implementation_key(8615)) void IPlane::Putnorm ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8616)) double IPlane::GetAxis ( int nVectorIndex );
__declspec(implementation_key(8617)) void IPlane::PutAxis ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8618)) enum zReturnCode IPlane::PutAll ( int ID, _bstr_t sTitle, const _variant_t & vBase, const _variant_t & vNorm, const _variant_t & vAxis );
__declspec(implementation_key(8619)) enum zReturnCode IPlane::NextSet ( );
__declspec(implementation_key(8620)) enum zReturnCode IPlane::PrevSet ( );
__declspec(implementation_key(8621)) enum zReturnCode IPlane::NextEmptySet ( );
__declspec(implementation_key(8622)) enum zReturnCode IPlane::PrevEmptySet ( );
__declspec(implementation_key(8623)) enum zReturnCode IPlane::Get ( int ID );
__declspec(implementation_key(8624)) enum zReturnCode IPlane::Put ( int ID );
__declspec(implementation_key(8625)) enum zReturnCode IPlane::Exist ( int ID );
__declspec(implementation_key(8626)) enum zReturnCode IPlane::Deletable ( int ID );
__declspec(implementation_key(8627)) enum zReturnCode IPlane::Delete ( int ID );
__declspec(implementation_key(8628)) enum zReturnCode IPlane::Reset ( );
__declspec(implementation_key(8629)) enum zReturnCode IPlane::Next ( );
__declspec(implementation_key(8630)) enum zReturnCode IPlane::Prev ( );
__declspec(implementation_key(8631)) enum zReturnCode IPlane::First ( );
__declspec(implementation_key(8632)) enum zReturnCode IPlane::Last ( );
__declspec(implementation_key(8633)) int IPlane::NextID ( );
__declspec(implementation_key(8634)) int IPlane::PrevID ( );
__declspec(implementation_key(8635)) int IPlane::NextEmptyID ( );
__declspec(implementation_key(8636)) int IPlane::PrevEmptyID ( );
__declspec(implementation_key(8637)) enum zReturnCode IPlane::GetLibrary ( int ID );
__declspec(implementation_key(8638)) enum zReturnCode IPlane::PutLibrary ( );
__declspec(implementation_key(8639)) enum zReturnCode IPlane::DeleteLibrary ( int ID );
__declspec(implementation_key(8640)) enum zReturnCode IPlane::GetTitleList ( int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(8641)) enum zReturnCode IPlane::GetTitleIDList ( VARIANT_BOOL bIncludeID, int minID, int maxID, int * Count, VARIANT * listID, VARIANT * listTITLE );
__declspec(implementation_key(8642)) int IPlane::ParseTitleID ( _bstr_t sTitleIDStr );
__declspec(implementation_key(8643)) enum zReturnCode IPlane::SelectID ( _bstr_t sTitle );
__declspec(implementation_key(8644)) enum zReturnCode IPlane::NextInSet ( int nSetID );
__declspec(implementation_key(8645)) enum zReturnCode IPlane::FirstInSet ( int nSetID );
__declspec(implementation_key(8646)) int IPlane::CountSet ( );
__declspec(implementation_key(8647)) enum zReturnCode IPlane::NextExistingInSet ( int nSetID );
__declspec(implementation_key(8648)) enum zReturnCode IPlane::SelectIDWithNew ( _bstr_t sTitle );
__declspec(implementation_key(8649)) _bstr_t IPlane::Gettitle ( );
__declspec(implementation_key(8650)) void IPlane::Puttitle ( _bstr_t _val );
__declspec(implementation_key(8651)) _variant_t IPlane::GetvBase ( );
__declspec(implementation_key(8652)) void IPlane::PutvBase ( const _variant_t & _val );
__declspec(implementation_key(8653)) _variant_t IPlane::GetvNorm ( );
__declspec(implementation_key(8654)) void IPlane::PutvNorm ( const _variant_t & _val );
__declspec(implementation_key(8655)) _variant_t IPlane::GetvAxis ( );
__declspec(implementation_key(8656)) void IPlane::PutvAxis ( const _variant_t & _val );
__declspec(implementation_key(8657)) int IPlane::GetID ( );
__declspec(implementation_key(8658)) void IPlane::PutID ( int _val );
__declspec(implementation_key(8659)) int IPlane::GetsetID ( );
__declspec(implementation_key(8660)) void IPlane::PutsetID ( int _val );
__declspec(implementation_key(8661)) int IPlane::GetActive ( );
__declspec(implementation_key(8662)) void IPlane::PutActive ( int _val );
__declspec(implementation_key(8663)) double Imodel::GetPref_AngleDimetric ( int nVectorIndex );
__declspec(implementation_key(8664)) void Imodel::PutPref_AngleDimetric ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8665)) double Imodel::GetPref_AngleIsometric ( int nVectorIndex );
__declspec(implementation_key(8666)) void Imodel::PutPref_AngleIsometric ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8667)) double Imodel::GetPref_AngleTrimetric ( int nVectorIndex );
__declspec(implementation_key(8668)) void Imodel::PutPref_AngleTrimetric ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8669)) VARIANT_BOOL Imodel::GetPref_RenderRotate ( int nVectorIndex );
__declspec(implementation_key(8670)) void Imodel::PutPref_RenderRotate ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(8671)) VARIANT_BOOL Imodel::GetInfo_PermBC ( int nVectorIndex );
__declspec(implementation_key(8672)) void Imodel::PutInfo_PermBC ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(8673)) VARIANT_BOOL Imodel::GetInfo_WorkplaneRuler ( int nVectorIndex );
__declspec(implementation_key(8674)) void Imodel::PutInfo_WorkplaneRuler ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(8675)) int Imodel::GetInfo_MaxID ( enum zDataType nVectorIndex );
__declspec(implementation_key(8676)) void Imodel::PutInfo_MaxID ( enum zDataType nVectorIndex, int _arg2 );
__declspec(implementation_key(8677)) int Imodel::GetInfo_MinID ( enum zDataType nVectorIndex );
__declspec(implementation_key(8678)) void Imodel::PutInfo_MinID ( enum zDataType nVectorIndex, int _arg2 );
__declspec(implementation_key(8679)) int Imodel::GetInfo_Count ( enum zDataType nVectorIndex );
__declspec(implementation_key(8680)) void Imodel::PutInfo_Count ( enum zDataType nVectorIndex, int _arg2 );
__declspec(implementation_key(8681)) int Imodel::GetInfo_ElemFormulation1 ( int nVectorIndex );
__declspec(implementation_key(8682)) void Imodel::PutInfo_ElemFormulation1 ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(8683)) int Imodel::GetInfo_ElemFormulation2 ( int nVectorIndex );
__declspec(implementation_key(8684)) void Imodel::PutInfo_ElemFormulation2 ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(8685)) double Imodel::GetInfo_WorkplaneOrigin ( int nVectorIndex );
__declspec(implementation_key(8686)) void Imodel::PutInfo_WorkplaneOrigin ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8687)) double Imodel::GetInfo_WorkplaneX ( int nVectorIndex );
__declspec(implementation_key(8688)) void Imodel::PutInfo_WorkplaneX ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8689)) double Imodel::GetInfo_WorkplaneY ( int nVectorIndex );
__declspec(implementation_key(8690)) void Imodel::PutInfo_WorkplaneY ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8691)) double Imodel::GetInfo_WorkplaneZ ( int nVectorIndex );
__declspec(implementation_key(8692)) void Imodel::PutInfo_WorkplaneZ ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8693)) double Imodel::GetInfo_WorkplanePrevOrigin ( int nVectorIndex );
__declspec(implementation_key(8694)) void Imodel::PutInfo_WorkplanePrevOrigin ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8695)) double Imodel::GetInfo_WorkplanePrevX ( int nVectorIndex );
__declspec(implementation_key(8696)) void Imodel::PutInfo_WorkplanePrevX ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8697)) double Imodel::GetInfo_WorkplanePrevY ( int nVectorIndex );
__declspec(implementation_key(8698)) void Imodel::PutInfo_WorkplanePrevY ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8699)) double Imodel::GetInfo_WorkplanePrevZ ( int nVectorIndex );
__declspec(implementation_key(8700)) void Imodel::PutInfo_WorkplanePrevZ ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8701)) double Imodel::GetInfo_SnapSpacing ( int nVectorIndex );
__declspec(implementation_key(8702)) void Imodel::PutInfo_SnapSpacing ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8703)) double Imodel::GetInfo_WorkplaneSizeX ( int nVectorIndex );
__declspec(implementation_key(8704)) void Imodel::PutInfo_WorkplaneSizeX ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8705)) double Imodel::GetInfo_WorkplaneSizeY ( int nVectorIndex );
__declspec(implementation_key(8706)) void Imodel::PutInfo_WorkplaneSizeY ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8707)) double Imodel::GetInfo_MatlAngleVec ( int nVectorIndex );
__declspec(implementation_key(8708)) void Imodel::PutInfo_MatlAngleVec ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8709)) int Imodel::GetTool_CursorXYZ ( int nVectorIndex );
__declspec(implementation_key(8710)) void Imodel::PutTool_CursorXYZ ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(8711)) double Imodel::GetInfo_ModelSizeX ( int nVectorIndex );
__declspec(implementation_key(8712)) void Imodel::PutInfo_ModelSizeX ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8713)) double Imodel::GetInfo_ModelSizeY ( int nVectorIndex );
__declspec(implementation_key(8714)) void Imodel::PutInfo_ModelSizeY ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8715)) double Imodel::GetInfo_ModelSizeZ ( int nVectorIndex );
__declspec(implementation_key(8716)) void Imodel::PutInfo_ModelSizeZ ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8717)) enum zColor Imodel::GetPref_EntityColor ( int nVectorIndex );
__declspec(implementation_key(8718)) void Imodel::PutPref_EntityColor ( int nVectorIndex, enum zColor _arg2 );
__declspec(implementation_key(8719)) int Imodel::GetInfo_Increment ( enum zDataType nVectorIndex );
__declspec(implementation_key(8720)) void Imodel::PutInfo_Increment ( enum zDataType nVectorIndex, int _arg2 );
__declspec(implementation_key(8721)) int Imodel::GetInfo_NextID ( enum zDataType nVectorIndex );
__declspec(implementation_key(8722)) void Imodel::PutInfo_NextID ( enum zDataType nVectorIndex, int _arg2 );
__declspec(implementation_key(8723)) int Imodel::GetInfo_ActiveID ( enum zDataType nVectorIndex );
__declspec(implementation_key(8724)) void Imodel::PutInfo_ActiveID ( enum zDataType nVectorIndex, int _arg2 );
__declspec(implementation_key(8725)) int Imodel::GetInfo_ActiveType ( enum zDataType nVectorIndex );
__declspec(implementation_key(8726)) void Imodel::PutInfo_ActiveType ( enum zDataType nVectorIndex, int _arg2 );
__declspec(implementation_key(8727)) enum zColor Imodel::GetInfo_Color ( enum zDataType nVectorIndex );
__declspec(implementation_key(8728)) void Imodel::PutInfo_Color ( enum zDataType nVectorIndex, enum zColor _arg2 );
__declspec(implementation_key(8729)) int Imodel::GetInfo_SurfDivisionsLinear ( int nVectorIndex );
__declspec(implementation_key(8730)) void Imodel::PutInfo_SurfDivisionsLinear ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(8731)) int Imodel::GetInfo_SurfDivisionsCurved ( int nVectorIndex );
__declspec(implementation_key(8732)) void Imodel::PutInfo_SurfDivisionsCurved ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(8733)) VARIANT_BOOL Imodel::GetPref_NasQstOn ( int nVectorIndex );
__declspec(implementation_key(8734)) void Imodel::PutPref_NasQstOn ( int nVectorIndex, VARIANT_BOOL _arg2 );
__declspec(implementation_key(8735)) int Imodel::GetPref_NasQstVal ( int nVectorIndex );
__declspec(implementation_key(8736)) void Imodel::PutPref_NasQstVal ( int nVectorIndex, int _arg2 );
__declspec(implementation_key(8737)) double Imodel::GetPref_SpaceballFactors ( int nVectorIndex );
__declspec(implementation_key(8738)) void Imodel::PutPref_SpaceballFactors ( int nVectorIndex, double _arg2 );
__declspec(implementation_key(8739)) unsigned char Imodel::GetPref_FBDefContributions ( enum zFbdContribution nVectorIndex );
__declspec(implementation_key(8740)) void Imodel::PutPref_FBDefContributions ( enum zFbdContribution nVectorIndex, unsigned char _arg2 );
__declspec(implementation_key(8741)) enum zFbdVecMode Imodel::GetPref_FBDefNodalVectorMode ( int nVectorIndex );
__declspec(implementation_key(8742)) void Imodel::PutPref_FBDefNodalVectorMode ( int nVectorIndex, enum zFbdVecMode _arg2 );
__declspec(implementation_key(8743)) enum zFbdVecMode Imodel::GetPref_FBDefTotalVectorMode ( int nVectorIndex );
__declspec(implementation_key(8744)) void Imodel::PutPref_FBDefTotalVectorMode ( int nVectorIndex, enum zFbdVecMode _arg2 );
__declspec(implementation_key(8745)) unsigned char Imodel::GetPref_FBDefComponents ( enum zFbdComponent nVectorIndex );
__declspec(implementation_key(8746)) void Imodel::PutPref_FBDefComponents ( enum zFbdComponent nVectorIndex, unsigned char _arg2 );
__declspec(implementation_key(8747)) enum zReturnCode Imodel::feUnlockApiOnly ( int nCode );
__declspec(implementation_key(8748)) enum zReturnCode Imodel::feAppBringToTop ( VARIANT_BOOL toTop, int underWindow );
__declspec(implementation_key(8749)) enum zReturnCode Imodel::feAppPosition ( VARIANT_BOOL move, VARIANT_BOOL Size, double x, double y, double cx, double cy );
__declspec(implementation_key(8750)) enum zReturnCode Imodel::feAppShowWindow ( VARIANT_BOOL maximize );
__declspec(implementation_key(8751)) enum zReturnCode Imodel::feAppStatusRedraw ( );
__declspec(implementation_key(8752)) enum zReturnCode Imodel::feAppStatusShow ( VARIANT_BOOL Enable, int max_status );
__declspec(implementation_key(8753)) enum zReturnCode Imodel::feAppStatusUpdate ( int current_status );
__declspec(implementation_key(8754)) enum zReturnCode Imodel::feAppRegisterAddIn ( VARIANT_BOOL regster, int windowID, int messageID, VARIANT_BOOL tile, int location );
__declspec(implementation_key(8755)) enum zReturnCode Imodel::feAppMessage ( enum zMessageColor color, _bstr_t message );
__declspec(implementation_key(8756)) int Imodel::feAppLock ( );
__declspec(implementation_key(8757)) int Imodel::feAppUnlock ( );
__declspec(implementation_key(8758)) enum zReturnCode Imodel::feFileNew ( );
__declspec(implementation_key(8759)) enum zReturnCode Imodel::feFileOpen ( VARIANT_BOOL useDlg, _bstr_t fName );
__declspec(implementation_key(8760)) enum zReturnCode Imodel::feFileSaveAs ( VARIANT_BOOL useDlg, _bstr_t fName );
__declspec(implementation_key(8761)) enum zReturnCode Imodel::feFileSave ( VARIANT_BOOL useDlg );
__declspec(implementation_key(8762)) enum zReturnCode Imodel::feFileExit ( );
__declspec(implementation_key(8763)) enum zReturnCode Imodel::feFileTimedSave ( VARIANT_BOOL useDlg, VARIANT_BOOL saving, VARIANT_BOOL notify, int Interval, int commands );
__declspec(implementation_key(8764)) enum zReturnCode Imodel::feFileReadDxf ( VARIANT_BOOL useDlg, _bstr_t fName, VARIANT_BOOL read_TEXT, VARIANT_BOOL read_3DFACE, VARIANT_BOOL read_BLOCKS, VARIANT_BOOL read_POLYELEM, VARIANT_BOOL read_TRACE_boundary, VARIANT_BOOL read_TRACE_centerline, VARIANT_BOOL read_LAYER, int first_layer, VARIANT_BOOL merge_points, double merge_distance );
__declspec(implementation_key(8765)) enum zReturnCode Imodel::feFileReadAcisOpt ( VARIANT_BOOL useDlg, _bstr_t fName, _bstr_t title, int layer, enum zColor color, VARIANT_BOOL increment_layer, VARIANT_BOOL increment_color, VARIANT_BOOL assign_color, VARIANT_BOOL convert_to_splines, VARIANT_BOOL convert_format, VARIANT_BOOL clean, VARIANT_BOOL heal, VARIANT_BOOL check, VARIANT_BOOL stringent, VARIANT_BOOL delete_invalid, VARIANT_BOOL faces, double Scale );
__declspec(implementation_key(8766)) enum zReturnCode Imodel::feFileReadAcis ( _bstr_t fName );
__declspec(implementation_key(8767)) enum zReturnCode Imodel::feFileReadParasolidOpt ( VARIANT_BOOL useDlg, _bstr_t fName, _bstr_t title, int layer, enum zColor color, VARIANT_BOOL increment_layer, VARIANT_BOOL increment_color, VARIANT_BOOL assign_color, VARIANT_BOOL convert_format, VARIANT_BOOL clean, VARIANT_BOOL heal, VARIANT_BOOL check, VARIANT_BOOL stringent, VARIANT_BOOL delete_invalid, VARIANT_BOOL faces, double Scale );
__declspec(implementation_key(8768)) enum zReturnCode Imodel::feFileReadParasolid ( _bstr_t fName );
__declspec(implementation_key(8769)) enum zReturnCode Imodel::feFileReadStep ( _bstr_t fName );
__declspec(implementation_key(8770)) enum zReturnCode Imodel::feFileReadCatia ( VARIANT_BOOL useDlg, _bstr_t fName, VARIANT_BOOL rdAnalytical, VARIANT_BOOL rdTopology, VARIANT_BOOL rdCurves, VARIANT_BOOL stitch, VARIANT_BOOL heal );
__declspec(implementation_key(8771)) enum zReturnCode Imodel::feFileReadUg ( VARIANT_BOOL useDlg, _bstr_t fName, VARIANT_BOOL rdBlanked, VARIANT_BOOL rdLayers );
__declspec(implementation_key(8772)) enum zReturnCode Imodel::feFileReadCatiaV5 ( VARIANT_BOOL useDlg, _bstr_t fName, _bstr_t fPath, VARIANT_BOOL rdNoShow, VARIANT_BOOL rdInactiveLayers, VARIANT_BOOL rdPoints, VARIANT_BOOL rdCurves, VARIANT_BOOL rdSurfaces, VARIANT_BOOL rdBodies, VARIANT_BOOL simplify );
__declspec(implementation_key(8773)) enum zReturnCode Imodel::feFileReadProe ( _bstr_t fName );
__declspec(implementation_key(8774)) enum zReturnCode Imodel::feFileReadSolidEdge ( _bstr_t fName );
__declspec(implementation_key(8775)) enum zReturnCode Imodel::feFileReadIdeas ( _bstr_t fName );
__declspec(implementation_key(8776)) enum zReturnCode Imodel::feFileReadStl ( VARIANT_BOOL useDlg, _bstr_t fName, VARIANT_BOOL skip_short_edges, VARIANT_BOOL merge_nodes, VARIANT_BOOL close_gaps, VARIANT_BOOL PATRAN_file, double min_distance );
__declspec(implementation_key(8777)) enum zReturnCode Imodel::feFileReadIgesAdv ( VARIANT_BOOL useDlg, _bstr_t fName, VARIANT_BOOL read_curves, VARIANT_BOOL read_untrimmed_surfaces, VARIANT_BOOL read_trimmed_surfaces, VARIANT_BOOL read_solids, int flavor, int trim_curve_option );
__declspec(implementation_key(8778)) enum zReturnCode Imodel::feFileReadIges ( VARIANT_BOOL useDlg, _bstr_t fName, VARIANT_BOOL merge_points, VARIANT_BOOL read_LAYER, VARIANT_BOOL read_geom_only, VARIANT_BOOL read_surface_data, int trim_preference, double min_resolution );
__declspec(implementation_key(8779)) enum zReturnCode Imodel::feFileWriteParasolid ( VARIANT_BOOL useDlg, _bstr_t fName, double version, int solidSET );
__declspec(implementation_key(8780)) enum zReturnCode Imodel::feFileWriteAcis ( VARIANT_BOOL useDlg, _bstr_t fName, double version, int solidSET );
__declspec(implementation_key(8781)) enum zReturnCode Imodel::feFileWriteStl ( _bstr_t fName, int elemSET );
__declspec(implementation_key(8782)) enum zReturnCode Imodel::feFileWriteVrml ( _bstr_t fName, double version, VARIANT_BOOL write_solid, VARIANT_BOOL single_color, VARIANT_BOOL write_deformed, VARIANT_BOOL write_contour, VARIANT_BOOL write_background, enum zColor background_color, enum zColor color, int solidSET );
__declspec(implementation_key(8783)) enum zReturnCode Imodel::feFileWriteStep ( _bstr_t fName, int solidSET );
__declspec(implementation_key(8784)) enum zReturnCode Imodel::feFileWriteIges ( _bstr_t fName, VARIANT_BOOL spline_curves, VARIANT_BOOL spline_surfaces, VARIANT_BOOL bounded_surfaces, int customization, int surface_options, int export_as, int solidSET );
__declspec(implementation_key(8785)) enum zReturnCode Imodel::feFileReadNastran ( int brand, _bstr_t fName );
__declspec(implementation_key(8786)) enum zReturnCode Imodel::feFileReadAnsys ( int brand, _bstr_t fName );
__declspec(implementation_key(8787)) enum zReturnCode Imodel::feFileReadAbaqus ( int brand, _bstr_t fName );
__declspec(implementation_key(8788)) enum zReturnCode Imodel::feFileReadDyna ( int brand, _bstr_t fName );
__declspec(implementation_key(8789)) enum zReturnCode Imodel::feFileReadMarc ( int brand, _bstr_t fName );
__declspec(implementation_key(8790)) enum zReturnCode Imodel::feFileWriteNastran ( int brand, _bstr_t fName );
__declspec(implementation_key(8791)) enum zReturnCode Imodel::feFileWriteAnsys ( int brand, _bstr_t fName );
__declspec(implementation_key(8792)) enum zReturnCode Imodel::feFileWriteAbaqus ( int brand, _bstr_t fName );
__declspec(implementation_key(8793)) enum zReturnCode Imodel::feFileWriteDyna ( int brand, _bstr_t fName );
__declspec(implementation_key(8794)) enum zReturnCode Imodel::feFileWriteMarc ( int brand, _bstr_t fName );
__declspec(implementation_key(8795)) enum zReturnCode Imodel::feFileWriteNeutral ( int brand, _bstr_t fName, VARIANT_BOOL write_geometry_model, VARIANT_BOOL write_analysis_model, VARIANT_BOOL write_output, VARIANT_BOOL write_addl_info, VARIANT_BOOL expand_geometric, VARIANT_BOOL minimize_size, int digits, double version, int groupID );
__declspec(implementation_key(8796)) enum zReturnCode Imodel::feFileReadNeutral ( int brand, _bstr_t fName, VARIANT_BOOL read_geometry, VARIANT_BOOL read_model, VARIANT_BOOL read_output, VARIANT_BOOL status_messages, int offsetID );
__declspec(implementation_key(8797)) enum zReturnCode Imodel::feFileReadNastranResults ( int brand, _bstr_t fName );
__declspec(implementation_key(8798)) enum zReturnCode Imodel::feFileReadAnsysResults ( int brand, _bstr_t fName );
__declspec(implementation_key(8799)) enum zReturnCode Imodel::feFileReadAbaqusResults ( int brand, _bstr_t fName );
__declspec(implementation_key(8800)) enum zReturnCode Imodel::feFileReadDynaResults ( int brand, _bstr_t fName );
__declspec(implementation_key(8801)) enum zReturnCode Imodel::feFileReadMarcResults ( int brand, _bstr_t fName );
__declspec(implementation_key(8802)) enum zReturnCode Imodel::feFilePageSetupSave ( );
__declspec(implementation_key(8803)) enum zReturnCode Imodel::feFilePageSetupReset ( );
__declspec(implementation_key(8804)) enum zReturnCode Imodel::feFilePrint ( VARIANT_BOOL useDlg, VARIANT_BOOL asBitmap, enum zPrintSource source, _bstr_t fromFile, _bstr_t toFile );
__declspec(implementation_key(8805)) enum zReturnCode Imodel::feFilePictureCopy ( );
__declspec(implementation_key(8806)) enum zReturnCode Imodel::feFilePictureSave ( VARIANT_BOOL useDlg, VARIANT_BOOL saveDesktop, enum zPictFormat format, _bstr_t fName );
__declspec(implementation_key(8807)) enum zReturnCode Imodel::feFilePictureReplay ( _bstr_t fName );
__declspec(implementation_key(8808)) enum zReturnCode Imodel::feFileMessageCopy ( );
__declspec(implementation_key(8809)) enum zReturnCode Imodel::feFileMessageSave ( VARIANT_BOOL useDlg, _bstr_t fName );
__declspec(implementation_key(8810)) enum zReturnCode Imodel::feFileMessageSelect ( int firstLine, int lastLine );
__declspec(implementation_key(8811)) enum zReturnCode Imodel::feFileProgramRun ( VARIANT_BOOL useDlg, VARIANT_BOOL init, VARIANT_BOOL isFile, _bstr_t buff );
__declspec(implementation_key(8812)) enum zReturnCode Imodel::feFileMessageLineNumber ( int * CurrentLine );
__declspec(implementation_key(8813)) enum zReturnCode Imodel::feFilePictureSave2 ( VARIANT_BOOL useDlg, enum zPictRegion saveRegion, enum zPictFormat format, _bstr_t fName );
__declspec(implementation_key(8814)) enum zReturnCode Imodel::feFileRebuild ( VARIANT_BOOL useDlg, VARIANT_BOOL fullRebuild );
__declspec(implementation_key(8815)) enum zReturnCode Imodel::feFilePreferencesSave ( );
__declspec(implementation_key(8816)) enum zReturnCode Imodel::feFilePreferencesReset ( );
__declspec(implementation_key(8817)) enum zReturnCode Imodel::feFileGetName ( _bstr_t title, _bstr_t filterName, _bstr_t filterStr, VARIANT_BOOL openForRead, BSTR * fName );
__declspec(implementation_key(8818)) enum zReturnCode Imodel::feFileExecute ( _bstr_t cmdline, VARIANT_BOOL waitForCompletion );
__declspec(implementation_key(8819)) enum zReturnCode Imodel::feNotesGet ( int noteSET, BSTR * notes );
__declspec(implementation_key(8820)) enum zReturnCode Imodel::feNotesPut ( int noteSET, VARIANT_BOOL clear, _bstr_t notes );
__declspec(implementation_key(8821)) enum zReturnCode Imodel::feFilePictureCopy2 ( enum zPictRegion saveRegion );
__declspec(implementation_key(8822)) enum zReturnCode Imodel::feToolUnitConvertFactors ( const _variant_t & baseMult, const _variant_t & baseAdd, VARIANT * factorMult, VARIANT * factorAdd );
__declspec(implementation_key(8823)) enum zReturnCode Imodel::feToolUnitConvert ( const _variant_t & baseMult, const _variant_t & baseAdd, const _variant_t & factorMult, const _variant_t & factorAdd );
__declspec(implementation_key(8824)) enum zReturnCode Imodel::feVarPut ( _bstr_t varname, VARIANT_BOOL evalEqn, VARIANT_BOOL setConst, double varvalue, _bstr_t vareqn );
__declspec(implementation_key(8825)) enum zReturnCode Imodel::feVarGet ( _bstr_t varname, double * varvalue, BSTR * vareqn );
__declspec(implementation_key(8826)) enum zReturnCode Imodel::feVarEval ( _bstr_t vareqn, double * varvalue );
__declspec(implementation_key(8827)) enum zReturnCode Imodel::feLayerPut ( int layID, enum zColor layColor, _bstr_t layTitle );
__declspec(implementation_key(8828)) enum zReturnCode Imodel::feLayerGet ( int layID, enum zColor * layColor, BSTR * layTitle );
__declspec(implementation_key(8829)) enum zReturnCode Imodel::feTextPut ( int textID, VARIANT_BOOL DrawPointer, VARIANT_BOOL DrawBorder, VARIANT_BOOL modelPos, int horzJust, int vertJust, int visView, int layer, int fontID, enum zColor BackColor, enum zColor bordColor, enum zColor textColor, const _variant_t & textLoc, const _variant_t & pointerLoc, _bstr_t tText );
__declspec(implementation_key(8830)) enum zReturnCode Imodel::feTextGet ( int textID, VARIANT_BOOL * DrawPointer, VARIANT_BOOL * DrawBorder, VARIANT_BOOL * modelPos, int * horzJust, int * vertJust, int * visView, int * layer, int * fontID, enum zColor * BackColor, enum zColor * bordColor, enum zColor * textColor, VARIANT * textLoc, VARIANT * pointerLoc, BSTR * text );
__declspec(implementation_key(8831)) enum zReturnCode Imodel::feMeasureDistance ( const _variant_t & p1, const _variant_t & p2, double * dist );
__declspec(implementation_key(8832)) enum zReturnCode Imodel::feMeasureDistanceToPlane ( const _variant_t & p1, const _variant_t & planePt, const _variant_t & planeNorm, double * dist );
__declspec(implementation_key(8833)) enum zReturnCode Imodel::feMeasureDistanceBetweenLines ( const _variant_t & pA1, const _variant_t & pA2, const _variant_t & pB1, const _variant_t & pB2, double * dist );
__declspec(implementation_key(8834)) enum zReturnCode Imodel::feMeasureAngle ( const _variant_t & center, const _variant_t & p1, const _variant_t & p2, double * angle );
__declspec(implementation_key(8835)) enum zReturnCode Imodel::feMeasureCurve ( int curveSET, double * totalLength );
__declspec(implementation_key(8836)) enum zReturnCode Imodel::feMeasureSurfaceArea ( int surfaceSET, double * totalArea );
__declspec(implementation_key(8837)) enum zReturnCode Imodel::feMeasureSolidMassProp ( int solidID, double * Area, double * volume, VARIANT * cg, VARIANT * Inertia );
__declspec(implementation_key(8838)) enum zReturnCode Imodel::feMeasureMeshMassProp ( int elemSET, int csysID, VARIANT_BOOL printResults, VARIANT_BOOL printDetails, double * len, double * Area, double * volume, double * structMass, double * nonstructMass, double * totalMass, VARIANT * structCG, VARIANT * nonstructCG, VARIANT * totalCG, VARIANT * Inertia, VARIANT * inertiaCG );
__declspec(implementation_key(8839)) enum zReturnCode Imodel::feMeasureSurfSectionProp ( int surfID, const _variant_t & vecBASE, const _variant_t & vecDIR, VARIANT * sectProp );
__declspec(implementation_key(8840)) enum zReturnCode Imodel::feMeasureMeshSectionProp ( int elemSET, const _variant_t & vecBASE, const _variant_t & vecDIR, VARIANT * sectProp );
__declspec(implementation_key(8841)) enum zReturnCode Imodel::feCheckCoincidentNode ( int keepSET, int mergeSET, double tolerance, VARIANT_BOOL merge, VARIANT_BOOL messages, int * coinCount, VARIANT * coinNodes );
__declspec(implementation_key(8842)) enum zReturnCode Imodel::feCheckCoincidentPoint ( int keepSET, int mergeSET, double tolerance, VARIANT_BOOL merge, VARIANT_BOOL messages, int * coinCount, VARIANT * coinPoints );
__declspec(implementation_key(8843)) enum zReturnCode Imodel::feCheckCoincidentCurve ( int curveSET, double tolerance );
__declspec(implementation_key(8844)) enum zReturnCode Imodel::feCheckPlanarNodes ( int nodeSET, VARIANT_BOOL messages, VARIANT_BOOL Project, double tolerance, VARIANT_BOOL askPlane, const _variant_t & planeBase, const _variant_t & planeNormal );
__declspec(implementation_key(8845)) enum zReturnCode Imodel::feCheckCoincidentElem ( int elemSET, VARIANT_BOOL chkTYPE, VARIANT_BOOL chkSHAPE, VARIANT_BOOL chkMASS, VARIANT_BOOL doLIST, VARIANT_BOOL makeGROUP1, VARIANT_BOOL makeGROUP2 );
__declspec(implementation_key(8846)) enum zReturnCode Imodel::feCheckElemFixup ( int elemSET );
__declspec(implementation_key(8847)) enum zReturnCode Imodel::feCheckElemDistortion ( int elemSET, VARIANT_BOOL doLIST, VARIANT_BOOL makeGROUP, VARIANT_BOOL chkASPECT, VARIANT_BOOL chkTAPER, VARIANT_BOOL chkANGLE, VARIANT_BOOL chkWARP, VARIANT_BOOL chkNasWARP, VARIANT_BOOL chkALTTAPER, VARIANT_BOOL chkTET, VARIANT_BOOL chkJDet, VARIANT_BOOL chkComb, double maxASPECT, double maxTAPER, double maxANGLE, double maxWARP, double maxNasWARP, double maxALTTAPER, double maxTET, double minJDet, double minComb );
__declspec(implementation_key(8848)) enum zReturnCode Imodel::feGetElemDistortion ( int elemID, double * valASPECT, double * valTAPER, double * valANGLE, double * valWARP, double * valNasWARP, double * valALTTAPER, double * valTET, double * valJDet, double * valComb );
__declspec(implementation_key(8849)) enum zReturnCode Imodel::feCheckElemNormal ( int elemSET, int csysID, VARIANT_BOOL doLIST, VARIANT_BOOL swapNORMAL, VARIANT_BOOL autonormal, const _variant_t & manNORMAL );
__declspec(implementation_key(8850)) enum zReturnCode Imodel::feCheckConstraints ( VARIANT_BOOL doPERM, VARIANT_BOOL doLIST, VARIANT * bcSUM, VARIANT * bcSEP );
__declspec(implementation_key(8851)) enum zReturnCode Imodel::feCheckCoincidentLoads ( int LoadSet, VARIANT_BOOL mergeLOADS );
__declspec(implementation_key(8852)) enum zReturnCode Imodel::feCheckSumForces ( VARIANT_BOOL expandGEOM, VARIANT_BOOL doLIST, VARIANT_BOOL useSETS, int nodeSET, int elemSET, const _variant_t & basePOINT, int csysID, VARIANT * summedFORCES );
__declspec(implementation_key(8853)) enum zReturnCode Imodel::feCoordPick ( _bstr_t dlgTITLE, VARIANT * xyz );
__declspec(implementation_key(8854)) enum zReturnCode Imodel::feCoordFromWorkplane ( const _variant_t & wpXYZ, VARIANT * xyz );
__declspec(implementation_key(8855)) enum zReturnCode Imodel::feCoordToWorkplane ( const _variant_t & xyz, VARIANT * wpXYZ );
__declspec(implementation_key(8856)) enum zReturnCode Imodel::feCoordIntersectCurves ( int cuID1, int cuID2, const _variant_t & nearXYZ, VARIANT * xyz );
__declspec(implementation_key(8857)) enum zReturnCode Imodel::feCoordIntersectLines ( VARIANT_BOOL infLine, const _variant_t & pA1, const _variant_t & pA2, const _variant_t & pB1, const _variant_t & pB2, VARIANT * pIntersect );
__declspec(implementation_key(8858)) enum zReturnCode Imodel::feCoordOntoCurve ( int cuID, const _variant_t & fromxyz, VARIANT * xyz );
__declspec(implementation_key(8859)) enum zReturnCode Imodel::feCoordAlongCurve ( int cuID, VARIANT_BOOL fromstart, double cuLENGTH, VARIANT * xyz );
__declspec(implementation_key(8860)) enum zReturnCode Imodel::feCoordCurveMidpoint ( int cuID, VARIANT * xyz );
__declspec(implementation_key(8861)) enum zReturnCode Imodel::feCoordCurveCenter ( int cuID, VARIANT * xyz );
__declspec(implementation_key(8862)) enum zReturnCode Imodel::feCoordOntoSurface ( int suID, const _variant_t & fromxyz, VARIANT * xyz );
__declspec(implementation_key(8863)) enum zReturnCode Imodel::feCoordInSurface ( int suID, const _variant_t & suXY, VARIANT * xyz );
__declspec(implementation_key(8864)) enum zReturnCode Imodel::feCoordSurfaceIntersect ( int cuID, int suID, const _variant_t & nearXYZ, VARIANT * xyz );
__declspec(implementation_key(8865)) enum zReturnCode Imodel::feCoordOnPoint ( int ptID, VARIANT * xyz );
__declspec(implementation_key(8866)) enum zReturnCode Imodel::feCoordOnNode ( int ndID, VARIANT * xyz );
__declspec(implementation_key(8867)) enum zReturnCode Imodel::feCoordTransform ( int fromCSYS, const _variant_t & fromxyz, int toCSYS, VARIANT * xyz );
__declspec(implementation_key(8868)) enum zReturnCode Imodel::feCoordArrayTransform ( int Count, int fromCSYS, int toCSYS, VARIANT * xyz );
__declspec(implementation_key(8869)) enum zReturnCode Imodel::feCoordColinear ( const _variant_t & xyz1, const _variant_t & xyz2, const _variant_t & xyz3, VARIANT_BOOL * isColinear );
__declspec(implementation_key(8870)) enum zReturnCode Imodel::feCoordToDirCos ( const _variant_t & origin, const _variant_t & xaxis, const _variant_t & xyplane, VARIANT * dircos );
__declspec(implementation_key(8871)) enum zReturnCode Imodel::feCoordRotate ( const _variant_t & xyz, double angle, const _variant_t & origin, const _variant_t & Axis, VARIANT * xyzROT );
__declspec(implementation_key(8872)) enum zReturnCode Imodel::feCoordOntoPlane ( const _variant_t & xyz, const _variant_t & projDir, const _variant_t & planePt, const _variant_t & planeNorm, VARIANT * xyzPlane );
__declspec(implementation_key(8873)) enum zReturnCode Imodel::feCoordOntoLine ( const _variant_t & xyz, const _variant_t & p1, const _variant_t & p2, VARIANT * xyzLine );
__declspec(implementation_key(8874)) enum zReturnCode Imodel::feCoordPlaneIntersect ( const _variant_t & baseA, const _variant_t & normA, const _variant_t & baseB, const _variant_t & normB, const _variant_t & baseC, const _variant_t & normC, VARIANT * baseV );
__declspec(implementation_key(8875)) enum zReturnCode Imodel::feRotationTransform ( int fromCSYS, const _variant_t & fromROT, int toCSYS, VARIANT * rot );
__declspec(implementation_key(8876)) enum zReturnCode Imodel::feRotationToDirCos ( const _variant_t & rot, VARIANT * dircos );
__declspec(implementation_key(8877)) enum zReturnCode Imodel::feRotationFromDirCos ( const _variant_t & dircos, VARIANT * rot );
__declspec(implementation_key(8878)) enum zReturnCode Imodel::feVectorTransform ( int fromCSYS, const _variant_t & baseXYZ, const _variant_t & fromxyz, int toCSYS, VARIANT * xyz );
__declspec(implementation_key(8879)) enum zReturnCode Imodel::feVectorFromBeam ( int elemID, const _variant_t & bmXYZ, VARIANT * xyz );
__declspec(implementation_key(8880)) enum zReturnCode Imodel::feVectorToBeam ( int elemID, const _variant_t & xyz, VARIANT * bmXYZ );
__declspec(implementation_key(8881)) enum zReturnCode Imodel::feVectorLength ( const _variant_t & xyz, double * vecLength );
__declspec(implementation_key(8882)) enum zReturnCode Imodel::feVectorCrossProduct ( const _variant_t & VecA, const _variant_t & VecB, VARIANT * vecAxB );
__declspec(implementation_key(8883)) enum zReturnCode Imodel::feVectorDotProduct ( const _variant_t & VecA, const _variant_t & VecB, double * dot );
__declspec(implementation_key(8884)) enum zReturnCode Imodel::feVectorAngle ( const _variant_t & VecA, const _variant_t & VecB, double * angle );
__declspec(implementation_key(8885)) enum zReturnCode Imodel::feVectorAngleAxis ( const _variant_t & VecA, const _variant_t & VecB, const _variant_t & vecAXIS, double * angle );
__declspec(implementation_key(8886)) enum zReturnCode Imodel::feVectorUnit ( const _variant_t & vecIN, VARIANT * vecOUT );
__declspec(implementation_key(8887)) enum zReturnCode Imodel::feVectorPlaneIntersect ( const _variant_t & baseA, const _variant_t & normA, const _variant_t & baseB, const _variant_t & normB, VARIANT * ptV, VARIANT * dirV );
__declspec(implementation_key(8888)) enum zReturnCode Imodel::feVectorPick ( _bstr_t dlgTITLE, VARIANT_BOOL unitVector, double * vecLength, VARIANT * vecBASE, VARIANT * vecDIR );
__declspec(implementation_key(8889)) enum zReturnCode Imodel::feVectorAxis ( int csysID, int Axis, VARIANT_BOOL positive, VARIANT * vecDIR );
__declspec(implementation_key(8890)) enum zReturnCode Imodel::feVectorTangentToCurve ( int cuID, const _variant_t & baseXYZ, VARIANT * vecDIR );
__declspec(implementation_key(8891)) enum zReturnCode Imodel::feVectorNormalToSurface ( int suID, const _variant_t & baseXYZ, VARIANT * vecDIR );
__declspec(implementation_key(8892)) enum zReturnCode Imodel::feVectorNormalToView ( int vuID, VARIANT * vecDIR );
__declspec(implementation_key(8893)) enum zReturnCode Imodel::fePlanePick ( _bstr_t dlgTITLE, VARIANT * plBase, VARIANT * plNormal, VARIANT * plAxis );
__declspec(implementation_key(8894)) enum zReturnCode Imodel::fePlaneLocation ( const _variant_t & p1, const _variant_t & p2, const _variant_t & p3, VARIANT * planeBase, VARIANT * planeNormal, VARIANT * planeX );
__declspec(implementation_key(8895)) enum zReturnCode Imodel::fePlaneNodes ( int n1, int n2, int n3, VARIANT * planeBase, VARIANT * planeNormal, VARIANT * planeX );
__declspec(implementation_key(8896)) enum zReturnCode Imodel::fePlanePoints ( int p1, int p2, int p3, VARIANT * planeBase, VARIANT * planeNormal, VARIANT * planeX );
__declspec(implementation_key(8897)) enum zReturnCode Imodel::fePlaneBisect ( const _variant_t & p1, const _variant_t & p2, const _variant_t & p3, VARIANT * planeBase, VARIANT * planeNormal, VARIANT * planeX );
__declspec(implementation_key(8898)) enum zReturnCode Imodel::fePlaneCSys ( const _variant_t & p1, int csysID, int planeID, VARIANT * planeBase, VARIANT * planeNormal, VARIANT * planeX );
__declspec(implementation_key(8899)) enum zReturnCode Imodel::fePlaneSurfaceNormal ( int surfID, int ptID1, int ptID2, VARIANT_BOOL reversed, VARIANT_BOOL align, double offset, VARIANT * planeBase, VARIANT * planeNormal, VARIANT * planeX );
__declspec(implementation_key(8900)) enum zReturnCode Imodel::fePlaneViewAlign ( int viewID, VARIANT_BOOL intoView, VARIANT * planeNormal, VARIANT * planeX );
__declspec(implementation_key(8901)) enum zReturnCode Imodel::fePlaneCurveNormal ( int cuID, VARIANT * planeBase, VARIANT * planeNormal, VARIANT * planeX );
__declspec(implementation_key(8902)) enum zReturnCode Imodel::feGetReal ( _bstr_t title, double lowerlimit, double upperlimit, double * value );
__declspec(implementation_key(8903)) enum zReturnCode Imodel::feGetInt ( _bstr_t title, int lowerlimit, int upperlimit, int * value );
__declspec(implementation_key(8904)) enum zReturnCode Imodel::feViewRedraw ( int vuID );
__declspec(implementation_key(8905)) enum zReturnCode Imodel::feViewRegenerate ( int vuID );
__declspec(implementation_key(8906)) enum zReturnCode Imodel::feViewAllViews ( VARIANT_BOOL on_off );
__declspec(implementation_key(8907)) enum zReturnCode Imodel::feViewShow ( enum zDataType dTYPE, int ID );
__declspec(implementation_key(8908)) enum zReturnCode Imodel::feViewVisible ( int vuID, VARIANT_BOOL Visible );
__declspec(implementation_key(8909)) enum zReturnCode Imodel::feViewTile ( );
__declspec(implementation_key(8910)) enum zReturnCode Imodel::feViewCascade ( );
__declspec(implementation_key(8911)) enum zReturnCode Imodel::feGroupBoolean ( int opperation, int grID1, int grID2, int grCreate, _bstr_t grTitle );
__declspec(implementation_key(8912)) enum zReturnCode Imodel::feGroupGenerate ( int elemSET, VARIANT_BOOL planer, int brkPropMatl, int brkLayer, enum zColor brkColor, double brkAngle, VARIANT_BOOL addLayers );
__declspec(implementation_key(8913)) enum zReturnCode Imodel::feGroupGenSolid ( int solidSET );
__declspec(implementation_key(8914)) enum zReturnCode Imodel::feGroupGenProp ( int elemSET );
__declspec(implementation_key(8915)) enum zReturnCode Imodel::feGroupGenMatl ( int elemSET );
__declspec(implementation_key(8916)) enum zReturnCode Imodel::feGroupGenElemType ( int elemSET );
__declspec(implementation_key(8917)) enum zReturnCode Imodel::feGroupPeel ( int elemSET, int peelLayers, VARIANT_BOOL keepPeel, VARIANT_BOOL keepCore );
__declspec(implementation_key(8918)) enum zReturnCode Imodel::feDeleteAll ( VARIANT_BOOL geometry, VARIANT_BOOL Mesh, VARIANT_BOOL Output, VARIANT_BOOL confirm );
__declspec(implementation_key(8919)) enum zReturnCode Imodel::feDelete ( enum zDataType entityTYPE, int entitySET );
__declspec(implementation_key(8920)) enum zReturnCode Imodel::feDeleteOutput ( int outputSetID, int vectorSET );
__declspec(implementation_key(8921)) enum zReturnCode Imodel::feDeleteLoads ( int loadSetID, enum zDataType entityTYPE, int entitySET, enum zLoadSelectType loadType );
__declspec(implementation_key(8922)) enum zReturnCode Imodel::feDeleteConstraints ( int bcSetID, enum zDataType entityTYPE, int entitySET, VARIANT_BOOL deleteBC, VARIANT_BOOL deleteBE );
__declspec(implementation_key(8923)) enum zReturnCode Imodel::feLinePoints ( VARIANT_BOOL ontoWorkplane, const _variant_t & p1, const _variant_t & p2, VARIANT_BOOL messages );
__declspec(implementation_key(8924)) enum zReturnCode Imodel::feLineHorzVert ( VARIANT_BOOL horizontal, const _variant_t & p1, double Length, VARIANT_BOOL messages );
__declspec(implementation_key(8925)) enum zReturnCode Imodel::feLineAtAngle ( double angle, int curveID, const _variant_t & p1, const _variant_t & p2, VARIANT_BOOL messages );
__declspec(implementation_key(8926)) enum zReturnCode Imodel::feLineParallel ( double offset, int curveID, const _variant_t & p1, VARIANT_BOOL messages );
__declspec(implementation_key(8927)) enum zReturnCode Imodel::feLineMidline ( int curve1, int curve2, VARIANT_BOOL messages );
__declspec(implementation_key(8928)) enum zReturnCode Imodel::feLinePointTangent ( int curveID, const _variant_t & p1, const _variant_t & p2, VARIANT_BOOL messages );
__declspec(implementation_key(8929)) enum zReturnCode Imodel::feLine2Tangent ( int curve1, int curve2, const _variant_t & p1, VARIANT_BOOL messages );
__declspec(implementation_key(8930)) enum zReturnCode Imodel::feLineRectangle ( const _variant_t & p1, const _variant_t & p2, VARIANT_BOOL messages );
__declspec(implementation_key(8931)) enum zReturnCode Imodel::feLinePointIDs ( int p1, int p2, VARIANT_BOOL messages );
__declspec(implementation_key(8932)) enum zReturnCode Imodel::feArcCenterStartEnd ( const _variant_t & center, const _variant_t & Start, const _variant_t & end, VARIANT_BOOL messages );
__declspec(implementation_key(8933)) enum zReturnCode Imodel::feArcRadiusStartEnd ( double radius, const _variant_t & Start, const _variant_t & end, VARIANT_BOOL messages );
__declspec(implementation_key(8934)) enum zReturnCode Imodel::feArcAngleStartEnd ( double angle, const _variant_t & Start, const _variant_t & end, VARIANT_BOOL messages );
__declspec(implementation_key(8935)) enum zReturnCode Imodel::feArcAngleCenterStart ( double angle, const _variant_t & center, const _variant_t & Start, VARIANT_BOOL messages );
__declspec(implementation_key(8936)) enum zReturnCode Imodel::feArcChordCenterStart ( double Length, const _variant_t & center, const _variant_t & Start, VARIANT_BOOL messages );
__declspec(implementation_key(8937)) enum zReturnCode Imodel::feArcPoints ( const _variant_t & Start, const _variant_t & mid, const _variant_t & end, VARIANT_BOOL messages );
__declspec(implementation_key(8938)) enum zReturnCode Imodel::feArcCenterPoints ( const _variant_t & center, const _variant_t & Start, const _variant_t & mid, const _variant_t & end, VARIANT_BOOL messages );
__declspec(implementation_key(8939)) enum zReturnCode Imodel::feArcTangentStartEnd ( const _variant_t & Tangent, const _variant_t & Start, const _variant_t & end, VARIANT_BOOL messages );
__declspec(implementation_key(8940)) enum zReturnCode Imodel::feCircleRadius ( const _variant_t & center, const _variant_t & Start, VARIANT_BOOL messages );
__declspec(implementation_key(8941)) enum zReturnCode Imodel::feCircleDiameter ( const _variant_t & Start, const _variant_t & dia, VARIANT_BOOL messages );
__declspec(implementation_key(8942)) enum zReturnCode Imodel::feCircleCenter ( double radius, const _variant_t & center, VARIANT_BOOL messages );
__declspec(implementation_key(8943)) enum zReturnCode Imodel::feCircle2Point ( double radius, const _variant_t & Start, const _variant_t & mid, VARIANT_BOOL messages );
__declspec(implementation_key(8944)) enum zReturnCode Imodel::feCircleConcentric ( double radius, int curveID, VARIANT_BOOL messages );
__declspec(implementation_key(8945)) enum zReturnCode Imodel::feCircle3Point ( const _variant_t & Start, const _variant_t & mid, const _variant_t & end, VARIANT_BOOL messages );
__declspec(implementation_key(8946)) enum zReturnCode Imodel::feCircleCenterPoints ( const _variant_t & center, const _variant_t & Start, const _variant_t & mid, VARIANT_BOOL messages );
__declspec(implementation_key(8947)) enum zReturnCode Imodel::feCircleCenterTangent ( int curveID, const _variant_t & center, VARIANT_BOOL messages );
__declspec(implementation_key(8948)) enum zReturnCode Imodel::feCircleTangentTangent ( int curve1, int curve2, double radius, const _variant_t & nearloc, VARIANT_BOOL messages );
__declspec(implementation_key(8949)) enum zReturnCode Imodel::feSplinePoints ( VARIANT_BOOL propject, VARIANT_BOOL controlpoints, int Count, const _variant_t & xyz, VARIANT_BOOL messages );
__declspec(implementation_key(8950)) enum zReturnCode Imodel::feSplineTangent ( const _variant_t & x1, const _variant_t & v1, const _variant_t & x2, const _variant_t & v2, VARIANT_BOOL messages );
__declspec(implementation_key(8951)) enum zReturnCode Imodel::feSplineEllipse ( const _variant_t & center, const _variant_t & Vector, double a, double b, VARIANT_BOOL messages );
__declspec(implementation_key(8952)) enum zReturnCode Imodel::feSplineParabola ( const _variant_t & center, const _variant_t & focus, const _variant_t & trim, VARIANT_BOOL messages );
__declspec(implementation_key(8953)) enum zReturnCode Imodel::feSplineHyperbola ( const _variant_t & center, const _variant_t & towardfocus, double angle, double height, const _variant_t & trim, VARIANT_BOOL messages );
__declspec(implementation_key(8954)) enum zReturnCode Imodel::feCurveUpdateSurfaces ( VARIANT_BOOL update, VARIANT_BOOL messages );
__declspec(implementation_key(8955)) enum zReturnCode Imodel::feCurveIntersectSolids ( int solid1, int solid2 );
__declspec(implementation_key(8956)) enum zReturnCode Imodel::feCurveProjectOntoSolid ( VARIANT_BOOL projectNormal, const _variant_t & along, int solidID, int curveSET, VARIANT_BOOL messages );
__declspec(implementation_key(8957)) enum zReturnCode Imodel::feCurveParametricOnSurface ( int surfID, VARIANT_BOOL uDir, const _variant_t & location, VARIANT_BOOL messages );
__declspec(implementation_key(8958)) enum zReturnCode Imodel::feCurveSlice ( int solidID, const _variant_t & planeBase, const _variant_t & planeNormal, const _variant_t & planeX );
__declspec(implementation_key(8959)) enum zReturnCode Imodel::feCurveTrim ( int curveID, int TrimID, const _variant_t & nearloc, VARIANT_BOOL extend );
__declspec(implementation_key(8960)) enum zReturnCode Imodel::feCurveExtend ( int curveID, const _variant_t & nearloc );
__declspec(implementation_key(8961)) enum zReturnCode Imodel::feCurveBreak ( int curveID, const _variant_t & nearloc );
__declspec(implementation_key(8962)) enum zReturnCode Imodel::feCurveJoin ( int curve1, int curve2, const _variant_t & nearloc, VARIANT_BOOL update1, VARIANT_BOOL update2 );
__declspec(implementation_key(8963)) enum zReturnCode Imodel::feCurveFillet ( double radius, int curve1, int curve2, const _variant_t & nearloc, VARIANT_BOOL update1, VARIANT_BOOL update2 );
__declspec(implementation_key(8964)) enum zReturnCode Imodel::feCurveChamfer ( double len1, double len2, int curve1, int curve2, const _variant_t & nearloc, VARIANT_BOOL update1, VARIANT_BOOL update2 );
__declspec(implementation_key(8965)) enum zReturnCode Imodel::feBoundaryFromCurves ( int curveSET );
__declspec(implementation_key(8966)) enum zReturnCode Imodel::feBoundaryFromSurfaces ( int surfaceSET );
__declspec(implementation_key(8967)) enum zReturnCode Imodel::feBoundaryUpdateSurfaces ( int boundaryID );
__declspec(implementation_key(8968)) enum zReturnCode Imodel::feSurfaceCorners ( VARIANT_BOOL fourCorners, const _variant_t & c1, const _variant_t & c2, const _variant_t & c3, const _variant_t & c4 );
__declspec(implementation_key(8969)) enum zReturnCode Imodel::feSurfaceEdgeCurves ( int curve1, int curve2, int curve3, int curve4 );
__declspec(implementation_key(8970)) enum zReturnCode Imodel::feSurfaceAlignedCurves ( int curveCOUNT, const _variant_t & curveID );
__declspec(implementation_key(8971)) enum zReturnCode Imodel::feSurfaceRuled ( int cu1, int cu2 );
__declspec(implementation_key(8972)) enum zReturnCode Imodel::feSurfaceExtrude ( int curveSET, double axisLEN, const _variant_t & axisVEC );
__declspec(implementation_key(8973)) enum zReturnCode Imodel::feSurfaceRevolve ( int curveSET, double axisANGLE, const _variant_t & axisBASE, const _variant_t & axisVEC );
__declspec(implementation_key(8974)) enum zReturnCode Imodel::feSurfaceSweep ( int curveSET, int pathSET );
__declspec(implementation_key(8975)) enum zReturnCode Imodel::feSurfaceMidSingle ( VARIANT_BOOL trim, int surfID1, int surfID2 );
__declspec(implementation_key(8976)) enum zReturnCode Imodel::feSurfaceMidAuto ( int surfSET, double thick );
__declspec(implementation_key(8977)) enum zReturnCode Imodel::feSurfaceMidAttrib ( int surfSET, int matlID );
__declspec(implementation_key(8978)) enum zReturnCode Imodel::feSurfaceTrimToSolid ( int sheetID, int solidID );
__declspec(implementation_key(8979)) enum zReturnCode Imodel::feSurfaceTrimWithCurves ( int surfID, int curveSET );
__declspec(implementation_key(8980)) enum zReturnCode Imodel::feSolidPrimitive ( int operation, int shape, VARIANT_BOOL positive, const _variant_t & origin, const _variant_t & Size, _bstr_t title );
__declspec(implementation_key(8981)) enum zReturnCode Imodel::feSolidExtrude ( int operation, int surfID, int dirmode, int depthMode, const _variant_t & dirVec, const _variant_t & depthVec );
__declspec(implementation_key(8982)) enum zReturnCode Imodel::feSolidRevolve ( int operation, int surfID, int dirmode, int angleMode, const _variant_t & axisBASE, const _variant_t & axisVEC, const _variant_t & angleVec );
__declspec(implementation_key(8983)) enum zReturnCode Imodel::feSolidExplode ( int solidSET );
__declspec(implementation_key(8984)) enum zReturnCode Imodel::feSolidStitch ( int surfaceSET, double tolerance );
__declspec(implementation_key(8985)) enum zReturnCode Imodel::feSolidFillet ( int curveSET, double radius );
__declspec(implementation_key(8986)) enum zReturnCode Imodel::feSolidChamfer ( int curveSET, double radius );
__declspec(implementation_key(8987)) enum zReturnCode Imodel::feSolidAdd ( int solidSET, VARIANT_BOOL Redraw );
__declspec(implementation_key(8988)) enum zReturnCode Imodel::feSolidRemove ( int baseID, int solidSET, VARIANT_BOOL Redraw );
__declspec(implementation_key(8989)) enum zReturnCode Imodel::feSolidCommon ( int baseID, int toolID, VARIANT_BOOL Redraw );
__declspec(implementation_key(8990)) enum zReturnCode Imodel::feSolidEmbed ( int baseID, int toolID, VARIANT_BOOL Redraw );
__declspec(implementation_key(8991)) enum zReturnCode Imodel::feSolidIntersect ( int solidSET, VARIANT_BOOL Redraw );
__declspec(implementation_key(8992)) enum zReturnCode Imodel::feSolidShell ( int baseID, int surfaceSET, double thickness, VARIANT_BOOL Redraw );
__declspec(implementation_key(8993)) enum zReturnCode Imodel::feSolidSlice ( int solidSET, const _variant_t & planeBase, const _variant_t & planeNormal, VARIANT_BOOL Redraw );
__declspec(implementation_key(8994)) enum zReturnCode Imodel::feSolidSliceMatch ( int solidSET, const _variant_t & planeBase, const _variant_t & planeNormal, VARIANT_BOOL Redraw );
__declspec(implementation_key(8995)) enum zReturnCode Imodel::feSolidSliceAlongFace ( int surfaceID );
__declspec(implementation_key(8996)) enum zReturnCode Imodel::feSolidCleanup ( int solidSET, VARIANT_BOOL redundant, VARIANT_BOOL sliver, VARIANT_BOOL check );
__declspec(implementation_key(8997)) enum zReturnCode Imodel::feSolidEmbedFace ( int surfID, int directionMode, int curveOpt, const _variant_t & dirVec, double offset, VARIANT_BOOL Redraw );
__declspec(implementation_key(8998)) enum zReturnCode Imodel::feGenerateCopy ( enum zDataType entityTYPE, int entitySET, const _variant_t & alongVEC, int nodeINC, VARIANT_BOOL Match );
__declspec(implementation_key(8999)) enum zReturnCode Imodel::feGenerateScale ( enum zDataType entityTYPE, int entitySET, const _variant_t & origVEC, const _variant_t & scaleVEC, int csysID, VARIANT_BOOL Match );
__declspec(implementation_key(9000)) enum zReturnCode Imodel::feGenerateRadialCopy ( enum zDataType entityTYPE, int entitySET, const _variant_t & origVEC, double Length, VARIANT_BOOL Match );
__declspec(implementation_key(9001)) enum zReturnCode Imodel::feGenerateRotate ( enum zDataType entityTYPE, int entitySET, const _variant_t & origVEC, const _variant_t & axisVEC, double rotANGLE, double transDIST, VARIANT_BOOL Match );
__declspec(implementation_key(9002)) enum zReturnCode Imodel::feGenerateReflect ( enum zDataType entityTYPE, int entitySET, const _variant_t & origVEC, const _variant_t & normVEC, double trapWIDTH, VARIANT_BOOL Match );
__declspec(implementation_key(9003)) enum zReturnCode Imodel::feOutputProcess ( int Count, VARIANT_BOOL full_set, int processing_method, const _variant_t & approach, const _variant_t & from_setID, const _variant_t & from_vectorID, const _variant_t & to_setID, const _variant_t & to_vectorID, const _variant_t & groupID, const _variant_t & factor, const _variant_t & overwrite, const _variant_t & ply_summary, const _variant_t & set_info );
__declspec(implementation_key(9004)) enum zReturnCode Imodel::feOutputFromLoad ( int setID, enum zLoadSelectType loadType );
__declspec(implementation_key(9005)) enum zReturnCode Imodel::feOutputCalculate ( int outSET, enum zDataType dTYPE, int entSET, _bstr_t title, _bstr_t IDvar, _bstr_t SETvar, _bstr_t formula );
__declspec(implementation_key(9006)) enum zReturnCode Imodel::feMeshSizePoint ( int pointSET, double MeshSize );
__declspec(implementation_key(9007)) enum zReturnCode Imodel::feMeshSizeCurve ( int curveSET, int NumElem, double MeshSize, int minLine, int minClosed, int minOther, int spacing, int biasMethod, double bias, int biasLoc, VARIANT_BOOL CustomSize );
__declspec(implementation_key(9008)) enum zReturnCode Imodel::feMeshSizeSurface ( int surfSET, VARIANT_BOOL replaceAll, double MeshSize, int minEdge, double maxANGLE, int maxOnSmall, double smallSize, double vertexAspect, VARIANT_BOOL mappedRefinement, double growthFactor, double refineRatio, VARIANT_BOOL refineSurf );
__declspec(implementation_key(9009)) enum zReturnCode Imodel::feMeshSizeSolid ( int surfSET, VARIANT_BOOL replaceAll, double MeshSize, int minEdge, double maxANGLE, int maxOnSmall, double smallSize, double vertexAspect, VARIANT_BOOL mappedRefinement, double growthFactor, double refineRatio, VARIANT_BOOL refineSurf, VARIANT_BOOL matchAdjacent, VARIANT_BOOL hexMesh, VARIANT_BOOL adjustColor, VARIANT_BOOL removeSlaving );
__declspec(implementation_key(9010)) enum zReturnCode Imodel::feMeshAttrPoint ( int pointSET, int propID );
__declspec(implementation_key(9011)) enum zReturnCode Imodel::feMeshAttrCurve ( int curveSET, int propID, const _variant_t & orient, const _variant_t & offset1, const _variant_t & offset2, enum zCurveOrientType orient_type, enum zCurveOffsetType offset_type, const _variant_t & release1, const _variant_t & release2 );
__declspec(implementation_key(9012)) enum zReturnCode Imodel::feMeshAttrSurface ( int surfaceSET, int propID, double offset );
__declspec(implementation_key(9013)) enum zReturnCode Imodel::feMeshAttrSolid ( int solidSET, int propID );
__declspec(implementation_key(9014)) enum zReturnCode Imodel::feMeshApproachSurface ( int surfaceSET, int approach, const _variant_t & approachData );
__declspec(implementation_key(9015)) enum zReturnCode Imodel::feMeshPoint ( int pointSET, VARIANT_BOOL MeshElem, int propID );
__declspec(implementation_key(9016)) enum zReturnCode Imodel::feMeshCurve ( int curveSET, VARIANT_BOOL MeshElem, int propID, const _variant_t & orient );
__declspec(implementation_key(9017)) enum zReturnCode Imodel::feMeshSurface ( int surfaceSET, int propID, int minBetween, double maxASPECT, int maxQuickNodes, int meshApproach, double quadAngle, VARIANT_BOOL midsideGeom, double midsideAngle, VARIANT_BOOL smoothLaplacian, int smoothIter, double smoothTol );
__declspec(implementation_key(9018)) enum zReturnCode Imodel::feMeshTetSolid ( enum zDataType entityTYPE, int entitySET, int propID, VARIANT_BOOL surfaceMeshOnly, VARIANT_BOOL makeMidside, double tetGrowth, VARIANT_BOOL checkSurfElem, VARIANT_BOOL deleteSurfElem, VARIANT_BOOL midsideGeom, double midsideAngle, int allocateElem );
__declspec(implementation_key(9019)) enum zReturnCode Imodel::feMeshHexSolid ( int solidSET, int propID, VARIANT_BOOL surfaceMeshOnly, VARIANT_BOOL makeMidside, VARIANT_BOOL checkSurfElem, VARIANT_BOOL deleteSurfElem, VARIANT_BOOL midsideGeom, double midsideAngle );
__declspec(implementation_key(9020)) enum zReturnCode Imodel::feMeshHexSolidFromElement ( int baseSET, int topSET, int propID, int numLayer, int match1, int match2, VARIANT_BOOL makeMidside, VARIANT_BOOL checkSurfElem, VARIANT_BOOL deleteSurfElem );
__declspec(implementation_key(9021)) enum zReturnCode Imodel::feMeshBetween ( int propID, int genMode, int shape, VARIANT_BOOL rightSplit, VARIANT_BOOL alternate, VARIANT_BOOL allQuad, VARIANT_BOOL logSpacing, int numCorners, const _variant_t & numNodes, const _variant_t & bias, const _variant_t & nodeINC, const _variant_t & cornerXYZ );
__declspec(implementation_key(9022)) enum zReturnCode Imodel::feMeshClosestLink ( int fromSET, int toSET, int connectWith, const _variant_t & orient, const _variant_t & dof, VARIANT_BOOL Reverse );
__declspec(implementation_key(9023)) enum zReturnCode Imodel::feMeshCoincidentLink ( int fromSET, int connectWith, const _variant_t & orient, const _variant_t & dof, double tolerance );
__declspec(implementation_key(9024)) enum zReturnCode Imodel::feMeshUnzip ( int fromSET, int toSET, int connectWith, const _variant_t & orient, const _variant_t & dof );
__declspec(implementation_key(9025)) enum zReturnCode Imodel::feMeshTransition ( VARIANT_BOOL useNodes, int entCOUNT, const _variant_t & entID, const _variant_t & edgeNUM, const _variant_t & edgeBIAS, const _variant_t & edgeSIZE, int propID, int minBetween, double maxASPECT, int maxQuickNodes, int meshApproach, double quadAngle, VARIANT_BOOL smoothLaplacian, int smoothIter, double smoothTol );
__declspec(implementation_key(9026)) enum zReturnCode Imodel::feMeshRemesh ( int elemSET, int nodeSET, int remeshMode, int refineRatio, double breakAngle, VARIANT_BOOL deleteOrig, int propID, int minBetween, double maxASPECT, int maxQuickNodes, int meshApproach, double quadAngle, VARIANT_BOOL smoothLaplacian, int smoothIter, double smoothTol );
__declspec(implementation_key(9027)) enum zReturnCode Imodel::feMeshConvertFacets ( int solidID );
__declspec(implementation_key(9028)) enum zReturnCode Imodel::feMeshCleanupSlivers ( int elemSET, double minAngle, double minLength );
__declspec(implementation_key(9029)) enum zReturnCode Imodel::feMeshEdgeRemoval ( int elemSET, int nd1, int nd2 );
__declspec(implementation_key(9030)) enum zReturnCode Imodel::feMeshBuildRemeshRegions ( int elemSET, double breakAngle );
__declspec(implementation_key(9031)) enum zReturnCode Imodel::feMeshEditRemeshRegions ( int el1, int el2 );
__declspec(implementation_key(9032)) enum zReturnCode Imodel::feMeshRemeshRegions ( double MeshSize, int propID, int minBetween, double maxASPECT, int maxQuickNodes, int meshApproach, double quadAngle, VARIANT_BOOL smoothLaplacian, int smoothIter, double smoothTol );
__declspec(implementation_key(9033)) enum zReturnCode Imodel::feMeshEdgeMembers ( int elemSET, int nodeSET, int propID, const _variant_t & orient );
__declspec(implementation_key(9034)) enum zReturnCode Imodel::feMeshSmooth ( int elemSET, VARIANT_BOOL laplaceSmooth, int iter, double tolerance );
__declspec(implementation_key(9035)) enum zReturnCode Imodel::feMeshExtrudeElem ( int elemSET, double axisLEN, const _variant_t & axisVEC, int propID, int NumElem, int method, VARIANT_BOOL matchCurrent, VARIANT_BOOL deleteOrig );
__declspec(implementation_key(9036)) enum zReturnCode Imodel::feMeshExtrudeCurve ( int curveSET, double axisLEN, const _variant_t & axisVEC, int propID, int NumElem );
__declspec(implementation_key(9037)) enum zReturnCode Imodel::feMeshRevolveElem ( int elemSET, double rotANGLE, double rotThrust, const _variant_t & axisOrig, const _variant_t & axisVEC, int propID, int NumElem, VARIANT_BOOL matchCurrent, VARIANT_BOOL deleteOrig );
__declspec(implementation_key(9038)) enum zReturnCode Imodel::feMeshRevolveCurve ( int curveSET, double rotANGLE, double rotThrust, const _variant_t & axisOrig, const _variant_t & axisVEC, int propID, int NumElem );
__declspec(implementation_key(9039)) enum zReturnCode Imodel::feMeshSweepElem ( int elemSET, int numPath, const _variant_t & curvePath, int numAlign, const _variant_t & curveAlign, const _variant_t & alignLoc, int propID, VARIANT_BOOL matchCurrent, VARIANT_BOOL deleteOrig );
__declspec(implementation_key(9040)) enum zReturnCode Imodel::feMeshSweepCurve ( int curveSET, int numPath, const _variant_t & curvePath, int numAlign, const _variant_t & curveAlign, const _variant_t & alignLoc, int propID );
__declspec(implementation_key(9041)) enum zReturnCode Imodel::feProjectOntoCurve ( enum zDataType entityTYPE, int entitySET, int curveID );
__declspec(implementation_key(9042)) enum zReturnCode Imodel::feProjectOntoSurface ( enum zDataType entityTYPE, int entitySET, int surfaceID );
__declspec(implementation_key(9043)) enum zReturnCode Imodel::feProjectOntoSolid ( int nodeSET, int elemSET, int solidID, int surfCount, const _variant_t & surfID );
__declspec(implementation_key(9044)) enum zReturnCode Imodel::feMoveTo ( enum zDataType entityTYPE, int entitySET, double x, double y, double z, VARIANT_BOOL doX, VARIANT_BOOL doY, VARIANT_BOOL doZ, int inCsys, VARIANT_BOOL moveRef );
__declspec(implementation_key(9045)) enum zReturnCode Imodel::feMoveBy ( enum zDataType entityTYPE, int entitySET, VARIANT_BOOL radial, double Length, const _variant_t & vecLoc );
__declspec(implementation_key(9046)) enum zReturnCode Imodel::feMoveOffset ( int elemSET, int method, double Length, const _variant_t & alongVEC );
__declspec(implementation_key(9047)) enum zReturnCode Imodel::feRotateTo ( enum zDataType entityTYPE, int entitySET, const _variant_t & axisLoc, const _variant_t & axisVEC, const _variant_t & fromLoc, const _variant_t & toLoc );
__declspec(implementation_key(9048)) enum zReturnCode Imodel::feRotateBy ( enum zDataType entityTYPE, int entitySET, const _variant_t & axisLoc, const _variant_t & axisVEC, double angle, double thrust );
__declspec(implementation_key(9049)) enum zReturnCode Imodel::feAlignTo ( enum zDataType entityTYPE, int entitySET, const _variant_t & fromLoc, const _variant_t & fromVec, const _variant_t & toLoc, const _variant_t & toVec );
__declspec(implementation_key(9050)) enum zReturnCode Imodel::feScale ( enum zDataType entityTYPE, int entitySET, const _variant_t & fromLoc, int csysID, double xScale, double yScale, double zScale );
__declspec(implementation_key(9051)) enum zReturnCode Imodel::feModifyColor ( enum zDataType entityTYPE, int entitySET, enum zColor color, VARIANT_BOOL randomize );
__declspec(implementation_key(9052)) enum zReturnCode Imodel::feModifyLayer ( enum zDataType entityTYPE, int entitySET, int layer );
__declspec(implementation_key(9053)) enum zReturnCode Imodel::feModifyTransparency ( enum zDataType entityTYPE, int entitySET, double transparency );
__declspec(implementation_key(9054)) enum zReturnCode Imodel::feRenumber ( enum zDataType entityTYPE, int entitySET, int startID );
__declspec(implementation_key(9055)) enum zReturnCode Imodel::feMeshAttach ( enum zDataType entityTYPE, int entitySET, enum zDataType attachTYPE, int attachID, VARIANT_BOOL doNodes );
__declspec(implementation_key(9056)) enum zReturnCode Imodel::feMeshDetach ( enum zDataType entityTYPE, int entitySET, enum zDataType attachTYPE, int attachID, VARIANT_BOOL interior );
__declspec(implementation_key(9057)) enum zReturnCode Imodel::feModifyDefCSys ( enum zDataType entityTYPE, int entitySET, int csysID );
__declspec(implementation_key(9058)) enum zReturnCode Imodel::feModifyOutCSys ( enum zDataType entityTYPE, int entitySET, int ssysID );
__declspec(implementation_key(9059)) enum zReturnCode Imodel::feModifyPermBC ( int entitySET, VARIANT_BOOL t1, VARIANT_BOOL t2, VARIANT_BOOL t3, VARIANT_BOOL r1, VARIANT_BOOL r2, VARIANT_BOOL r3 );
__declspec(implementation_key(9060)) enum zReturnCode Imodel::feModifySplineOrder ( int entitySET, int order );
__declspec(implementation_key(9061)) enum zReturnCode Imodel::feModifySplineKnots ( int entitySET, const _variant_t & knotLoc );
__declspec(implementation_key(9062)) enum zReturnCode Imodel::feModifyReverseCurve ( int entitySET );
__declspec(implementation_key(9063)) enum zReturnCode Imodel::feModifySurfaceDivisions ( int entitySET, int sDiv, int tDiv, double tolerance );
__declspec(implementation_key(9064)) enum zReturnCode Imodel::feModifyLoadPhase ( enum zDataType entityTYPE, int entitySET, double phase );
__declspec(implementation_key(9065)) enum zReturnCode Imodel::feModifyElemPropID ( int entitySET, int propID );
__declspec(implementation_key(9066)) enum zReturnCode Imodel::feModifyPropMatlID ( int entitySET, int matlID );
__declspec(implementation_key(9067)) enum zReturnCode Imodel::feModifyMaterialAngle ( int entitySET, int method, const _variant_t & vecDIR, int coordDir, int coordCsys, double angle );
__declspec(implementation_key(9068)) enum zReturnCode Imodel::feModifyElemReverse ( int entitySET, int method, const _variant_t & vecDIR );
__declspec(implementation_key(9069)) enum zReturnCode Imodel::feModifyElemRelease ( int entitySET, const _variant_t & rel1, const _variant_t & rel2 );
__declspec(implementation_key(9070)) enum zReturnCode Imodel::feModifyElemOrder ( int entitySET, VARIANT_BOOL makeParabolic, VARIANT_BOOL ontoGeom, double maxANGLE );
__declspec(implementation_key(9071)) enum zReturnCode Imodel::feModifyMidside ( int elemSET, int nodeSET );
__declspec(implementation_key(9072)) enum zReturnCode Imodel::feModifyFormulation ( int elemSET, int form1, int form2 );
__declspec(implementation_key(9073)) enum zReturnCode Imodel::feModifySplitQuads ( int elemSET );
__declspec(implementation_key(9074)) enum zReturnCode Imodel::feModifyOffsets ( int entitySET, VARIANT_BOOL endA, VARIANT_BOOL endB, VARIANT_BOOL radial, const _variant_t & off1, const _variant_t & off2 );
__declspec(implementation_key(9075)) enum zReturnCode Imodel::feModifyOrient ( int entitySET, int method, int NodeID, const _variant_t & orVec );
__declspec(implementation_key(9076)) enum zReturnCode Imodel::feModifyElemType ( int entitySET, int propID, int method, int NodeID, const _variant_t & orVec );
__declspec(implementation_key(9077)) int Imodel::feAppLockExit ( );
__declspec(implementation_key(9078)) int Imodel::feAppUnlockExit ( );
__declspec(implementation_key(9079)) int Imodel::feAppLockModel ( );
__declspec(implementation_key(9080)) int Imodel::feAppUnlockModel ( );
__declspec(implementation_key(9081)) enum zReturnCode Imodel::feAppEmbed ( int windowID, int x, int y, int cx, int cy );
__declspec(implementation_key(9082)) enum zReturnCode Imodel::feAppVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(9083)) enum zReturnCode Imodel::feAppRegisterMessageHandler ( VARIANT_BOOL regster, int windowID );
__declspec(implementation_key(9084)) enum zReturnCode Imodel::feModifySuperelementID ( int entitySET, int nSEID );
__declspec(implementation_key(9085)) enum zReturnCode Imodel::feModifyOffsetsToRefPt ( int entitySET );
__declspec(implementation_key(9086)) enum zReturnCode Imodel::feModifyBeamWarping ( int entitySET, int method, enum zNodeType nodeType, int autoENDA, int autoENDB );
__declspec(implementation_key(9087)) enum zReturnCode Imodel::feGroupEvaluate ( int groupSET, VARIANT_BOOL forceEval );
__declspec(implementation_key(9088)) enum zReturnCode Imodel::feLoadCombine ( int fromSET, int toSET, double Scale );
__declspec(implementation_key(9089)) enum zReturnCode Imodel::feBCCombine ( int fromSET, int toSET, VARIANT_BOOL overwrite );
__declspec(implementation_key(9090)) enum zReturnCode Imodel::feAppGetModelName ( __int64 nModelID, BSTR * ModelName );
__declspec(implementation_key(9091)) enum zReturnCode Imodel::feFileClose ( VARIANT_BOOL bSaveChanges );
__declspec(implementation_key(9092)) enum zReturnCode Imodel::feAppSetModel ( __int64 nModelID );
__declspec(implementation_key(9093)) enum zReturnCode Imodel::feAppGetModel ( __int64 * nModelID );
__declspec(implementation_key(9094)) enum zReturnCode Imodel::feAppSetModelByName ( _bstr_t fName );
__declspec(implementation_key(9095)) enum zReturnCode Imodel::feAppCountModels ( int * numModels );
__declspec(implementation_key(9096)) enum zReturnCode Imodel::feAppGetAllModels ( int * numModels, VARIANT * nModelID );
__declspec(implementation_key(9097)) enum zReturnCode Imodel::feAppRegisterAddInPane ( VARIANT_BOOL regster, int windowID, int messageID, VARIANT_BOOL bPreventClose, VARIANT_BOOL bPreventHide, int location, int neighborID );
__declspec(implementation_key(9098)) enum zReturnCode Imodel::feAppManageToolbars ( _bstr_t BarName, VARIANT_BOOL Visible );
__declspec(implementation_key(9099)) enum zReturnCode Imodel::feAppManagePanes ( _bstr_t PaneName, int action );
__declspec(implementation_key(9100)) enum zReturnCode Imodel::feAppManageStatusBar ( VARIANT_BOOL Visible );
__declspec(implementation_key(9101)) enum zReturnCode Imodel::feAppManageGraphicsTabs ( VARIANT_BOOL Visible );
__declspec(implementation_key(9102)) enum zReturnCode Imodel::feGetToolbars ( int * numBars, VARIANT * barID, VARIANT * barVisible, VARIANT * barTitle );
__declspec(implementation_key(9103)) enum zReturnCode Imodel::feGetToolbarCommands ( _bstr_t BarName, int * numCmds, VARIANT * cmdID, VARIANT * cmdVisible, VARIANT * cmdSubmenu, VARIANT * cmdTitle );
__declspec(implementation_key(9104)) enum zReturnCode Imodel::feGetToolbarSubCommands ( int cmdID, int * numSubCmds, VARIANT * subcmdID, VARIANT * subcmdVisible, VARIANT * subcmdTitle );
__declspec(implementation_key(9105)) enum zReturnCode Imodel::feAddUserCommand ( _bstr_t strTitle, _bstr_t strCmd, _bstr_t strArg, _bstr_t strStartDir );
__declspec(implementation_key(9106)) enum zReturnCode Imodel::feGetUserCommands ( int * numCmd, VARIANT * strTitle, VARIANT * strCmd, VARIANT * strArg, VARIANT * strStartDir );
__declspec(implementation_key(9107)) enum zReturnCode Imodel::feDeleteUserCommand ( _bstr_t strTitle );
__declspec(implementation_key(9108)) enum zReturnCode Imodel::feGetMenuCommands ( _bstr_t menuName1, _bstr_t menuName2, int * numCmds, VARIANT * cmdID, VARIANT * cmdTitle );
__declspec(implementation_key(9109)) enum zReturnCode Imodel::feGetMenuCommand ( _bstr_t menuName1, _bstr_t menuName2, _bstr_t menuName3, int * cmdID );
__declspec(implementation_key(9110)) enum zReturnCode Imodel::feSetToolbarVisible ( _bstr_t BarName, VARIANT_BOOL bVisible );
__declspec(implementation_key(9111)) enum zReturnCode Imodel::feSetToolbarCommandVisible ( _bstr_t BarName, int cmdID, VARIANT_BOOL bVisible );
__declspec(implementation_key(9112)) enum zReturnCode Imodel::feSetToolbarCommandTitle ( _bstr_t BarName, int cmdID, _bstr_t cmdTitle, _bstr_t cmdToolTip, _bstr_t cmdDescription );
__declspec(implementation_key(9113)) enum zReturnCode Imodel::feResetToolbar ( _bstr_t BarName );
__declspec(implementation_key(9114)) enum zReturnCode Imodel::feAddToolbar ( _bstr_t BarName, int barLocation );
__declspec(implementation_key(9115)) enum zReturnCode Imodel::feDeleteToolbar ( _bstr_t BarName );
__declspec(implementation_key(9116)) enum zReturnCode Imodel::feAddToolbarCommand ( _bstr_t BarName, int cmdIndex, int cmdID );
__declspec(implementation_key(9117)) enum zReturnCode Imodel::feAddToolbarUserCommand ( _bstr_t BarName, int cmdIndex, _bstr_t cmdTitle, _bstr_t cmdBitmap, int * cmdID );
__declspec(implementation_key(9118)) enum zReturnCode Imodel::feSaveToolbarLayout ( _bstr_t fName );
__declspec(implementation_key(9119)) enum zReturnCode Imodel::feLoadToolbarLayout ( _bstr_t fName );
__declspec(implementation_key(9120)) enum zReturnCode Imodel::feGetToolbarCommand ( _bstr_t BarName, int cmdIndex, int * cmdID );
__declspec(implementation_key(9121)) enum zReturnCode Imodel::feSetToolbarCommandBitmap ( int cmdID, _bstr_t cmdBitmap );
__declspec(implementation_key(9122)) enum zReturnCode Imodel::feAppGetActiveView ( int * nViewID );
__declspec(implementation_key(9123)) enum zReturnCode Imodel::feAppSetActiveView ( int nViewID );
__declspec(implementation_key(9124)) enum zReturnCode Imodel::feAppGetAllViews ( int * numViews, VARIANT * nViewID );
__declspec(implementation_key(9125)) enum zReturnCode Imodel::feSEGetEntityMap ( int nEntity, int * numID, VARIANT * nFemapID, VARIANT * nSEdgeID );
__declspec(implementation_key(9126)) enum zReturnCode Imodel::feModifyNoMergeCurve ( int entitySET, VARIANT_BOOL bNoMerge );
__declspec(implementation_key(9127)) enum zReturnCode Imodel::feLicenseExpiration ( int * nDays );
__declspec(implementation_key(9128)) enum zReturnCode Imodel::feRunCommand ( int nCmdID, VARIANT_BOOL bWaitForCompletion );
__declspec(implementation_key(9129)) enum zReturnCode Imodel::feCoordArrayTransform2 ( int Count, int fromCSYS, int toCSYS, const _variant_t & inXYZ, VARIANT * xyz );
__declspec(implementation_key(9130)) enum zReturnCode Imodel::feRenumberOpt ( enum zDataType entityTYPE, int entitySET, int startID, int renumMethod, int renumCSys, VARIANT_BOOL renumAbs, VARIANT_BOOL renumDescend, VARIANT_BOOL renumConstOff );
__declspec(implementation_key(9131)) enum zReturnCode Imodel::feFileWriteSEPost ( _bstr_t fName, VARIANT_BOOL bOutputSurfaceMap );
__declspec(implementation_key(9132)) enum zReturnCode Imodel::feCurveProjectOntoSurfaces ( VARIANT_BOOL projectNormal, const _variant_t & along, int faceSET, int curveSET, VARIANT_BOOL messages );
__declspec(implementation_key(9133)) enum zReturnCode Imodel::feAppUpdatePanes ( VARIANT_BOOL bFullRefresh );
__declspec(implementation_key(9134)) enum zReturnCode Imodel::feAppMessageBox ( int msgmode, _bstr_t message );
__declspec(implementation_key(9135)) enum zReturnCode Imodel::feFileProgramRunning ( );
__declspec(implementation_key(9136)) enum zReturnCode Imodel::feWindowMinimize ( int vuID );
__declspec(implementation_key(9137)) enum zReturnCode Imodel::feWindowMaximize ( int vuID );
__declspec(implementation_key(9138)) enum zReturnCode Imodel::feWindowRestore ( int vuID );
__declspec(implementation_key(9139)) enum zReturnCode Imodel::feAppLockDraw ( );
__declspec(implementation_key(9140)) enum zReturnCode Imodel::feAppUnlockDraw ( );
__declspec(implementation_key(9141)) enum zReturnCode Imodel::feWindowRedraw ( int vuID );
__declspec(implementation_key(9142)) enum zReturnCode Imodel::feWindowRegenerate ( int vuID );
__declspec(implementation_key(9143)) enum zReturnCode Imodel::feWindowShow ( enum zDataType dTYPE, int ID );
__declspec(implementation_key(9144)) enum zReturnCode Imodel::feWindowVisible ( int vuID, VARIANT_BOOL Visible );
__declspec(implementation_key(9145)) enum zReturnCode Imodel::feWindowTile ( );
__declspec(implementation_key(9146)) enum zReturnCode Imodel::feWindowCascade ( );
__declspec(implementation_key(9147)) enum zReturnCode Imodel::feSplineBlend ( int curve1, const _variant_t & near1, int curve2, const _variant_t & near2, double factor, VARIANT_BOOL messages );
__declspec(implementation_key(9148)) enum zReturnCode Imodel::feWindowTileHorz ( );
__declspec(implementation_key(9149)) enum zReturnCode Imodel::feAppColorPalette ( enum zColor nDefault, enum zColor * nColor );
__declspec(implementation_key(9150)) enum zReturnCode Imodel::feAddToolbarSubmenu ( _bstr_t BarName, int cmdIndex, _bstr_t menuName, int * menuID );
__declspec(implementation_key(9151)) enum zReturnCode Imodel::feAddToolbarSubmenuCommand ( int menuID, int cmdIndex, int cmdID );
__declspec(implementation_key(9152)) enum zReturnCode Imodel::feAddToolbarSubmenuUserCommand ( int menuID, int cmdIndex, _bstr_t cmdTitle, _bstr_t cmdBitmap, int * cmdID );
__declspec(implementation_key(9153)) enum zReturnCode Imodel::feProjectAlongVector ( enum zDataType entityTYPE, int entitySET, int surfaceSET, const _variant_t & vecAlong );
__declspec(implementation_key(9154)) enum zReturnCode Imodel::feWindowSetRect ( int vuID, double pctLeft, double pctTop, double pctRight, double pctBottom );
__declspec(implementation_key(9155)) enum zReturnCode Imodel::feWindowTitle ( int vuID, _bstr_t sTitle );
__declspec(implementation_key(9156)) enum zReturnCode Imodel::feGFXSelect ( int nSetID, VARIANT_BOOL bEnableAll, VARIANT_BOOL bRedraw );
__declspec(implementation_key(9157)) enum zReturnCode Imodel::feGFXReset ( );
__declspec(implementation_key(9158)) enum zReturnCode Imodel::feGFXEnableView ( VARIANT_BOOL bEnableAll, int nVuID );
__declspec(implementation_key(9159)) enum zReturnCode Imodel::feGFXDelete ( VARIANT_BOOL bAllSets, int nSetID );
__declspec(implementation_key(9160)) enum zReturnCode Imodel::feGFXLoad ( int nSetID, int nxyz, const _variant_t & xyz, int npoly, const _variant_t & poly, enum zColor color, enum zColor edgecolor, enum zGFXPointSymbol symbol );
__declspec(implementation_key(9161)) int Imodel::feOutputConvertV92VectorID ( int oldVecID );
__declspec(implementation_key(9162)) enum zReturnCode Imodel::feProjectOntoVector ( enum zDataType entityTYPE, int entitySET, const _variant_t & vecLoc, const _variant_t & vecDIR );
__declspec(implementation_key(9163)) enum zReturnCode Imodel::feProjectOntoPlane ( enum zDataType entityTYPE, int entitySET, const _variant_t & planeLoc, const _variant_t & planeNormal );
__declspec(implementation_key(9164)) enum zReturnCode Imodel::feAppEventCallback ( enum zEventCode eventID, _bstr_t callback );
__declspec(implementation_key(9165)) enum zReturnCode Imodel::feGroupCombine ( int groupSET, int * groupID );
__declspec(implementation_key(9166)) enum zReturnCode Imodel::feFileWriteNeutral2 ( int brand, _bstr_t fName, VARIANT_BOOL write_geometry_model, VARIANT_BOOL write_analysis_model, VARIANT_BOOL write_output, VARIANT_BOOL write_selector, VARIANT_BOOL write_palette, VARIANT_BOOL write_groups, VARIANT_BOOL write_views, VARIANT_BOOL write_addl_info, VARIANT_BOOL expand_geometric, VARIANT_BOOL minimize_size, int digits, double version, int groupID );
__declspec(implementation_key(9167)) enum zReturnCode Imodel::feVectorPerpendicular ( const _variant_t & vecIN, VARIANT * vecPERP );
__declspec(implementation_key(9168)) enum zReturnCode Imodel::feGetElementFaces ( _bstr_t title, int orig_nCount, const _variant_t & orig_elemID, const _variant_t & orig_faceID, int * nCount, VARIANT * elemID, VARIANT * faceID );
__declspec(implementation_key(9169)) enum zReturnCode Imodel::feMeshAttachNodes ( int nNodes, const _variant_t & NodeID, const _variant_t & attachTYPE, const _variant_t & attachID );
__declspec(implementation_key(9170)) enum zReturnCode Imodel::feOutputProcessConvert ( int approach, int from_setID, int from_vectorID, int to_setID, int to_vectorID, int groupID );
__declspec(implementation_key(9171)) enum zReturnCode Imodel::feConnectAuto ( int solidSET, double linearTolerance, double angleTolerance, int strategy, VARIANT_BOOL bSelfConnect, VARIANT_BOOL bCombineAll, int nConnectProp, VARIANT_BOOL bGlued );
__declspec(implementation_key(9172)) enum zReturnCode Imodel::feSelectOutput ( _bstr_t title, int nBaseOutputSetID, enum zOutputType limitOutputType, enum zOutputComplex limitComplex, enum zDataType limitToEntity, VARIANT_BOOL includeCorner, IDispatch * * pOutputSets, IDispatch * * pOutputVecs );
__declspec(implementation_key(9173)) enum zReturnCode Imodel::feCoordPickByMethod ( enum zPointDefinition method, _bstr_t dlgTITLE, VARIANT * xyz );
__declspec(implementation_key(9174)) enum zReturnCode Imodel::feVectorPickByMethod ( enum zVectorDefinition method, _bstr_t dlgTITLE, VARIANT_BOOL unitVector, double * vecLength, VARIANT * vecBASE, VARIANT * vecDIR );
__declspec(implementation_key(9175)) enum zReturnCode Imodel::fePlanePickByMethod ( enum zPlaneDefinition method, _bstr_t dlgTITLE, VARIANT * plBase, VARIANT * plNormal, VARIANT * plAxis );
__declspec(implementation_key(9176)) enum zReturnCode Imodel::feLicenseIsAvailable ( enum zFeatureType nFeature );
__declspec(implementation_key(9177)) enum zReturnCode Imodel::feLicenseMethod ( int * nLicenseType );
__declspec(implementation_key(9178)) enum zReturnCode Imodel::feOutputForceBalance ( int outSETS, int boundarynodeSET, int boundaryelemSET, int csysID, const _variant_t & aroundXYZ, int * numSETS, VARIANT * resultant );
__declspec(implementation_key(9179)) enum zReturnCode Imodel::feAppModelContents ( VARIANT_BOOL bReport, int * emptyBlocks, VARIANT * entityBlocks );
__declspec(implementation_key(9180)) enum zReturnCode Imodel::feFileCurrentDirectory ( _bstr_t sCurDir );
__declspec(implementation_key(9181)) enum zReturnCode Imodel::feFileReadNeutral2 ( int brand, _bstr_t fName, VARIANT_BOOL read_geometry, VARIANT_BOOL read_model, VARIANT_BOOL read_output, VARIANT_BOOL read_groups, VARIANT_BOOL read_views, VARIANT_BOOL status_messages, int offsetID );
__declspec(implementation_key(9182)) enum zReturnCode Imodel::feAppModelDefragment ( );
__declspec(implementation_key(9183)) enum zReturnCode Imodel::feGetElementEdges ( _bstr_t title, int orig_nCount, const _variant_t & orig_elemID, const _variant_t & orig_faceID, int * nCount, VARIANT * elemID, VARIANT * faceID );
__declspec(implementation_key(9184)) enum zReturnCode Imodel::feElementFreeEdge ( int elemSetID, VARIANT_BOOL bParabolicEdges, VARIANT_BOOL bLineElem, int * nFreeCount, VARIANT * nFreeData );
__declspec(implementation_key(9185)) enum zReturnCode Imodel::feElementFreeFace ( int elemSetID, VARIANT_BOOL bParabolicEdges, VARIANT_BOOL bPlaneElem, int * nFreeCount, VARIANT * nFreeData );
__declspec(implementation_key(9186)) enum zReturnCode Imodel::feSurfaceNormalDeviation ( int surfaceSetID, VARIANT * dAvgNormal, double * dMaxAngle );
__declspec(implementation_key(9187)) enum zReturnCode Imodel::feAddToolbarSubmenuSubmenu ( int menuID, int ctrlIndex, _bstr_t menuName, int * submenuID );
__declspec(implementation_key(9188)) enum zReturnCode Imodel::feBoundaryAddSurfaces ( int nBoundaryID, int surfaceSET, VARIANT_BOOL bAddToExisting );
__declspec(implementation_key(9189)) enum zReturnCode Imodel::feCoordVectorPlaneIntersect ( const _variant_t & xyz, const _variant_t & projDir, const _variant_t & planePt, const _variant_t & planeNorm, VARIANT * xyzPlane );
__declspec(implementation_key(9190)) enum zReturnCode Imodel::feSurfaceConvert ( int surfaceSET, VARIANT_BOOL bDelete );
__declspec(implementation_key(9191)) enum zReturnCode Imodel::feGroupMoveToLayer ( int nGroupID, int nLayerID );
__declspec(implementation_key(9192)) enum zReturnCode Imodel::feBoundaryFromPoints ( int nCSys, int nPoints, const _variant_t & pXYZ, int * nBoundaryID );
__declspec(implementation_key(9193)) enum zReturnCode Imodel::feAutoMeshAssociativity ( int elemSetID, int solidSetID, double dTolerance, VARIANT_BOOL bClearPrevious, VARIANT_BOOL bCheckContainment, VARIANT_BOOL bAttachMidside, VARIANT_BOOL bGroupExtra, VARIANT_BOOL bMessages, int * nUnattachedGroup );
__declspec(implementation_key(9194)) int Imodel::feAppVersion ( );
__declspec(implementation_key(9195)) enum zReturnCode Imodel::feSolidStitchNoCleanup ( int surfaceSET, double tolerance );
__declspec(implementation_key(9196)) enum zReturnCode Imodel::feSurfaceNonManifoldAdd ( int solidSET );
__declspec(implementation_key(9197)) enum zReturnCode Imodel::feSurfaceRecoverManifold ( int solidSET );
__declspec(implementation_key(9198)) enum zReturnCode Imodel::feModifySolidFacetting ( int entitySET, int sDiv, int tDiv, double dAngleTol, double dChordTol, double dCurveFactor );
__declspec(implementation_key(9199)) enum zReturnCode Imodel::feSolidRemoveFace ( int surfaceSET, VARIANT_BOOL agressive, VARIANT_BOOL Redraw );
__declspec(implementation_key(9200)) enum zReturnCode Imodel::feSurfaceRemoveHole ( int curveSET );
__declspec(implementation_key(9201)) enum zReturnCode Imodel::feMeshSurface2 ( int surfaceSET, int propID, enum zTopologyType elemShape, VARIANT_BOOL bAllowMapped, VARIANT_BOOL bResetDefaults );
__declspec(implementation_key(9202)) enum zReturnCode Imodel::feAppRegisterAddInPaneWithFrame ( VARIANT_BOOL regster, int windowID, int messageID, VARIANT_BOOL bPreventClose, VARIANT_BOOL bPreventHide, int location, int neighborID );
__declspec(implementation_key(9203)) enum zReturnCode Imodel::feVectorAxisOfSurface ( int suID, VARIANT * baseXYZ, VARIANT * vecDIR );
__declspec(implementation_key(9204)) enum zReturnCode Imodel::feMeshSurfaceByAttributes ( int surfaceSET );
__declspec(implementation_key(9205)) enum zReturnCode Imodel::feEntityVisibility ( enum zVisibilityType visType, int visID, VARIANT_BOOL bIsVisible, VARIANT_BOOL bRedraw );
__declspec(implementation_key(9206)) enum zReturnCode Imodel::feDeleteMesh ( enum zDataType enNodeOrElem, int elemSET, VARIANT_BOOL bDeleteUnused );
__declspec(implementation_key(9207)) enum zReturnCode Imodel::feFormatReal ( double dValue, int nWidth, int nDecimal, enum zRealFormat nFormat, BSTR * strValue );
__declspec(implementation_key(9208)) enum zReturnCode Imodel::feTruncateReal ( double dValue, int nWidth, int nDecimal, enum zRealFormat nFormat, double * truncValue );
__declspec(implementation_key(9209)) enum zReturnCode Imodel::feAppMessageStartListing ( );
__declspec(implementation_key(9210)) enum zReturnCode Imodel::feAppMessageEndListing ( );
__declspec(implementation_key(9211)) enum zReturnCode Imodel::feModifyRadialOffsets ( int entitySET, VARIANT_BOOL bAroundVector, double dRadialOffset, const _variant_t & orig, const _variant_t & Axis );
__declspec(implementation_key(9212)) enum zReturnCode Imodel::feFilePrint2 ( VARIANT_BOOL useDlg, enum zPrintSource source, _bstr_t toFile );
__declspec(implementation_key(9213)) enum zReturnCode Imodel::feAppUpdateModelBox ( VARIANT_BOOL bForceUpdate );
__declspec(implementation_key(9214)) enum zReturnCode Imodel::feOutputProcessCopy ( VARIANT_BOOL bFullSet, int from_setID, int from_vectorID, int to_setID );
__declspec(implementation_key(9215)) enum zReturnCode Imodel::feOutputProcessMerge ( VARIANT_BOOL bFullSet, VARIANT_BOOL bOverwrite, int nCount, const _variant_t & from_setID, const _variant_t & from_vectorID, int to_setID );
__declspec(implementation_key(9216)) enum zReturnCode Imodel::feOutputProcessLinearCombination ( VARIANT_BOOL bFullSet, enum zOutputProcessCombine nApproach, int nCount, const _variant_t & dScaleFactor, const _variant_t & from_setID, const _variant_t & from_vectorID, int to_setID );
__declspec(implementation_key(9217)) enum zReturnCode Imodel::feOutputProcessRSSCombination ( VARIANT_BOOL bFullSet, enum zOutputProcessCombine nApproach, int nCount, const _variant_t & dScaleFactor, const _variant_t & from_setID, const _variant_t & from_vectorID, int to_setID );
__declspec(implementation_key(9218)) enum zReturnCode Imodel::feOutputProcessEnvelope ( VARIANT_BOOL bFullSet, enum zOutputProcessEnvType ntype, enum zOutputProcessEnvApproach nApproach, VARIANT_BOOL bEnvelopeInSets, VARIANT_BOOL bEnvelopeAcrossSets, VARIANT_BOOL bSetInfo, int nCount, const _variant_t & from_setID, const _variant_t & from_vectorID, int to_setID );
__declspec(implementation_key(9219)) enum zReturnCode Imodel::feOutputProcessErrorEstimate ( enum zOutputProcessErrorMethod nMethod, int from_setID, int from_vectorID, int groupID );
__declspec(implementation_key(9220)) enum zReturnCode Imodel::feTextMultiPut ( VARIANT_BOOL DrawPointer, VARIANT_BOOL DrawBorder, VARIANT_BOOL modelPos, int horzJust, int vertJust, int visView, int layer, int fontID, enum zColor BackColor, enum zColor bordColor, enum zColor textColor, int nCount, const _variant_t & textLoc, const _variant_t & pointerLoc, const _variant_t & tText );
__declspec(implementation_key(9221)) enum zReturnCode Imodel::feFileReadPatran ( _bstr_t fName, VARIANT_BOOL bSaveZeroDispAsBC );
__declspec(implementation_key(9222)) enum zReturnCode Imodel::feFileReadNeutral3 ( int brand, _bstr_t fName, VARIANT_BOOL read_geometry, VARIANT_BOOL read_model, VARIANT_BOOL read_output, VARIANT_BOOL read_groups, VARIANT_BOOL read_views, VARIANT_BOOL status_messages, int offsetID, VARIANT_BOOL renumber_layers, VARIANT_BOOL renumber_load_bc, VARIANT_BOOL always_new_output_sets );
__declspec(implementation_key(9223)) enum zReturnCode Imodel::feCheckElemDistortion2 ( int elemSET, VARIANT_BOOL doLIST, VARIANT_BOOL makeGROUP, VARIANT_BOOL chkASPECT, VARIANT_BOOL chkTAPER, VARIANT_BOOL chkANGLE, VARIANT_BOOL chkWARP, VARIANT_BOOL chkNasWARP, VARIANT_BOOL chkALTTAPER, VARIANT_BOOL chkTET, VARIANT_BOOL chkJDet, VARIANT_BOOL chkComb, VARIANT_BOOL chkExpTime, double maxASPECT, double maxTAPER, double maxANGLE, double maxWARP, double maxNasWARP, double maxALTTAPER, double maxTET, double minJDet, double minComb, double minExpTime );
__declspec(implementation_key(9224)) enum zReturnCode Imodel::feGetElemDistortion2 ( int elemID, double * valASPECT, double * valTAPER, double * valANGLE, double * valWARP, double * valNasWARP, double * valALTTAPER, double * valTET, double * valJDet, double * valComb, double * valExpTime );
__declspec(implementation_key(9225)) enum zReturnCode Imodel::feCheckCoincidentNode2 ( int mergeSET, double tolerance, VARIANT_BOOL merge, int nMergeMode, int nMergeLoc, VARIANT_BOOL bMergeAcrossConnections, int nMessageMode, VARIANT_BOOL bSaveGroups );
__declspec(implementation_key(9226)) enum zReturnCode Imodel::feMeasureDistanceBetweenNodes ( int nFrom, int nTo, int nOutSetID, int nOutVecID, int nCSysID, VARIANT * vecBASE, VARIANT * vecDist, double * magDist );
__declspec(implementation_key(9227)) enum zReturnCode Imodel::feMeasureAngleBetweenNodes ( int nVertex, int nFrom, int nTo, int nOutSetID, int nOutVecID, int nCSysID, VARIANT * vecBASE, VARIANT * vecNormal, double * magAngle );
__declspec(implementation_key(9228)) enum zReturnCode Imodel::feScreenPctPick ( double * x, double * y );
__declspec(implementation_key(9229)) enum zReturnCode Imodel::feCurveOffsetCurveWasher ( int curveSET, int faceID, int nMode, VARIANT_BOOL bAutoSelect, VARIANT_BOOL bSaveSplit, VARIANT_BOOL bExtend, double dOffset );
__declspec(implementation_key(9230)) enum zReturnCode Imodel::feCurveSplitPointToPoint ( int nPtA, int nPtB );
__declspec(implementation_key(9231)) enum zReturnCode Imodel::feCurveSplitPointToEdge ( int nPtA, int nCuID );
__declspec(implementation_key(9232)) enum zReturnCode Imodel::feCurveSplitEdgeToEdge ( int nLongEdge, int nShortEdgeSet );
__declspec(implementation_key(9233)) enum zReturnCode Imodel::feConnectAuto2 ( int solidSET, int connectTYPE, double linearTolerance, double angleTolerance, int strategy, VARIANT_BOOL bSelfConnect, VARIANT_BOOL bCombineAll, int nConnectProp, VARIANT_BOOL bGlued );
__declspec(implementation_key(9234)) enum zReturnCode Imodel::feSetToolbarSeparator ( _bstr_t BarName, int cmdID, VARIANT_BOOL bAddSep );
__declspec(implementation_key(9235)) enum zReturnCode Imodel::feSolidCleanupAdvanced ( int solidSET, VARIANT_BOOL RepairEdges, double RepairEdgesVal, VARIANT_BOOL CleanSmoothDiscont, double CleanSmoothDiscontVal, VARIANT_BOOL RemoveSelfInt, VARIANT_BOOL AllowSurfMod, VARIANT_BOOL RemoveSpikes, double RemoveSpikesVal, VARIANT_BOOL RemoveSmallEdges, double RemoveSmallEdgesVal, VARIANT_BOOL RemoveSmallFaces, double RemoveSmallFacesVal, VARIANT_BOOL RemoveSliverFaces, double RemoveSliverFacesVal, VARIANT_BOOL ConvertToAnalytic, double ConvertToAnalyticVal, VARIANT_BOOL RecalcEdges, double RecalcEdgesVal, VARIANT_BOOL MergeEdges, VARIANT_BOOL HealSurfaces, double HealSurfacesVal, VARIANT_BOOL HealSmoothDiscont, double HealSmoothDiscontVal, VARIANT_BOOL ReplaceMissing );
__declspec(implementation_key(9236)) enum zReturnCode Imodel::feRunIOTest ( _bstr_t sPath, int * nMethod );
__declspec(implementation_key(9237)) enum zReturnCode Imodel::feGroupBoolean2 ( int GroupsToProcessSetID, int GroupToSubtractFromID, enum zGroupBooleanOp opperation, int GroupToCreateID, _bstr_t GroupTitle );
__declspec(implementation_key(9238)) enum zReturnCode Imodel::feFileIsModified ( );
__declspec(implementation_key(9239)) enum zReturnCode Imodel::feBoundaryFromSurfaces2 ( int surfaceSET, VARIANT_BOOL bMessages );
__declspec(implementation_key(9240)) enum zReturnCode Imodel::feFileJTName ( _bstr_t fName );
__declspec(implementation_key(9241)) enum zReturnCode Imodel::feFileJTVersion ( int iVersion );
__declspec(implementation_key(9242)) enum zReturnCode Imodel::feFileJTUnits ( int iUnits );
__declspec(implementation_key(9243)) enum zReturnCode Imodel::feFileJTHierarchy ( int iHier1, int iHier2, int iHier3, int iHier4, int iHier5, int iHier6, int iHier7 );
__declspec(implementation_key(9244)) enum zReturnCode Imodel::feSurfaceExtend ( int curveSET, int shape, int ExtendTo, int ExtendToSolidID, const _variant_t & ExtendToLoc, double ExtendDist );
__declspec(implementation_key(9245)) enum zReturnCode Imodel::feOutputCompare ( VARIANT_BOOL bList, VARIANT_BOOL bFullCase, int fromSET, int toSETS, int ifromVEC, int itoVEC, double dMaxDiff );
__declspec(implementation_key(9246)) enum zReturnCode Imodel::feVectorNormalizedDotProduct ( const _variant_t & VecA, const _variant_t & VecB, double * dot );
__declspec(implementation_key(9247)) enum zReturnCode Imodel::feCoordCenterOfPoints ( const _variant_t & vXYZ1, const _variant_t & vXYZ2, const _variant_t & vXYZ3, VARIANT * xyz );
__declspec(implementation_key(9248)) int Imodel::feMaxInt ( int Int1, int Int2 );
__declspec(implementation_key(9249)) int Imodel::feMinInt ( int Int1, int Int2 );
__declspec(implementation_key(9250)) double Imodel::feMaxReal ( double Real1, double Real2 );
__declspec(implementation_key(9251)) double Imodel::feMinReal ( double Real1, double Real2 );
__declspec(implementation_key(9252)) int Imodel::feOutputForceBalance2 ( int freebodyID, int outSetID, VARIANT_BOOL toDataTable, VARIANT_BOOL printSummation, VARIANT_BOOL printDetails );
__declspec(implementation_key(9253)) int Imodel::feLoadFromFreebody ( int freebodyID, int nodeSetID, int outSetID, int loadSetID, VARIANT_BOOL doSummation, VARIANT_BOOL doNodes, VARIANT_BOOL overrideNodeCheck );
__declspec(implementation_key(9254)) enum zReturnCode Imodel::feFileRecoverDBData ( VARIANT_BOOL useDlg, _bstr_t fName );
__declspec(implementation_key(9255)) enum zReturnCode Imodel::feModifyColorMultiple ( enum zDataType entityTYPE, int entitySET, enum zColor color, int method, int match_range, int limit_to_groupSET );
__declspec(implementation_key(9256)) enum zReturnCode Imodel::feSelectOutputSets ( _bstr_t title, IDispatch * * pOutputSets );
__declspec(implementation_key(9257)) enum zReturnCode Imodel::feSurfaceFromMesh ( int elemSetID, VARIANT_BOOL bDeleteMesh, VARIANT_BOOL bWireframeOnly, double tolerance, VARIANT_BOOL bLengthCutoff, double len_cut_val );
__declspec(implementation_key(9258)) enum zReturnCode Imodel::feModifyElemReverse2 ( int entitySET, int method, const _variant_t & vecDIR, int csysID, int csysDir, VARIANT_BOOL bPreserveMatlDir );
__declspec(implementation_key(9259)) enum zReturnCode Imodel::feFileReadCatia2 ( VARIANT_BOOL useDlg, _bstr_t fName, VARIANT_BOOL rdAnalytical, VARIANT_BOOL rdTopology, VARIANT_BOOL rdCurves, VARIANT_BOOL rdNoShow, VARIANT_BOOL rdNoPick, VARIANT_BOOL rdWorkplanes, VARIANT_BOOL stitch, VARIANT_BOOL heal, VARIANT_BOOL check );
__declspec(implementation_key(9260)) enum zReturnCode Imodel::feFileAttachResults ( enum zAnalysisProgram analysis_program, _bstr_t fName, VARIANT_BOOL bMmf );
__declspec(implementation_key(9261)) enum zReturnCode Imodel::feFileAttachManage ( int nSetID, enum zManageResultsAttach opt, _bstr_t fName );
__declspec(implementation_key(9262)) enum zReturnCode Imodel::feFileAttachInfo ( int nID, enum zAttachStatus * status, BSTR * ModelName, IDispatch * * pOutSets );
__declspec(implementation_key(9263)) enum zReturnCode Imodel::feFileAttachSave ( int nID, int outSET, int outVec, int ndSet, int elSet );
__declspec(implementation_key(9264)) enum zReturnCode Imodel::feFileAttachByOutset ( int nSetID );
__declspec(implementation_key(9265)) enum zReturnCode Imodel::feMeshEdgeSplit ( int nNode1, int nNode2, int nNodeSetorZero );
__declspec(implementation_key(9266)) enum zReturnCode Imodel::feFileWriteSTAAD ( _bstr_t fName, enum zAnalysisType AnalysisType, _bstr_t sStructType, _bstr_t sLengthUnits, _bstr_t sForceUnits, _bstr_t sPropUnits, double dGravConstant, VARIANT_BOOL bModalCalc, double dModalCutOffFreq, int nModalCutOffMode, VARIANT_BOOL bPrintModel, VARIANT_BOOL bPrintDisp, VARIANT_BOOL bPrintReactions, VARIANT_BOOL bPrintMemberForces, VARIANT_BOOL bPrintMemberStresses, VARIANT_BOOL bPrintElemForces, VARIANT_BOOL bPrintJointForces, VARIANT_BOOL bPostDisp, VARIANT_BOOL bPostSectionDisp, VARIANT_BOOL bPostMemberForces, VARIANT_BOOL bPostStresses );
__declspec(implementation_key(9267)) enum zReturnCode Imodel::feMeasureDistanceBetweenSolids ( int solidID1, int solidID2, double * dist );
__declspec(implementation_key(9268)) enum zReturnCode Imodel::feSurfaceNonManifoldAdd2 ( int solidSET, double dTolerance );
__declspec(implementation_key(9269)) enum zReturnCode Imodel::feFileWriteFNO ( int nSetSet, int nVectorSet, int nGroup, _bstr_t fName );
__declspec(implementation_key(9270)) int Imodel::feChartPaneGetDisplayed ( );
__declspec(implementation_key(9271)) enum zReturnCode Imodel::feChartPaneSetDisplayed ( int nChartID );
__declspec(implementation_key(9272)) enum zReturnCode Imodel::feSetFree ( int nSetID );
__declspec(implementation_key(9273)) enum zReturnCode Imodel::feSetFreeNotInSet ( int nSetID );
__declspec(implementation_key(9274)) enum zReturnCode Imodel::feGroupGenerate2 ( int elemSET, VARIANT_BOOL planer, int brkPropMatl, int brkLayer, enum zColor brkColor, double brkAngle, VARIANT_BOOL brkMatchNormal, VARIANT_BOOL brkNonManifold, VARIANT_BOOL addLayers, int nExpandGroup );
__declspec(implementation_key(9275)) enum zReturnCode Imodel::feSurfaceNonManifoldAdd3 ( int solidSET, double dTolerance, VARIANT_BOOL bIntermediateCheck );
__declspec(implementation_key(9276)) enum zReturnCode Imodel::feProjectOnto ( enum zDataType entityTYPE, int entitySET, enum zProjectOnto projOnto, enum zProjectAlong projAlong, int ontoSET, const _variant_t & vOntoLocation, const _variant_t & vOntoVector, const _variant_t & vAlongVector, VARIANT_BOOL bExtendCurves, VARIANT_BOOL bVectorBothDirections );
__declspec(implementation_key(9277)) enum zReturnCode Imodel::feFileWriteIdeas ( _bstr_t fName, _bstr_t PartName, VARIANT_BOOL WriteGroups, VARIANT_BOOL AbsoluteTempScale, int UnitSystem, double UserLengthFactor, VARIANT_BOOL UserForceOrMass, double UserForceOrMassFactor, double UserTempFactor, double UserTempOffset );
__declspec(implementation_key(9278)) enum zReturnCode Imodel::feViewAutoscaleVisible ( int vuID, VARIANT_BOOL redoBox );
__declspec(implementation_key(9279)) enum zReturnCode Imodel::feViewAutoscaleAll ( int vuID, VARIANT_BOOL redoBox );
__declspec(implementation_key(9280)) enum zReturnCode Imodel::feMeshSmooth2 ( int elemSET, int fixednodeSET, VARIANT_BOOL laplaceSmooth, int iter, double tolerance );
__declspec(implementation_key(9281)) enum zReturnCode Imodel::feSurfaceOffsetTangent ( int nSeedSurface, double dTolerance, VARIANT_BOOL bAutoOffset, double dOffset, VARIANT_BOOL bDeleteOriginal, VARIANT_BOOL bCreateGroup );
__declspec(implementation_key(9282)) enum zReturnCode Imodel::feMeshExtrudeElem2 ( int elemSET, double axisLEN, const _variant_t & axisOrig, const _variant_t & axisVEC, int propID, int NumElem, int method, VARIANT_BOOL radialspherical, int ontoSurfSetID, VARIANT_BOOL matchCurrent, VARIANT_BOOL deleteOrig );
__declspec(implementation_key(9283)) enum zReturnCode Imodel::feWindowSetSize ( int vuID, int left, int top, int horz, int vert );
__declspec(implementation_key(9284)) enum zReturnCode Imodel::feMeasureDistanceBetweenGeometry ( enum zDataType enFromType, int nFromSet, enum zDataType enToType, int nToSet, VARIANT_BOOL bMinimum, int * nFromID, int * nToID, VARIANT * vFrom, VARIANT * vTo, double * dDistance );
__declspec(implementation_key(9285)) enum zReturnCode Imodel::feOutputProcessEnvelopeFromSets ( VARIANT_BOOL bFullSet, enum zOutputProcessEnvType ntype, enum zOutputProcessEnvApproach nApproach, VARIANT_BOOL bEnvelopeInSets, VARIANT_BOOL bEnvelopeAcrossSets, VARIANT_BOOL bSetInfo, int nSetSet, int nVectorSet, int to_setID );
__declspec(implementation_key(9286)) enum zReturnCode Imodel::feFileAttachSave2 ( int nID, int outSET, int outVec, int ndSet, int elSet, VARIANT_BOOL bDetach );
__declspec(implementation_key(9287)) enum zReturnCode Imodel::feRenumberOpt2 ( enum zDataType entityTYPE, int entitySET, int startID, int renumMethod, int renumCSys, VARIANT_BOOL renumAbs, VARIANT_BOOL renumDescend, VARIANT_BOOL renumConstOff, const _variant_t & xyzSortOrder );
__declspec(implementation_key(9288)) enum zReturnCode Imodel::feFileWriteFNO2 ( int nSetSet, int nVectorSet, int nOutputOnGroup, int nElementConnectivityGroup, _bstr_t fName );
__declspec(implementation_key(9289)) enum zReturnCode Imodel::feSolidSweepBetween ( int nSurfID1, int nSurfID2, int nPtID1, int nPtID2, double blendFactor );
__declspec(implementation_key(9290)) enum zReturnCode Imodel::feSolidSweep ( int surfaceSET, int curveSET );
__declspec(implementation_key(9291)) enum zReturnCode Imodel::feElemCountOnProp ( int nPropSetID, VARIANT * vPropID, VARIANT * vElemCount );
__declspec(implementation_key(9292)) enum zReturnCode Imodel::feSurfaceMidAuto2 ( int suSetID, double dTargetThickness, VARIANT_BOOL bCombineTangent, double dAngleTolerance, VARIANT_BOOL bAutoAdd, VARIANT_BOOL bReversePairs );
__declspec(implementation_key(9293)) enum zReturnCode Imodel::feCheckSumForces2 ( VARIANT_BOOL useBodyLoad, VARIANT_BOOL expandGEOM, VARIANT_BOOL doLIST, VARIANT_BOOL useSETS, int nodeSET, int elemSET, int loaddefSET, const _variant_t & basePOINT, int csysID, VARIANT * summedFORCES );
__declspec(implementation_key(9294)) enum zReturnCode Imodel::feCompute3DInvariants ( VARIANT_BOOL bStress, const _variant_t & dTensor, VARIANT * dInvariant );
__declspec(implementation_key(9295)) enum zReturnCode Imodel::feCompute2DInvariants ( VARIANT_BOOL bStress, const _variant_t & dTensor, VARIANT * dInvariant );
__declspec(implementation_key(9296)) enum zReturnCode Imodel::feMeshTetSolid2 ( enum zDataType entityTYPE, int entitySET, int propID, VARIANT_BOOL surfaceMeshOnly, VARIANT_BOOL makeMidside, double tetGrowth, VARIANT_BOOL checkSurfElem, VARIANT_BOOL deleteSurfElem, VARIANT_BOOL midsideGeom, double midsideAngle, VARIANT_BOOL multiThruThickness, VARIANT_BOOL sliverRemoval, int tetOptimization );
__declspec(implementation_key(9297)) enum zReturnCode Imodel::feAppColorCreate ( enum zColor enColor, enum zColor enPattern, enum zColor enLinestyle );
__declspec(implementation_key(9298)) enum zReturnCode Imodel::feAppColorGetBaseColor ( int nColor, enum zColor * penColor );
__declspec(implementation_key(9299)) enum zReturnCode Imodel::feAppColorGetPattern ( int nColor, enum zColor * penPattern );
__declspec(implementation_key(9300)) enum zReturnCode Imodel::feAppColorGetLinestyle ( int nColor, enum zColor * penLinestyle );
__declspec(implementation_key(9301)) enum zReturnCode Imodel::feAppColorGetRGB ( int nColor, int * pnRed, int * pnGreen, int * pnBlue );
__declspec(implementation_key(9302)) enum zReturnCode Imodel::feCheckCoincidentNode3 ( int mergeSET, double tolerance, VARIANT_BOOL merge, int nMergeMode, int nMergeLoc, VARIANT_BOOL bMergeAcrossConnections, VARIANT_BOOL nMergeAcrossOutputCSys, int nMergeAcrossCSysID, int nMessageMode, VARIANT_BOOL bSaveGroups );
__declspec(implementation_key(9303)) enum zReturnCode Imodel::feVectorRotate ( const _variant_t & baseXYZ, const _variant_t & vecXYZ, double angle, const _variant_t & origin, const _variant_t & Axis, VARIANT * baseROT, VARIANT * vecROT );
__declspec(implementation_key(9304)) enum zReturnCode Imodel::fePlaneRotate ( const _variant_t & baseXYZ, const _variant_t & vecXXYZ, const _variant_t & vecZXYZ, double angle, const _variant_t & origin, const _variant_t & Axis, VARIANT * baseROT, VARIANT * vecXROT, VARIANT * vecYROT, VARIANT * vecZROT );
__declspec(implementation_key(9305)) enum zReturnCode Imodel::feSolidFillCavity ( int curveID );
__declspec(implementation_key(9306)) enum zReturnCode Imodel::feOutputTransform2 ( int setSET, int vecSET, int nodeSET, int elemSET, enum zOutputDestination nodalMode, int nodalCSysID, VARIANT_BOOL nodalGlobalComp, enum zOutputDestination plateMode, int plateCSysID, int plateDOF, const _variant_t & plateVEC, double plateAngle, enum zOutputDestination solidMode, int solidCSysID, VARIANT_BOOL engrShearStrain );
__declspec(implementation_key(9307)) enum zReturnCode Imodel::feSolidEmbedMultiple ( int baseID, int toolSetID, VARIANT_BOOL Redraw );
__declspec(implementation_key(9308)) enum zReturnCode Imodel::feAlignBetweenCSys ( enum zDataType entityTYPE, int entitySET, int nFromCSysID, int nToCSysID );
__declspec(implementation_key(9309)) enum zReturnCode Imodel::feMeshSizeCurveMatchNodes ( int nCurveSet, int nNodeSet, double dTolerance );
__declspec(implementation_key(9310)) enum zReturnCode Imodel::feMeshSizeCurveMatchXYZ ( int nCurveSet, int nNumXYZ, const _variant_t & vecXYZ, double dTolerance );
__declspec(implementation_key(9311)) enum zReturnCode Imodel::feSurfaceNonManifoldAddExpress ( int solidSetID, double dTolerance );
__declspec(implementation_key(9312)) enum zReturnCode Imodel::feCurveOffsetCurveWasher2 ( int curveSET, int faceID, int nMode, VARIANT_BOOL bAutoSelect, VARIANT_BOOL bSaveSplit, VARIANT_BOOL bExtend, double dOffset, int nOffsetmode );
__declspec(implementation_key(9313)) enum zReturnCode Imodel::feCurvePad ( int nCurve, double dValue, enum zPadOffsetType enPadOffsetType, enum zPadAlignment enPadAlignment, VARIANT_BOOL bPadAddWasher, int nPadAlignCurve, VARIANT_BOOL bSetupMappedMeshing, const _variant_t & alignVEC );
__declspec(implementation_key(9314)) enum zReturnCode Imodel::feFileReadStepOpt2 ( VARIANT_BOOL useDlg, _bstr_t fName, int layer, int color, VARIANT_BOOL increment_layer, VARIANT_BOOL increment_color, VARIANT_BOOL assign_color, VARIANT_BOOL bodies, VARIANT_BOOL faceted, VARIANT_BOOL Surfaces, VARIANT_BOOL Curves, VARIANT_BOOL Points, VARIANT_BOOL optimize, VARIANT_BOOL simplify );
__declspec(implementation_key(9315)) enum zReturnCode Imodel::feFileWriteStep2 ( _bstr_t fName, int solidSET, int format );
__declspec(implementation_key(9316)) int Imodel::feAppMessageClear ( );
__declspec(implementation_key(9317)) enum zReturnCode Imodel::feGetRealLength ( _bstr_t title, double * value );
__declspec(implementation_key(9318)) enum zReturnCode Imodel::feModifySurfaceNormal ( enum zDataType entityTYPE, int entitySET );
__declspec(implementation_key(9319)) enum zReturnCode Imodel::feMeshEdgeSplit2 ( int nNode1, int nNode2, int nNumSplits, int nBiasType, int nBiasLocation, double dBias, int nNodeSetorZero );
__declspec(implementation_key(9320)) enum zReturnCode Imodel::feCurveProjectCurvesOntoSurfaces ( int cuSetID, int suSetID, int extendMode, VARIANT_BOOL attrib_trans );
__declspec(implementation_key(9321)) enum zReturnCode Imodel::feSolidExtendEdgesToSurfaces ( int cuSetID, int suSetID, int nExtendShape, VARIANT_BOOL bEdgeAuto );
__declspec(implementation_key(9322)) enum zReturnCode Imodel::feSolidRemoveRedundantPoint ( int ptID );
__declspec(implementation_key(9323)) enum zReturnCode Imodel::feSolidRemoveBlendsBelowRadius ( int soSetID, double max_rad );
__declspec(implementation_key(9324)) enum zReturnCode Imodel::feSolidMovePointOntoGeometry ( int ptSetID, int geomID, enum zDataType geomTYPE, VARIANT_BOOL bAlongEdge );
__declspec(implementation_key(9325)) enum zReturnCode Imodel::feSolidRayFire ( int soSetID, int nNumRay, const _variant_t & vRayLoc, const _variant_t & vRayDir, VARIANT * nHitSurface, VARIANT * vHitLoc );
__declspec(implementation_key(9326)) enum zReturnCode Imodel::feSurfaceRayFire ( int suSetID, int nNumRay, const _variant_t & vRayLoc, const _variant_t & vRayDir, VARIANT * nHitSurface, VARIANT * vHitLoc );
__declspec(implementation_key(9327)) enum zReturnCode Imodel::feSolidExtendToSurface ( int suID1, int suID2 );
__declspec(implementation_key(9328)) enum zReturnCode Imodel::feSolidMidSurfaceManualInput ( int suSet1_ID, int suSet2_ID );
__declspec(implementation_key(9329)) enum zReturnCode Imodel::feGroupsContaining ( enum zDataType enDataType, int nEntityID, int nGroupSetID );
__declspec(implementation_key(9330)) enum zReturnCode Imodel::feMeasureDistanceBetweenNodes2 ( int nFrom, int nTo, int nOutSetID, int nOutVecID, int nCSysID, VARIANT * vecBASE, VARIANT * vecTip, VARIANT * vecDist, double * magDist );
__declspec(implementation_key(9331)) enum zReturnCode Imodel::feMeshUnzip2 ( int fromSET, int toSET, int connectWith, int orientMode, int orientID, const _variant_t & orientVector, const _variant_t & dof, VARIANT_BOOL rigidReverse );
__declspec(implementation_key(9332)) enum zReturnCode Imodel::feAppSetModel32 ( int nHiModelID, int nLoModelID );
__declspec(implementation_key(9333)) enum zReturnCode Imodel::feAppGetModel32 ( int * nHiModelID, int * nLoModelID );
__declspec(implementation_key(9334)) enum zReturnCode Imodel::feAppUndoCheckpoint ( _bstr_t undoTitle );
__declspec(implementation_key(9335)) enum zReturnCode Imodel::feSurfaceGetUnderlying ( int nSurfaceID, VARIANT_BOOL bAutoOffset, double dOffset, double dSizeFactor );
__declspec(implementation_key(9336)) enum zReturnCode Imodel::feGroupGenElemShape ( int elemSET );
__declspec(implementation_key(9337)) enum zReturnCode Imodel::feEntitySetVisibility ( enum zVisibilityType visType, int visID, VARIANT_BOOL bIsVisible, VARIANT_BOOL bRedraw );
__declspec(implementation_key(9338)) enum zReturnCode Imodel::feEntityGetVisibility ( enum zVisibilityType visType, int visSetID, VARIANT_BOOL bIsVisible );
__declspec(implementation_key(9339)) enum zReturnCode Imodel::feVectorArrayTransform ( int Count, int fromCSYS, int toCSYS, const _variant_t & baseXYZ, const _variant_t & fromxyz, VARIANT * xyz );
__declspec(implementation_key(9340)) enum zReturnCode Imodel::feSurfaceFromMesh2 ( int elemSetID, VARIANT_BOOL bDeleteMesh, VARIANT_BOOL bWireframeOnly, double tolerance, VARIANT_BOOL bLengthCutoff, double len_cut_val, double ang_tol );
__declspec(implementation_key(9341)) enum zReturnCode Imodel::feSolidRemoveCurve ( int cuSetID, enum zCurveRemoveOption nRemoveOption );
__declspec(implementation_key(9342)) enum zReturnCode Imodel::feSurfaceOffset ( int surfID, double dOffset );
__declspec(implementation_key(9343)) enum zReturnCode Imodel::feCrossSectionReport ( int nPropID, VARIANT_BOOL bDoEndA, VARIANT_BOOL bCopyToClipboard, _bstr_t fName, enum zPictFormat2 nFileFormat );
__declspec(implementation_key(9344)) enum zReturnCode Imodel::feGroupGenVisible ( int nGroupID, VARIANT_BOOL bIncludePropAndMatl, _bstr_t title );
__declspec(implementation_key(9345)) enum zReturnCode Imodel::feCurveSolidToFEMAP ( int cuSetID );
__declspec(implementation_key(9346)) enum zReturnCode Imodel::feResultsRankingToDataTable ( VARIANT_BOOL bOverrideLock, enum zDataType nRankByEntity, enum zRankingMethod nMethod, enum zRankingApproach nApproach, enum zRankingType ntype, int nNumberToRank, int nEntitySetID, int nResultsSetSetID, int nResultsVectorSetID );
__declspec(implementation_key(9347)) enum zReturnCode Imodel::feResultsToDataTable ( VARIANT_BOOL bOverrideLock, int nCSysID, VARIANT_BOOL bSetInColumns, VARIANT_BOOL bVecInColumns, VARIANT_BOOL bEntInColumns, VARIANT_BOOL bAltColumnOrder, int nResultsSetSetID, int nResultsVectorSetID, int nEntitySetID );
__declspec(implementation_key(9348)) enum zReturnCode Imodel::feDeleteOutputEntry ( int setSET, int vectorSET, int nodeSET, int elemSET );
__declspec(implementation_key(9349)) enum zReturnCode Imodel::feDeleteOutput2 ( int outputSetSET, int vectorSET );
__declspec(implementation_key(9350)) enum zReturnCode Imodel::feGetElementFacesFromSet ( _bstr_t title, int nElemSetID, int * nCount, VARIANT * elemID, VARIANT * faceID );
__declspec(implementation_key(9351)) enum zReturnCode Imodel::feFileReadCSVResults ( _bstr_t fName );
__declspec(implementation_key(9352)) enum zReturnCode Imodel::feFileReadJT ( _bstr_t fName );
__declspec(implementation_key(9353)) enum zReturnCode Imodel::feFileWriteJT ( _bstr_t fName, int solidSET );
__declspec(implementation_key(9354)) enum zReturnCode Imodel::feSurfaceCornersMultiple ( int NumberOfSurfaces, const _variant_t & fourCorners, const _variant_t & c1, const _variant_t & c2, const _variant_t & c3, const _variant_t & c4 );
__declspec(implementation_key(9355)) enum zReturnCode Imodel::feCurvesBreakAtIntersections ( int curveSET );
__declspec(implementation_key(9356)) enum zReturnCode Imodel::feSurfaceExtract ( int suSetID );
__declspec(implementation_key(9357)) enum zReturnCode Imodel::feGenerateCopy2 ( enum zDataType entityTYPE, int entitySET, const _variant_t & alongVEC, int nodeINC, VARIANT_BOOL Match, VARIANT_BOOL matchColorLayer );
__declspec(implementation_key(9358)) enum zReturnCode Imodel::feGenerateScale2 ( enum zDataType entityTYPE, int entitySET, const _variant_t & origVEC, const _variant_t & scaleVEC, int csysID, VARIANT_BOOL Match, VARIANT_BOOL matchColorLayer );
__declspec(implementation_key(9359)) enum zReturnCode Imodel::feGenerateRadialCopy2 ( enum zDataType entityTYPE, int entitySET, const _variant_t & origXYZ, const _variant_t & aroundVEC, double Length, VARIANT_BOOL bScaleAroundVec, VARIANT_BOOL Match, VARIANT_BOOL matchColorLayer );
__declspec(implementation_key(9360)) enum zReturnCode Imodel::feGenerateRotate2 ( enum zDataType entityTYPE, int entitySET, const _variant_t & origVEC, const _variant_t & axisVEC, double rotANGLE, double transDIST, VARIANT_BOOL Match, VARIANT_BOOL matchColorLayer );
__declspec(implementation_key(9361)) enum zReturnCode Imodel::feGenerateReflect2 ( enum zDataType entityTYPE, int entitySET, const _variant_t & origVEC, const _variant_t & normVEC, double trapWIDTH, VARIANT_BOOL Match, VARIANT_BOOL matchColorLayer );
__declspec(implementation_key(9362)) enum zReturnCode Imodel::feSolidExtractCenterlines ( int soSetID, int inMatID, VARIANT_BOOL bTubularOnly );
__declspec(implementation_key(9363)) enum zReturnCode Imodel::feViewShow2 ( enum zDataType dTYPE, int ID, VARIANT_BOOL qAutoscale );
__declspec(implementation_key(9364)) enum zReturnCode Imodel::feWindowShow2 ( enum zDataType dTYPE, int ID, VARIANT_BOOL qAutoscale );
__declspec(implementation_key(9365)) enum zReturnCode Imodel::feCreateFunction ( int nNumAvailableTypes, const _variant_t & AvailableTypes, int * nID );
__declspec(implementation_key(9366)) int Imodel::feAppModelInfoShow ( );
__declspec(implementation_key(9367)) int Imodel::feAppSetModelInfoShow ( VARIANT_BOOL bEnable );
__declspec(implementation_key(9368)) enum zReturnCode Imodel::feSolidSlice2 ( int solidSET, const _variant_t & planeBase, const _variant_t & planeNormal, VARIANT_BOOL bSliceOrSection, VARIANT_BOOL bMatchAcrossSlice, int nNumberOfPlanes, double dMultiPlaneOffset, enum zColor nSliceColor, VARIANT_BOOL Redraw );
__declspec(implementation_key(9369)) enum zReturnCode Imodel::feSolidSliceAlongFace2 ( int surfaceID, VARIANT_BOOL bSliceOrSection, VARIANT_BOOL bMatchAcrossSlice, enum zColor nSliceColor, VARIANT_BOOL Redraw );
__declspec(implementation_key(9370)) enum zReturnCode Imodel::feSolidSliceWithSheet2 ( int solidSET, int sheetSET, VARIANT_BOOL bSliceOrSection, VARIANT_BOOL bMatchAcrossSlice, enum zColor nSliceColor, VARIANT_BOOL deleteTool, VARIANT_BOOL Redraw );
__declspec(implementation_key(9371)) enum zReturnCode Imodel::feSolidSliceWithCurve2 ( int solidSET, int curveSET, VARIANT_BOOL bSliceOrSection, VARIANT_BOOL bMatchAcrossSlice, enum zColor nSliceColor, VARIANT_BOOL bAlongCurveNormal, VARIANT_BOOL bVectorDirectionOnly, const _variant_t & vectorBase, const _variant_t & vectorDirection, VARIANT_BOOL deleteTool, VARIANT_BOOL Redraw );
__declspec(implementation_key(9372)) enum zReturnCode Imodel::feViewShowMultiple ( int nSets, const _variant_t & piTYPEs, const _variant_t & piSetIDs, VARIANT_BOOL qAutoscale );
__declspec(implementation_key(9373)) enum zReturnCode Imodel::feOutputGlobalPly ( int nSetSet, int nVectorSet, int nGlobalPlySET, VARIANT_BOOL bTop, VARIANT_BOOL bBottom, VARIANT_BOOL bGlobalPly );
__declspec(implementation_key(9374)) enum zReturnCode Imodel::feSolidAlignSplits ( enum zDataType entityTYPE, int setID, enum zSolidAlignVecMode vecMode, const _variant_t & axisVEC );
__declspec(implementation_key(9375)) enum zReturnCode Imodel::feAppUndoClear ( );
__declspec(implementation_key(9376)) enum zReturnCode Imodel::feChartPaneCopy ( VARIANT_BOOL bCopyPicture, VARIANT_BOOL bCopyText );
__declspec(implementation_key(9377)) enum zReturnCode Imodel::feEntitySetVisibility2 ( enum zVisibilityType visType, int nCount, const _variant_t & visEnt, const _variant_t & entVisible, VARIANT_BOOL bRedraw );
__declspec(implementation_key(9378)) enum zReturnCode Imodel::feAppResetLocale ( );
__declspec(implementation_key(9379)) int Imodel::feFileReadStepOpt ( VARIANT_BOOL useDlg, _bstr_t fName, _bstr_t title, int layer, int color, VARIANT_BOOL increment_layer, VARIANT_BOOL increment_color, VARIANT_BOOL assign_color, VARIANT_BOOL class_VI, VARIANT_BOOL class_V, VARIANT_BOOL class_IV, VARIANT_BOOL class_III, VARIANT_BOOL class_II_wf, VARIANT_BOOL class_II_curv, VARIANT_BOOL class_II_rect, VARIANT_BOOL class_II_2d, VARIANT_BOOL smooth_g1, VARIANT_BOOL explode, VARIANT_BOOL analytics, VARIANT_BOOL stitch, VARIANT_BOOL closed_orient, VARIANT_BOOL pro_e, VARIANT_BOOL check_input, VARIANT_BOOL check_output );
__declspec(implementation_key(9380)) ISetPtr Imodel::GetfeSet ( );
__declspec(implementation_key(9381)) void Imodel::PutfeSet ( struct ISet * _val );
__declspec(implementation_key(9382)) IReadPtr Imodel::GetfeRead ( );
__declspec(implementation_key(9383)) void Imodel::PutfeRead ( struct IRead * _val );
__declspec(implementation_key(9384)) IMatlPtr Imodel::GetfeMatl ( );
__declspec(implementation_key(9385)) void Imodel::PutfeMatl ( struct IMatl * _val );
__declspec(implementation_key(9386)) IPropPtr Imodel::GetfeProp ( );
__declspec(implementation_key(9387)) void Imodel::PutfeProp ( struct IProp * _val );
__declspec(implementation_key(9388)) INodePtr Imodel::GetfeNode ( );
__declspec(implementation_key(9389)) void Imodel::PutfeNode ( struct INode * _val );
__declspec(implementation_key(9390)) IElemPtr Imodel::GetfeElem ( );
__declspec(implementation_key(9391)) void Imodel::PutfeElem ( struct IElem * _val );
__declspec(implementation_key(9392)) ICSysPtr Imodel::GetfeCSys ( );
__declspec(implementation_key(9393)) void Imodel::PutfeCSys ( struct ICSys * _val );
__declspec(implementation_key(9394)) IBCSetPtr Imodel::GetfeBCSet ( );
__declspec(implementation_key(9395)) void Imodel::PutfeBCSet ( struct IBCSet * _val );
__declspec(implementation_key(9396)) IBCNodePtr Imodel::GetfeBCNode ( );
__declspec(implementation_key(9397)) void Imodel::PutfeBCNode ( struct IBCNode * _val );
__declspec(implementation_key(9398)) IBCGeomPtr Imodel::GetfeBCGeom ( );
__declspec(implementation_key(9399)) void Imodel::PutfeBCGeom ( struct IBCGeom * _val );
__declspec(implementation_key(9400)) IBCEqnPtr Imodel::GetfeBCEqn ( );
__declspec(implementation_key(9401)) void Imodel::PutfeBCEqn ( struct IBCEqn * _val );
__declspec(implementation_key(9402)) ILoadSetPtr Imodel::GetfeLoadSet ( );
__declspec(implementation_key(9403)) void Imodel::PutfeLoadSet ( struct ILoadSet * _val );
__declspec(implementation_key(9404)) ILoadNTempPtr Imodel::GetfeLoadNTemp ( );
__declspec(implementation_key(9405)) void Imodel::PutfeLoadNTemp ( struct ILoadNTemp * _val );
__declspec(implementation_key(9406)) ILoadETempPtr Imodel::GetfeLoadETemp ( );
__declspec(implementation_key(9407)) void Imodel::PutfeLoadETemp ( struct ILoadETemp * _val );
__declspec(implementation_key(9408)) ILoadMeshPtr Imodel::GetfeLoadMesh ( );
__declspec(implementation_key(9409)) void Imodel::PutfeLoadMesh ( struct ILoadMesh * _val );
__declspec(implementation_key(9410)) ILoadGeomPtr Imodel::GetfeLoadGeom ( );
__declspec(implementation_key(9411)) void Imodel::PutfeLoadGeom ( struct ILoadGeom * _val );
__declspec(implementation_key(9412)) IGroupPtr Imodel::GetfeGroup ( );
__declspec(implementation_key(9413)) void Imodel::PutfeGroup ( struct IGroup * _val );
__declspec(implementation_key(9414)) IViewPtr Imodel::GetfeView ( );
__declspec(implementation_key(9415)) void Imodel::PutfeView ( struct IView * _val );
__declspec(implementation_key(9416)) IViewOrientPtr Imodel::GetfeViewOrient ( );
__declspec(implementation_key(9417)) void Imodel::PutfeViewOrient ( struct IViewOrient * _val );
__declspec(implementation_key(9418)) IVarPtr Imodel::GetfeVar ( );
__declspec(implementation_key(9419)) void Imodel::PutfeVar ( struct IVar * _val );
__declspec(implementation_key(9420)) IReportPtr Imodel::GetfeReport ( );
__declspec(implementation_key(9421)) void Imodel::PutfeReport ( struct IReport * _val );
__declspec(implementation_key(9422)) ILayerPtr Imodel::GetfeLayer ( );
__declspec(implementation_key(9423)) void Imodel::PutfeLayer ( struct ILayer * _val );
__declspec(implementation_key(9424)) IContactPtr Imodel::GetfeContact ( );
__declspec(implementation_key(9425)) void Imodel::PutfeContact ( struct IContact * _val );
__declspec(implementation_key(9426)) IFunctionPtr Imodel::GetfeFunction ( );
__declspec(implementation_key(9427)) void Imodel::PutfeFunction ( struct IFunction * _val );
__declspec(implementation_key(9428)) IOptimPtr Imodel::GetfeOptim ( );
__declspec(implementation_key(9429)) void Imodel::PutfeOptim ( struct IOptim * _val );
__declspec(implementation_key(9430)) IOutputSetPtr Imodel::GetfeOutputSet ( );
__declspec(implementation_key(9431)) void Imodel::PutfeOutputSet ( struct IOutputSet * _val );
__declspec(implementation_key(9432)) IOutputPtr Imodel::GetfeOutput ( );
__declspec(implementation_key(9433)) void Imodel::PutfeOutput ( struct IOutput * _val );
__declspec(implementation_key(9434)) ITmgBCPtr Imodel::GetfeTMGBC ( );
__declspec(implementation_key(9435)) void Imodel::PutfeTMGBC ( struct ITmgBC * _val );
__declspec(implementation_key(9436)) ITmgCtlPtr Imodel::GetfeTMGCtrl ( );
__declspec(implementation_key(9437)) void Imodel::PutfeTMGCtrl ( struct ITmgCtl * _val );
__declspec(implementation_key(9438)) ITmgIntPtr Imodel::GetfeTMGInt ( );
__declspec(implementation_key(9439)) void Imodel::PutfeTMGInt ( struct ITmgInt * _val );
__declspec(implementation_key(9440)) ITmgOptPtr Imodel::GetfeTMGOpt ( );
__declspec(implementation_key(9441)) void Imodel::PutfeTMGOpt ( struct ITmgOpt * _val );
__declspec(implementation_key(9442)) ITmgRealPtr Imodel::GetfeTMGReal ( );
__declspec(implementation_key(9443)) void Imodel::PutfeTMGReal ( struct ITmgReal * _val );
__declspec(implementation_key(9444)) IPointPtr Imodel::GetfePoint ( );
__declspec(implementation_key(9445)) void Imodel::PutfePoint ( struct IPoint * _val );
__declspec(implementation_key(9446)) ICurvePtr Imodel::GetfeCurve ( );
__declspec(implementation_key(9447)) void Imodel::PutfeCurve ( struct ICurve * _val );
__declspec(implementation_key(9448)) ISurfacePtr Imodel::GetfeSurface ( );
__declspec(implementation_key(9449)) void Imodel::PutfeSurface ( struct ISurface * _val );
__declspec(implementation_key(9450)) ISolidPtr Imodel::GetfeSolid ( );
__declspec(implementation_key(9451)) void Imodel::PutfeSolid ( struct ISolid * _val );
__declspec(implementation_key(9452)) IAnalysisMgrPtr Imodel::GetfeAnalysisSet ( );
__declspec(implementation_key(9453)) void Imodel::PutfeAnalysisSet ( struct IAnalysisMgr * _val );
__declspec(implementation_key(9454)) IAnalysisCasePtr Imodel::GetfeAnalysisCase ( );
__declspec(implementation_key(9455)) void Imodel::PutfeAnalysisCase ( struct IAnalysisCase * _val );
__declspec(implementation_key(9456)) IUserDataPtr Imodel::GetfeUserData ( );
__declspec(implementation_key(9457)) void Imodel::PutfeUserData ( struct IUserData * _val );
__declspec(implementation_key(9458)) ITextPtr Imodel::GetfeText ( );
__declspec(implementation_key(9459)) void Imodel::PutfeText ( struct IText * _val );
__declspec(implementation_key(9460)) IAnalysisMgrPtr Imodel::GetfeAnalysisMgr ( );
__declspec(implementation_key(9461)) void Imodel::PutfeAnalysisMgr ( struct IAnalysisMgr * _val );
__declspec(implementation_key(9462)) IConnectionPropPtr Imodel::GetfeConnectionProp ( );
__declspec(implementation_key(9463)) void Imodel::PutfeConnectionProp ( struct IConnectionProp * _val );
__declspec(implementation_key(9464)) IConnectionPtr Imodel::GetfeConnection ( );
__declspec(implementation_key(9465)) void Imodel::PutfeConnection ( struct IConnection * _val );
__declspec(implementation_key(9466)) ISortSetPtr Imodel::GetfeSort ( );
__declspec(implementation_key(9467)) void Imodel::PutfeSort ( struct ISortSet * _val );
__declspec(implementation_key(9468)) IScratchPtr Imodel::GetfeScratch ( );
__declspec(implementation_key(9469)) void Imodel::PutfeScratch ( struct IScratch * _val );
__declspec(implementation_key(9470)) ISelectorPtr Imodel::GetfeSelector ( );
__declspec(implementation_key(9471)) void Imodel::PutfeSelector ( struct ISelector * _val );
__declspec(implementation_key(9472)) ILoadDefinitionPtr Imodel::GetfeLoadDefinition ( );
__declspec(implementation_key(9473)) void Imodel::PutfeLoadDefinition ( struct ILoadDefinition * _val );
__declspec(implementation_key(9474)) IGFXPointPtr Imodel::GetfeGFXPoint ( );
__declspec(implementation_key(9475)) void Imodel::PutfeGFXPoint ( struct IGFXPoint * _val );
__declspec(implementation_key(9476)) IGFXLinePtr Imodel::GetfeGFXLine ( );
__declspec(implementation_key(9477)) void Imodel::PutfeGFXLine ( struct IGFXLine * _val );
__declspec(implementation_key(9478)) IGFXArrowPtr Imodel::GetfeGFXArrow ( );
__declspec(implementation_key(9479)) void Imodel::PutfeGFXArrow ( struct IGFXArrow * _val );
__declspec(implementation_key(9480)) IGFXTria3Ptr Imodel::GetfeGFXTria3 ( );
__declspec(implementation_key(9481)) void Imodel::PutfeGFXTria3 ( struct IGFXTria3 * _val );
__declspec(implementation_key(9482)) IGFXQuad4Ptr Imodel::GetfeGFXQuad4 ( );
__declspec(implementation_key(9483)) void Imodel::PutfeGFXQuad4 ( struct IGFXQuad4 * _val );
__declspec(implementation_key(9484)) IBCDefinitionPtr Imodel::GetfeBCDefinition ( );
__declspec(implementation_key(9485)) void Imodel::PutfeBCDefinition ( struct IBCDefinition * _val );
__declspec(implementation_key(9486)) ILayupPtr Imodel::GetfeLayup ( );
__declspec(implementation_key(9487)) void Imodel::PutfeLayup ( struct ILayup * _val );
__declspec(implementation_key(9488)) IGlobalPlyPtr Imodel::GetfeGlobalPly ( );
__declspec(implementation_key(9489)) void Imodel::PutfeGlobalPly ( struct IGlobalPly * _val );
__declspec(implementation_key(9490)) IContactPtr Imodel::GetfeConnectionRegion ( );
__declspec(implementation_key(9491)) void Imodel::PutfeConnectionRegion ( struct IContact * _val );
__declspec(implementation_key(9492)) ILoadBoltPtr Imodel::GetfeLoadBolt ( );
__declspec(implementation_key(9493)) void Imodel::PutfeLoadBolt ( struct ILoadBolt * _val );
__declspec(implementation_key(9494)) IMapOutputPtr Imodel::GetfeMapOutput ( );
__declspec(implementation_key(9495)) void Imodel::PutfeMapOutput ( struct IMapOutput * _val );
__declspec(implementation_key(9496)) IDataSurfPtr Imodel::GetfeDataSurf ( );
__declspec(implementation_key(9497)) void Imodel::PutfeDataSurf ( struct IDataSurf * _val );
__declspec(implementation_key(9498)) IDataTablePtr Imodel::GetfeDataTable ( );
__declspec(implementation_key(9499)) void Imodel::PutfeDataTable ( struct IDataTable * _val );
__declspec(implementation_key(9500)) IReferencePtr Imodel::GetfeReference ( );
__declspec(implementation_key(9501)) void Imodel::PutfeReference ( struct IReference * _val );
__declspec(implementation_key(9502)) IAeroPanelPtr Imodel::GetfeAeroPanel ( );
__declspec(implementation_key(9503)) void Imodel::PutfeAeroPanel ( struct IAeroPanel * _val );
__declspec(implementation_key(9504)) IAeroPropPtr Imodel::GetfeAeroProp ( );
__declspec(implementation_key(9505)) void Imodel::PutfeAeroProp ( struct IAeroProp * _val );
__declspec(implementation_key(9506)) IAeroSplinePtr Imodel::GetfeAeroSpline ( );
__declspec(implementation_key(9507)) void Imodel::PutfeAeroSpline ( struct IAeroSpline * _val );
__declspec(implementation_key(9508)) IFreebodyPtr Imodel::GetfeFreebody ( );
__declspec(implementation_key(9509)) void Imodel::PutfeFreebody ( struct IFreebody * _val );
__declspec(implementation_key(9510)) IMesherPtr Imodel::GetfeMesher ( );
__declspec(implementation_key(9511)) void Imodel::PutfeMesher ( struct IMesher * _val );
__declspec(implementation_key(9512)) IElementQualityPtr Imodel::GetfeElementQuality ( );
__declspec(implementation_key(9513)) void Imodel::PutfeElementQuality ( struct IElementQuality * _val );
__declspec(implementation_key(9514)) IAeroSurfPtr Imodel::GetfeAeroSurf ( );
__declspec(implementation_key(9515)) void Imodel::PutfeAeroSurf ( struct IAeroSurf * _val );
__declspec(implementation_key(9516)) IStressLinearPtr Imodel::GetfeStressLinear ( );
__declspec(implementation_key(9517)) void Imodel::PutfeStressLinear ( struct IStressLinear * _val );
__declspec(implementation_key(9518)) ISEReferencePtr Imodel::GetfeSEReference ( );
__declspec(implementation_key(9519)) void Imodel::PutfeSEReference ( struct ISEReference * _val );
__declspec(implementation_key(9520)) IChartPtr Imodel::GetfeChart ( );
__declspec(implementation_key(9521)) void Imodel::PutfeChart ( struct IChart * _val );
__declspec(implementation_key(9522)) IChartSeriesPtr Imodel::GetfeChartSeries ( );
__declspec(implementation_key(9523)) void Imodel::PutfeChartSeries ( struct IChartSeries * _val );
__declspec(implementation_key(9524)) IResultsPtr Imodel::GetfeResults ( );
__declspec(implementation_key(9525)) void Imodel::PutfeResults ( struct IResults * _val );
__declspec(implementation_key(9526)) ITableDataPtr Imodel::GetfeTableData ( );
__declspec(implementation_key(9527)) void Imodel::PutfeTableData ( struct ITableData * _val );
__declspec(implementation_key(9528)) IInterpolatePtr Imodel::GetfeInterpolate ( );
__declspec(implementation_key(9529)) void Imodel::PutfeInterpolate ( struct IInterpolate * _val );
__declspec(implementation_key(9530)) IMapDataPtr Imodel::GetfeMapData ( );
__declspec(implementation_key(9531)) void Imodel::PutfeMapData ( struct IMapData * _val );
__declspec(implementation_key(9532)) ITrackDataPtr Imodel::GetfeTrackData ( );
__declspec(implementation_key(9533)) void Imodel::PutfeTrackData ( struct ITrackData * _val );
__declspec(implementation_key(9534)) IBeamCalculatorPtr Imodel::GetfeBeamCalculator ( );
__declspec(implementation_key(9535)) void Imodel::PutfeBeamCalculator ( struct IBeamCalculator * _val );
__declspec(implementation_key(9536)) IAnalysisStudyPtr Imodel::GetfeAnalysisStudy ( );
__declspec(implementation_key(9537)) void Imodel::PutfeAnalysisStudy ( struct IAnalysisStudy * _val );
__declspec(implementation_key(9538)) IDrawErasePtr Imodel::GetfeDrawErase ( );
__declspec(implementation_key(9539)) void Imodel::PutfeDrawErase ( struct IDrawErase * _val );
__declspec(implementation_key(9540)) IFreqPtr Imodel::GetfeFreq ( );
__declspec(implementation_key(9541)) void Imodel::PutfeFreq ( struct IFreq * _val );
__declspec(implementation_key(9542)) IMidFaceCentroidModelPtr Imodel::GetfeMidFaceCentroidModel ( );
__declspec(implementation_key(9543)) void Imodel::PutfeMidFaceCentroidModel ( struct IMidFaceCentroidModel * _val );
__declspec(implementation_key(9544)) IUserDefinedGraphicsPtr Imodel::GetfeUserDefinedGraphics ( );
__declspec(implementation_key(9545)) void Imodel::PutfeUserDefinedGraphics ( struct IUserDefinedGraphics * _val );
__declspec(implementation_key(9546)) IVectorPtr Imodel::GetfeVector ( );
__declspec(implementation_key(9547)) void Imodel::PutfeVector ( struct IVector * _val );
__declspec(implementation_key(9548)) IPlanePtr Imodel::GetfePlane ( );
__declspec(implementation_key(9549)) void Imodel::PutfePlane ( struct IPlane * _val );
__declspec(implementation_key(9550)) _bstr_t Imodel::GetPgSetup_HdrFont ( );
__declspec(implementation_key(9551)) void Imodel::PutPgSetup_HdrFont ( _bstr_t _val );
__declspec(implementation_key(9552)) _bstr_t Imodel::GetPgSetup_TextFont ( );
__declspec(implementation_key(9553)) void Imodel::PutPgSetup_TextFont ( _bstr_t _val );
__declspec(implementation_key(9554)) _bstr_t Imodel::GetPgSetup_Header ( );
__declspec(implementation_key(9555)) void Imodel::PutPgSetup_Header ( _bstr_t _val );
__declspec(implementation_key(9556)) _bstr_t Imodel::GetPgSetup_Footer ( );
__declspec(implementation_key(9557)) void Imodel::PutPgSetup_Footer ( _bstr_t _val );
__declspec(implementation_key(9558)) VARIANT_BOOL Imodel::GetPgSetup_DefaultHdrFont ( );
__declspec(implementation_key(9559)) void Imodel::PutPgSetup_DefaultHdrFont ( VARIANT_BOOL _val );
__declspec(implementation_key(9560)) VARIANT_BOOL Imodel::GetPgSetup_DefaultTextFont ( );
__declspec(implementation_key(9561)) void Imodel::PutPgSetup_DefaultTextFont ( VARIANT_BOOL _val );
__declspec(implementation_key(9562)) VARIANT_BOOL Imodel::GetPgSetup_FillMargins ( );
__declspec(implementation_key(9563)) void Imodel::PutPgSetup_FillMargins ( VARIANT_BOOL _val );
__declspec(implementation_key(9564)) VARIANT_BOOL Imodel::GetPgSetup_MaintainAspect ( );
__declspec(implementation_key(9565)) void Imodel::PutPgSetup_MaintainAspect ( VARIANT_BOOL _val );
__declspec(implementation_key(9566)) VARIANT_BOOL Imodel::GetPgSetup_IntegerScaling ( );
__declspec(implementation_key(9567)) void Imodel::PutPgSetup_IntegerScaling ( VARIANT_BOOL _val );
__declspec(implementation_key(9568)) VARIANT_BOOL Imodel::GetPgSetup_PrintBorder ( );
__declspec(implementation_key(9569)) void Imodel::PutPgSetup_PrintBorder ( VARIANT_BOOL _val );
__declspec(implementation_key(9570)) VARIANT_BOOL Imodel::GetPgSetup_SwapBW ( );
__declspec(implementation_key(9571)) void Imodel::PutPgSetup_SwapBW ( VARIANT_BOOL _val );
__declspec(implementation_key(9572)) VARIANT_BOOL Imodel::GetPgSetup_TransparentBkgd ( );
__declspec(implementation_key(9573)) void Imodel::PutPgSetup_TransparentBkgd ( VARIANT_BOOL _val );
__declspec(implementation_key(9574)) VARIANT_BOOL Imodel::GetPgSetup_Monochrome ( );
__declspec(implementation_key(9575)) void Imodel::PutPgSetup_Monochrome ( VARIANT_BOOL _val );
__declspec(implementation_key(9576)) int Imodel::GetPgSetup_HdrFontSize ( );
__declspec(implementation_key(9577)) void Imodel::PutPgSetup_HdrFontSize ( int _val );
__declspec(implementation_key(9578)) int Imodel::GetPgSetup_TextFontSize ( );
__declspec(implementation_key(9579)) void Imodel::PutPgSetup_TextFontSize ( int _val );
__declspec(implementation_key(9580)) int Imodel::GetPgSetup_PenScale ( );
__declspec(implementation_key(9581)) void Imodel::PutPgSetup_PenScale ( int _val );
__declspec(implementation_key(9582)) int Imodel::GetPgSetup_VertAlign ( );
__declspec(implementation_key(9583)) void Imodel::PutPgSetup_VertAlign ( int _val );
__declspec(implementation_key(9584)) int Imodel::GetPgSetup_HorzAlign ( );
__declspec(implementation_key(9585)) void Imodel::PutPgSetup_HorzAlign ( int _val );
__declspec(implementation_key(9586)) double Imodel::GetPgSetup_CustomHeight ( );
__declspec(implementation_key(9587)) void Imodel::PutPgSetup_CustomHeight ( double _val );
__declspec(implementation_key(9588)) double Imodel::GetPgSetup_CustomWidth ( );
__declspec(implementation_key(9589)) void Imodel::PutPgSetup_CustomWidth ( double _val );
__declspec(implementation_key(9590)) double Imodel::GetPgSetup_LeftMargin ( );
__declspec(implementation_key(9591)) void Imodel::PutPgSetup_LeftMargin ( double _val );
__declspec(implementation_key(9592)) double Imodel::GetPgSetup_RightMargin ( );
__declspec(implementation_key(9593)) void Imodel::PutPgSetup_RightMargin ( double _val );
__declspec(implementation_key(9594)) double Imodel::GetPgSetup_TopMargin ( );
__declspec(implementation_key(9595)) void Imodel::PutPgSetup_TopMargin ( double _val );
__declspec(implementation_key(9596)) double Imodel::GetPgSetup_BottomMargin ( );
__declspec(implementation_key(9597)) void Imodel::PutPgSetup_BottomMargin ( double _val );
__declspec(implementation_key(9598)) double Imodel::GetPgSetup_RenderScale ( );
__declspec(implementation_key(9599)) void Imodel::PutPgSetup_RenderScale ( double _val );
__declspec(implementation_key(9600)) _bstr_t Imodel::GetPref_LibAnalysis ( );
__declspec(implementation_key(9601)) void Imodel::PutPref_LibAnalysis ( _bstr_t _val );
__declspec(implementation_key(9602)) _bstr_t Imodel::GetPref_LibProp ( );
__declspec(implementation_key(9603)) void Imodel::PutPref_LibProp ( _bstr_t _val );
__declspec(implementation_key(9604)) _bstr_t Imodel::GetPref_LibReport ( );
__declspec(implementation_key(9605)) void Imodel::PutPref_LibReport ( _bstr_t _val );
__declspec(implementation_key(9606)) _bstr_t Imodel::GetPref_LibContPal ( );
__declspec(implementation_key(9607)) void Imodel::PutPref_LibContPal ( _bstr_t _val );
__declspec(implementation_key(9608)) _bstr_t Imodel::GetPref_LibFunction ( );
__declspec(implementation_key(9609)) void Imodel::PutPref_LibFunction ( _bstr_t _val );
__declspec(implementation_key(9610)) _bstr_t Imodel::GetPref_LibMatl ( );
__declspec(implementation_key(9611)) void Imodel::PutPref_LibMatl ( _bstr_t _val );
__declspec(implementation_key(9612)) _bstr_t Imodel::GetPref_LibMatlDef ( );
__declspec(implementation_key(9613)) void Imodel::PutPref_LibMatlDef ( _bstr_t _val );
__declspec(implementation_key(9614)) _bstr_t Imodel::GetPref_LibView ( );
__declspec(implementation_key(9615)) void Imodel::PutPref_LibView ( _bstr_t _val );
__declspec(implementation_key(9616)) _bstr_t Imodel::GetPref_LibPalette ( );
__declspec(implementation_key(9617)) void Imodel::PutPref_LibPalette ( _bstr_t _val );
__declspec(implementation_key(9618)) _bstr_t Imodel::GetPref_ViewDimetric ( );
__declspec(implementation_key(9619)) void Imodel::PutPref_ViewDimetric ( _bstr_t _val );
__declspec(implementation_key(9620)) _bstr_t Imodel::GetPref_ViewIsometric ( );
__declspec(implementation_key(9621)) void Imodel::PutPref_ViewIsometric ( _bstr_t _val );
__declspec(implementation_key(9622)) _bstr_t Imodel::GetPref_ViewTrimetric ( );
__declspec(implementation_key(9623)) void Imodel::PutPref_ViewTrimetric ( _bstr_t _val );
__declspec(implementation_key(9624)) _bstr_t Imodel::GetPref_StartupProg ( );
__declspec(implementation_key(9625)) void Imodel::PutPref_StartupProg ( _bstr_t _val );
__declspec(implementation_key(9626)) _bstr_t Imodel::GetPref_CustomToolsPath ( );
__declspec(implementation_key(9627)) void Imodel::PutPref_CustomToolsPath ( _bstr_t _val );
__declspec(implementation_key(9628)) _bstr_t Imodel::GetPref_DBScratch ( );
__declspec(implementation_key(9629)) void Imodel::PutPref_DBScratch ( _bstr_t _val );
__declspec(implementation_key(9630)) int Imodel::GetPref_LengthBasedMeshSize ( );
__declspec(implementation_key(9631)) void Imodel::PutPref_LengthBasedMeshSize ( int _val );
__declspec(implementation_key(9632)) _bstr_t Imodel::GetPref_MsgWndFont ( );
__declspec(implementation_key(9633)) void Imodel::PutPref_MsgWndFont ( _bstr_t _val );
__declspec(implementation_key(9634)) _bstr_t Imodel::GetPref_NetKeyDir ( );
__declspec(implementation_key(9635)) void Imodel::PutPref_NetKeyDir ( _bstr_t _val );
__declspec(implementation_key(9636)) VARIANT_BOOL Imodel::GetPref_PictureCopyTextForXY ( );
__declspec(implementation_key(9637)) void Imodel::PutPref_PictureCopyTextForXY ( VARIANT_BOOL _val );
__declspec(implementation_key(9638)) VARIANT_BOOL Imodel::GetPref_WorkplaneNotVisible ( );
__declspec(implementation_key(9639)) void Imodel::PutPref_WorkplaneNotVisible ( VARIANT_BOOL _val );
__declspec(implementation_key(9640)) int Imodel::GetPref_DefContourPalette ( );
__declspec(implementation_key(9641)) void Imodel::PutPref_DefContourPalette ( int _val );
__declspec(implementation_key(9642)) VARIANT_BOOL Imodel::GetPref_MetafileToClip ( );
__declspec(implementation_key(9643)) void Imodel::PutPref_MetafileToClip ( VARIANT_BOOL _val );
__declspec(implementation_key(9644)) VARIANT_BOOL Imodel::GetPref_RenderHW ( );
__declspec(implementation_key(9645)) void Imodel::PutPref_RenderHW ( VARIANT_BOOL _val );
__declspec(implementation_key(9646)) VARIANT_BOOL Imodel::GetPref_RenderMidside ( );
__declspec(implementation_key(9647)) void Imodel::PutPref_RenderMidside ( VARIANT_BOOL _val );
__declspec(implementation_key(9648)) VARIANT_BOOL Imodel::GetPref_RepeateCreate ( );
__declspec(implementation_key(9649)) void Imodel::PutPref_RepeateCreate ( VARIANT_BOOL _val );
__declspec(implementation_key(9650)) int Imodel::GetPref_TooltipDelay ( );
__declspec(implementation_key(9651)) void Imodel::PutPref_TooltipDelay ( int _val );
__declspec(implementation_key(9652)) int Imodel::GetPref_TooltipDuration ( );
__declspec(implementation_key(9653)) void Imodel::PutPref_TooltipDuration ( int _val );
__declspec(implementation_key(9654)) VARIANT_BOOL Imodel::GetPref_TrackMousePick ( );
__declspec(implementation_key(9655)) void Imodel::PutPref_TrackMousePick ( VARIANT_BOOL _val );
__declspec(implementation_key(9656)) VARIANT_BOOL Imodel::GetPref_PickAllInside ( );
__declspec(implementation_key(9657)) void Imodel::PutPref_PickAllInside ( VARIANT_BOOL _val );
__declspec(implementation_key(9658)) int Imodel::GetPref_NastranMemory ( );
__declspec(implementation_key(9659)) void Imodel::PutPref_NastranMemory ( int _val );
__declspec(implementation_key(9660)) int Imodel::GetPref_NastranOutputTo ( );
__declspec(implementation_key(9661)) void Imodel::PutPref_NastranOutputTo ( int _val );
__declspec(implementation_key(9662)) _bstr_t Imodel::GetPref_NastranOutputPath ( );
__declspec(implementation_key(9663)) void Imodel::PutPref_NastranOutputPath ( _bstr_t _val );
__declspec(implementation_key(9664)) VARIANT_BOOL Imodel::GetPref_BackupModel ( );
__declspec(implementation_key(9665)) void Imodel::PutPref_BackupModel ( VARIANT_BOOL _val );
__declspec(implementation_key(9666)) VARIANT_BOOL Imodel::GetPref_AutomaticTitles ( );
__declspec(implementation_key(9667)) void Imodel::PutPref_AutomaticTitles ( VARIANT_BOOL _val );
__declspec(implementation_key(9668)) VARIANT_BOOL Imodel::GetPref_DeleteScratchFile ( );
__declspec(implementation_key(9669)) void Imodel::PutPref_DeleteScratchFile ( VARIANT_BOOL _val );
__declspec(implementation_key(9670)) VARIANT_BOOL Imodel::GetPref_RunProgNewModels ( );
__declspec(implementation_key(9671)) void Imodel::PutPref_RunProgNewModels ( VARIANT_BOOL _val );
__declspec(implementation_key(9672)) VARIANT_BOOL Imodel::GetPref_MeshInMemory ( );
__declspec(implementation_key(9673)) void Imodel::PutPref_MeshInMemory ( VARIANT_BOOL _val );
__declspec(implementation_key(9674)) VARIANT_BOOL Imodel::GetPref_FastTriMesh ( );
__declspec(implementation_key(9675)) void Imodel::PutPref_FastTriMesh ( VARIANT_BOOL _val );
__declspec(implementation_key(9676)) VARIANT_BOOL Imodel::GetPref_TimedSaveNotify ( );
__declspec(implementation_key(9677)) void Imodel::PutPref_TimedSaveNotify ( VARIANT_BOOL _val );
__declspec(implementation_key(9678)) VARIANT_BOOL Imodel::GetPref_TimedSaveOn ( );
__declspec(implementation_key(9679)) void Imodel::PutPref_TimedSaveOn ( VARIANT_BOOL _val );
__declspec(implementation_key(9680)) VARIANT_BOOL Imodel::GetPref_GeomLogFile ( );
__declspec(implementation_key(9681)) void Imodel::PutPref_GeomLogFile ( VARIANT_BOOL _val );
__declspec(implementation_key(9682)) VARIANT_BOOL Imodel::GetPref_AdjMidsideGeomLoad ( );
__declspec(implementation_key(9683)) void Imodel::PutPref_AdjMidsideGeomLoad ( VARIANT_BOOL _val );
__declspec(implementation_key(9684)) VARIANT_BOOL Imodel::GetPref_ReadComments ( );
__declspec(implementation_key(9685)) void Imodel::PutPref_ReadComments ( VARIANT_BOOL _val );
__declspec(implementation_key(9686)) VARIANT_BOOL Imodel::GetPref_WriteComments ( );
__declspec(implementation_key(9687)) void Imodel::PutPref_WriteComments ( VARIANT_BOOL _val );
__declspec(implementation_key(9688)) VARIANT_BOOL Imodel::GetPref_ComputePrincipal ( );
__declspec(implementation_key(9689)) void Imodel::PutPref_ComputePrincipal ( VARIANT_BOOL _val );
__declspec(implementation_key(9690)) VARIANT_BOOL Imodel::GetPref_AssumeEngrStrain ( );
__declspec(implementation_key(9691)) void Imodel::PutPref_AssumeEngrStrain ( VARIANT_BOOL _val );
__declspec(implementation_key(9692)) VARIANT_BOOL Imodel::GetPref_ReadDirCos ( );
__declspec(implementation_key(9693)) void Imodel::PutPref_ReadDirCos ( VARIANT_BOOL _val );
__declspec(implementation_key(9694)) VARIANT_BOOL Imodel::GetPref_UseVisQ ( );
__declspec(implementation_key(9695)) void Imodel::PutPref_UseVisQ ( VARIANT_BOOL _val );
__declspec(implementation_key(9696)) VARIANT_BOOL Imodel::GetPref_KeepSolverWindow ( );
__declspec(implementation_key(9697)) void Imodel::PutPref_KeepSolverWindow ( VARIANT_BOOL _val );
__declspec(implementation_key(9698)) VARIANT_BOOL Imodel::GetPref_MinimizeDuringSolve ( );
__declspec(implementation_key(9699)) void Imodel::PutPref_MinimizeDuringSolve ( VARIANT_BOOL _val );
__declspec(implementation_key(9700)) int Imodel::GetPref_DBCacheBlocksPerPage ( );
__declspec(implementation_key(9701)) void Imodel::PutPref_DBCacheBlocksPerPage ( int _val );
__declspec(implementation_key(9702)) int Imodel::GetPref_DBCacheMaxMemoryPct ( );
__declspec(implementation_key(9703)) void Imodel::PutPref_DBCacheMaxMemoryPct ( int _val );
__declspec(implementation_key(9704)) int Imodel::GetPref_DBCacheMaxLabel ( );
__declspec(implementation_key(9705)) void Imodel::PutPref_DBCacheMaxLabel ( int _val );
__declspec(implementation_key(9706)) int Imodel::GetPref_DBUndoLevels ( );
__declspec(implementation_key(9707)) void Imodel::PutPref_DBUndoLevels ( int _val );
__declspec(implementation_key(9708)) int Imodel::GetPref_DBLowDiskWarning ( );
__declspec(implementation_key(9709)) void Imodel::PutPref_DBLowDiskWarning ( int _val );
__declspec(implementation_key(9710)) int Imodel::GetPref_TimedSaveCommands ( );
__declspec(implementation_key(9711)) void Imodel::PutPref_TimedSaveCommands ( int _val );
__declspec(implementation_key(9712)) int Imodel::GetPref_TimedSaveInterval ( );
__declspec(implementation_key(9713)) void Imodel::PutPref_TimedSaveInterval ( int _val );
__declspec(implementation_key(9714)) int Imodel::GetPref_GeomEngine ( );
__declspec(implementation_key(9715)) void Imodel::PutPref_GeomEngine ( int _val );
__declspec(implementation_key(9716)) enum zAnalysisTranslator Imodel::GetPref_AnalysisProg ( );
__declspec(implementation_key(9717)) void Imodel::PutPref_AnalysisProg ( enum zAnalysisTranslator _val );
__declspec(implementation_key(9718)) enum zAnalysisType Imodel::GetPref_AnalysisType ( );
__declspec(implementation_key(9719)) void Imodel::PutPref_AnalysisType ( enum zAnalysisType _val );
__declspec(implementation_key(9720)) int Imodel::GetPref_InterfaceStyle ( );
__declspec(implementation_key(9721)) void Imodel::PutPref_InterfaceStyle ( int _val );
__declspec(implementation_key(9722)) int Imodel::GetPref_NeutralDigits ( );
__declspec(implementation_key(9723)) void Imodel::PutPref_NeutralDigits ( int _val );
__declspec(implementation_key(9724)) int Imodel::GetPref_SolverMemory ( );
__declspec(implementation_key(9725)) void Imodel::PutPref_SolverMemory ( int _val );
__declspec(implementation_key(9726)) VARIANT_BOOL Imodel::GetPref_LoadModifyRotate ( );
__declspec(implementation_key(9727)) void Imodel::PutPref_LoadModifyRotate ( VARIANT_BOOL _val );
__declspec(implementation_key(9728)) int Imodel::GetPref_RecentlyUsedFiles ( );
__declspec(implementation_key(9729)) void Imodel::PutPref_RecentlyUsedFiles ( int _val );
__declspec(implementation_key(9730)) int Imodel::GetPref_LibViewNumber ( );
__declspec(implementation_key(9731)) void Imodel::PutPref_LibViewNumber ( int _val );
__declspec(implementation_key(9732)) int Imodel::GetPref_ViewDynamicMode ( );
__declspec(implementation_key(9733)) void Imodel::PutPref_ViewDynamicMode ( int _val );
__declspec(implementation_key(9734)) int Imodel::GetPref_MsgWndFontSize ( );
__declspec(implementation_key(9735)) void Imodel::PutPref_MsgWndFontSize ( int _val );
__declspec(implementation_key(9736)) enum zColor Imodel::GetPref_MsgWndBackColor ( );
__declspec(implementation_key(9737)) void Imodel::PutPref_MsgWndBackColor ( enum zColor _val );
__declspec(implementation_key(9738)) enum zColor Imodel::GetPref_MsgWndErrorColor ( );
__declspec(implementation_key(9739)) void Imodel::PutPref_MsgWndErrorColor ( enum zColor _val );
__declspec(implementation_key(9740)) enum zColor Imodel::GetPref_MsgWndHighColor ( );
__declspec(implementation_key(9741)) void Imodel::PutPref_MsgWndHighColor ( enum zColor _val );
__declspec(implementation_key(9742)) enum zColor Imodel::GetPref_MsgWndTextColor ( );
__declspec(implementation_key(9743)) void Imodel::PutPref_MsgWndTextColor ( enum zColor _val );
__declspec(implementation_key(9744)) enum zColor Imodel::GetPref_MsgWndWarnColor ( );
__declspec(implementation_key(9745)) void Imodel::PutPref_MsgWndWarnColor ( enum zColor _val );
__declspec(implementation_key(9746)) int Imodel::GetPref_ScrollBackLines ( );
__declspec(implementation_key(9747)) void Imodel::PutPref_ScrollBackLines ( int _val );
__declspec(implementation_key(9748)) double Imodel::GetPref_AspectRatio ( );
__declspec(implementation_key(9749)) void Imodel::PutPref_AspectRatio ( double _val );
__declspec(implementation_key(9750)) double Imodel::GetPref_DeltaAngle ( );
__declspec(implementation_key(9751)) void Imodel::PutPref_DeltaAngle ( double _val );
__declspec(implementation_key(9752)) double Imodel::GetPref_GeometryScale ( );
__declspec(implementation_key(9753)) void Imodel::PutPref_GeometryScale ( double _val );
__declspec(implementation_key(9754)) double Imodel::GetPref_GeomLoadEdgeFactor ( );
__declspec(implementation_key(9755)) void Imodel::PutPref_GeomLoadEdgeFactor ( double _val );
__declspec(implementation_key(9756)) double Imodel::GetPref_GeomLoadQuadFactor ( );
__declspec(implementation_key(9757)) void Imodel::PutPref_GeomLoadQuadFactor ( double _val );
__declspec(implementation_key(9758)) double Imodel::GetPref_GeomLoadTriFactor ( );
__declspec(implementation_key(9759)) void Imodel::PutPref_GeomLoadTriFactor ( double _val );
__declspec(implementation_key(9760)) double Imodel::GetPref_NeutralVersion ( );
__declspec(implementation_key(9761)) void Imodel::PutPref_NeutralVersion ( double _val );
__declspec(implementation_key(9762)) double Imodel::GetPref_ViewDynamSpeed ( );
__declspec(implementation_key(9763)) void Imodel::PutPref_ViewDynamSpeed ( double _val );
__declspec(implementation_key(9764)) double Imodel::GetPref_WtmassFactor ( );
__declspec(implementation_key(9765)) void Imodel::PutPref_WtmassFactor ( double _val );
__declspec(implementation_key(9766)) VARIANT_BOOL Imodel::GetPref_RenderBeamEdges ( );
__declspec(implementation_key(9767)) void Imodel::PutPref_RenderBeamEdges ( VARIANT_BOOL _val );
__declspec(implementation_key(9768)) int Imodel::GetPref_RenderBitmapAlignment ( );
__declspec(implementation_key(9769)) void Imodel::PutPref_RenderBitmapAlignment ( int _val );
__declspec(implementation_key(9770)) VARIANT_BOOL Imodel::GetPref_RenderMemoryOpt ( );
__declspec(implementation_key(9771)) void Imodel::PutPref_RenderMemoryOpt ( VARIANT_BOOL _val );
__declspec(implementation_key(9772)) int Imodel::GetPref_RenderPixelFormat ( );
__declspec(implementation_key(9773)) void Imodel::PutPref_RenderPixelFormat ( int _val );
__declspec(implementation_key(9774)) VARIANT_BOOL Imodel::GetPref_RenderTex2D ( );
__declspec(implementation_key(9775)) void Imodel::PutPref_RenderTex2D ( VARIANT_BOOL _val );
__declspec(implementation_key(9776)) VARIANT_BOOL Imodel::GetPref_RenderTexAllTri ( );
__declspec(implementation_key(9777)) void Imodel::PutPref_RenderTexAllTri ( VARIANT_BOOL _val );
__declspec(implementation_key(9778)) VARIANT_BOOL Imodel::GetPref_RenderTexSmooth ( );
__declspec(implementation_key(9779)) void Imodel::PutPref_RenderTexSmooth ( VARIANT_BOOL _val );
__declspec(implementation_key(9780)) int Imodel::GetPref_RenderTexNumber ( );
__declspec(implementation_key(9781)) void Imodel::PutPref_RenderTexNumber ( int _val );
__declspec(implementation_key(9782)) VARIANT_BOOL Imodel::GetPref_RenderTiming ( );
__declspec(implementation_key(9783)) void Imodel::PutPref_RenderTiming ( VARIANT_BOOL _val );
__declspec(implementation_key(9784)) int Imodel::GetPref_RenderTDRProtect ( );
__declspec(implementation_key(9785)) void Imodel::PutPref_RenderTDRProtect ( int _val );
__declspec(implementation_key(9786)) VARIANT_BOOL Imodel::GetInfo_WorkplaneModelAdjust ( );
__declspec(implementation_key(9787)) void Imodel::PutInfo_WorkplaneModelAdjust ( VARIANT_BOOL _val );
__declspec(implementation_key(9788)) VARIANT_BOOL Imodel::GetInfo_WorkplaneSurfaceAdjust ( );
__declspec(implementation_key(9789)) void Imodel::PutInfo_WorkplaneSurfaceAdjust ( VARIANT_BOOL _val );
__declspec(implementation_key(9790)) VARIANT_BOOL Imodel::GetInfo_ModelNeedBox ( );
__declspec(implementation_key(9791)) void Imodel::PutInfo_ModelNeedBox ( VARIANT_BOOL _val );
__declspec(implementation_key(9792)) VARIANT_BOOL Imodel::GetInfo_UpdateAllViews ( );
__declspec(implementation_key(9793)) void Imodel::PutInfo_UpdateAllViews ( VARIANT_BOOL _val );
__declspec(implementation_key(9794)) VARIANT_BOOL Imodel::GetInfo_TranslateNotes ( );
__declspec(implementation_key(9795)) void Imodel::PutInfo_TranslateNotes ( VARIANT_BOOL _val );
__declspec(implementation_key(9796)) VARIANT_BOOL Imodel::GetInfo_SnapFullPrecision ( );
__declspec(implementation_key(9797)) void Imodel::PutInfo_SnapFullPrecision ( VARIANT_BOOL _val );
__declspec(implementation_key(9798)) VARIANT_BOOL Imodel::GetInfo_SnapCoordOnly ( );
__declspec(implementation_key(9799)) void Imodel::PutInfo_SnapCoordOnly ( VARIANT_BOOL _val );
__declspec(implementation_key(9800)) VARIANT_BOOL Imodel::GetInfo_ViewShowErase ( );
__declspec(implementation_key(9801)) void Imodel::PutInfo_ViewShowErase ( VARIANT_BOOL _val );
__declspec(implementation_key(9802)) VARIANT_BOOL Imodel::GetInfo_ViewShowUseColor ( );
__declspec(implementation_key(9803)) void Imodel::PutInfo_ViewShowUseColor ( VARIANT_BOOL _val );
__declspec(implementation_key(9804)) int Imodel::GetInfo_CommandNumber ( );
__declspec(implementation_key(9805)) void Imodel::PutInfo_CommandNumber ( int _val );
__declspec(implementation_key(9806)) int Imodel::GetInfo_OutputCSys ( );
__declspec(implementation_key(9807)) void Imodel::PutInfo_OutputCSys ( int _val );
__declspec(implementation_key(9808)) enum zNodeType Imodel::GetInfo_NodeType ( );
__declspec(implementation_key(9809)) void Imodel::PutInfo_NodeType ( enum zNodeType _val );
__declspec(implementation_key(9810)) enum zColor Imodel::GetInfo_TextBorderColor ( );
__declspec(implementation_key(9811)) void Imodel::PutInfo_TextBorderColor ( enum zColor _val );
__declspec(implementation_key(9812)) int Imodel::GetInfo_WorkplaneOnSurface ( );
__declspec(implementation_key(9813)) void Imodel::PutInfo_WorkplaneOnSurface ( int _val );
__declspec(implementation_key(9814)) int Imodel::GetInfo_WorkplaneOnSurfacePrev ( );
__declspec(implementation_key(9815)) void Imodel::PutInfo_WorkplaneOnSurfacePrev ( int _val );
__declspec(implementation_key(9816)) int Imodel::GetInfo_SnapTo ( );
__declspec(implementation_key(9817)) void Imodel::PutInfo_SnapTo ( int _val );
__declspec(implementation_key(9818)) int Imodel::GetInfo_SnapStyle ( );
__declspec(implementation_key(9819)) void Imodel::PutInfo_SnapStyle ( int _val );
__declspec(implementation_key(9820)) int Imodel::GetInfo_SnapSpacingMode ( );
__declspec(implementation_key(9821)) void Imodel::PutInfo_SnapSpacingMode ( int _val );
__declspec(implementation_key(9822)) int Imodel::GetInfo_WorkplaneTics ( );
__declspec(implementation_key(9823)) void Imodel::PutInfo_WorkplaneTics ( int _val );
__declspec(implementation_key(9824)) int Imodel::GetInfo_MatlAngleMethod ( );
__declspec(implementation_key(9825)) void Imodel::PutInfo_MatlAngleMethod ( int _val );
__declspec(implementation_key(9826)) int Imodel::GetInfo_MatlAngleDir ( );
__declspec(implementation_key(9827)) void Imodel::PutInfo_MatlAngleDir ( int _val );
__declspec(implementation_key(9828)) int Imodel::GetInfo_MatlAngleCSys ( );
__declspec(implementation_key(9829)) void Imodel::PutInfo_MatlAngleCSys ( int _val );
__declspec(implementation_key(9830)) int Imodel::GetInfo_MeshSizeMinElem ( );
__declspec(implementation_key(9831)) void Imodel::PutInfo_MeshSizeMinElem ( int _val );
__declspec(implementation_key(9832)) enum zColor Imodel::GetInfo_ViewShowColor ( );
__declspec(implementation_key(9833)) void Imodel::PutInfo_ViewShowColor ( enum zColor _val );
__declspec(implementation_key(9834)) enum zDataType Imodel::GetInfo_ViewShowEntity ( );
__declspec(implementation_key(9835)) void Imodel::PutInfo_ViewShowEntity ( enum zDataType _val );
__declspec(implementation_key(9836)) int Imodel::GetInfo_ViewShowLabel ( );
__declspec(implementation_key(9837)) void Imodel::PutInfo_ViewShowLabel ( int _val );
__declspec(implementation_key(9838)) int Imodel::GetInfo_GroupAutomaticAdd ( );
__declspec(implementation_key(9839)) void Imodel::PutInfo_GroupAutomaticAdd ( int _val );
__declspec(implementation_key(9840)) int Imodel::GetInfo_SplineOrder ( );
__declspec(implementation_key(9841)) void Imodel::PutInfo_SplineOrder ( int _val );
__declspec(implementation_key(9842)) int Imodel::GetInfo_LayerNoPick ( );
__declspec(implementation_key(9843)) void Imodel::PutInfo_LayerNoPick ( int _val );
__declspec(implementation_key(9844)) int Imodel::GetInfo_MatlUserType ( );
__declspec(implementation_key(9845)) void Imodel::PutInfo_MatlUserType ( int _val );
__declspec(implementation_key(9846)) double Imodel::GetInfo_Version ( );
__declspec(implementation_key(9847)) void Imodel::PutInfo_Version ( double _val );
__declspec(implementation_key(9848)) double Imodel::GetInfo_WorkplaneLabels ( );
__declspec(implementation_key(9849)) void Imodel::PutInfo_WorkplaneLabels ( double _val );
__declspec(implementation_key(9850)) double Imodel::GetInfo_DefaultX ( );
__declspec(implementation_key(9851)) void Imodel::PutInfo_DefaultX ( double _val );
__declspec(implementation_key(9852)) double Imodel::GetInfo_DefaultY ( );
__declspec(implementation_key(9853)) void Imodel::PutInfo_DefaultY ( double _val );
__declspec(implementation_key(9854)) double Imodel::GetInfo_DefaultZ ( );
__declspec(implementation_key(9855)) void Imodel::PutInfo_DefaultZ ( double _val );
__declspec(implementation_key(9856)) double Imodel::GetInfo_LineLength ( );
__declspec(implementation_key(9857)) void Imodel::PutInfo_LineLength ( double _val );
__declspec(implementation_key(9858)) double Imodel::GetInfo_MatlAngle ( );
__declspec(implementation_key(9859)) void Imodel::PutInfo_MatlAngle ( double _val );
__declspec(implementation_key(9860)) double Imodel::GetInfo_MeshSizeDefault ( );
__declspec(implementation_key(9861)) void Imodel::PutInfo_MeshSizeDefault ( double _val );
__declspec(implementation_key(9862)) double Imodel::GetInfo_GeometryScale ( );
__declspec(implementation_key(9863)) void Imodel::PutInfo_GeometryScale ( double _val );
__declspec(implementation_key(9864)) VARIANT_BOOL Imodel::GetTool_CursorSingle ( );
__declspec(implementation_key(9865)) void Imodel::PutTool_CursorSingle ( VARIANT_BOOL _val );
__declspec(implementation_key(9866)) double Imodel::GetTool_MergeTolerance ( );
__declspec(implementation_key(9867)) void Imodel::PutTool_MergeTolerance ( double _val );
__declspec(implementation_key(9868)) int Imodel::GetPrint_Copies ( );
__declspec(implementation_key(9869)) void Imodel::PutPrint_Copies ( int _val );
__declspec(implementation_key(9870)) VARIANT_BOOL Imodel::GetTool_MergeToleranceAuto ( );
__declspec(implementation_key(9871)) void Imodel::PutTool_MergeToleranceAuto ( VARIANT_BOOL _val );
__declspec(implementation_key(9872)) VARIANT_BOOL Imodel::GetSolid_UpdateActive ( );
__declspec(implementation_key(9873)) void Imodel::PutSolid_UpdateActive ( VARIANT_BOOL _val );
__declspec(implementation_key(9874)) VARIANT_BOOL Imodel::GetSolid_UpdateDelete ( );
__declspec(implementation_key(9875)) void Imodel::PutSolid_UpdateDelete ( VARIANT_BOOL _val );
__declspec(implementation_key(9876)) int Imodel::GetSolid_UpdateResizeMode ( );
__declspec(implementation_key(9877)) void Imodel::PutSolid_UpdateResizeMode ( int _val );
__declspec(implementation_key(9878)) double Imodel::GetSolid_UpdateResizeTol ( );
__declspec(implementation_key(9879)) void Imodel::PutSolid_UpdateResizeTol ( double _val );
__declspec(implementation_key(9880)) __int64 Imodel::GethMainWnd ( );
__declspec(implementation_key(9881)) void Imodel::PuthMainWnd ( __int64 _val );
__declspec(implementation_key(9882)) __int64 Imodel::GethListWnd ( );
__declspec(implementation_key(9883)) void Imodel::PuthListWnd ( __int64 _val );
__declspec(implementation_key(9884)) _bstr_t Imodel::GetModelName ( );
__declspec(implementation_key(9885)) void Imodel::PutModelName ( _bstr_t _val );
__declspec(implementation_key(9886)) _bstr_t Imodel::GetScratchName ( );
__declspec(implementation_key(9887)) void Imodel::PutScratchName ( _bstr_t _val );
__declspec(implementation_key(9888)) _bstr_t Imodel::GetFullScratchName ( );
__declspec(implementation_key(9889)) void Imodel::PutFullScratchName ( _bstr_t _val );
__declspec(implementation_key(9890)) _bstr_t Imodel::GetExePath ( );
__declspec(implementation_key(9891)) void Imodel::PutExePath ( _bstr_t _val );
__declspec(implementation_key(9892)) _bstr_t Imodel::GetSerialNumber ( );
__declspec(implementation_key(9893)) void Imodel::PutSerialNumber ( _bstr_t _val );
__declspec(implementation_key(9894)) __int64 Imodel::GetEventLParam ( );
__declspec(implementation_key(9895)) void Imodel::PutEventLParam ( __int64 _val );
__declspec(implementation_key(9896)) _variant_t Imodel::GetvPref_AngleDimetric ( );
__declspec(implementation_key(9897)) void Imodel::PutvPref_AngleDimetric ( const _variant_t & _val );
__declspec(implementation_key(9898)) _variant_t Imodel::GetvPref_AngleIsometric ( );
__declspec(implementation_key(9899)) void Imodel::PutvPref_AngleIsometric ( const _variant_t & _val );
__declspec(implementation_key(9900)) _variant_t Imodel::GetvPref_AngleTrimetric ( );
__declspec(implementation_key(9901)) void Imodel::PutvPref_AngleTrimetric ( const _variant_t & _val );
__declspec(implementation_key(9902)) _variant_t Imodel::GetvPref_RenderRotate ( );
__declspec(implementation_key(9903)) void Imodel::PutvPref_RenderRotate ( const _variant_t & _val );
__declspec(implementation_key(9904)) _variant_t Imodel::GetvInfo_PermBC ( );
__declspec(implementation_key(9905)) void Imodel::PutvInfo_PermBC ( const _variant_t & _val );
__declspec(implementation_key(9906)) _variant_t Imodel::GetvInfo_WorkplaneRuler ( );
__declspec(implementation_key(9907)) void Imodel::PutvInfo_WorkplaneRuler ( const _variant_t & _val );
__declspec(implementation_key(9908)) _variant_t Imodel::GetvInfo_MaxID ( );
__declspec(implementation_key(9909)) void Imodel::PutvInfo_MaxID ( const _variant_t & _val );
__declspec(implementation_key(9910)) _variant_t Imodel::GetvInfo_MinID ( );
__declspec(implementation_key(9911)) void Imodel::PutvInfo_MinID ( const _variant_t & _val );
__declspec(implementation_key(9912)) _variant_t Imodel::GetvInfo_Count ( );
__declspec(implementation_key(9913)) void Imodel::PutvInfo_Count ( const _variant_t & _val );
__declspec(implementation_key(9914)) _variant_t Imodel::GetvInfo_ElemFormulation1 ( );
__declspec(implementation_key(9915)) void Imodel::PutvInfo_ElemFormulation1 ( const _variant_t & _val );
__declspec(implementation_key(9916)) _variant_t Imodel::GetvInfo_ElemFormulation2 ( );
__declspec(implementation_key(9917)) void Imodel::PutvInfo_ElemFormulation2 ( const _variant_t & _val );
__declspec(implementation_key(9918)) _variant_t Imodel::GetvInfo_WorkplaneOrigin ( );
__declspec(implementation_key(9919)) void Imodel::PutvInfo_WorkplaneOrigin ( const _variant_t & _val );
__declspec(implementation_key(9920)) _variant_t Imodel::GetvInfo_WorkplaneX ( );
__declspec(implementation_key(9921)) void Imodel::PutvInfo_WorkplaneX ( const _variant_t & _val );
__declspec(implementation_key(9922)) _variant_t Imodel::GetvInfo_WorkplaneY ( );
__declspec(implementation_key(9923)) void Imodel::PutvInfo_WorkplaneY ( const _variant_t & _val );
__declspec(implementation_key(9924)) _variant_t Imodel::GetvInfo_WorkplaneZ ( );
__declspec(implementation_key(9925)) void Imodel::PutvInfo_WorkplaneZ ( const _variant_t & _val );
__declspec(implementation_key(9926)) _variant_t Imodel::GetvInfo_WorkplanePrevOrigin ( );
__declspec(implementation_key(9927)) void Imodel::PutvInfo_WorkplanePrevOrigin ( const _variant_t & _val );
__declspec(implementation_key(9928)) _variant_t Imodel::GetvInfo_WorkplanePrevX ( );
__declspec(implementation_key(9929)) void Imodel::PutvInfo_WorkplanePrevX ( const _variant_t & _val );
__declspec(implementation_key(9930)) _variant_t Imodel::GetvInfo_WorkplanePrevY ( );
__declspec(implementation_key(9931)) void Imodel::PutvInfo_WorkplanePrevY ( const _variant_t & _val );
__declspec(implementation_key(9932)) _variant_t Imodel::GetvInfo_WorkplanePrevZ ( );
__declspec(implementation_key(9933)) void Imodel::PutvInfo_WorkplanePrevZ ( const _variant_t & _val );
__declspec(implementation_key(9934)) _variant_t Imodel::GetvInfo_SnapSpacing ( );
__declspec(implementation_key(9935)) void Imodel::PutvInfo_SnapSpacing ( const _variant_t & _val );
__declspec(implementation_key(9936)) _variant_t Imodel::GetvInfo_WorkplaneSizeX ( );
__declspec(implementation_key(9937)) void Imodel::PutvInfo_WorkplaneSizeX ( const _variant_t & _val );
__declspec(implementation_key(9938)) _variant_t Imodel::GetvInfo_WorkplaneSizeY ( );
__declspec(implementation_key(9939)) void Imodel::PutvInfo_WorkplaneSizeY ( const _variant_t & _val );
__declspec(implementation_key(9940)) _variant_t Imodel::GetvInfo_MatlAngleVec ( );
__declspec(implementation_key(9941)) void Imodel::PutvInfo_MatlAngleVec ( const _variant_t & _val );
__declspec(implementation_key(9942)) _variant_t Imodel::GetvTool_CursorXYZ ( );
__declspec(implementation_key(9943)) void Imodel::PutvTool_CursorXYZ ( const _variant_t & _val );
__declspec(implementation_key(9944)) _variant_t Imodel::GetvInfo_ModelSizeX ( );
__declspec(implementation_key(9945)) void Imodel::PutvInfo_ModelSizeX ( const _variant_t & _val );
__declspec(implementation_key(9946)) _variant_t Imodel::GetvInfo_ModelSizeY ( );
__declspec(implementation_key(9947)) void Imodel::PutvInfo_ModelSizeY ( const _variant_t & _val );
__declspec(implementation_key(9948)) _variant_t Imodel::GetvInfo_ModelSizeZ ( );
__declspec(implementation_key(9949)) void Imodel::PutvInfo_ModelSizeZ ( const _variant_t & _val );
__declspec(implementation_key(9950)) _variant_t Imodel::GetvPref_EntityColor ( );
__declspec(implementation_key(9951)) void Imodel::PutvPref_EntityColor ( const _variant_t & _val );
__declspec(implementation_key(9952)) _variant_t Imodel::GetvInfo_Increment ( );
__declspec(implementation_key(9953)) void Imodel::PutvInfo_Increment ( const _variant_t & _val );
__declspec(implementation_key(9954)) _variant_t Imodel::GetvInfo_NextID ( );
__declspec(implementation_key(9955)) void Imodel::PutvInfo_NextID ( const _variant_t & _val );
__declspec(implementation_key(9956)) _variant_t Imodel::GetvInfo_ActiveID ( );
__declspec(implementation_key(9957)) void Imodel::PutvInfo_ActiveID ( const _variant_t & _val );
__declspec(implementation_key(9958)) _variant_t Imodel::GetvInfo_ActiveType ( );
__declspec(implementation_key(9959)) void Imodel::PutvInfo_ActiveType ( const _variant_t & _val );
__declspec(implementation_key(9960)) _variant_t Imodel::GetvInfo_Color ( );
__declspec(implementation_key(9961)) void Imodel::PutvInfo_Color ( const _variant_t & _val );
__declspec(implementation_key(9962)) _variant_t Imodel::GetvInfo_SurfDivisionsLinear ( );
__declspec(implementation_key(9963)) void Imodel::PutvInfo_SurfDivisionsLinear ( const _variant_t & _val );
__declspec(implementation_key(9964)) _variant_t Imodel::GetvInfo_SurfDivisionsCurved ( );
__declspec(implementation_key(9965)) void Imodel::PutvInfo_SurfDivisionsCurved ( const _variant_t & _val );
__declspec(implementation_key(9966)) VARIANT_BOOL Imodel::GetPref_ReverseMouseWheel ( );
__declspec(implementation_key(9967)) void Imodel::PutPref_ReverseMouseWheel ( VARIANT_BOOL _val );
__declspec(implementation_key(9968)) VARIANT_BOOL Imodel::GetPref_ReversePanZoom ( );
__declspec(implementation_key(9969)) void Imodel::PutPref_ReversePanZoom ( VARIANT_BOOL _val );
__declspec(implementation_key(9970)) VARIANT_BOOL Imodel::GetPref_AltAccelerator ( );
__declspec(implementation_key(9971)) void Imodel::PutPref_AltAccelerator ( VARIANT_BOOL _val );
__declspec(implementation_key(9972)) VARIANT_BOOL Imodel::GetPref_AltTheme ( );
__declspec(implementation_key(9973)) void Imodel::PutPref_AltTheme ( VARIANT_BOOL _val );
__declspec(implementation_key(9974)) VARIANT_BOOL Imodel::GetPref_ViewLogoScreenRes ( );
__declspec(implementation_key(9975)) void Imodel::PutPref_ViewLogoScreenRes ( VARIANT_BOOL _val );
__declspec(implementation_key(9976)) _bstr_t Imodel::GetPref_ViewBkgdBitmap ( );
__declspec(implementation_key(9977)) void Imodel::PutPref_ViewBkgdBitmap ( _bstr_t _val );
__declspec(implementation_key(9978)) _bstr_t Imodel::GetPref_ViewLogo ( );
__declspec(implementation_key(9979)) void Imodel::PutPref_ViewLogo ( _bstr_t _val );
__declspec(implementation_key(9980)) int Imodel::GetDialogAutoAnswer ( );
__declspec(implementation_key(9981)) void Imodel::PutDialogAutoAnswer ( int _val );
__declspec(implementation_key(9982)) _bstr_t Imodel::GetPref_MessageFont ( );
__declspec(implementation_key(9983)) void Imodel::PutPref_MessageFont ( _bstr_t _val );
__declspec(implementation_key(9984)) _bstr_t Imodel::GetPref_ListingFont ( );
__declspec(implementation_key(9985)) void Imodel::PutPref_ListingFont ( _bstr_t _val );
__declspec(implementation_key(9986)) _bstr_t Imodel::GetPref_ProgramFont ( );
__declspec(implementation_key(9987)) void Imodel::PutPref_ProgramFont ( _bstr_t _val );
__declspec(implementation_key(9988)) int Imodel::GetPref_ProgramFontSize ( );
__declspec(implementation_key(9989)) void Imodel::PutPref_ProgramFontSize ( int _val );
__declspec(implementation_key(9990)) enum zColor Imodel::GetPref_MsgWndCmdColor ( );
__declspec(implementation_key(9991)) void Imodel::PutPref_MsgWndCmdColor ( enum zColor _val );
__declspec(implementation_key(9992)) VARIANT_BOOL Imodel::GetPref_MsgWndTextBold ( );
__declspec(implementation_key(9993)) void Imodel::PutPref_MsgWndTextBold ( VARIANT_BOOL _val );
__declspec(implementation_key(9994)) VARIANT_BOOL Imodel::GetPref_MsgWndCmdBold ( );
__declspec(implementation_key(9995)) void Imodel::PutPref_MsgWndCmdBold ( VARIANT_BOOL _val );
__declspec(implementation_key(9996)) VARIANT_BOOL Imodel::GetPref_MsgWndHighBold ( );
__declspec(implementation_key(9997)) void Imodel::PutPref_MsgWndHighBold ( VARIANT_BOOL _val );
__declspec(implementation_key(9998)) VARIANT_BOOL Imodel::GetPref_MsgWndWarnBold ( );
__declspec(implementation_key(9999)) void Imodel::PutPref_MsgWndWarnBold ( VARIANT_BOOL _val );
__declspec(implementation_key(10000)) VARIANT_BOOL Imodel::GetPref_MsgWndErrorBold ( );
__declspec(implementation_key(10001)) void Imodel::PutPref_MsgWndErrorBold ( VARIANT_BOOL _val );
__declspec(implementation_key(10002)) VARIANT_BOOL Imodel::GetPref_AltSectionProp ( );
__declspec(implementation_key(10003)) void Imodel::PutPref_AltSectionProp ( VARIANT_BOOL _val );
__declspec(implementation_key(10004)) VARIANT_BOOL Imodel::GetPref_RenderSmoothLines ( );
__declspec(implementation_key(10005)) void Imodel::PutPref_RenderSmoothLines ( VARIANT_BOOL _val );
__declspec(implementation_key(10006)) VARIANT_BOOL Imodel::GetPref_RenderFastPick ( );
__declspec(implementation_key(10007)) void Imodel::PutPref_RenderFastPick ( VARIANT_BOOL _val );
__declspec(implementation_key(10008)) VARIANT_BOOL Imodel::GetPref_RenderEdgesAsLines ( );
__declspec(implementation_key(10009)) void Imodel::PutPref_RenderEdgesAsLines ( VARIANT_BOOL _val );
__declspec(implementation_key(10010)) VARIANT_BOOL Imodel::GetPref_RenderAutoRegen ( );
__declspec(implementation_key(10011)) void Imodel::PutPref_RenderAutoRegen ( VARIANT_BOOL _val );
__declspec(implementation_key(10012)) int Imodel::GetPref_RenderVertexArrays ( );
__declspec(implementation_key(10013)) void Imodel::PutPref_RenderVertexArrays ( int _val );
__declspec(implementation_key(10014)) int Imodel::GetPref_RenderBitBltDelay ( );
__declspec(implementation_key(10015)) void Imodel::PutPref_RenderBitBltDelay ( int _val );
__declspec(implementation_key(10016)) int Imodel::GetPref_RenderSearchDepth ( );
__declspec(implementation_key(10017)) void Imodel::PutPref_RenderSearchDepth ( int _val );
__declspec(implementation_key(10018)) VARIANT_BOOL Imodel::GetPref_GeomScaleAdjust ( );
__declspec(implementation_key(10019)) void Imodel::PutPref_GeomScaleAdjust ( VARIANT_BOOL _val );
__declspec(implementation_key(10020)) int Imodel::GetPref_ModelInfoMaxEntity ( );
__declspec(implementation_key(10021)) void Imodel::PutPref_ModelInfoMaxEntity ( int _val );
__declspec(implementation_key(10022)) VARIANT_BOOL Imodel::GetPref_AnimatePanes ( );
__declspec(implementation_key(10023)) void Imodel::PutPref_AnimatePanes ( VARIANT_BOOL _val );
__declspec(implementation_key(10024)) VARIANT_BOOL Imodel::GetPref_RememberDialogPos ( );
__declspec(implementation_key(10025)) void Imodel::PutPref_RememberDialogPos ( VARIANT_BOOL _val );
__declspec(implementation_key(10026)) VARIANT_BOOL Imodel::GetPref_UseMSCNastran2004 ( );
__declspec(implementation_key(10027)) void Imodel::PutPref_UseMSCNastran2004 ( VARIANT_BOOL _val );
__declspec(implementation_key(10028)) VARIANT_BOOL Imodel::GetPref_FileRefCheck ( );
__declspec(implementation_key(10029)) void Imodel::PutPref_FileRefCheck ( VARIANT_BOOL _val );
__declspec(implementation_key(10030)) VARIANT_BOOL Imodel::GetPref_FileRefGeometry ( );
__declspec(implementation_key(10031)) void Imodel::PutPref_FileRefGeometry ( VARIANT_BOOL _val );
__declspec(implementation_key(10032)) VARIANT_BOOL Imodel::GetPref_FileRefModel ( );
__declspec(implementation_key(10033)) void Imodel::PutPref_FileRefModel ( VARIANT_BOOL _val );
__declspec(implementation_key(10034)) VARIANT_BOOL Imodel::GetPref_FileRefResults ( );
__declspec(implementation_key(10035)) void Imodel::PutPref_FileRefResults ( VARIANT_BOOL _val );
__declspec(implementation_key(10036)) VARIANT_BOOL Imodel::GetPref_AnalysisMonAutoLoad ( );
__declspec(implementation_key(10037)) void Imodel::PutPref_AnalysisMonAutoLoad ( VARIANT_BOOL _val );
__declspec(implementation_key(10038)) int Imodel::GetPref_AnalysisMonMaxLines ( );
__declspec(implementation_key(10039)) void Imodel::PutPref_AnalysisMonMaxLines ( int _val );
__declspec(implementation_key(10040)) int Imodel::GetPref_OutputSetTitles ( );
__declspec(implementation_key(10041)) void Imodel::PutPref_OutputSetTitles ( int _val );
__declspec(implementation_key(10042)) _bstr_t Imodel::GetPref_LibConnectionProp ( );
__declspec(implementation_key(10043)) void Imodel::PutPref_LibConnectionProp ( _bstr_t _val );
__declspec(implementation_key(10044)) VARIANT_BOOL Imodel::GetPref_UseOldAnalysisInterfaces ( );
__declspec(implementation_key(10045)) void Imodel::PutPref_UseOldAnalysisInterfaces ( VARIANT_BOOL _val );
__declspec(implementation_key(10046)) int Imodel::GetInfo_SuperelementID ( );
__declspec(implementation_key(10047)) void Imodel::PutInfo_SuperelementID ( int _val );
__declspec(implementation_key(10048)) enum zPointDefinition Imodel::GetCoordDialogMethod ( );
__declspec(implementation_key(10049)) void Imodel::PutCoordDialogMethod ( enum zPointDefinition _val );
__declspec(implementation_key(10050)) enum zVectorDefinition Imodel::GetVectorDialogMethod ( );
__declspec(implementation_key(10051)) void Imodel::PutVectorDialogMethod ( enum zVectorDefinition _val );
__declspec(implementation_key(10052)) enum zPlaneDefinition Imodel::GetPlaneDialogMethod ( );
__declspec(implementation_key(10053)) void Imodel::PutPlaneDialogMethod ( enum zPlaneDefinition _val );
__declspec(implementation_key(10054)) int Imodel::GetInfo_OrientSolidIsoOutput ( );
__declspec(implementation_key(10055)) void Imodel::PutInfo_OrientSolidIsoOutput ( int _val );
__declspec(implementation_key(10056)) int Imodel::GetInfo_OrientSolidAnisoOutput ( );
__declspec(implementation_key(10057)) void Imodel::PutInfo_OrientSolidAnisoOutput ( int _val );
__declspec(implementation_key(10058)) int Imodel::GetInfo_OrientSolidHyperOutput ( );
__declspec(implementation_key(10059)) void Imodel::PutInfo_OrientSolidHyperOutput ( int _val );
__declspec(implementation_key(10060)) int Imodel::GetInfo_OrientTria3StressOutput ( );
__declspec(implementation_key(10061)) void Imodel::PutInfo_OrientTria3StressOutput ( int _val );
__declspec(implementation_key(10062)) int Imodel::GetInfo_OrientTria3StrainOutput ( );
__declspec(implementation_key(10063)) void Imodel::PutInfo_OrientTria3StrainOutput ( int _val );
__declspec(implementation_key(10064)) int Imodel::GetInfo_OrientTria3ForceOutput ( );
__declspec(implementation_key(10065)) void Imodel::PutInfo_OrientTria3ForceOutput ( int _val );
__declspec(implementation_key(10066)) int Imodel::GetInfo_OrientTria6StressOutput ( );
__declspec(implementation_key(10067)) void Imodel::PutInfo_OrientTria6StressOutput ( int _val );
__declspec(implementation_key(10068)) int Imodel::GetInfo_OrientTria6StrainOutput ( );
__declspec(implementation_key(10069)) void Imodel::PutInfo_OrientTria6StrainOutput ( int _val );
__declspec(implementation_key(10070)) int Imodel::GetInfo_OrientTria6ForceOutput ( );
__declspec(implementation_key(10071)) void Imodel::PutInfo_OrientTria6ForceOutput ( int _val );
__declspec(implementation_key(10072)) int Imodel::GetInfo_OrientQuad4StressOutput ( );
__declspec(implementation_key(10073)) void Imodel::PutInfo_OrientQuad4StressOutput ( int _val );
__declspec(implementation_key(10074)) int Imodel::GetInfo_OrientQuad4StrainOutput ( );
__declspec(implementation_key(10075)) void Imodel::PutInfo_OrientQuad4StrainOutput ( int _val );
__declspec(implementation_key(10076)) int Imodel::GetInfo_OrientQuad4ForceOutput ( );
__declspec(implementation_key(10077)) void Imodel::PutInfo_OrientQuad4ForceOutput ( int _val );
__declspec(implementation_key(10078)) int Imodel::GetInfo_OrientQuad8StressOutput ( );
__declspec(implementation_key(10079)) void Imodel::PutInfo_OrientQuad8StressOutput ( int _val );
__declspec(implementation_key(10080)) int Imodel::GetInfo_OrientQuad8StrainOutput ( );
__declspec(implementation_key(10081)) void Imodel::PutInfo_OrientQuad8StrainOutput ( int _val );
__declspec(implementation_key(10082)) int Imodel::GetInfo_OrientQuad8ForceOutput ( );
__declspec(implementation_key(10083)) void Imodel::PutInfo_OrientQuad8ForceOutput ( int _val );
__declspec(implementation_key(10084)) int Imodel::GetPref_ReadTabSize ( );
__declspec(implementation_key(10085)) void Imodel::PutPref_ReadTabSize ( int _val );
__declspec(implementation_key(10086)) int Imodel::GetPickBoundaryInternalMode ( );
__declspec(implementation_key(10087)) void Imodel::PutPickBoundaryInternalMode ( int _val );
__declspec(implementation_key(10088)) int Imodel::GetPickCombinedCurveInternalMode ( );
__declspec(implementation_key(10089)) void Imodel::PutPickCombinedCurveInternalMode ( int _val );
__declspec(implementation_key(10090)) VARIANT_BOOL Imodel::GetPref_NastranUseILP64 ( );
__declspec(implementation_key(10091)) void Imodel::PutPref_NastranUseILP64 ( VARIANT_BOOL _val );
__declspec(implementation_key(10092)) int Imodel::GetPref_ConstructionGeometry ( );
__declspec(implementation_key(10093)) void Imodel::PutPref_ConstructionGeometry ( int _val );
__declspec(implementation_key(10094)) VARIANT_BOOL Imodel::GetPref_NastranWriteAllLdbcSets ( );
__declspec(implementation_key(10095)) void Imodel::PutPref_NastranWriteAllLdbcSets ( VARIANT_BOOL _val );
__declspec(implementation_key(10096)) enum zListDestination Imodel::GetList_Destination ( );
__declspec(implementation_key(10097)) void Imodel::PutList_Destination ( enum zListDestination _val );
__declspec(implementation_key(10098)) _bstr_t Imodel::GetList_FileName ( );
__declspec(implementation_key(10099)) void Imodel::PutList_FileName ( _bstr_t _val );
__declspec(implementation_key(10100)) VARIANT_BOOL Imodel::GetPref_DeleteRdScratchLdSets ( );
__declspec(implementation_key(10101)) void Imodel::PutPref_DeleteRdScratchLdSets ( VARIANT_BOOL _val );
__declspec(implementation_key(10102)) VARIANT_BOOL Imodel::GetPref_ImproveSinglePrecision ( );
__declspec(implementation_key(10103)) void Imodel::PutPref_ImproveSinglePrecision ( VARIANT_BOOL _val );
__declspec(implementation_key(10104)) VARIANT_BOOL Imodel::GetPref_PaneCaptionsOnTop ( );
__declspec(implementation_key(10105)) void Imodel::PutPref_PaneCaptionsOnTop ( VARIANT_BOOL _val );
__declspec(implementation_key(10106)) enum zPrefPictureFormat Imodel::GetPref_PictureFormat ( );
__declspec(implementation_key(10107)) void Imodel::PutPref_PictureFormat ( enum zPrefPictureFormat _val );
__declspec(implementation_key(10108)) enum zPrefAnimateFormat Imodel::GetPref_AnimationFormat ( );
__declspec(implementation_key(10109)) void Imodel::PutPref_AnimationFormat ( enum zPrefAnimateFormat _val );
__declspec(implementation_key(10110)) enum zGifColorOpt Imodel::GetPref_GIFColorOpt ( );
__declspec(implementation_key(10111)) void Imodel::PutPref_GIFColorOpt ( enum zGifColorOpt _val );
__declspec(implementation_key(10112)) int Imodel::GetPref_GIFAnimationDelay ( );
__declspec(implementation_key(10113)) void Imodel::PutPref_GIFAnimationDelay ( int _val );
__declspec(implementation_key(10114)) VARIANT_BOOL Imodel::GetPref_GIFFrameSeries ( );
__declspec(implementation_key(10115)) void Imodel::PutPref_GIFFrameSeries ( VARIANT_BOOL _val );
__declspec(implementation_key(10116)) VARIANT_BOOL Imodel::GetPref_CompressBitmaps ( );
__declspec(implementation_key(10117)) void Imodel::PutPref_CompressBitmaps ( VARIANT_BOOL _val );
__declspec(implementation_key(10118)) _variant_t Imodel::GetvPref_NasQstOn ( );
__declspec(implementation_key(10119)) void Imodel::PutvPref_NasQstOn ( const _variant_t & _val );
__declspec(implementation_key(10120)) _variant_t Imodel::GetvPref_NasQstVal ( );
__declspec(implementation_key(10121)) void Imodel::PutvPref_NasQstVal ( const _variant_t & _val );
__declspec(implementation_key(10122)) VARIANT_BOOL Imodel::GetPref_TbxExpandActive ( );
__declspec(implementation_key(10123)) void Imodel::PutPref_TbxExpandActive ( VARIANT_BOOL _val );
__declspec(implementation_key(10124)) int Imodel::GetPref_TbxAutomesh ( );
__declspec(implementation_key(10125)) void Imodel::PutPref_TbxAutomesh ( int _val );
__declspec(implementation_key(10126)) int Imodel::GetPref_ResPrintMethod ( );
__declspec(implementation_key(10127)) void Imodel::PutPref_ResPrintMethod ( int _val );
__declspec(implementation_key(10128)) double Imodel::GetPref_ResPrintScale ( );
__declspec(implementation_key(10129)) void Imodel::PutPref_ResPrintScale ( double _val );
__declspec(implementation_key(10130)) int Imodel::GetPref_ResCopySaveMethod ( );
__declspec(implementation_key(10131)) void Imodel::PutPref_ResCopySaveMethod ( int _val );
__declspec(implementation_key(10132)) double Imodel::GetPref_ResCopySaveScale ( );
__declspec(implementation_key(10133)) void Imodel::PutPref_ResCopySaveScale ( double _val );
__declspec(implementation_key(10134)) int Imodel::GetPref_ResScaleWithWidth ( );
__declspec(implementation_key(10135)) void Imodel::PutPref_ResScaleWithWidth ( int _val );
__declspec(implementation_key(10136)) int Imodel::GetPref_ResScaleWithHeight ( );
__declspec(implementation_key(10137)) void Imodel::PutPref_ResScaleWithHeight ( int _val );
__declspec(implementation_key(10138)) int Imodel::GetPref_ResFixedWidth ( );
__declspec(implementation_key(10139)) void Imodel::PutPref_ResFixedWidth ( int _val );
__declspec(implementation_key(10140)) int Imodel::GetPref_ResFixedHeight ( );
__declspec(implementation_key(10141)) void Imodel::PutPref_ResFixedHeight ( int _val );
__declspec(implementation_key(10142)) double Imodel::GetInfo_FacetAngleTolerance ( );
__declspec(implementation_key(10143)) void Imodel::PutInfo_FacetAngleTolerance ( double _val );
__declspec(implementation_key(10144)) double Imodel::GetInfo_FacetChordTolerance ( );
__declspec(implementation_key(10145)) void Imodel::PutInfo_FacetChordTolerance ( double _val );
__declspec(implementation_key(10146)) double Imodel::GetInfo_FacetCurveFactor ( );
__declspec(implementation_key(10147)) void Imodel::PutInfo_FacetCurveFactor ( double _val );
__declspec(implementation_key(10148)) VARIANT_BOOL Imodel::GetSolid_UpdateMaterialData ( );
__declspec(implementation_key(10149)) void Imodel::PutSolid_UpdateMaterialData ( VARIANT_BOOL _val );
__declspec(implementation_key(10150)) VARIANT_BOOL Imodel::GetSolid_UpdateUseParasolidIdent ( );
__declspec(implementation_key(10151)) void Imodel::PutSolid_UpdateUseParasolidIdent ( VARIANT_BOOL _val );
__declspec(implementation_key(10152)) int Imodel::GetPref_ResPenMethod ( );
__declspec(implementation_key(10153)) void Imodel::PutPref_ResPenMethod ( int _val );
__declspec(implementation_key(10154)) int Imodel::GetPref_ResPenScale ( );
__declspec(implementation_key(10155)) void Imodel::PutPref_ResPenScale ( int _val );
__declspec(implementation_key(10156)) double Imodel::GetPref_ResScreenLogoScale ( );
__declspec(implementation_key(10157)) void Imodel::PutPref_ResScreenLogoScale ( double _val );
__declspec(implementation_key(10158)) double Imodel::GetPref_ResPrintLogoScale ( );
__declspec(implementation_key(10159)) void Imodel::PutPref_ResPrintLogoScale ( double _val );
__declspec(implementation_key(10160)) double Imodel::GetPref_ResCopySaveLogoScale ( );
__declspec(implementation_key(10161)) void Imodel::PutPref_ResCopySaveLogoScale ( double _val );
__declspec(implementation_key(10162)) int Imodel::GetDialogAutoSkip ( );
__declspec(implementation_key(10163)) void Imodel::PutDialogAutoSkip ( int _val );
__declspec(implementation_key(10164)) enum zColor Imodel::GetInfo_SuppressedCurveColor ( );
__declspec(implementation_key(10165)) void Imodel::PutInfo_SuppressedCurveColor ( enum zColor _val );
__declspec(implementation_key(10166)) enum zColor Imodel::GetInfo_SuppressedSurfaceColor ( );
__declspec(implementation_key(10167)) void Imodel::PutInfo_SuppressedSurfaceColor ( enum zColor _val );
__declspec(implementation_key(10168)) int Imodel::GetPref_MsgWndRepeatedErrors ( );
__declspec(implementation_key(10169)) void Imodel::PutPref_MsgWndRepeatedErrors ( int _val );
__declspec(implementation_key(10170)) VARIANT_BOOL Imodel::GetPref_PaneAltDockSymbols ( );
__declspec(implementation_key(10171)) void Imodel::PutPref_PaneAltDockSymbols ( VARIANT_BOOL _val );
__declspec(implementation_key(10172)) int Imodel::GetPref_FastOutputDelete ( );
__declspec(implementation_key(10173)) void Imodel::PutPref_FastOutputDelete ( int _val );
__declspec(implementation_key(10174)) VARIANT_BOOL Imodel::GetPref_GroupIncludeFiles ( );
__declspec(implementation_key(10175)) void Imodel::PutPref_GroupIncludeFiles ( VARIANT_BOOL _val );
__declspec(implementation_key(10176)) int Imodel::GetPref_OpenSaveMethod ( );
__declspec(implementation_key(10177)) void Imodel::PutPref_OpenSaveMethod ( int _val );
__declspec(implementation_key(10178)) VARIANT_BOOL Imodel::GetErrorHasBeenCalled ( );
__declspec(implementation_key(10179)) void Imodel::PutErrorHasBeenCalled ( VARIANT_BOOL _val );
__declspec(implementation_key(10180)) VARIANT_BOOL Imodel::GetPref_Enable_Aeroelasticity ( );
__declspec(implementation_key(10181)) void Imodel::PutPref_Enable_Aeroelasticity ( VARIANT_BOOL _val );
__declspec(implementation_key(10182)) VARIANT_BOOL Imodel::GetPref_NasAlternateContinue ( );
__declspec(implementation_key(10183)) void Imodel::PutPref_NasAlternateContinue ( VARIANT_BOOL _val );
__declspec(implementation_key(10184)) VARIANT_BOOL Imodel::GetPref_NasDballScratch ( );
__declspec(implementation_key(10185)) void Imodel::PutPref_NasDballScratch ( VARIANT_BOOL _val );
__declspec(implementation_key(10186)) int Imodel::GetPref_JTFileVersion ( );
__declspec(implementation_key(10187)) void Imodel::PutPref_JTFileVersion ( int _val );
__declspec(implementation_key(10188)) VARIANT_BOOL Imodel::GetPref_GIFOptimized ( );
__declspec(implementation_key(10189)) void Imodel::PutPref_GIFOptimized ( VARIANT_BOOL _val );
__declspec(implementation_key(10190)) VARIANT_BOOL Imodel::GetPref_PreV10SurfaceMesh ( );
__declspec(implementation_key(10191)) void Imodel::PutPref_PreV10SurfaceMesh ( VARIANT_BOOL _val );
__declspec(implementation_key(10192)) int Imodel::GetPref_PickMethod ( );
__declspec(implementation_key(10193)) void Imodel::PutPref_PickMethod ( int _val );
__declspec(implementation_key(10194)) VARIANT_BOOL Imodel::GetPref_ConfirmDelete ( );
__declspec(implementation_key(10195)) void Imodel::PutPref_ConfirmDelete ( VARIANT_BOOL _val );
__declspec(implementation_key(10196)) VARIANT_BOOL Imodel::GetPref_RenderXORPicking ( );
__declspec(implementation_key(10197)) void Imodel::PutPref_RenderXORPicking ( VARIANT_BOOL _val );
__declspec(implementation_key(10198)) VARIANT_BOOL Imodel::GetPref_RenderMultiModelMem ( );
__declspec(implementation_key(10199)) void Imodel::PutPref_RenderMultiModelMem ( VARIANT_BOOL _val );
__declspec(implementation_key(10200)) VARIANT_BOOL Imodel::GetPref_RenderDebugElapsedTime ( );
__declspec(implementation_key(10201)) void Imodel::PutPref_RenderDebugElapsedTime ( VARIANT_BOOL _val );
__declspec(implementation_key(10202)) VARIANT_BOOL Imodel::GetPref_RenderDebugAllTime ( );
__declspec(implementation_key(10203)) void Imodel::PutPref_RenderDebugAllTime ( VARIANT_BOOL _val );
__declspec(implementation_key(10204)) VARIANT_BOOL Imodel::GetPref_RenderDebugOGLErrors ( );
__declspec(implementation_key(10205)) void Imodel::PutPref_RenderDebugOGLErrors ( VARIANT_BOOL _val );
__declspec(implementation_key(10206)) int Imodel::GetPref_RenderBlockSize ( );
__declspec(implementation_key(10207)) void Imodel::PutPref_RenderBlockSize ( int _val );
__declspec(implementation_key(10208)) VARIANT_BOOL Imodel::GetPref_RenderDialogRefresh ( );
__declspec(implementation_key(10209)) void Imodel::PutPref_RenderDialogRefresh ( VARIANT_BOOL _val );
__declspec(implementation_key(10210)) int Imodel::GetPref_ShowMode ( );
__declspec(implementation_key(10211)) void Imodel::PutPref_ShowMode ( int _val );
__declspec(implementation_key(10212)) VARIANT_BOOL Imodel::GetPref_ShowLabels ( );
__declspec(implementation_key(10213)) void Imodel::PutPref_ShowLabels ( VARIANT_BOOL _val );
__declspec(implementation_key(10214)) VARIANT_BOOL Imodel::GetPref_ShowNormals ( );
__declspec(implementation_key(10215)) void Imodel::PutPref_ShowNormals ( VARIANT_BOOL _val );
__declspec(implementation_key(10216)) VARIANT_BOOL Imodel::GetPref_PreserveNextID ( );
__declspec(implementation_key(10217)) void Imodel::PutPref_PreserveNextID ( VARIANT_BOOL _val );
__declspec(implementation_key(10218)) int Imodel::GetPref_NastranScratchLocation ( );
__declspec(implementation_key(10219)) void Imodel::PutPref_NastranScratchLocation ( int _val );
__declspec(implementation_key(10220)) _bstr_t Imodel::GetPref_LibLayup ( );
__declspec(implementation_key(10221)) void Imodel::PutPref_LibLayup ( _bstr_t _val );
__declspec(implementation_key(10222)) _variant_t Imodel::GetvPref_SpaceballFactors ( );
__declspec(implementation_key(10223)) void Imodel::PutvPref_SpaceballFactors ( const _variant_t & _val );
__declspec(implementation_key(10224)) int Imodel::GetPref_SpaceballSensitivity ( );
__declspec(implementation_key(10225)) void Imodel::PutPref_SpaceballSensitivity ( int _val );
__declspec(implementation_key(10226)) VARIANT_BOOL Imodel::GetPref_SpaceballDebug ( );
__declspec(implementation_key(10227)) void Imodel::PutPref_SpaceballDebug ( VARIANT_BOOL _val );
__declspec(implementation_key(10228)) VARIANT_BOOL Imodel::GetPref_ElemQualAspectRatio ( );
__declspec(implementation_key(10229)) void Imodel::PutPref_ElemQualAspectRatio ( VARIANT_BOOL _val );
__declspec(implementation_key(10230)) VARIANT_BOOL Imodel::GetPref_ElemQualTaper ( );
__declspec(implementation_key(10231)) void Imodel::PutPref_ElemQualTaper ( VARIANT_BOOL _val );
__declspec(implementation_key(10232)) VARIANT_BOOL Imodel::GetPref_ElemQualAltTaper ( );
__declspec(implementation_key(10233)) void Imodel::PutPref_ElemQualAltTaper ( VARIANT_BOOL _val );
__declspec(implementation_key(10234)) VARIANT_BOOL Imodel::GetPref_ElemQualIntAngles ( );
__declspec(implementation_key(10235)) void Imodel::PutPref_ElemQualIntAngles ( VARIANT_BOOL _val );
__declspec(implementation_key(10236)) VARIANT_BOOL Imodel::GetPref_ElemQualSkew ( );
__declspec(implementation_key(10237)) void Imodel::PutPref_ElemQualSkew ( VARIANT_BOOL _val );
__declspec(implementation_key(10238)) VARIANT_BOOL Imodel::GetPref_ElemQualWarping ( );
__declspec(implementation_key(10239)) void Imodel::PutPref_ElemQualWarping ( VARIANT_BOOL _val );
__declspec(implementation_key(10240)) VARIANT_BOOL Imodel::GetPref_ElemQualNastranWarping ( );
__declspec(implementation_key(10241)) void Imodel::PutPref_ElemQualNastranWarping ( VARIANT_BOOL _val );
__declspec(implementation_key(10242)) VARIANT_BOOL Imodel::GetPref_ElemQualTetCollapse ( );
__declspec(implementation_key(10243)) void Imodel::PutPref_ElemQualTetCollapse ( VARIANT_BOOL _val );
__declspec(implementation_key(10244)) VARIANT_BOOL Imodel::GetPref_ElemQualJacobian ( );
__declspec(implementation_key(10245)) void Imodel::PutPref_ElemQualJacobian ( VARIANT_BOOL _val );
__declspec(implementation_key(10246)) VARIANT_BOOL Imodel::GetPref_ElemQualCombined ( );
__declspec(implementation_key(10247)) void Imodel::PutPref_ElemQualCombined ( VARIANT_BOOL _val );
__declspec(implementation_key(10248)) VARIANT_BOOL Imodel::GetPref_ElemQualExplicitTime ( );
__declspec(implementation_key(10249)) void Imodel::PutPref_ElemQualExplicitTime ( VARIANT_BOOL _val );
__declspec(implementation_key(10250)) double Imodel::GetPref_ElemQualAspectRatioVal ( );
__declspec(implementation_key(10251)) void Imodel::PutPref_ElemQualAspectRatioVal ( double _val );
__declspec(implementation_key(10252)) double Imodel::GetPref_ElemQualTaperVal ( );
__declspec(implementation_key(10253)) void Imodel::PutPref_ElemQualTaperVal ( double _val );
__declspec(implementation_key(10254)) double Imodel::GetPref_ElemQualAltTaperVal ( );
__declspec(implementation_key(10255)) void Imodel::PutPref_ElemQualAltTaperVal ( double _val );
__declspec(implementation_key(10256)) double Imodel::GetPref_ElemQualIntAnglesVal ( );
__declspec(implementation_key(10257)) void Imodel::PutPref_ElemQualIntAnglesVal ( double _val );
__declspec(implementation_key(10258)) double Imodel::GetPref_ElemQualSkewVal ( );
__declspec(implementation_key(10259)) void Imodel::PutPref_ElemQualSkewVal ( double _val );
__declspec(implementation_key(10260)) double Imodel::GetPref_ElemQualWarpingVal ( );
__declspec(implementation_key(10261)) void Imodel::PutPref_ElemQualWarpingVal ( double _val );
__declspec(implementation_key(10262)) double Imodel::GetPref_ElemQualNastranWarpingVal ( );
__declspec(implementation_key(10263)) void Imodel::PutPref_ElemQualNastranWarpingVal ( double _val );
__declspec(implementation_key(10264)) double Imodel::GetPref_ElemQualTetCollapseVal ( );
__declspec(implementation_key(10265)) void Imodel::PutPref_ElemQualTetCollapseVal ( double _val );
__declspec(implementation_key(10266)) double Imodel::GetPref_ElemQualJacobianVal ( );
__declspec(implementation_key(10267)) void Imodel::PutPref_ElemQualJacobianVal ( double _val );
__declspec(implementation_key(10268)) double Imodel::GetPref_ElemQualCombinedVal ( );
__declspec(implementation_key(10269)) void Imodel::PutPref_ElemQualCombinedVal ( double _val );
__declspec(implementation_key(10270)) double Imodel::GetPref_ElemQualExplicitTimeVal ( );
__declspec(implementation_key(10271)) void Imodel::PutPref_ElemQualExplicitTimeVal ( double _val );
__declspec(implementation_key(10272)) enum zColor Imodel::GetPref_ShowColor ( );
__declspec(implementation_key(10273)) void Imodel::PutPref_ShowColor ( enum zColor _val );
__declspec(implementation_key(10274)) int Imodel::GetPref_OrientSolidIsoOutput ( );
__declspec(implementation_key(10275)) void Imodel::PutPref_OrientSolidIsoOutput ( int _val );
__declspec(implementation_key(10276)) int Imodel::GetPref_OrientSolidAnisoOutput ( );
__declspec(implementation_key(10277)) void Imodel::PutPref_OrientSolidAnisoOutput ( int _val );
__declspec(implementation_key(10278)) int Imodel::GetPref_OrientSolidHyperOutput ( );
__declspec(implementation_key(10279)) void Imodel::PutPref_OrientSolidHyperOutput ( int _val );
__declspec(implementation_key(10280)) int Imodel::GetPref_OrientTria3StressOutput ( );
__declspec(implementation_key(10281)) void Imodel::PutPref_OrientTria3StressOutput ( int _val );
__declspec(implementation_key(10282)) int Imodel::GetPref_OrientTria3StrainOutput ( );
__declspec(implementation_key(10283)) void Imodel::PutPref_OrientTria3StrainOutput ( int _val );
__declspec(implementation_key(10284)) int Imodel::GetPref_OrientTria3ForceOutput ( );
__declspec(implementation_key(10285)) void Imodel::PutPref_OrientTria3ForceOutput ( int _val );
__declspec(implementation_key(10286)) int Imodel::GetPref_OrientTria6StressOutput ( );
__declspec(implementation_key(10287)) void Imodel::PutPref_OrientTria6StressOutput ( int _val );
__declspec(implementation_key(10288)) int Imodel::GetPref_OrientTria6StrainOutput ( );
__declspec(implementation_key(10289)) void Imodel::PutPref_OrientTria6StrainOutput ( int _val );
__declspec(implementation_key(10290)) int Imodel::GetPref_OrientTria6ForceOutput ( );
__declspec(implementation_key(10291)) void Imodel::PutPref_OrientTria6ForceOutput ( int _val );
__declspec(implementation_key(10292)) int Imodel::GetPref_OrientQuad4StressOutput ( );
__declspec(implementation_key(10293)) void Imodel::PutPref_OrientQuad4StressOutput ( int _val );
__declspec(implementation_key(10294)) int Imodel::GetPref_OrientQuad4StrainOutput ( );
__declspec(implementation_key(10295)) void Imodel::PutPref_OrientQuad4StrainOutput ( int _val );
__declspec(implementation_key(10296)) int Imodel::GetPref_OrientQuad4ForceOutput ( );
__declspec(implementation_key(10297)) void Imodel::PutPref_OrientQuad4ForceOutput ( int _val );
__declspec(implementation_key(10298)) int Imodel::GetPref_OrientQuad8StressOutput ( );
__declspec(implementation_key(10299)) void Imodel::PutPref_OrientQuad8StressOutput ( int _val );
__declspec(implementation_key(10300)) int Imodel::GetPref_OrientQuad8StrainOutput ( );
__declspec(implementation_key(10301)) void Imodel::PutPref_OrientQuad8StrainOutput ( int _val );
__declspec(implementation_key(10302)) int Imodel::GetPref_OrientQuad8ForceOutput ( );
__declspec(implementation_key(10303)) void Imodel::PutPref_OrientQuad8ForceOutput ( int _val );
__declspec(implementation_key(10304)) VARIANT_BOOL Imodel::GetPref_RenderTrailingZeroes ( );
__declspec(implementation_key(10305)) void Imodel::PutPref_RenderTrailingZeroes ( VARIANT_BOOL _val );
__declspec(implementation_key(10306)) int Imodel::GetPref_RenderMaxVBOMB ( );
__declspec(implementation_key(10307)) void Imodel::PutPref_RenderMaxVBOMB ( int _val );
__declspec(implementation_key(10308)) VARIANT_BOOL Imodel::GetPref_RenderDebugFrameRate ( );
__declspec(implementation_key(10309)) void Imodel::PutPref_RenderDebugFrameRate ( VARIANT_BOOL _val );
__declspec(implementation_key(10310)) int Imodel::GetPref_RenderVBOUsage ( );
__declspec(implementation_key(10311)) void Imodel::PutPref_RenderVBOUsage ( int _val );
__declspec(implementation_key(10312)) VARIANT_BOOL Imodel::GetPref_PreserveIncludes ( );
__declspec(implementation_key(10313)) void Imodel::PutPref_PreserveIncludes ( VARIANT_BOOL _val );
__declspec(implementation_key(10314)) VARIANT_BOOL Imodel::GetPref_MemoryMappedFiles ( );
__declspec(implementation_key(10315)) void Imodel::PutPref_MemoryMappedFiles ( VARIANT_BOOL _val );
__declspec(implementation_key(10316)) VARIANT_BOOL Imodel::GetPref_AutoAttachResults ( );
__declspec(implementation_key(10317)) void Imodel::PutPref_AutoAttachResults ( VARIANT_BOOL _val );
__declspec(implementation_key(10318)) VARIANT_BOOL Imodel::GetPref_RenderCaptureIconified ( );
__declspec(implementation_key(10319)) void Imodel::PutPref_RenderCaptureIconified ( VARIANT_BOOL _val );
__declspec(implementation_key(10320)) int Imodel::GetPref_RenderMinVBOB ( );
__declspec(implementation_key(10321)) void Imodel::PutPref_RenderMinVBOB ( int _val );
__declspec(implementation_key(10322)) VARIANT_BOOL Imodel::GetInfo_MeshSizeAutoDefault ( );
__declspec(implementation_key(10323)) void Imodel::PutInfo_MeshSizeAutoDefault ( VARIANT_BOOL _val );
__declspec(implementation_key(10324)) VARIANT_BOOL Imodel::GetPref_AttachResultsDebug ( );
__declspec(implementation_key(10325)) void Imodel::PutPref_AttachResultsDebug ( VARIANT_BOOL _val );
__declspec(implementation_key(10326)) VARIANT_BOOL Imodel::GetPref_AttachResultsTiming ( );
__declspec(implementation_key(10327)) void Imodel::PutPref_AttachResultsTiming ( VARIANT_BOOL _val );
__declspec(implementation_key(10328)) VARIANT_BOOL Imodel::GetPref_ViewPostDynamicMaxMin ( );
__declspec(implementation_key(10329)) void Imodel::PutPref_ViewPostDynamicMaxMin ( VARIANT_BOOL _val );
__declspec(implementation_key(10330)) int Imodel::GetDialogAutoSkipMsg ( );
__declspec(implementation_key(10331)) void Imodel::PutDialogAutoSkipMsg ( int _val );
__declspec(implementation_key(10332)) VARIANT_BOOL Imodel::GetPref_CleanupModel ( );
__declspec(implementation_key(10333)) void Imodel::PutPref_CleanupModel ( VARIANT_BOOL _val );
__declspec(implementation_key(10334)) VARIANT_BOOL Imodel::GetPref_LegacyXYPlotting ( );
__declspec(implementation_key(10335)) void Imodel::PutPref_LegacyXYPlotting ( VARIANT_BOOL _val );
__declspec(implementation_key(10336)) _bstr_t Imodel::GetPref_LibChart ( );
__declspec(implementation_key(10337)) void Imodel::PutPref_LibChart ( _bstr_t _val );
__declspec(implementation_key(10338)) VARIANT_BOOL Imodel::GetPref_Show0To360Angles ( );
__declspec(implementation_key(10339)) void Imodel::PutPref_Show0To360Angles ( VARIANT_BOOL _val );
__declspec(implementation_key(10340)) double Imodel::GetPref_PlaneWheelFactor ( );
__declspec(implementation_key(10341)) void Imodel::PutPref_PlaneWheelFactor ( double _val );
__declspec(implementation_key(10342)) VARIANT_BOOL Imodel::GetPref_MiddleMouseButtonOK ( );
__declspec(implementation_key(10343)) void Imodel::PutPref_MiddleMouseButtonOK ( VARIANT_BOOL _val );
__declspec(implementation_key(10344)) VARIANT_BOOL Imodel::GetPref_GeomOptimize ( );
__declspec(implementation_key(10345)) void Imodel::PutPref_GeomOptimize ( VARIANT_BOOL _val );
__declspec(implementation_key(10346)) VARIANT_BOOL Imodel::GetPref_UseRegionDecimalChar ( );
__declspec(implementation_key(10347)) void Imodel::PutPref_UseRegionDecimalChar ( VARIANT_BOOL _val );
__declspec(implementation_key(10348)) double Imodel::GetPref_ResFontScale ( );
__declspec(implementation_key(10349)) void Imodel::PutPref_ResFontScale ( double _val );
__declspec(implementation_key(10350)) VARIANT_BOOL Imodel::GetPref_PerformanceGraphics ( );
__declspec(implementation_key(10351)) void Imodel::PutPref_PerformanceGraphics ( VARIANT_BOOL _val );
__declspec(implementation_key(10352)) VARIANT_BOOL Imodel::GetSolidAllowNonManifold ( );
__declspec(implementation_key(10353)) void Imodel::PutSolidAllowNonManifold ( VARIANT_BOOL _val );
__declspec(implementation_key(10354)) VARIANT_BOOL Imodel::GetPref_CreateResultStudy ( );
__declspec(implementation_key(10355)) void Imodel::PutPref_CreateResultStudy ( VARIANT_BOOL _val );
__declspec(implementation_key(10356)) int Imodel::GetPref_ResultStudyTitle ( );
__declspec(implementation_key(10357)) void Imodel::PutPref_ResultStudyTitle ( int _val );
__declspec(implementation_key(10358)) VARIANT_BOOL Imodel::GetInfo_ViewShowNormal ( );
__declspec(implementation_key(10359)) void Imodel::PutInfo_ViewShowNormal ( VARIANT_BOOL _val );
__declspec(implementation_key(10360)) VARIANT_BOOL Imodel::GetInfo_ViewShowTransparent ( );
__declspec(implementation_key(10361)) void Imodel::PutInfo_ViewShowTransparent ( VARIANT_BOOL _val );
__declspec(implementation_key(10362)) int Imodel::GetInfo_ComplexSyncMethod ( );
__declspec(implementation_key(10363)) void Imodel::PutInfo_ComplexSyncMethod ( int _val );
__declspec(implementation_key(10364)) double Imodel::GetInfo_ComplexSyncPhase ( );
__declspec(implementation_key(10365)) void Imodel::PutInfo_ComplexSyncPhase ( double _val );
__declspec(implementation_key(10366)) double Imodel::GetInfo_ComplexSyncIncrement ( );
__declspec(implementation_key(10367)) void Imodel::PutInfo_ComplexSyncIncrement ( double _val );
__declspec(implementation_key(10368)) VARIANT_BOOL Imodel::GetPref_TabPasteIgnoreDelimeter ( );
__declspec(implementation_key(10369)) void Imodel::PutPref_TabPasteIgnoreDelimeter ( VARIANT_BOOL _val );
__declspec(implementation_key(10370)) int Imodel::GetPref_SnapTo ( );
__declspec(implementation_key(10371)) void Imodel::PutPref_SnapTo ( int _val );
__declspec(implementation_key(10372)) double Imodel::GetPref_RenderMaxMagnification ( );
__declspec(implementation_key(10373)) void Imodel::PutPref_RenderMaxMagnification ( double _val );
__declspec(implementation_key(10374)) VARIANT_BOOL Imodel::GetPref_StudyAppendFemapTitles ( );
__declspec(implementation_key(10375)) void Imodel::PutPref_StudyAppendFemapTitles ( VARIANT_BOOL _val );
__declspec(implementation_key(10376)) VARIANT_BOOL Imodel::GetPref_ElemQualQuadSkew ( );
__declspec(implementation_key(10377)) void Imodel::PutPref_ElemQualQuadSkew ( VARIANT_BOOL _val );
__declspec(implementation_key(10378)) VARIANT_BOOL Imodel::GetPref_ElemQualQuadTaper ( );
__declspec(implementation_key(10379)) void Imodel::PutPref_ElemQualQuadTaper ( VARIANT_BOOL _val );
__declspec(implementation_key(10380)) VARIANT_BOOL Imodel::GetPref_ElemQualQuadWarp ( );
__declspec(implementation_key(10381)) void Imodel::PutPref_ElemQualQuadWarp ( VARIANT_BOOL _val );
__declspec(implementation_key(10382)) VARIANT_BOOL Imodel::GetPref_ElemQualQuadIAMin ( );
__declspec(implementation_key(10383)) void Imodel::PutPref_ElemQualQuadIAMin ( VARIANT_BOOL _val );
__declspec(implementation_key(10384)) VARIANT_BOOL Imodel::GetPref_ElemQualQuadIAMax ( );
__declspec(implementation_key(10385)) void Imodel::PutPref_ElemQualQuadIAMax ( VARIANT_BOOL _val );
__declspec(implementation_key(10386)) VARIANT_BOOL Imodel::GetPref_ElemQualTriaSkew ( );
__declspec(implementation_key(10387)) void Imodel::PutPref_ElemQualTriaSkew ( VARIANT_BOOL _val );
__declspec(implementation_key(10388)) VARIANT_BOOL Imodel::GetPref_ElemQualTriaIAMax ( );
__declspec(implementation_key(10389)) void Imodel::PutPref_ElemQualTriaIAMax ( VARIANT_BOOL _val );
__declspec(implementation_key(10390)) VARIANT_BOOL Imodel::GetPref_ElemQualTetAspectRatio ( );
__declspec(implementation_key(10391)) void Imodel::PutPref_ElemQualTetAspectRatio ( VARIANT_BOOL _val );
__declspec(implementation_key(10392)) VARIANT_BOOL Imodel::GetPref_ElemQualTetEPLR ( );
__declspec(implementation_key(10393)) void Imodel::PutPref_ElemQualTetEPLR ( VARIANT_BOOL _val );
__declspec(implementation_key(10394)) VARIANT_BOOL Imodel::GetPref_ElemQualTetDetJ ( );
__declspec(implementation_key(10395)) void Imodel::PutPref_ElemQualTetDetJ ( VARIANT_BOOL _val );
__declspec(implementation_key(10396)) VARIANT_BOOL Imodel::GetPref_ElemQualHexAspectRatio ( );
__declspec(implementation_key(10397)) void Imodel::PutPref_ElemQualHexAspectRatio ( VARIANT_BOOL _val );
__declspec(implementation_key(10398)) VARIANT_BOOL Imodel::GetPref_ElemQualHexEPLR ( );
__declspec(implementation_key(10399)) void Imodel::PutPref_ElemQualHexEPLR ( VARIANT_BOOL _val );
__declspec(implementation_key(10400)) VARIANT_BOOL Imodel::GetPref_ElemQualHexDetJ ( );
__declspec(implementation_key(10401)) void Imodel::PutPref_ElemQualHexDetJ ( VARIANT_BOOL _val );
__declspec(implementation_key(10402)) VARIANT_BOOL Imodel::GetPref_ElemQualHexWarp ( );
__declspec(implementation_key(10403)) void Imodel::PutPref_ElemQualHexWarp ( VARIANT_BOOL _val );
__declspec(implementation_key(10404)) VARIANT_BOOL Imodel::GetPref_ElemQualPenAspectRatio ( );
__declspec(implementation_key(10405)) void Imodel::PutPref_ElemQualPenAspectRatio ( VARIANT_BOOL _val );
__declspec(implementation_key(10406)) VARIANT_BOOL Imodel::GetPref_ElemQualPenEPLR ( );
__declspec(implementation_key(10407)) void Imodel::PutPref_ElemQualPenEPLR ( VARIANT_BOOL _val );
__declspec(implementation_key(10408)) VARIANT_BOOL Imodel::GetPref_ElemQualPenDetJ ( );
__declspec(implementation_key(10409)) void Imodel::PutPref_ElemQualPenDetJ ( VARIANT_BOOL _val );
__declspec(implementation_key(10410)) VARIANT_BOOL Imodel::GetPref_ElemQualPenWarp ( );
__declspec(implementation_key(10411)) void Imodel::PutPref_ElemQualPenWarp ( VARIANT_BOOL _val );
__declspec(implementation_key(10412)) VARIANT_BOOL Imodel::GetPref_ElemQualPyrAspectRatio ( );
__declspec(implementation_key(10413)) void Imodel::PutPref_ElemQualPyrAspectRatio ( VARIANT_BOOL _val );
__declspec(implementation_key(10414)) VARIANT_BOOL Imodel::GetPref_ElemQualPyrEPLR ( );
__declspec(implementation_key(10415)) void Imodel::PutPref_ElemQualPyrEPLR ( VARIANT_BOOL _val );
__declspec(implementation_key(10416)) VARIANT_BOOL Imodel::GetPref_ElemQualPyrWarp ( );
__declspec(implementation_key(10417)) void Imodel::PutPref_ElemQualPyrWarp ( VARIANT_BOOL _val );
__declspec(implementation_key(10418)) VARIANT_BOOL Imodel::GetPref_ElemQualPyrDetJ ( );
__declspec(implementation_key(10419)) void Imodel::PutPref_ElemQualPyrDetJ ( VARIANT_BOOL _val );
__declspec(implementation_key(10420)) double Imodel::GetPref_ElemQualQuadSkewVal ( );
__declspec(implementation_key(10421)) void Imodel::PutPref_ElemQualQuadSkewVal ( double _val );
__declspec(implementation_key(10422)) double Imodel::GetPref_ElemQualQuadTaperVal ( );
__declspec(implementation_key(10423)) void Imodel::PutPref_ElemQualQuadTaperVal ( double _val );
__declspec(implementation_key(10424)) double Imodel::GetPref_ElemQualQuadWarpVal ( );
__declspec(implementation_key(10425)) void Imodel::PutPref_ElemQualQuadWarpVal ( double _val );
__declspec(implementation_key(10426)) double Imodel::GetPref_ElemQualQuadIAMinVal ( );
__declspec(implementation_key(10427)) void Imodel::PutPref_ElemQualQuadIAMinVal ( double _val );
__declspec(implementation_key(10428)) double Imodel::GetPref_ElemQualQuadIAMaxVal ( );
__declspec(implementation_key(10429)) void Imodel::PutPref_ElemQualQuadIAMaxVal ( double _val );
__declspec(implementation_key(10430)) double Imodel::GetPref_ElemQualTriaSkewVal ( );
__declspec(implementation_key(10431)) void Imodel::PutPref_ElemQualTriaSkewVal ( double _val );
__declspec(implementation_key(10432)) double Imodel::GetPref_ElemQualTriaIAMaxVal ( );
__declspec(implementation_key(10433)) void Imodel::PutPref_ElemQualTriaIAMaxVal ( double _val );
__declspec(implementation_key(10434)) double Imodel::GetPref_ElemQualTetAspectRatioVal ( );
__declspec(implementation_key(10435)) void Imodel::PutPref_ElemQualTetAspectRatioVal ( double _val );
__declspec(implementation_key(10436)) double Imodel::GetPref_ElemQualTetEPLRVal ( );
__declspec(implementation_key(10437)) void Imodel::PutPref_ElemQualTetEPLRVal ( double _val );
__declspec(implementation_key(10438)) double Imodel::GetPref_ElemQualTetDetJVal ( );
__declspec(implementation_key(10439)) void Imodel::PutPref_ElemQualTetDetJVal ( double _val );
__declspec(implementation_key(10440)) double Imodel::GetPref_ElemQualHexAspectRatioVal ( );
__declspec(implementation_key(10441)) void Imodel::PutPref_ElemQualHexAspectRatioVal ( double _val );
__declspec(implementation_key(10442)) double Imodel::GetPref_ElemQualHexEPLRVal ( );
__declspec(implementation_key(10443)) void Imodel::PutPref_ElemQualHexEPLRVal ( double _val );
__declspec(implementation_key(10444)) double Imodel::GetPref_ElemQualHexDetJVal ( );
__declspec(implementation_key(10445)) void Imodel::PutPref_ElemQualHexDetJVal ( double _val );
__declspec(implementation_key(10446)) double Imodel::GetPref_ElemQualHexWarpVal ( );
__declspec(implementation_key(10447)) void Imodel::PutPref_ElemQualHexWarpVal ( double _val );
__declspec(implementation_key(10448)) double Imodel::GetPref_ElemQualPenAspectRatioVal ( );
__declspec(implementation_key(10449)) void Imodel::PutPref_ElemQualPenAspectRatioVal ( double _val );
__declspec(implementation_key(10450)) double Imodel::GetPref_ElemQualPenEPLRVal ( );
__declspec(implementation_key(10451)) void Imodel::PutPref_ElemQualPenEPLRVal ( double _val );
__declspec(implementation_key(10452)) double Imodel::GetPref_ElemQualPenDetJVal ( );
__declspec(implementation_key(10453)) void Imodel::PutPref_ElemQualPenDetJVal ( double _val );
__declspec(implementation_key(10454)) double Imodel::GetPref_ElemQualPenWarpVal ( );
__declspec(implementation_key(10455)) void Imodel::PutPref_ElemQualPenWarpVal ( double _val );
__declspec(implementation_key(10456)) double Imodel::GetPref_ElemQualPyrAspectRatioVal ( );
__declspec(implementation_key(10457)) void Imodel::PutPref_ElemQualPyrAspectRatioVal ( double _val );
__declspec(implementation_key(10458)) double Imodel::GetPref_ElemQualPyrEPLRVal ( );
__declspec(implementation_key(10459)) void Imodel::PutPref_ElemQualPyrEPLRVal ( double _val );
__declspec(implementation_key(10460)) double Imodel::GetPref_ElemQualPyrWarpVal ( );
__declspec(implementation_key(10461)) void Imodel::PutPref_ElemQualPyrWarpVal ( double _val );
__declspec(implementation_key(10462)) double Imodel::GetPref_ElemQualPyrDetJVal ( );
__declspec(implementation_key(10463)) void Imodel::PutPref_ElemQualPyrDetJVal ( double _val );
__declspec(implementation_key(10464)) _bstr_t Imodel::GetPref_UserToolsPath ( );
__declspec(implementation_key(10465)) void Imodel::PutPref_UserToolsPath ( _bstr_t _val );
__declspec(implementation_key(10466)) VARIANT_BOOL Imodel::GetPref_NonmanifoldBooleans ( );
__declspec(implementation_key(10467)) void Imodel::PutPref_NonmanifoldBooleans ( VARIANT_BOOL _val );
__declspec(implementation_key(10468)) VARIANT_BOOL Imodel::GetPref_RepeatCreate ( );
__declspec(implementation_key(10469)) void Imodel::PutPref_RepeatCreate ( VARIANT_BOOL _val );
__declspec(implementation_key(10470)) VARIANT_BOOL Imodel::GetPref_ZoomAroundCursor ( );
__declspec(implementation_key(10471)) void Imodel::PutPref_ZoomAroundCursor ( VARIANT_BOOL _val );
__declspec(implementation_key(10472)) VARIANT_BOOL Imodel::GetPref_UseSubcaseIdForOutput ( );
__declspec(implementation_key(10473)) void Imodel::PutPref_UseSubcaseIdForOutput ( VARIANT_BOOL _val );
__declspec(implementation_key(10474)) VARIANT_BOOL Imodel::GetPref_AutoConvertOdb ( );
__declspec(implementation_key(10475)) void Imodel::PutPref_AutoConvertOdb ( VARIANT_BOOL _val );
__declspec(implementation_key(10476)) VARIANT_BOOL Imodel::GetPref_RenderFastPickVisible ( );
__declspec(implementation_key(10477)) void Imodel::PutPref_RenderFastPickVisible ( VARIANT_BOOL _val );
__declspec(implementation_key(10478)) _variant_t Imodel::GetvPref_FBDefContributions ( );
__declspec(implementation_key(10479)) void Imodel::PutvPref_FBDefContributions ( const _variant_t & _val );
__declspec(implementation_key(10480)) enum zFbdDisplayMode Imodel::GetPref_FBDefDispMode ( );
__declspec(implementation_key(10481)) void Imodel::PutPref_FBDefDispMode ( enum zFbdDisplayMode _val );
__declspec(implementation_key(10482)) _variant_t Imodel::GetvPref_FBDefNodalVectorMode ( );
__declspec(implementation_key(10483)) void Imodel::PutvPref_FBDefNodalVectorMode ( const _variant_t & _val );
__declspec(implementation_key(10484)) _variant_t Imodel::GetvPref_FBDefTotalVectorMode ( );
__declspec(implementation_key(10485)) void Imodel::PutvPref_FBDefTotalVectorMode ( const _variant_t & _val );
__declspec(implementation_key(10486)) _variant_t Imodel::GetvPref_FBDefComponents ( );
__declspec(implementation_key(10487)) void Imodel::PutvPref_FBDefComponents ( const _variant_t & _val );
__declspec(implementation_key(10488)) VARIANT_BOOL Imodel::GetPref_ElemQualQuadAR ( );
__declspec(implementation_key(10489)) void Imodel::PutPref_ElemQualQuadAR ( VARIANT_BOOL _val );
__declspec(implementation_key(10490)) VARIANT_BOOL Imodel::GetPref_ElemQualTriaAR ( );
__declspec(implementation_key(10491)) void Imodel::PutPref_ElemQualTriaAR ( VARIANT_BOOL _val );
__declspec(implementation_key(10492)) VARIANT_BOOL Imodel::GetPref_ElemQualTriaEPLR ( );
__declspec(implementation_key(10493)) void Imodel::PutPref_ElemQualTriaEPLR ( VARIANT_BOOL _val );
__declspec(implementation_key(10494)) double Imodel::GetPref_ElemQualQuadARVal ( );
__declspec(implementation_key(10495)) void Imodel::PutPref_ElemQualQuadARVal ( double _val );
__declspec(implementation_key(10496)) double Imodel::GetPref_ElemQualTriaARVal ( );
__declspec(implementation_key(10497)) void Imodel::PutPref_ElemQualTriaARVal ( double _val );
__declspec(implementation_key(10498)) double Imodel::GetPref_ElemQualTriaEPLRVal ( );
__declspec(implementation_key(10499)) void Imodel::PutPref_ElemQualTriaEPLRVal ( double _val );
__declspec(implementation_key(10500)) VARIANT_BOOL Imodel::GetPref_ResetNextID ( );
__declspec(implementation_key(10501)) void Imodel::PutPref_ResetNextID ( VARIANT_BOOL _val );
__declspec(implementation_key(10502)) _bstr_t Imodel::GetPref_SolNXNastProgram ( );
__declspec(implementation_key(10503)) void Imodel::PutPref_SolNXNastProgram ( _bstr_t _val );
__declspec(implementation_key(10504)) _bstr_t Imodel::GetPref_SolMSCNastProgram ( );
__declspec(implementation_key(10505)) void Imodel::PutPref_SolMSCNastProgram ( _bstr_t _val );
__declspec(implementation_key(10506)) _bstr_t Imodel::GetPref_SolNEINastProgram ( );
__declspec(implementation_key(10507)) void Imodel::PutPref_SolNEINastProgram ( _bstr_t _val );
__declspec(implementation_key(10508)) _bstr_t Imodel::GetPref_SolAnsysProgram ( );
__declspec(implementation_key(10509)) void Imodel::PutPref_SolAnsysProgram ( _bstr_t _val );
__declspec(implementation_key(10510)) _bstr_t Imodel::GetPref_SolAbaqusProgram ( );
__declspec(implementation_key(10511)) void Imodel::PutPref_SolAbaqusProgram ( _bstr_t _val );
__declspec(implementation_key(10512)) _bstr_t Imodel::GetPref_SolLSDynaProgram ( );
__declspec(implementation_key(10513)) void Imodel::PutPref_SolLSDynaProgram ( _bstr_t _val );
__declspec(implementation_key(10514)) _bstr_t Imodel::GetPref_SolNXNastCmd ( );
__declspec(implementation_key(10515)) void Imodel::PutPref_SolNXNastCmd ( _bstr_t _val );
__declspec(implementation_key(10516)) _bstr_t Imodel::GetPref_SolMSCNastCmd ( );
__declspec(implementation_key(10517)) void Imodel::PutPref_SolMSCNastCmd ( _bstr_t _val );
__declspec(implementation_key(10518)) _bstr_t Imodel::GetPref_SolNEINastCmd ( );
__declspec(implementation_key(10519)) void Imodel::PutPref_SolNEINastCmd ( _bstr_t _val );
__declspec(implementation_key(10520)) _bstr_t Imodel::GetPref_SolAnsysCmd ( );
__declspec(implementation_key(10521)) void Imodel::PutPref_SolAnsysCmd ( _bstr_t _val );
__declspec(implementation_key(10522)) _bstr_t Imodel::GetPref_SolAbaqusCmd ( );
__declspec(implementation_key(10523)) void Imodel::PutPref_SolAbaqusCmd ( _bstr_t _val );
__declspec(implementation_key(10524)) _bstr_t Imodel::GetPref_SolLSDynaCmd ( );
__declspec(implementation_key(10525)) void Imodel::PutPref_SolLSDynaCmd ( _bstr_t _val );
__declspec(implementation_key(10526)) VARIANT_BOOL Imodel::GetPref_SolEchoCmd ( );
__declspec(implementation_key(10527)) void Imodel::PutPref_SolEchoCmd ( VARIANT_BOOL _val );
__declspec(implementation_key(10528)) VARIANT_BOOL Imodel::GetPref_NasResTrackRevsion ( );
__declspec(implementation_key(10529)) void Imodel::PutPref_NasResTrackRevsion ( VARIANT_BOOL _val );
__declspec(implementation_key(10530)) VARIANT_BOOL Imodel::GetPref_RotateAroundCursor ( );
__declspec(implementation_key(10531)) void Imodel::PutPref_RotateAroundCursor ( VARIANT_BOOL _val );
__declspec(implementation_key(10532)) VARIANT_BOOL Imodel::GetPref_ElemQualTetEPIA ( );
__declspec(implementation_key(10533)) void Imodel::PutPref_ElemQualTetEPIA ( VARIANT_BOOL _val );
__declspec(implementation_key(10534)) VARIANT_BOOL Imodel::GetPref_ElemQualHexEPIA ( );
__declspec(implementation_key(10535)) void Imodel::PutPref_ElemQualHexEPIA ( VARIANT_BOOL _val );
__declspec(implementation_key(10536)) VARIANT_BOOL Imodel::GetPref_ElemQualPenEPIA ( );
__declspec(implementation_key(10537)) void Imodel::PutPref_ElemQualPenEPIA ( VARIANT_BOOL _val );
__declspec(implementation_key(10538)) VARIANT_BOOL Imodel::GetPref_ElemQualPyrEPIA ( );
__declspec(implementation_key(10539)) void Imodel::PutPref_ElemQualPyrEPIA ( VARIANT_BOOL _val );
__declspec(implementation_key(10540)) double Imodel::GetPref_ElemQualTetEPIAVal ( );
__declspec(implementation_key(10541)) void Imodel::PutPref_ElemQualTetEPIAVal ( double _val );
__declspec(implementation_key(10542)) double Imodel::GetPref_ElemQualHexEPIAVal ( );
__declspec(implementation_key(10543)) void Imodel::PutPref_ElemQualHexEPIAVal ( double _val );
__declspec(implementation_key(10544)) double Imodel::GetPref_ElemQualPenEPIAVal ( );
__declspec(implementation_key(10545)) void Imodel::PutPref_ElemQualPenEPIAVal ( double _val );
__declspec(implementation_key(10546)) double Imodel::GetPref_ElemQualPyrEPIAVal ( );
__declspec(implementation_key(10547)) void Imodel::PutPref_ElemQualPyrEPIAVal ( double _val );
__declspec(implementation_key(10548)) VARIANT_BOOL Imodel::GetInfo_ViewShowAutoscale ( );
__declspec(implementation_key(10549)) void Imodel::PutInfo_ViewShowAutoscale ( VARIANT_BOOL _val );
__declspec(implementation_key(10550)) VARIANT_BOOL Imodel::GetPref_ShowAutoscale ( );
__declspec(implementation_key(10551)) void Imodel::PutPref_ShowAutoscale ( VARIANT_BOOL _val );
__declspec(implementation_key(10552)) VARIANT_BOOL Imodel::GetPref_SynchronizedRotation ( );
__declspec(implementation_key(10553)) void Imodel::PutPref_SynchronizedRotation ( VARIANT_BOOL _val );
__declspec(implementation_key(10554)) VARIANT_BOOL Imodel::GetInfo_FreebodyReverse ( );
__declspec(implementation_key(10555)) void Imodel::PutInfo_FreebodyReverse ( VARIANT_BOOL _val );
__declspec(implementation_key(10556)) VARIANT_BOOL Imodel::GetPref_DefaultFreebodyReverse ( );
__declspec(implementation_key(10557)) void Imodel::PutPref_DefaultFreebodyReverse ( VARIANT_BOOL _val );
__declspec(implementation_key(10558)) VARIANT_BOOL Imodel::GetUndoGrayed ( );
__declspec(implementation_key(10559)) void Imodel::PutUndoGrayed ( VARIANT_BOOL _val );
#pragma stop_map_region

} // namespace femap

#pragma pack(pop)
